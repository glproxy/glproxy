/* GL dispatch code.
 * This is code-generated from the GL API XML files from Khronos.
 * 
 * Copyright (c) 2013-2016 The Khronos Group Inc.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and/or associated documentation files (the
 * "Materials"), to deal in the Materials without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Materials, and to
 * permit persons to whom the Materials are furnished to do so, subject to
 * the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Materials.
 * 
 * THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
 * 
 */
#include "dispatch_common.h"
#if PLATFORM_HAS_GL

static void *gl_provider_resolver(tls_ptr tls, const char *name,
                                   const enum gl_provider *providers,
                                   const uint16_t *entrypoints)
{
    int i;
    for (i = 0; providers[i] != gl_provider_terminator; i++) {
        switch (providers[i]) {
        case Desktop_OpenGL_1_0:
            if (epoxy_is_desktop_gl_local(tls))
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 10);
            break;
        case Desktop_OpenGL_1_1:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 11)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 11);
            break;
        case Desktop_OpenGL_1_2:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 12)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 12);
            break;
        case Desktop_OpenGL_1_3:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 13)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 13);
            break;
        case Desktop_OpenGL_1_4:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 14)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 14);
            break;
        case Desktop_OpenGL_1_5:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 15)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 15);
            break;
        case Desktop_OpenGL_2_0:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 20)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 20);
            break;
        case Desktop_OpenGL_2_1:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 21)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 21);
            break;
        case Desktop_OpenGL_3_0:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 30)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 30);
            break;
        case Desktop_OpenGL_3_1:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 31)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 31);
            break;
        case Desktop_OpenGL_3_2:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 32)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 32);
            break;
        case Desktop_OpenGL_3_3:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 33)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 33);
            break;
        case Desktop_OpenGL_4_0:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 40)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 40);
            break;
        case Desktop_OpenGL_4_1:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 41)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 41);
            break;
        case Desktop_OpenGL_4_2:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 42)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 42);
            break;
        case Desktop_OpenGL_4_3:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 43)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 43);
            break;
        case Desktop_OpenGL_4_4:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 44)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 44);
            break;
        case Desktop_OpenGL_4_5:
            if (epoxy_is_desktop_gl_local(tls) && epoxy_conservative_gl_version(tls) >= 45)
                return epoxy_get_core_proc_address(tls, gl_entrypoint_strings[entrypoints[i]], 45);
            break;
        case GL_extension_GL_3DFX_tbuffer:
            if (epoxy_conservative_has_gl_extension(tls, "GL_3DFX_tbuffer"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_AMD_debug_output:
            if (epoxy_conservative_has_gl_extension(tls, "GL_AMD_debug_output"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_AMD_draw_buffers_blend:
            if (epoxy_conservative_has_gl_extension(tls, "GL_AMD_draw_buffers_blend"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_AMD_gpu_shader_int64:
            if (epoxy_conservative_has_gl_extension(tls, "GL_AMD_gpu_shader_int64"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_AMD_interleaved_elements:
            if (epoxy_conservative_has_gl_extension(tls, "GL_AMD_interleaved_elements"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_AMD_multi_draw_indirect:
            if (epoxy_conservative_has_gl_extension(tls, "GL_AMD_multi_draw_indirect"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_AMD_name_gen_delete:
            if (epoxy_conservative_has_gl_extension(tls, "GL_AMD_name_gen_delete"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_AMD_occlusion_query_event:
            if (epoxy_conservative_has_gl_extension(tls, "GL_AMD_occlusion_query_event"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_AMD_performance_monitor:
            if (epoxy_conservative_has_gl_extension(tls, "GL_AMD_performance_monitor"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_AMD_sample_positions:
            if (epoxy_conservative_has_gl_extension(tls, "GL_AMD_sample_positions"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_AMD_sparse_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_AMD_sparse_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_AMD_stencil_operation_extended:
            if (epoxy_conservative_has_gl_extension(tls, "GL_AMD_stencil_operation_extended"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_AMD_vertex_shader_tessellator:
            if (epoxy_conservative_has_gl_extension(tls, "GL_AMD_vertex_shader_tessellator"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ANGLE_framebuffer_blit:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ANGLE_framebuffer_blit"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ANGLE_framebuffer_multisample:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ANGLE_framebuffer_multisample"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ANGLE_instanced_arrays:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ANGLE_instanced_arrays"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ANGLE_translated_shader_source:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ANGLE_translated_shader_source"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_APPLE_copy_texture_levels:
            if (epoxy_conservative_has_gl_extension(tls, "GL_APPLE_copy_texture_levels"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_APPLE_element_array:
            if (epoxy_conservative_has_gl_extension(tls, "GL_APPLE_element_array"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_APPLE_fence:
            if (epoxy_conservative_has_gl_extension(tls, "GL_APPLE_fence"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_APPLE_flush_buffer_range:
            if (epoxy_conservative_has_gl_extension(tls, "GL_APPLE_flush_buffer_range"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_APPLE_framebuffer_multisample:
            if (epoxy_conservative_has_gl_extension(tls, "GL_APPLE_framebuffer_multisample"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_APPLE_object_purgeable:
            if (epoxy_conservative_has_gl_extension(tls, "GL_APPLE_object_purgeable"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_APPLE_sync:
            if (epoxy_conservative_has_gl_extension(tls, "GL_APPLE_sync"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_APPLE_texture_range:
            if (epoxy_conservative_has_gl_extension(tls, "GL_APPLE_texture_range"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_APPLE_vertex_array_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_APPLE_vertex_array_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_APPLE_vertex_array_range:
            if (epoxy_conservative_has_gl_extension(tls, "GL_APPLE_vertex_array_range"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_APPLE_vertex_program_evaluators:
            if (epoxy_conservative_has_gl_extension(tls, "GL_APPLE_vertex_program_evaluators"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_ES2_compatibility:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_ES2_compatibility"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_ES3_1_compatibility:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_ES3_1_compatibility"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_ES3_2_compatibility:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_ES3_2_compatibility"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_base_instance:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_base_instance"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_bindless_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_bindless_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_blend_func_extended:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_blend_func_extended"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_buffer_storage:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_buffer_storage"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_cl_event:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_cl_event"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_clear_buffer_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_clear_buffer_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_clear_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_clear_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_clip_control:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_clip_control"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_color_buffer_float:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_color_buffer_float"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_compute_shader:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_compute_shader"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_compute_variable_group_size:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_compute_variable_group_size"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_copy_buffer:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_copy_buffer"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_copy_image:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_copy_image"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_debug_output:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_debug_output"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_direct_state_access:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_direct_state_access"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_draw_buffers:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_draw_buffers"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_draw_buffers_blend:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_draw_buffers_blend"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_draw_elements_base_vertex:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_draw_elements_base_vertex"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_draw_indirect:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_draw_indirect"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_draw_instanced:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_draw_instanced"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_fragment_program:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_fragment_program"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_framebuffer_no_attachments:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_framebuffer_no_attachments"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_framebuffer_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_framebuffer_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_geometry_shader4:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_geometry_shader4"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_get_program_binary:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_get_program_binary"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_get_texture_sub_image:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_get_texture_sub_image"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_gpu_shader_fp64:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_gpu_shader_fp64"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_gpu_shader_int64:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_gpu_shader_int64"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_imaging:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_imaging"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_indirect_parameters:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_indirect_parameters"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_instanced_arrays:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_instanced_arrays"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_internalformat_query2:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_internalformat_query2"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_internalformat_query:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_internalformat_query"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_invalidate_subdata:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_invalidate_subdata"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_map_buffer_range:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_map_buffer_range"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_matrix_palette:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_matrix_palette"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_multi_bind:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_multi_bind"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_multi_draw_indirect:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_multi_draw_indirect"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_multisample:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_multisample"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_multitexture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_multitexture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_occlusion_query:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_occlusion_query"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_parallel_shader_compile:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_parallel_shader_compile"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_point_parameters:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_point_parameters"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_program_interface_query:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_program_interface_query"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_provoking_vertex:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_provoking_vertex"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_robustness:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_robustness"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_sample_locations:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_sample_locations"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_sample_shading:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_sample_shading"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_sampler_objects:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_sampler_objects"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_separate_shader_objects:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_separate_shader_objects"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_shader_atomic_counters:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_shader_atomic_counters"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_shader_image_load_store:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_shader_image_load_store"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_shader_objects:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_shader_objects"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_shader_storage_buffer_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_shader_storage_buffer_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_shader_subroutine:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_shader_subroutine"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_shading_language_include:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_shading_language_include"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_sparse_buffer:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_sparse_buffer"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_sparse_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_sparse_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_sync:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_sync"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_tessellation_shader:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_tessellation_shader"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_texture_barrier:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_texture_barrier"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_texture_buffer_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_texture_buffer_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_texture_buffer_range:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_texture_buffer_range"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_texture_compression:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_texture_compression"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_texture_multisample:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_texture_multisample"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_texture_storage:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_texture_storage"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_texture_storage_multisample:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_texture_storage_multisample"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_texture_view:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_texture_view"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_timer_query:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_timer_query"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_transform_feedback2:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_transform_feedback2"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_transform_feedback3:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_transform_feedback3"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_transform_feedback_instanced:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_transform_feedback_instanced"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_transpose_matrix:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_transpose_matrix"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_uniform_buffer_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_uniform_buffer_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_vertex_array_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_vertex_array_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_vertex_attrib_64bit:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_vertex_attrib_64bit"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_vertex_attrib_binding:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_vertex_attrib_binding"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_vertex_blend:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_vertex_blend"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_vertex_buffer_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_vertex_buffer_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_vertex_program:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_vertex_program"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_vertex_shader:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_vertex_shader"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_vertex_type_2_10_10_10_rev:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_vertex_type_2_10_10_10_rev"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_viewport_array:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_viewport_array"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ARB_window_pos:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ARB_window_pos"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ATI_draw_buffers:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ATI_draw_buffers"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ATI_element_array:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ATI_element_array"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ATI_envmap_bumpmap:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ATI_envmap_bumpmap"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ATI_fragment_shader:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ATI_fragment_shader"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ATI_map_object_buffer:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ATI_map_object_buffer"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ATI_pn_triangles:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ATI_pn_triangles"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ATI_separate_stencil:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ATI_separate_stencil"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ATI_vertex_array_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ATI_vertex_array_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ATI_vertex_attrib_array_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ATI_vertex_attrib_array_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_ATI_vertex_streams:
            if (epoxy_conservative_has_gl_extension(tls, "GL_ATI_vertex_streams"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_base_instance:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_base_instance"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_bindable_uniform:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_bindable_uniform"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_blend_color:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_blend_color"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_blend_equation_separate:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_blend_equation_separate"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_blend_func_extended:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_blend_func_extended"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_blend_func_separate:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_blend_func_separate"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_blend_minmax:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_blend_minmax"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_buffer_storage:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_buffer_storage"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_color_subtable:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_color_subtable"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_compiled_vertex_array:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_compiled_vertex_array"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_convolution:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_convolution"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_coordinate_frame:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_coordinate_frame"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_copy_image:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_copy_image"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_copy_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_copy_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_cull_vertex:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_cull_vertex"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_debug_label:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_debug_label"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_debug_marker:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_debug_marker"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_depth_bounds_test:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_depth_bounds_test"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_direct_state_access:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_direct_state_access"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_discard_framebuffer:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_discard_framebuffer"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_disjoint_timer_query:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_disjoint_timer_query"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_draw_buffers2:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_draw_buffers2"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_draw_buffers:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_draw_buffers"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_draw_buffers_indexed:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_draw_buffers_indexed"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_draw_elements_base_vertex:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_draw_elements_base_vertex"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_draw_instanced:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_draw_instanced"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_draw_range_elements:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_draw_range_elements"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_fog_coord:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_fog_coord"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_framebuffer_blit:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_framebuffer_blit"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_framebuffer_multisample:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_framebuffer_multisample"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_framebuffer_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_framebuffer_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_geometry_shader4:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_geometry_shader4"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_geometry_shader:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_geometry_shader"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_gpu_program_parameters:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_gpu_program_parameters"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_gpu_shader4:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_gpu_shader4"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_histogram:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_histogram"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_index_func:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_index_func"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_index_material:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_index_material"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_instanced_arrays:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_instanced_arrays"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_light_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_light_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_map_buffer_range:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_map_buffer_range"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_multi_draw_arrays:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_multi_draw_arrays"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_multi_draw_indirect:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_multi_draw_indirect"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_multisample:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_multisample"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_multisampled_render_to_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_multisampled_render_to_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_multiview_draw_buffers:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_multiview_draw_buffers"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_occlusion_query_boolean:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_occlusion_query_boolean"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_paletted_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_paletted_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_pixel_transform:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_pixel_transform"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_point_parameters:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_point_parameters"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_polygon_offset:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_polygon_offset"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_polygon_offset_clamp:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_polygon_offset_clamp"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_primitive_bounding_box:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_primitive_bounding_box"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_provoking_vertex:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_provoking_vertex"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_raster_multisample:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_raster_multisample"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_robustness:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_robustness"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_secondary_color:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_secondary_color"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_separate_shader_objects:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_separate_shader_objects"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_shader_image_load_store:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_shader_image_load_store"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_shader_pixel_local_storage2:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_shader_pixel_local_storage2"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_sparse_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_sparse_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_stencil_clear_tag:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_stencil_clear_tag"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_stencil_two_side:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_stencil_two_side"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_subtexture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_subtexture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_tessellation_shader:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_tessellation_shader"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_texture3D:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_texture3D"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_texture_array:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_texture_array"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_texture_border_clamp:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_texture_border_clamp"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_texture_buffer:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_texture_buffer"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_texture_buffer_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_texture_buffer_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_texture_filter_minmax:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_texture_filter_minmax"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_texture_integer:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_texture_integer"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_texture_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_texture_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_texture_perturb_normal:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_texture_perturb_normal"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_texture_storage:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_texture_storage"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_texture_view:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_texture_view"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_timer_query:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_timer_query"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_transform_feedback:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_transform_feedback"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_vertex_array:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_vertex_array"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_vertex_attrib_64bit:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_vertex_attrib_64bit"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_vertex_shader:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_vertex_shader"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_vertex_weighting:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_vertex_weighting"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_window_rectangles:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_window_rectangles"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_EXT_x11_sync_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_EXT_x11_sync_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_GREMEDY_frame_terminator:
            if (epoxy_conservative_has_gl_extension(tls, "GL_GREMEDY_frame_terminator"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_GREMEDY_string_marker:
            if (epoxy_conservative_has_gl_extension(tls, "GL_GREMEDY_string_marker"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_HP_image_transform:
            if (epoxy_conservative_has_gl_extension(tls, "GL_HP_image_transform"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_IBM_multimode_draw_arrays:
            if (epoxy_conservative_has_gl_extension(tls, "GL_IBM_multimode_draw_arrays"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_IBM_static_data:
            if (epoxy_conservative_has_gl_extension(tls, "GL_IBM_static_data"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_IBM_vertex_array_lists:
            if (epoxy_conservative_has_gl_extension(tls, "GL_IBM_vertex_array_lists"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_IMG_framebuffer_downsample:
            if (epoxy_conservative_has_gl_extension(tls, "GL_IMG_framebuffer_downsample"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_IMG_multisampled_render_to_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_IMG_multisampled_render_to_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_IMG_user_clip_plane:
            if (epoxy_conservative_has_gl_extension(tls, "GL_IMG_user_clip_plane"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_INGR_blend_func_separate:
            if (epoxy_conservative_has_gl_extension(tls, "GL_INGR_blend_func_separate"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_INTEL_framebuffer_CMAA:
            if (epoxy_conservative_has_gl_extension(tls, "GL_INTEL_framebuffer_CMAA"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_INTEL_map_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_INTEL_map_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_INTEL_parallel_arrays:
            if (epoxy_conservative_has_gl_extension(tls, "GL_INTEL_parallel_arrays"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_INTEL_performance_query:
            if (epoxy_conservative_has_gl_extension(tls, "GL_INTEL_performance_query"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_KHR_blend_equation_advanced:
            if (epoxy_conservative_has_gl_extension(tls, "GL_KHR_blend_equation_advanced"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_KHR_debug:
            if (epoxy_conservative_has_gl_extension(tls, "GL_KHR_debug"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_KHR_robustness:
            if (epoxy_conservative_has_gl_extension(tls, "GL_KHR_robustness"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_MESA_resize_buffers:
            if (epoxy_conservative_has_gl_extension(tls, "GL_MESA_resize_buffers"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_MESA_window_pos:
            if (epoxy_conservative_has_gl_extension(tls, "GL_MESA_window_pos"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NVX_conditional_render:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NVX_conditional_render"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_bindless_multi_draw_indirect:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_bindless_multi_draw_indirect"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_bindless_multi_draw_indirect_count:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_bindless_multi_draw_indirect_count"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_bindless_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_bindless_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_blend_equation_advanced:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_blend_equation_advanced"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_clip_space_w_scaling:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_clip_space_w_scaling"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_command_list:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_command_list"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_conditional_render:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_conditional_render"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_conservative_raster:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_conservative_raster"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_conservative_raster_dilate:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_conservative_raster_dilate"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_conservative_raster_pre_snap_triangles:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_conservative_raster_pre_snap_triangles"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_copy_buffer:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_copy_buffer"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_copy_image:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_copy_image"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_coverage_sample:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_coverage_sample"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_depth_buffer_float:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_depth_buffer_float"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_draw_buffers:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_draw_buffers"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_draw_instanced:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_draw_instanced"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_draw_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_draw_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_evaluators:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_evaluators"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_explicit_multisample:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_explicit_multisample"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_fence:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_fence"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_fragment_coverage_to_color:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_fragment_coverage_to_color"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_fragment_program:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_fragment_program"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_framebuffer_blit:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_framebuffer_blit"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_framebuffer_mixed_samples:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_framebuffer_mixed_samples"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_framebuffer_multisample:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_framebuffer_multisample"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_framebuffer_multisample_coverage:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_framebuffer_multisample_coverage"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_geometry_program4:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_geometry_program4"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_gpu_program4:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_gpu_program4"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_gpu_program5:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_gpu_program5"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_gpu_shader5:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_gpu_shader5"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_half_float:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_half_float"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_instanced_arrays:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_instanced_arrays"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_internalformat_sample_query:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_internalformat_sample_query"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_non_square_matrices:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_non_square_matrices"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_occlusion_query:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_occlusion_query"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_parameter_buffer_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_parameter_buffer_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_path_rendering:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_path_rendering"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_pixel_data_range:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_pixel_data_range"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_point_sprite:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_point_sprite"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_polygon_mode:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_polygon_mode"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_present_video:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_present_video"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_primitive_restart:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_primitive_restart"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_read_buffer:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_read_buffer"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_register_combiners2:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_register_combiners2"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_register_combiners:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_register_combiners"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_sample_locations:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_sample_locations"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_shader_buffer_load:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_shader_buffer_load"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_texture_barrier:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_texture_barrier"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_texture_multisample:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_texture_multisample"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_transform_feedback2:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_transform_feedback2"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_transform_feedback:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_transform_feedback"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_vdpau_interop:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_vdpau_interop"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_vertex_array_range:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_vertex_array_range"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_vertex_attrib_integer_64bit:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_vertex_attrib_integer_64bit"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_vertex_buffer_unified_memory:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_vertex_buffer_unified_memory"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_vertex_program4:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_vertex_program4"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_vertex_program:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_vertex_program"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_video_capture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_video_capture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_viewport_array:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_viewport_array"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_NV_viewport_swizzle:
            if (epoxy_conservative_has_gl_extension(tls, "GL_NV_viewport_swizzle"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_EGL_image:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_EGL_image"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_blend_equation_separate:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_blend_equation_separate"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_blend_func_separate:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_blend_func_separate"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_blend_subtract:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_blend_subtract"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_byte_coordinates:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_byte_coordinates"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_copy_image:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_copy_image"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_draw_buffers_indexed:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_draw_buffers_indexed"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_draw_elements_base_vertex:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_draw_elements_base_vertex"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_draw_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_draw_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_fixed_point:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_fixed_point"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_framebuffer_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_framebuffer_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_geometry_shader:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_geometry_shader"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_get_program_binary:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_get_program_binary"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_mapbuffer:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_mapbuffer"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_matrix_palette:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_matrix_palette"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_point_size_array:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_point_size_array"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_primitive_bounding_box:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_primitive_bounding_box"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_query_matrix:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_query_matrix"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_sample_shading:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_sample_shading"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_single_precision:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_single_precision"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_tessellation_shader:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_tessellation_shader"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_texture_3D:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_texture_3D"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_texture_border_clamp:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_texture_border_clamp"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_texture_buffer:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_texture_buffer"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_texture_cube_map:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_texture_cube_map"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_texture_storage_multisample_2d_array:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_texture_storage_multisample_2d_array"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_texture_view:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_texture_view"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OES_vertex_array_object:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OES_vertex_array_object"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OVR_multiview:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OVR_multiview"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_OVR_multiview_multisampled_render_to_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_OVR_multiview_multisampled_render_to_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_PGI_misc_hints:
            if (epoxy_conservative_has_gl_extension(tls, "GL_PGI_misc_hints"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_QCOM_alpha_test:
            if (epoxy_conservative_has_gl_extension(tls, "GL_QCOM_alpha_test"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_QCOM_driver_control:
            if (epoxy_conservative_has_gl_extension(tls, "GL_QCOM_driver_control"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_QCOM_extended_get2:
            if (epoxy_conservative_has_gl_extension(tls, "GL_QCOM_extended_get2"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_QCOM_extended_get:
            if (epoxy_conservative_has_gl_extension(tls, "GL_QCOM_extended_get"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_QCOM_tiled_rendering:
            if (epoxy_conservative_has_gl_extension(tls, "GL_QCOM_tiled_rendering"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIS_detail_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIS_detail_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIS_fog_function:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIS_fog_function"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIS_multisample:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIS_multisample"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIS_pixel_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIS_pixel_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIS_point_parameters:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIS_point_parameters"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIS_sharpen_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIS_sharpen_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIS_texture4D:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIS_texture4D"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIS_texture_color_mask:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIS_texture_color_mask"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIS_texture_filter4:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIS_texture_filter4"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIX_async:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIX_async"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIX_flush_raster:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIX_flush_raster"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIX_fragment_lighting:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIX_fragment_lighting"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIX_framezoom:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIX_framezoom"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIX_igloo_interface:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIX_igloo_interface"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIX_instruments:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIX_instruments"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIX_list_priority:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIX_list_priority"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIX_pixel_texture:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIX_pixel_texture"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIX_polynomial_ffd:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIX_polynomial_ffd"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIX_reference_plane:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIX_reference_plane"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIX_sprite:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIX_sprite"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGIX_tag_sample_buffer:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGIX_tag_sample_buffer"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SGI_color_table:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SGI_color_table"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SUNX_constant_data:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SUNX_constant_data"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SUN_global_alpha:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SUN_global_alpha"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SUN_mesh_array:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SUN_mesh_array"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SUN_triangle_list:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SUN_triangle_list"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case GL_extension_GL_SUN_vertex:
            if (epoxy_conservative_has_gl_extension(tls, "GL_SUN_vertex"))
                return epoxy_get_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case OpenGL_ES_1_0:
            if (!epoxy_is_desktop_gl_local(tls) && epoxy_gl_version() >= 10 && epoxy_gl_version() < 20)
                return epoxy_gles1_dlsym(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case OpenGL_ES_2_0:
            if (!epoxy_is_desktop_gl_local(tls) && epoxy_gl_version() >= 20)
                return epoxy_gles2_dlsym(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case OpenGL_ES_3_0:
            if (!epoxy_is_desktop_gl_local(tls) && epoxy_gl_version() >= 30)
                return epoxy_gles3_dlsym(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case OpenGL_ES_3_1:
            if (!epoxy_is_desktop_gl_local(tls) && epoxy_gl_version() >= 31)
                return epoxy_gles3_dlsym(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case OpenGL_ES_3_2:
            if (!epoxy_is_desktop_gl_local(tls) && epoxy_gl_version() >= 32)
                return epoxy_gles3_dlsym(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case always_present:
            if (true)
                return epoxy_get_bootstrap_proc_address(tls, gl_entrypoint_strings[entrypoints[i]]);
            break;
        case gl_provider_terminator:
            abort(); /* Not reached */
        }
    }

    fprintf(stderr, "No provider of %s found.  Requires one of:\n", name);
    for (i = 0; providers[i] != gl_provider_terminator; i++) {
        fprintf(stderr, "    %s\n", gl_enum_string + gl_enum_string_offsets[providers[i]]);
    }
    if (providers[0] == gl_provider_terminator) {
        fprintf(stderr, "    No known providers.  This is likely a bug "
                        "in libepoxy code generation\n");
    }
    abort();
}

EPOXY_NOINLINE static void *
gl_single_resolver(tls_ptr tls, enum gl_provider provider, uint16_t entrypoint_offset);

static void *
gl_single_resolver(tls_ptr tls, enum gl_provider provider, uint16_t entrypoint_offset)
{
    enum gl_provider providers[] = {
        provider,
        gl_provider_terminator
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[entrypoint_offset],
                                providers, &entrypoint_offset);
}

static PFNGLACCUMPROC
epoxy_glAccum_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 0 /* glAccum */);
}

static PFNGLACCUMXOESPROC
epoxy_glAccumxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1 /* glAccumxOES */);
}

static PFNGLACTIVEPROGRAMEXTPROC
epoxy_glActiveProgramEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_separate_shader_objects, 2 /* glActiveProgramEXT */);
}

static PFNGLACTIVESHADERPROGRAMPROC
epoxy_glActiveShaderProgram_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3 /* "glActiveShaderProgram" */,
        3 /* "glActiveShaderProgram" */,
        3 /* "glActiveShaderProgram" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3] /* "glActiveShaderProgram" */,
                                providers, entrypoints);
}

static PFNGLACTIVESHADERPROGRAMEXTPROC
epoxy_glActiveShaderProgramEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_separate_shader_objects, 4 /* glActiveShaderProgramEXT */);
}

static PFNGLACTIVESTENCILFACEEXTPROC
epoxy_glActiveStencilFaceEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_stencil_two_side, 5 /* glActiveStencilFaceEXT */);
}

static PFNGLACTIVETEXTUREPROC
epoxy_glActiveTexture_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        6 /* "glActiveTexture" */,
        6 /* "glActiveTexture" */,
        6 /* "glActiveTexture" */,
        7 /* "glActiveTextureARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[6] /* "glActiveTexture" */,
                                providers, entrypoints);
}

static PFNGLACTIVETEXTUREARBPROC
epoxy_glActiveTextureARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        7 /* "glActiveTextureARB" */,
        6 /* "glActiveTexture" */,
        6 /* "glActiveTexture" */,
        6 /* "glActiveTexture" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[7] /* "glActiveTextureARB" */,
                                providers, entrypoints);
}

static PFNGLACTIVEVARYINGNVPROC
epoxy_glActiveVaryingNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_transform_feedback, 8 /* glActiveVaryingNV */);
}

static PFNGLALPHAFRAGMENTOP1ATIPROC
epoxy_glAlphaFragmentOp1ATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_fragment_shader, 9 /* glAlphaFragmentOp1ATI */);
}

static PFNGLALPHAFRAGMENTOP2ATIPROC
epoxy_glAlphaFragmentOp2ATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_fragment_shader, 10 /* glAlphaFragmentOp2ATI */);
}

static PFNGLALPHAFRAGMENTOP3ATIPROC
epoxy_glAlphaFragmentOp3ATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_fragment_shader, 11 /* glAlphaFragmentOp3ATI */);
}

static PFNGLALPHAFUNCPROC
epoxy_glAlphaFunc_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        12 /* "glAlphaFunc" */,
        12 /* "glAlphaFunc" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[12] /* "glAlphaFunc" */,
                                providers, entrypoints);
}

static PFNGLALPHAFUNCQCOMPROC
epoxy_glAlphaFuncQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_alpha_test, 13 /* glAlphaFuncQCOM */);
}

static PFNGLALPHAFUNCXPROC
epoxy_glAlphaFuncx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 14 /* glAlphaFuncx */);
}

static PFNGLALPHAFUNCXOESPROC
epoxy_glAlphaFuncxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 15 /* glAlphaFuncxOES */);
}

static PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC
epoxy_glApplyFramebufferAttachmentCMAAINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_framebuffer_CMAA, 16 /* glApplyFramebufferAttachmentCMAAINTEL */);
}

static PFNGLAPPLYTEXTUREEXTPROC
epoxy_glApplyTextureEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_light_texture, 17 /* glApplyTextureEXT */);
}

static PFNGLAREPROGRAMSRESIDENTNVPROC
epoxy_glAreProgramsResidentNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 18 /* glAreProgramsResidentNV */);
}

static PFNGLARETEXTURESRESIDENTPROC
epoxy_glAreTexturesResident_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_1, 19 /* glAreTexturesResident */);
}

static PFNGLARETEXTURESRESIDENTEXTPROC
epoxy_glAreTexturesResidentEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_texture_object, 20 /* glAreTexturesResidentEXT */);
}

static PFNGLARRAYELEMENTPROC
epoxy_glArrayElement_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        GL_extension_GL_EXT_vertex_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        21 /* "glArrayElement" */,
        22 /* "glArrayElementEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[21] /* "glArrayElement" */,
                                providers, entrypoints);
}

static PFNGLARRAYELEMENTEXTPROC
epoxy_glArrayElementEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_vertex_array,
        Desktop_OpenGL_1_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        22 /* "glArrayElementEXT" */,
        21 /* "glArrayElement" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[22] /* "glArrayElementEXT" */,
                                providers, entrypoints);
}

static PFNGLARRAYOBJECTATIPROC
epoxy_glArrayObjectATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_array_object, 23 /* glArrayObjectATI */);
}

static PFNGLASYNCMARKERSGIXPROC
epoxy_glAsyncMarkerSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_async, 24 /* glAsyncMarkerSGIX */);
}

static PFNGLATTACHOBJECTARBPROC
epoxy_glAttachObjectARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        25 /* "glAttachObjectARB" */,
        26 /* "glAttachShader" */,
        26 /* "glAttachShader" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[25] /* "glAttachObjectARB" */,
                                providers, entrypoints);
}

static PFNGLATTACHSHADERPROC
epoxy_glAttachShader_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        26 /* "glAttachShader" */,
        26 /* "glAttachShader" */,
        25 /* "glAttachObjectARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[26] /* "glAttachShader" */,
                                providers, entrypoints);
}

static PFNGLBEGINPROC
epoxy_glBegin_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 27 /* glBegin */);
}

static PFNGLBEGINCONDITIONALRENDERPROC
epoxy_glBeginConditionalRender_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_conditional_render,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        28 /* "glBeginConditionalRender" */,
        29 /* "glBeginConditionalRenderNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[28] /* "glBeginConditionalRender" */,
                                providers, entrypoints);
}

static PFNGLBEGINCONDITIONALRENDERNVPROC
epoxy_glBeginConditionalRenderNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_conditional_render,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        29 /* "glBeginConditionalRenderNV" */,
        28 /* "glBeginConditionalRender" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[29] /* "glBeginConditionalRenderNV" */,
                                providers, entrypoints);
}

static PFNGLBEGINCONDITIONALRENDERNVXPROC
epoxy_glBeginConditionalRenderNVX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NVX_conditional_render, 30 /* glBeginConditionalRenderNVX */);
}

static PFNGLBEGINFRAGMENTSHADERATIPROC
epoxy_glBeginFragmentShaderATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_fragment_shader, 31 /* glBeginFragmentShaderATI */);
}

static PFNGLBEGINOCCLUSIONQUERYNVPROC
epoxy_glBeginOcclusionQueryNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_occlusion_query, 32 /* glBeginOcclusionQueryNV */);
}

static PFNGLBEGINPERFMONITORAMDPROC
epoxy_glBeginPerfMonitorAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_performance_monitor, 33 /* glBeginPerfMonitorAMD */);
}

static PFNGLBEGINPERFQUERYINTELPROC
epoxy_glBeginPerfQueryINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_performance_query, 34 /* glBeginPerfQueryINTEL */);
}

static PFNGLBEGINQUERYPROC
epoxy_glBeginQuery_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_occlusion_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        35 /* "glBeginQuery" */,
        35 /* "glBeginQuery" */,
        36 /* "glBeginQueryARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[35] /* "glBeginQuery" */,
                                providers, entrypoints);
}

static PFNGLBEGINQUERYARBPROC
epoxy_glBeginQueryARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_occlusion_query,
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        36 /* "glBeginQueryARB" */,
        35 /* "glBeginQuery" */,
        35 /* "glBeginQuery" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[36] /* "glBeginQueryARB" */,
                                providers, entrypoints);
}

static PFNGLBEGINQUERYEXTPROC
epoxy_glBeginQueryEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_disjoint_timer_query,
        GL_extension_GL_EXT_occlusion_query_boolean,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        37 /* "glBeginQueryEXT" */,
        37 /* "glBeginQueryEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[37] /* "glBeginQueryEXT" */,
                                providers, entrypoints);
}

static PFNGLBEGINQUERYINDEXEDPROC
epoxy_glBeginQueryIndexed_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        38 /* "glBeginQueryIndexed" */,
        38 /* "glBeginQueryIndexed" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[38] /* "glBeginQueryIndexed" */,
                                providers, entrypoints);
}

static PFNGLBEGINTRANSFORMFEEDBACKPROC
epoxy_glBeginTransformFeedback_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_transform_feedback,
        GL_extension_GL_NV_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        39 /* "glBeginTransformFeedback" */,
        39 /* "glBeginTransformFeedback" */,
        40 /* "glBeginTransformFeedbackEXT" */,
        41 /* "glBeginTransformFeedbackNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[39] /* "glBeginTransformFeedback" */,
                                providers, entrypoints);
}

static PFNGLBEGINTRANSFORMFEEDBACKEXTPROC
epoxy_glBeginTransformFeedbackEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_transform_feedback,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        40 /* "glBeginTransformFeedbackEXT" */,
        39 /* "glBeginTransformFeedback" */,
        39 /* "glBeginTransformFeedback" */,
        41 /* "glBeginTransformFeedbackNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[40] /* "glBeginTransformFeedbackEXT" */,
                                providers, entrypoints);
}

static PFNGLBEGINTRANSFORMFEEDBACKNVPROC
epoxy_glBeginTransformFeedbackNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_transform_feedback,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        41 /* "glBeginTransformFeedbackNV" */,
        39 /* "glBeginTransformFeedback" */,
        39 /* "glBeginTransformFeedback" */,
        40 /* "glBeginTransformFeedbackEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[41] /* "glBeginTransformFeedbackNV" */,
                                providers, entrypoints);
}

static PFNGLBEGINVERTEXSHADEREXTPROC
epoxy_glBeginVertexShaderEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 42 /* glBeginVertexShaderEXT */);
}

static PFNGLBEGINVIDEOCAPTURENVPROC
epoxy_glBeginVideoCaptureNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_video_capture, 43 /* glBeginVideoCaptureNV */);
}

static PFNGLBINDATTRIBLOCATIONPROC
epoxy_glBindAttribLocation_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        44 /* "glBindAttribLocation" */,
        44 /* "glBindAttribLocation" */,
        45 /* "glBindAttribLocationARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[44] /* "glBindAttribLocation" */,
                                providers, entrypoints);
}

static PFNGLBINDATTRIBLOCATIONARBPROC
epoxy_glBindAttribLocationARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        45 /* "glBindAttribLocationARB" */,
        44 /* "glBindAttribLocation" */,
        44 /* "glBindAttribLocation" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[45] /* "glBindAttribLocationARB" */,
                                providers, entrypoints);
}

static PFNGLBINDBUFFERPROC
epoxy_glBindBuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        46 /* "glBindBuffer" */,
        46 /* "glBindBuffer" */,
        46 /* "glBindBuffer" */,
        47 /* "glBindBufferARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[46] /* "glBindBuffer" */,
                                providers, entrypoints);
}

static PFNGLBINDBUFFERARBPROC
epoxy_glBindBufferARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_buffer_object,
        Desktop_OpenGL_1_5,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        47 /* "glBindBufferARB" */,
        46 /* "glBindBuffer" */,
        46 /* "glBindBuffer" */,
        46 /* "glBindBuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[47] /* "glBindBufferARB" */,
                                providers, entrypoints);
}

static PFNGLBINDBUFFERBASEPROC
epoxy_glBindBufferBase_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_uniform_buffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_transform_feedback,
        GL_extension_GL_NV_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        48 /* "glBindBufferBase" */,
        48 /* "glBindBufferBase" */,
        48 /* "glBindBufferBase" */,
        48 /* "glBindBufferBase" */,
        49 /* "glBindBufferBaseEXT" */,
        50 /* "glBindBufferBaseNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[48] /* "glBindBufferBase" */,
                                providers, entrypoints);
}

static PFNGLBINDBUFFERBASEEXTPROC
epoxy_glBindBufferBaseEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_transform_feedback,
        Desktop_OpenGL_3_0,
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_uniform_buffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        49 /* "glBindBufferBaseEXT" */,
        48 /* "glBindBufferBase" */,
        48 /* "glBindBufferBase" */,
        48 /* "glBindBufferBase" */,
        48 /* "glBindBufferBase" */,
        50 /* "glBindBufferBaseNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[49] /* "glBindBufferBaseEXT" */,
                                providers, entrypoints);
}

static PFNGLBINDBUFFERBASENVPROC
epoxy_glBindBufferBaseNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_transform_feedback,
        Desktop_OpenGL_3_0,
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_uniform_buffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        50 /* "glBindBufferBaseNV" */,
        48 /* "glBindBufferBase" */,
        48 /* "glBindBufferBase" */,
        48 /* "glBindBufferBase" */,
        48 /* "glBindBufferBase" */,
        49 /* "glBindBufferBaseEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[50] /* "glBindBufferBaseNV" */,
                                providers, entrypoints);
}

static PFNGLBINDBUFFEROFFSETEXTPROC
epoxy_glBindBufferOffsetEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_transform_feedback,
        GL_extension_GL_NV_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        51 /* "glBindBufferOffsetEXT" */,
        52 /* "glBindBufferOffsetNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[51] /* "glBindBufferOffsetEXT" */,
                                providers, entrypoints);
}

static PFNGLBINDBUFFEROFFSETNVPROC
epoxy_glBindBufferOffsetNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_transform_feedback,
        GL_extension_GL_EXT_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        52 /* "glBindBufferOffsetNV" */,
        51 /* "glBindBufferOffsetEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[52] /* "glBindBufferOffsetNV" */,
                                providers, entrypoints);
}

static PFNGLBINDBUFFERRANGEPROC
epoxy_glBindBufferRange_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_uniform_buffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_transform_feedback,
        GL_extension_GL_NV_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        53 /* "glBindBufferRange" */,
        53 /* "glBindBufferRange" */,
        53 /* "glBindBufferRange" */,
        53 /* "glBindBufferRange" */,
        54 /* "glBindBufferRangeEXT" */,
        55 /* "glBindBufferRangeNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[53] /* "glBindBufferRange" */,
                                providers, entrypoints);
}

static PFNGLBINDBUFFERRANGEEXTPROC
epoxy_glBindBufferRangeEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_transform_feedback,
        Desktop_OpenGL_3_0,
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_uniform_buffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        54 /* "glBindBufferRangeEXT" */,
        53 /* "glBindBufferRange" */,
        53 /* "glBindBufferRange" */,
        53 /* "glBindBufferRange" */,
        53 /* "glBindBufferRange" */,
        55 /* "glBindBufferRangeNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[54] /* "glBindBufferRangeEXT" */,
                                providers, entrypoints);
}

static PFNGLBINDBUFFERRANGENVPROC
epoxy_glBindBufferRangeNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_transform_feedback,
        Desktop_OpenGL_3_0,
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_uniform_buffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        55 /* "glBindBufferRangeNV" */,
        53 /* "glBindBufferRange" */,
        53 /* "glBindBufferRange" */,
        53 /* "glBindBufferRange" */,
        53 /* "glBindBufferRange" */,
        54 /* "glBindBufferRangeEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[55] /* "glBindBufferRangeNV" */,
                                providers, entrypoints);
}

static PFNGLBINDBUFFERSBASEPROC
epoxy_glBindBuffersBase_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_4,
        GL_extension_GL_ARB_multi_bind,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        56 /* "glBindBuffersBase" */,
        56 /* "glBindBuffersBase" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[56] /* "glBindBuffersBase" */,
                                providers, entrypoints);
}

static PFNGLBINDBUFFERSRANGEPROC
epoxy_glBindBuffersRange_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_4,
        GL_extension_GL_ARB_multi_bind,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        57 /* "glBindBuffersRange" */,
        57 /* "glBindBuffersRange" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[57] /* "glBindBuffersRange" */,
                                providers, entrypoints);
}

static PFNGLBINDFRAGDATALOCATIONPROC
epoxy_glBindFragDataLocation_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_EXT_blend_func_extended,
        GL_extension_GL_EXT_gpu_shader4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        58 /* "glBindFragDataLocation" */,
        59 /* "glBindFragDataLocationEXT" */,
        59 /* "glBindFragDataLocationEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[58] /* "glBindFragDataLocation" */,
                                providers, entrypoints);
}

static PFNGLBINDFRAGDATALOCATIONEXTPROC
epoxy_glBindFragDataLocationEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_blend_func_extended,
        GL_extension_GL_EXT_gpu_shader4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        59 /* "glBindFragDataLocationEXT" */,
        59 /* "glBindFragDataLocationEXT" */,
        58 /* "glBindFragDataLocation" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[59] /* "glBindFragDataLocationEXT" */,
                                providers, entrypoints);
}

static PFNGLBINDFRAGDATALOCATIONINDEXEDPROC
epoxy_glBindFragDataLocationIndexed_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_blend_func_extended,
        GL_extension_GL_EXT_blend_func_extended,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        60 /* "glBindFragDataLocationIndexed" */,
        60 /* "glBindFragDataLocationIndexed" */,
        61 /* "glBindFragDataLocationIndexedEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[60] /* "glBindFragDataLocationIndexed" */,
                                providers, entrypoints);
}

static PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC
epoxy_glBindFragDataLocationIndexedEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_blend_func_extended,
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_blend_func_extended,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        61 /* "glBindFragDataLocationIndexedEXT" */,
        60 /* "glBindFragDataLocationIndexed" */,
        60 /* "glBindFragDataLocationIndexed" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[61] /* "glBindFragDataLocationIndexedEXT" */,
                                providers, entrypoints);
}

static PFNGLBINDFRAGMENTSHADERATIPROC
epoxy_glBindFragmentShaderATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_fragment_shader, 62 /* glBindFragmentShaderATI */);
}

static PFNGLBINDFRAMEBUFFERPROC
epoxy_glBindFramebuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        63 /* "glBindFramebuffer" */,
        63 /* "glBindFramebuffer" */,
        63 /* "glBindFramebuffer" */,
        64 /* "glBindFramebufferEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[63] /* "glBindFramebuffer" */,
                                providers, entrypoints);
}

static PFNGLBINDFRAMEBUFFEREXTPROC
epoxy_glBindFramebufferEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        64 /* "glBindFramebufferEXT" */,
        63 /* "glBindFramebuffer" */,
        63 /* "glBindFramebuffer" */,
        63 /* "glBindFramebuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[64] /* "glBindFramebufferEXT" */,
                                providers, entrypoints);
}

static PFNGLBINDFRAMEBUFFEROESPROC
epoxy_glBindFramebufferOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_framebuffer_object, 65 /* glBindFramebufferOES */);
}

static PFNGLBINDIMAGETEXTUREPROC
epoxy_glBindImageTexture_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_shader_image_load_store,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        66 /* "glBindImageTexture" */,
        66 /* "glBindImageTexture" */,
        66 /* "glBindImageTexture" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[66] /* "glBindImageTexture" */,
                                providers, entrypoints);
}

static PFNGLBINDIMAGETEXTUREEXTPROC
epoxy_glBindImageTextureEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_shader_image_load_store, 67 /* glBindImageTextureEXT */);
}

static PFNGLBINDIMAGETEXTURESPROC
epoxy_glBindImageTextures_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_4,
        GL_extension_GL_ARB_multi_bind,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        68 /* "glBindImageTextures" */,
        68 /* "glBindImageTextures" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[68] /* "glBindImageTextures" */,
                                providers, entrypoints);
}

static PFNGLBINDLIGHTPARAMETEREXTPROC
epoxy_glBindLightParameterEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 69 /* glBindLightParameterEXT */);
}

static PFNGLBINDMATERIALPARAMETEREXTPROC
epoxy_glBindMaterialParameterEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 70 /* glBindMaterialParameterEXT */);
}

static PFNGLBINDMULTITEXTUREEXTPROC
epoxy_glBindMultiTextureEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 71 /* glBindMultiTextureEXT */);
}

static PFNGLBINDPARAMETEREXTPROC
epoxy_glBindParameterEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 72 /* glBindParameterEXT */);
}

static PFNGLBINDPROGRAMARBPROC
epoxy_glBindProgramARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        73 /* "glBindProgramARB" */,
        73 /* "glBindProgramARB" */,
        74 /* "glBindProgramNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[73] /* "glBindProgramARB" */,
                                providers, entrypoints);
}

static PFNGLBINDPROGRAMNVPROC
epoxy_glBindProgramNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        74 /* "glBindProgramNV" */,
        73 /* "glBindProgramARB" */,
        73 /* "glBindProgramARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[74] /* "glBindProgramNV" */,
                                providers, entrypoints);
}

static PFNGLBINDPROGRAMPIPELINEPROC
epoxy_glBindProgramPipeline_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        75 /* "glBindProgramPipeline" */,
        75 /* "glBindProgramPipeline" */,
        75 /* "glBindProgramPipeline" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[75] /* "glBindProgramPipeline" */,
                                providers, entrypoints);
}

static PFNGLBINDPROGRAMPIPELINEEXTPROC
epoxy_glBindProgramPipelineEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_separate_shader_objects, 76 /* glBindProgramPipelineEXT */);
}

static PFNGLBINDRENDERBUFFERPROC
epoxy_glBindRenderbuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        77 /* "glBindRenderbuffer" */,
        77 /* "glBindRenderbuffer" */,
        77 /* "glBindRenderbuffer" */,
        78 /* "glBindRenderbufferEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[77] /* "glBindRenderbuffer" */,
                                providers, entrypoints);
}

static PFNGLBINDRENDERBUFFEREXTPROC
epoxy_glBindRenderbufferEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        78 /* "glBindRenderbufferEXT" */,
        77 /* "glBindRenderbuffer" */,
        77 /* "glBindRenderbuffer" */,
        77 /* "glBindRenderbuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[78] /* "glBindRenderbufferEXT" */,
                                providers, entrypoints);
}

static PFNGLBINDRENDERBUFFEROESPROC
epoxy_glBindRenderbufferOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_framebuffer_object, 79 /* glBindRenderbufferOES */);
}

static PFNGLBINDSAMPLERPROC
epoxy_glBindSampler_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        80 /* "glBindSampler" */,
        80 /* "glBindSampler" */,
        80 /* "glBindSampler" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[80] /* "glBindSampler" */,
                                providers, entrypoints);
}

static PFNGLBINDSAMPLERSPROC
epoxy_glBindSamplers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_4,
        GL_extension_GL_ARB_multi_bind,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        81 /* "glBindSamplers" */,
        81 /* "glBindSamplers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[81] /* "glBindSamplers" */,
                                providers, entrypoints);
}

static PFNGLBINDTEXGENPARAMETEREXTPROC
epoxy_glBindTexGenParameterEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 82 /* glBindTexGenParameterEXT */);
}

static PFNGLBINDTEXTUREPROC
epoxy_glBindTexture_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_texture_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        83 /* "glBindTexture" */,
        83 /* "glBindTexture" */,
        83 /* "glBindTexture" */,
        84 /* "glBindTextureEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[83] /* "glBindTexture" */,
                                providers, entrypoints);
}

static PFNGLBINDTEXTUREEXTPROC
epoxy_glBindTextureEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_object,
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        84 /* "glBindTextureEXT" */,
        83 /* "glBindTexture" */,
        83 /* "glBindTexture" */,
        83 /* "glBindTexture" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[84] /* "glBindTextureEXT" */,
                                providers, entrypoints);
}

static PFNGLBINDTEXTUREUNITPROC
epoxy_glBindTextureUnit_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        85 /* "glBindTextureUnit" */,
        85 /* "glBindTextureUnit" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[85] /* "glBindTextureUnit" */,
                                providers, entrypoints);
}

static PFNGLBINDTEXTUREUNITPARAMETEREXTPROC
epoxy_glBindTextureUnitParameterEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 86 /* glBindTextureUnitParameterEXT */);
}

static PFNGLBINDTEXTURESPROC
epoxy_glBindTextures_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_4,
        GL_extension_GL_ARB_multi_bind,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        87 /* "glBindTextures" */,
        87 /* "glBindTextures" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[87] /* "glBindTextures" */,
                                providers, entrypoints);
}

static PFNGLBINDTRANSFORMFEEDBACKPROC
epoxy_glBindTransformFeedback_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback2,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        88 /* "glBindTransformFeedback" */,
        88 /* "glBindTransformFeedback" */,
        88 /* "glBindTransformFeedback" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[88] /* "glBindTransformFeedback" */,
                                providers, entrypoints);
}

static PFNGLBINDTRANSFORMFEEDBACKNVPROC
epoxy_glBindTransformFeedbackNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_transform_feedback2, 89 /* glBindTransformFeedbackNV */);
}

static PFNGLBINDVERTEXARRAYPROC
epoxy_glBindVertexArray_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_vertex_array_object,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_vertex_array_object,
        GL_extension_GL_OES_vertex_array_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        90 /* "glBindVertexArray" */,
        90 /* "glBindVertexArray" */,
        90 /* "glBindVertexArray" */,
        91 /* "glBindVertexArrayAPPLE" */,
        92 /* "glBindVertexArrayOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[90] /* "glBindVertexArray" */,
                                providers, entrypoints);
}

static PFNGLBINDVERTEXARRAYAPPLEPROC
epoxy_glBindVertexArrayAPPLE_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_APPLE_vertex_array_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_vertex_array_object,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        91 /* "glBindVertexArrayAPPLE" */,
        90 /* "glBindVertexArray" */,
        90 /* "glBindVertexArray" */,
        90 /* "glBindVertexArray" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[91] /* "glBindVertexArrayAPPLE" */,
                                providers, entrypoints);
}

static PFNGLBINDVERTEXARRAYOESPROC
epoxy_glBindVertexArrayOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_vertex_array_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_vertex_array_object,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        92 /* "glBindVertexArrayOES" */,
        90 /* "glBindVertexArray" */,
        90 /* "glBindVertexArray" */,
        90 /* "glBindVertexArray" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[92] /* "glBindVertexArrayOES" */,
                                providers, entrypoints);
}

static PFNGLBINDVERTEXBUFFERPROC
epoxy_glBindVertexBuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_vertex_attrib_binding,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        93 /* "glBindVertexBuffer" */,
        93 /* "glBindVertexBuffer" */,
        93 /* "glBindVertexBuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[93] /* "glBindVertexBuffer" */,
                                providers, entrypoints);
}

static PFNGLBINDVERTEXBUFFERSPROC
epoxy_glBindVertexBuffers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_4,
        GL_extension_GL_ARB_multi_bind,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        94 /* "glBindVertexBuffers" */,
        94 /* "glBindVertexBuffers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[94] /* "glBindVertexBuffers" */,
                                providers, entrypoints);
}

static PFNGLBINDVERTEXSHADEREXTPROC
epoxy_glBindVertexShaderEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 95 /* glBindVertexShaderEXT */);
}

static PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
epoxy_glBindVideoCaptureStreamBufferNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_video_capture, 96 /* glBindVideoCaptureStreamBufferNV */);
}

static PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
epoxy_glBindVideoCaptureStreamTextureNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_video_capture, 97 /* glBindVideoCaptureStreamTextureNV */);
}

static PFNGLBINORMAL3BEXTPROC
epoxy_glBinormal3bEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 98 /* glBinormal3bEXT */);
}

static PFNGLBINORMAL3BVEXTPROC
epoxy_glBinormal3bvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 99 /* glBinormal3bvEXT */);
}

static PFNGLBINORMAL3DEXTPROC
epoxy_glBinormal3dEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 100 /* glBinormal3dEXT */);
}

static PFNGLBINORMAL3DVEXTPROC
epoxy_glBinormal3dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 101 /* glBinormal3dvEXT */);
}

static PFNGLBINORMAL3FEXTPROC
epoxy_glBinormal3fEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 102 /* glBinormal3fEXT */);
}

static PFNGLBINORMAL3FVEXTPROC
epoxy_glBinormal3fvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 103 /* glBinormal3fvEXT */);
}

static PFNGLBINORMAL3IEXTPROC
epoxy_glBinormal3iEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 104 /* glBinormal3iEXT */);
}

static PFNGLBINORMAL3IVEXTPROC
epoxy_glBinormal3ivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 105 /* glBinormal3ivEXT */);
}

static PFNGLBINORMAL3SEXTPROC
epoxy_glBinormal3sEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 106 /* glBinormal3sEXT */);
}

static PFNGLBINORMAL3SVEXTPROC
epoxy_glBinormal3svEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 107 /* glBinormal3svEXT */);
}

static PFNGLBINORMALPOINTEREXTPROC
epoxy_glBinormalPointerEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 108 /* glBinormalPointerEXT */);
}

static PFNGLBITMAPPROC
epoxy_glBitmap_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 109 /* glBitmap */);
}

static PFNGLBITMAPXOESPROC
epoxy_glBitmapxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 110 /* glBitmapxOES */);
}

static PFNGLBLENDBARRIERPROC
epoxy_glBlendBarrier_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_blend_equation_advanced,
        GL_extension_GL_NV_blend_equation_advanced,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        111 /* "glBlendBarrier" */,
        112 /* "glBlendBarrierKHR" */,
        113 /* "glBlendBarrierNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[111] /* "glBlendBarrier" */,
                                providers, entrypoints);
}

static PFNGLBLENDBARRIERKHRPROC
epoxy_glBlendBarrierKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_blend_equation_advanced,
        OpenGL_ES_3_2,
        GL_extension_GL_NV_blend_equation_advanced,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        112 /* "glBlendBarrierKHR" */,
        111 /* "glBlendBarrier" */,
        113 /* "glBlendBarrierNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[112] /* "glBlendBarrierKHR" */,
                                providers, entrypoints);
}

static PFNGLBLENDBARRIERNVPROC
epoxy_glBlendBarrierNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_blend_equation_advanced,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_blend_equation_advanced,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        113 /* "glBlendBarrierNV" */,
        111 /* "glBlendBarrier" */,
        112 /* "glBlendBarrierKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[113] /* "glBlendBarrierNV" */,
                                providers, entrypoints);
}

static PFNGLBLENDCOLORPROC
epoxy_glBlendColor_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_imaging,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_blend_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        114 /* "glBlendColor" */,
        114 /* "glBlendColor" */,
        114 /* "glBlendColor" */,
        115 /* "glBlendColorEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[114] /* "glBlendColor" */,
                                providers, entrypoints);
}

static PFNGLBLENDCOLOREXTPROC
epoxy_glBlendColorEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_blend_color,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_imaging,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        115 /* "glBlendColorEXT" */,
        114 /* "glBlendColor" */,
        114 /* "glBlendColor" */,
        114 /* "glBlendColor" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[115] /* "glBlendColorEXT" */,
                                providers, entrypoints);
}

static PFNGLBLENDCOLORXOESPROC
epoxy_glBlendColorxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 116 /* glBlendColorxOES */);
}

static PFNGLBLENDEQUATIONPROC
epoxy_glBlendEquation_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_imaging,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_blend_minmax,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        117 /* "glBlendEquation" */,
        117 /* "glBlendEquation" */,
        117 /* "glBlendEquation" */,
        118 /* "glBlendEquationEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[117] /* "glBlendEquation" */,
                                providers, entrypoints);
}

static PFNGLBLENDEQUATIONEXTPROC
epoxy_glBlendEquationEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_blend_minmax,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_imaging,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        118 /* "glBlendEquationEXT" */,
        117 /* "glBlendEquation" */,
        117 /* "glBlendEquation" */,
        117 /* "glBlendEquation" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[118] /* "glBlendEquationEXT" */,
                                providers, entrypoints);
}

static PFNGLBLENDEQUATIONINDEXEDAMDPROC
epoxy_glBlendEquationIndexedAMD_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        119 /* "glBlendEquationIndexedAMD" */,
        129 /* "glBlendEquationi" */,
        129 /* "glBlendEquationi" */,
        130 /* "glBlendEquationiARB" */,
        131 /* "glBlendEquationiEXT" */,
        132 /* "glBlendEquationiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[119] /* "glBlendEquationIndexedAMD" */,
                                providers, entrypoints);
}

static PFNGLBLENDEQUATIONOESPROC
epoxy_glBlendEquationOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_blend_subtract, 120 /* glBlendEquationOES */);
}

static PFNGLBLENDEQUATIONSEPARATEPROC
epoxy_glBlendEquationSeparate_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_blend_equation_separate,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        121 /* "glBlendEquationSeparate" */,
        121 /* "glBlendEquationSeparate" */,
        122 /* "glBlendEquationSeparateEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[121] /* "glBlendEquationSeparate" */,
                                providers, entrypoints);
}

static PFNGLBLENDEQUATIONSEPARATEEXTPROC
epoxy_glBlendEquationSeparateEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_blend_equation_separate,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        122 /* "glBlendEquationSeparateEXT" */,
        121 /* "glBlendEquationSeparate" */,
        121 /* "glBlendEquationSeparate" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[122] /* "glBlendEquationSeparateEXT" */,
                                providers, entrypoints);
}

static PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
epoxy_glBlendEquationSeparateIndexedAMD_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        123 /* "glBlendEquationSeparateIndexedAMD" */,
        125 /* "glBlendEquationSeparatei" */,
        125 /* "glBlendEquationSeparatei" */,
        126 /* "glBlendEquationSeparateiARB" */,
        127 /* "glBlendEquationSeparateiEXT" */,
        128 /* "glBlendEquationSeparateiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[123] /* "glBlendEquationSeparateIndexedAMD" */,
                                providers, entrypoints);
}

static PFNGLBLENDEQUATIONSEPARATEOESPROC
epoxy_glBlendEquationSeparateOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_blend_equation_separate, 124 /* glBlendEquationSeparateOES */);
}

static PFNGLBLENDEQUATIONSEPARATEIPROC
epoxy_glBlendEquationSeparatei_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_AMD_draw_buffers_blend,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        125 /* "glBlendEquationSeparatei" */,
        125 /* "glBlendEquationSeparatei" */,
        123 /* "glBlendEquationSeparateIndexedAMD" */,
        126 /* "glBlendEquationSeparateiARB" */,
        127 /* "glBlendEquationSeparateiEXT" */,
        128 /* "glBlendEquationSeparateiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[125] /* "glBlendEquationSeparatei" */,
                                providers, entrypoints);
}

static PFNGLBLENDEQUATIONSEPARATEIARBPROC
epoxy_glBlendEquationSeparateiARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        126 /* "glBlendEquationSeparateiARB" */,
        123 /* "glBlendEquationSeparateIndexedAMD" */,
        125 /* "glBlendEquationSeparatei" */,
        125 /* "glBlendEquationSeparatei" */,
        127 /* "glBlendEquationSeparateiEXT" */,
        128 /* "glBlendEquationSeparateiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[126] /* "glBlendEquationSeparateiARB" */,
                                providers, entrypoints);
}

static PFNGLBLENDEQUATIONSEPARATEIEXTPROC
epoxy_glBlendEquationSeparateiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        127 /* "glBlendEquationSeparateiEXT" */,
        123 /* "glBlendEquationSeparateIndexedAMD" */,
        125 /* "glBlendEquationSeparatei" */,
        125 /* "glBlendEquationSeparatei" */,
        126 /* "glBlendEquationSeparateiARB" */,
        128 /* "glBlendEquationSeparateiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[127] /* "glBlendEquationSeparateiEXT" */,
                                providers, entrypoints);
}

static PFNGLBLENDEQUATIONSEPARATEIOESPROC
epoxy_glBlendEquationSeparateiOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_draw_buffers_indexed,
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_EXT_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        128 /* "glBlendEquationSeparateiOES" */,
        123 /* "glBlendEquationSeparateIndexedAMD" */,
        125 /* "glBlendEquationSeparatei" */,
        125 /* "glBlendEquationSeparatei" */,
        126 /* "glBlendEquationSeparateiARB" */,
        127 /* "glBlendEquationSeparateiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[128] /* "glBlendEquationSeparateiOES" */,
                                providers, entrypoints);
}

static PFNGLBLENDEQUATIONIPROC
epoxy_glBlendEquationi_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_AMD_draw_buffers_blend,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        129 /* "glBlendEquationi" */,
        129 /* "glBlendEquationi" */,
        119 /* "glBlendEquationIndexedAMD" */,
        130 /* "glBlendEquationiARB" */,
        131 /* "glBlendEquationiEXT" */,
        132 /* "glBlendEquationiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[129] /* "glBlendEquationi" */,
                                providers, entrypoints);
}

static PFNGLBLENDEQUATIONIARBPROC
epoxy_glBlendEquationiARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        130 /* "glBlendEquationiARB" */,
        119 /* "glBlendEquationIndexedAMD" */,
        129 /* "glBlendEquationi" */,
        129 /* "glBlendEquationi" */,
        131 /* "glBlendEquationiEXT" */,
        132 /* "glBlendEquationiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[130] /* "glBlendEquationiARB" */,
                                providers, entrypoints);
}

static PFNGLBLENDEQUATIONIEXTPROC
epoxy_glBlendEquationiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        131 /* "glBlendEquationiEXT" */,
        119 /* "glBlendEquationIndexedAMD" */,
        129 /* "glBlendEquationi" */,
        129 /* "glBlendEquationi" */,
        130 /* "glBlendEquationiARB" */,
        132 /* "glBlendEquationiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[131] /* "glBlendEquationiEXT" */,
                                providers, entrypoints);
}

static PFNGLBLENDEQUATIONIOESPROC
epoxy_glBlendEquationiOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_draw_buffers_indexed,
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_EXT_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        132 /* "glBlendEquationiOES" */,
        119 /* "glBlendEquationIndexedAMD" */,
        129 /* "glBlendEquationi" */,
        129 /* "glBlendEquationi" */,
        130 /* "glBlendEquationiARB" */,
        131 /* "glBlendEquationiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[132] /* "glBlendEquationiOES" */,
                                providers, entrypoints);
}

static PFNGLBLENDFUNCPROC
epoxy_glBlendFunc_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        133 /* "glBlendFunc" */,
        133 /* "glBlendFunc" */,
        133 /* "glBlendFunc" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[133] /* "glBlendFunc" */,
                                providers, entrypoints);
}

static PFNGLBLENDFUNCINDEXEDAMDPROC
epoxy_glBlendFuncIndexedAMD_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        134 /* "glBlendFuncIndexedAMD" */,
        144 /* "glBlendFunci" */,
        144 /* "glBlendFunci" */,
        145 /* "glBlendFunciARB" */,
        146 /* "glBlendFunciEXT" */,
        147 /* "glBlendFunciOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[134] /* "glBlendFuncIndexedAMD" */,
                                providers, entrypoints);
}

static PFNGLBLENDFUNCSEPARATEPROC
epoxy_glBlendFuncSeparate_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_blend_func_separate,
        GL_extension_GL_INGR_blend_func_separate,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        135 /* "glBlendFuncSeparate" */,
        135 /* "glBlendFuncSeparate" */,
        136 /* "glBlendFuncSeparateEXT" */,
        137 /* "glBlendFuncSeparateINGR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[135] /* "glBlendFuncSeparate" */,
                                providers, entrypoints);
}

static PFNGLBLENDFUNCSEPARATEEXTPROC
epoxy_glBlendFuncSeparateEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_blend_func_separate,
        Desktop_OpenGL_1_4,
        OpenGL_ES_2_0,
        GL_extension_GL_INGR_blend_func_separate,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        136 /* "glBlendFuncSeparateEXT" */,
        135 /* "glBlendFuncSeparate" */,
        135 /* "glBlendFuncSeparate" */,
        137 /* "glBlendFuncSeparateINGR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[136] /* "glBlendFuncSeparateEXT" */,
                                providers, entrypoints);
}

static PFNGLBLENDFUNCSEPARATEINGRPROC
epoxy_glBlendFuncSeparateINGR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_INGR_blend_func_separate,
        Desktop_OpenGL_1_4,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_blend_func_separate,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        137 /* "glBlendFuncSeparateINGR" */,
        135 /* "glBlendFuncSeparate" */,
        135 /* "glBlendFuncSeparate" */,
        136 /* "glBlendFuncSeparateEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[137] /* "glBlendFuncSeparateINGR" */,
                                providers, entrypoints);
}

static PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC
epoxy_glBlendFuncSeparateIndexedAMD_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        138 /* "glBlendFuncSeparateIndexedAMD" */,
        140 /* "glBlendFuncSeparatei" */,
        140 /* "glBlendFuncSeparatei" */,
        141 /* "glBlendFuncSeparateiARB" */,
        142 /* "glBlendFuncSeparateiEXT" */,
        143 /* "glBlendFuncSeparateiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[138] /* "glBlendFuncSeparateIndexedAMD" */,
                                providers, entrypoints);
}

static PFNGLBLENDFUNCSEPARATEOESPROC
epoxy_glBlendFuncSeparateOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_blend_func_separate, 139 /* glBlendFuncSeparateOES */);
}

static PFNGLBLENDFUNCSEPARATEIPROC
epoxy_glBlendFuncSeparatei_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_AMD_draw_buffers_blend,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        140 /* "glBlendFuncSeparatei" */,
        140 /* "glBlendFuncSeparatei" */,
        138 /* "glBlendFuncSeparateIndexedAMD" */,
        141 /* "glBlendFuncSeparateiARB" */,
        142 /* "glBlendFuncSeparateiEXT" */,
        143 /* "glBlendFuncSeparateiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[140] /* "glBlendFuncSeparatei" */,
                                providers, entrypoints);
}

static PFNGLBLENDFUNCSEPARATEIARBPROC
epoxy_glBlendFuncSeparateiARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        141 /* "glBlendFuncSeparateiARB" */,
        138 /* "glBlendFuncSeparateIndexedAMD" */,
        140 /* "glBlendFuncSeparatei" */,
        140 /* "glBlendFuncSeparatei" */,
        142 /* "glBlendFuncSeparateiEXT" */,
        143 /* "glBlendFuncSeparateiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[141] /* "glBlendFuncSeparateiARB" */,
                                providers, entrypoints);
}

static PFNGLBLENDFUNCSEPARATEIEXTPROC
epoxy_glBlendFuncSeparateiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        142 /* "glBlendFuncSeparateiEXT" */,
        138 /* "glBlendFuncSeparateIndexedAMD" */,
        140 /* "glBlendFuncSeparatei" */,
        140 /* "glBlendFuncSeparatei" */,
        141 /* "glBlendFuncSeparateiARB" */,
        143 /* "glBlendFuncSeparateiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[142] /* "glBlendFuncSeparateiEXT" */,
                                providers, entrypoints);
}

static PFNGLBLENDFUNCSEPARATEIOESPROC
epoxy_glBlendFuncSeparateiOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_draw_buffers_indexed,
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_EXT_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        143 /* "glBlendFuncSeparateiOES" */,
        138 /* "glBlendFuncSeparateIndexedAMD" */,
        140 /* "glBlendFuncSeparatei" */,
        140 /* "glBlendFuncSeparatei" */,
        141 /* "glBlendFuncSeparateiARB" */,
        142 /* "glBlendFuncSeparateiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[143] /* "glBlendFuncSeparateiOES" */,
                                providers, entrypoints);
}

static PFNGLBLENDFUNCIPROC
epoxy_glBlendFunci_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_AMD_draw_buffers_blend,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        144 /* "glBlendFunci" */,
        144 /* "glBlendFunci" */,
        134 /* "glBlendFuncIndexedAMD" */,
        145 /* "glBlendFunciARB" */,
        146 /* "glBlendFunciEXT" */,
        147 /* "glBlendFunciOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[144] /* "glBlendFunci" */,
                                providers, entrypoints);
}

static PFNGLBLENDFUNCIARBPROC
epoxy_glBlendFunciARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        145 /* "glBlendFunciARB" */,
        134 /* "glBlendFuncIndexedAMD" */,
        144 /* "glBlendFunci" */,
        144 /* "glBlendFunci" */,
        146 /* "glBlendFunciEXT" */,
        147 /* "glBlendFunciOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[145] /* "glBlendFunciARB" */,
                                providers, entrypoints);
}

static PFNGLBLENDFUNCIEXTPROC
epoxy_glBlendFunciEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        146 /* "glBlendFunciEXT" */,
        134 /* "glBlendFuncIndexedAMD" */,
        144 /* "glBlendFunci" */,
        144 /* "glBlendFunci" */,
        145 /* "glBlendFunciARB" */,
        147 /* "glBlendFunciOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[146] /* "glBlendFunciEXT" */,
                                providers, entrypoints);
}

static PFNGLBLENDFUNCIOESPROC
epoxy_glBlendFunciOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_draw_buffers_indexed,
        GL_extension_GL_AMD_draw_buffers_blend,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_draw_buffers_blend,
        GL_extension_GL_EXT_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        147 /* "glBlendFunciOES" */,
        134 /* "glBlendFuncIndexedAMD" */,
        144 /* "glBlendFunci" */,
        144 /* "glBlendFunci" */,
        145 /* "glBlendFunciARB" */,
        146 /* "glBlendFunciEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[147] /* "glBlendFunciOES" */,
                                providers, entrypoints);
}

static PFNGLBLENDPARAMETERINVPROC
epoxy_glBlendParameteriNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_blend_equation_advanced, 148 /* glBlendParameteriNV */);
}

static PFNGLBLITFRAMEBUFFERPROC
epoxy_glBlitFramebuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_framebuffer_blit,
        GL_extension_GL_NV_framebuffer_blit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        149 /* "glBlitFramebuffer" */,
        149 /* "glBlitFramebuffer" */,
        149 /* "glBlitFramebuffer" */,
        151 /* "glBlitFramebufferEXT" */,
        152 /* "glBlitFramebufferNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[149] /* "glBlitFramebuffer" */,
                                providers, entrypoints);
}

static PFNGLBLITFRAMEBUFFERANGLEPROC
epoxy_glBlitFramebufferANGLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ANGLE_framebuffer_blit, 150 /* glBlitFramebufferANGLE */);
}

static PFNGLBLITFRAMEBUFFEREXTPROC
epoxy_glBlitFramebufferEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_blit,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_framebuffer_blit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        151 /* "glBlitFramebufferEXT" */,
        149 /* "glBlitFramebuffer" */,
        149 /* "glBlitFramebuffer" */,
        149 /* "glBlitFramebuffer" */,
        152 /* "glBlitFramebufferNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[151] /* "glBlitFramebufferEXT" */,
                                providers, entrypoints);
}

static PFNGLBLITFRAMEBUFFERNVPROC
epoxy_glBlitFramebufferNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_framebuffer_blit,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_framebuffer_blit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        152 /* "glBlitFramebufferNV" */,
        149 /* "glBlitFramebuffer" */,
        149 /* "glBlitFramebuffer" */,
        149 /* "glBlitFramebuffer" */,
        151 /* "glBlitFramebufferEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[152] /* "glBlitFramebufferNV" */,
                                providers, entrypoints);
}

static PFNGLBLITNAMEDFRAMEBUFFERPROC
epoxy_glBlitNamedFramebuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        153 /* "glBlitNamedFramebuffer" */,
        153 /* "glBlitNamedFramebuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[153] /* "glBlitNamedFramebuffer" */,
                                providers, entrypoints);
}

static PFNGLBUFFERADDRESSRANGENVPROC
epoxy_glBufferAddressRangeNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_buffer_unified_memory, 154 /* glBufferAddressRangeNV */);
}

static PFNGLBUFFERDATAPROC
epoxy_glBufferData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        155 /* "glBufferData" */,
        155 /* "glBufferData" */,
        155 /* "glBufferData" */,
        156 /* "glBufferDataARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[155] /* "glBufferData" */,
                                providers, entrypoints);
}

static PFNGLBUFFERDATAARBPROC
epoxy_glBufferDataARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_buffer_object,
        Desktop_OpenGL_1_5,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        156 /* "glBufferDataARB" */,
        155 /* "glBufferData" */,
        155 /* "glBufferData" */,
        155 /* "glBufferData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[156] /* "glBufferDataARB" */,
                                providers, entrypoints);
}

static PFNGLBUFFERPAGECOMMITMENTARBPROC
epoxy_glBufferPageCommitmentARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_sparse_buffer, 157 /* glBufferPageCommitmentARB */);
}

static PFNGLBUFFERPARAMETERIAPPLEPROC
epoxy_glBufferParameteriAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_flush_buffer_range, 158 /* glBufferParameteriAPPLE */);
}

static PFNGLBUFFERSTORAGEPROC
epoxy_glBufferStorage_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_4,
        GL_extension_GL_ARB_buffer_storage,
        GL_extension_GL_EXT_buffer_storage,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        159 /* "glBufferStorage" */,
        159 /* "glBufferStorage" */,
        160 /* "glBufferStorageEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[159] /* "glBufferStorage" */,
                                providers, entrypoints);
}

static PFNGLBUFFERSTORAGEEXTPROC
epoxy_glBufferStorageEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_buffer_storage,
        Desktop_OpenGL_4_4,
        GL_extension_GL_ARB_buffer_storage,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        160 /* "glBufferStorageEXT" */,
        159 /* "glBufferStorage" */,
        159 /* "glBufferStorage" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[160] /* "glBufferStorageEXT" */,
                                providers, entrypoints);
}

static PFNGLBUFFERSUBDATAPROC
epoxy_glBufferSubData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        161 /* "glBufferSubData" */,
        161 /* "glBufferSubData" */,
        161 /* "glBufferSubData" */,
        162 /* "glBufferSubDataARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[161] /* "glBufferSubData" */,
                                providers, entrypoints);
}

static PFNGLBUFFERSUBDATAARBPROC
epoxy_glBufferSubDataARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_buffer_object,
        Desktop_OpenGL_1_5,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        162 /* "glBufferSubDataARB" */,
        161 /* "glBufferSubData" */,
        161 /* "glBufferSubData" */,
        161 /* "glBufferSubData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[162] /* "glBufferSubDataARB" */,
                                providers, entrypoints);
}

static PFNGLCALLCOMMANDLISTNVPROC
epoxy_glCallCommandListNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 163 /* glCallCommandListNV */);
}

static PFNGLCALLLISTPROC
epoxy_glCallList_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 164 /* glCallList */);
}

static PFNGLCALLLISTSPROC
epoxy_glCallLists_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 165 /* glCallLists */);
}

static PFNGLCHECKFRAMEBUFFERSTATUSPROC
epoxy_glCheckFramebufferStatus_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        166 /* "glCheckFramebufferStatus" */,
        166 /* "glCheckFramebufferStatus" */,
        166 /* "glCheckFramebufferStatus" */,
        167 /* "glCheckFramebufferStatusEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[166] /* "glCheckFramebufferStatus" */,
                                providers, entrypoints);
}

static PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
epoxy_glCheckFramebufferStatusEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        167 /* "glCheckFramebufferStatusEXT" */,
        166 /* "glCheckFramebufferStatus" */,
        166 /* "glCheckFramebufferStatus" */,
        166 /* "glCheckFramebufferStatus" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[167] /* "glCheckFramebufferStatusEXT" */,
                                providers, entrypoints);
}

static PFNGLCHECKFRAMEBUFFERSTATUSOESPROC
epoxy_glCheckFramebufferStatusOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_framebuffer_object, 168 /* glCheckFramebufferStatusOES */);
}

static PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC
epoxy_glCheckNamedFramebufferStatus_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        169 /* "glCheckNamedFramebufferStatus" */,
        169 /* "glCheckNamedFramebufferStatus" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[169] /* "glCheckNamedFramebufferStatus" */,
                                providers, entrypoints);
}

static PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
epoxy_glCheckNamedFramebufferStatusEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 170 /* glCheckNamedFramebufferStatusEXT */);
}

static PFNGLCLAMPCOLORPROC
epoxy_glClampColor_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_color_buffer_float,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        171 /* "glClampColor" */,
        172 /* "glClampColorARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[171] /* "glClampColor" */,
                                providers, entrypoints);
}

static PFNGLCLAMPCOLORARBPROC
epoxy_glClampColorARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_color_buffer_float,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        172 /* "glClampColorARB" */,
        171 /* "glClampColor" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[172] /* "glClampColorARB" */,
                                providers, entrypoints);
}

static PFNGLCLEARPROC
epoxy_glClear_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        173 /* "glClear" */,
        173 /* "glClear" */,
        173 /* "glClear" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[173] /* "glClear" */,
                                providers, entrypoints);
}

static PFNGLCLEARACCUMPROC
epoxy_glClearAccum_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 174 /* glClearAccum */);
}

static PFNGLCLEARACCUMXOESPROC
epoxy_glClearAccumxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 175 /* glClearAccumxOES */);
}

static PFNGLCLEARBUFFERDATAPROC
epoxy_glClearBufferData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_clear_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        176 /* "glClearBufferData" */,
        176 /* "glClearBufferData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[176] /* "glClearBufferData" */,
                                providers, entrypoints);
}

static PFNGLCLEARBUFFERSUBDATAPROC
epoxy_glClearBufferSubData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_clear_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        177 /* "glClearBufferSubData" */,
        177 /* "glClearBufferSubData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[177] /* "glClearBufferSubData" */,
                                providers, entrypoints);
}

static PFNGLCLEARBUFFERFIPROC
epoxy_glClearBufferfi_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        178 /* "glClearBufferfi" */,
        178 /* "glClearBufferfi" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[178] /* "glClearBufferfi" */,
                                providers, entrypoints);
}

static PFNGLCLEARBUFFERFVPROC
epoxy_glClearBufferfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        179 /* "glClearBufferfv" */,
        179 /* "glClearBufferfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[179] /* "glClearBufferfv" */,
                                providers, entrypoints);
}

static PFNGLCLEARBUFFERIVPROC
epoxy_glClearBufferiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        180 /* "glClearBufferiv" */,
        180 /* "glClearBufferiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[180] /* "glClearBufferiv" */,
                                providers, entrypoints);
}

static PFNGLCLEARBUFFERUIVPROC
epoxy_glClearBufferuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        181 /* "glClearBufferuiv" */,
        181 /* "glClearBufferuiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[181] /* "glClearBufferuiv" */,
                                providers, entrypoints);
}

static PFNGLCLEARCOLORPROC
epoxy_glClearColor_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        182 /* "glClearColor" */,
        182 /* "glClearColor" */,
        182 /* "glClearColor" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[182] /* "glClearColor" */,
                                providers, entrypoints);
}

static PFNGLCLEARCOLORIIEXTPROC
epoxy_glClearColorIiEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_texture_integer, 183 /* glClearColorIiEXT */);
}

static PFNGLCLEARCOLORIUIEXTPROC
epoxy_glClearColorIuiEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_texture_integer, 184 /* glClearColorIuiEXT */);
}

static PFNGLCLEARCOLORXPROC
epoxy_glClearColorx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 185 /* glClearColorx */);
}

static PFNGLCLEARCOLORXOESPROC
epoxy_glClearColorxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 186 /* glClearColorxOES */);
}

static PFNGLCLEARDEPTHPROC
epoxy_glClearDepth_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 187 /* glClearDepth */);
}

static PFNGLCLEARDEPTHDNVPROC
epoxy_glClearDepthdNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_depth_buffer_float, 188 /* glClearDepthdNV */);
}

static PFNGLCLEARDEPTHFPROC
epoxy_glClearDepthf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_ES2_compatibility,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_OES_single_precision,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        189 /* "glClearDepthf" */,
        189 /* "glClearDepthf" */,
        189 /* "glClearDepthf" */,
        189 /* "glClearDepthf" */,
        190 /* "glClearDepthfOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[189] /* "glClearDepthf" */,
                                providers, entrypoints);
}

static PFNGLCLEARDEPTHFOESPROC
epoxy_glClearDepthfOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_single_precision,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_ES2_compatibility,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        190 /* "glClearDepthfOES" */,
        189 /* "glClearDepthf" */,
        189 /* "glClearDepthf" */,
        189 /* "glClearDepthf" */,
        189 /* "glClearDepthf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[190] /* "glClearDepthfOES" */,
                                providers, entrypoints);
}

static PFNGLCLEARDEPTHXPROC
epoxy_glClearDepthx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 191 /* glClearDepthx */);
}

static PFNGLCLEARDEPTHXOESPROC
epoxy_glClearDepthxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 192 /* glClearDepthxOES */);
}

static PFNGLCLEARINDEXPROC
epoxy_glClearIndex_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 193 /* glClearIndex */);
}

static PFNGLCLEARNAMEDBUFFERDATAPROC
epoxy_glClearNamedBufferData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        194 /* "glClearNamedBufferData" */,
        194 /* "glClearNamedBufferData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[194] /* "glClearNamedBufferData" */,
                                providers, entrypoints);
}

static PFNGLCLEARNAMEDBUFFERDATAEXTPROC
epoxy_glClearNamedBufferDataEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 195 /* glClearNamedBufferDataEXT */);
}

static PFNGLCLEARNAMEDBUFFERSUBDATAPROC
epoxy_glClearNamedBufferSubData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        196 /* "glClearNamedBufferSubData" */,
        196 /* "glClearNamedBufferSubData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[196] /* "glClearNamedBufferSubData" */,
                                providers, entrypoints);
}

static PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC
epoxy_glClearNamedBufferSubDataEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 197 /* glClearNamedBufferSubDataEXT */);
}

static PFNGLCLEARNAMEDFRAMEBUFFERFIPROC
epoxy_glClearNamedFramebufferfi_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        198 /* "glClearNamedFramebufferfi" */,
        198 /* "glClearNamedFramebufferfi" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[198] /* "glClearNamedFramebufferfi" */,
                                providers, entrypoints);
}

static PFNGLCLEARNAMEDFRAMEBUFFERFVPROC
epoxy_glClearNamedFramebufferfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        199 /* "glClearNamedFramebufferfv" */,
        199 /* "glClearNamedFramebufferfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[199] /* "glClearNamedFramebufferfv" */,
                                providers, entrypoints);
}

static PFNGLCLEARNAMEDFRAMEBUFFERIVPROC
epoxy_glClearNamedFramebufferiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        200 /* "glClearNamedFramebufferiv" */,
        200 /* "glClearNamedFramebufferiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[200] /* "glClearNamedFramebufferiv" */,
                                providers, entrypoints);
}

static PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC
epoxy_glClearNamedFramebufferuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        201 /* "glClearNamedFramebufferuiv" */,
        201 /* "glClearNamedFramebufferuiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[201] /* "glClearNamedFramebufferuiv" */,
                                providers, entrypoints);
}

static PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC
epoxy_glClearPixelLocalStorageuiEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_shader_pixel_local_storage2, 202 /* glClearPixelLocalStorageuiEXT */);
}

static PFNGLCLEARSTENCILPROC
epoxy_glClearStencil_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        203 /* "glClearStencil" */,
        203 /* "glClearStencil" */,
        203 /* "glClearStencil" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[203] /* "glClearStencil" */,
                                providers, entrypoints);
}

static PFNGLCLEARTEXIMAGEPROC
epoxy_glClearTexImage_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_4,
        GL_extension_GL_ARB_clear_texture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        204 /* "glClearTexImage" */,
        204 /* "glClearTexImage" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[204] /* "glClearTexImage" */,
                                providers, entrypoints);
}

static PFNGLCLEARTEXSUBIMAGEPROC
epoxy_glClearTexSubImage_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_4,
        GL_extension_GL_ARB_clear_texture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        205 /* "glClearTexSubImage" */,
        205 /* "glClearTexSubImage" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[205] /* "glClearTexSubImage" */,
                                providers, entrypoints);
}

static PFNGLCLIENTACTIVETEXTUREPROC
epoxy_glClientActiveTexture_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        OpenGL_ES_1_0,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        206 /* "glClientActiveTexture" */,
        206 /* "glClientActiveTexture" */,
        207 /* "glClientActiveTextureARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[206] /* "glClientActiveTexture" */,
                                providers, entrypoints);
}

static PFNGLCLIENTACTIVETEXTUREARBPROC
epoxy_glClientActiveTextureARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        207 /* "glClientActiveTextureARB" */,
        206 /* "glClientActiveTexture" */,
        206 /* "glClientActiveTexture" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[207] /* "glClientActiveTextureARB" */,
                                providers, entrypoints);
}

static PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
epoxy_glClientActiveVertexStreamATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 208 /* glClientActiveVertexStreamATI */);
}

static PFNGLCLIENTATTRIBDEFAULTEXTPROC
epoxy_glClientAttribDefaultEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 209 /* glClientAttribDefaultEXT */);
}

static PFNGLCLIENTWAITSYNCPROC
epoxy_glClientWaitSync_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_sync,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_sync,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        210 /* "glClientWaitSync" */,
        210 /* "glClientWaitSync" */,
        210 /* "glClientWaitSync" */,
        211 /* "glClientWaitSyncAPPLE" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[210] /* "glClientWaitSync" */,
                                providers, entrypoints);
}

static PFNGLCLIENTWAITSYNCAPPLEPROC
epoxy_glClientWaitSyncAPPLE_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_APPLE_sync,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_sync,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        211 /* "glClientWaitSyncAPPLE" */,
        210 /* "glClientWaitSync" */,
        210 /* "glClientWaitSync" */,
        210 /* "glClientWaitSync" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[211] /* "glClientWaitSyncAPPLE" */,
                                providers, entrypoints);
}

static PFNGLCLIPCONTROLPROC
epoxy_glClipControl_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_clip_control,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        212 /* "glClipControl" */,
        212 /* "glClipControl" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[212] /* "glClipControl" */,
                                providers, entrypoints);
}

static PFNGLCLIPPLANEPROC
epoxy_glClipPlane_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 213 /* glClipPlane */);
}

static PFNGLCLIPPLANEFPROC
epoxy_glClipPlanef_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 214 /* glClipPlanef */);
}

static PFNGLCLIPPLANEFIMGPROC
epoxy_glClipPlanefIMG_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IMG_user_clip_plane, 215 /* glClipPlanefIMG */);
}

static PFNGLCLIPPLANEFOESPROC
epoxy_glClipPlanefOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_single_precision, 216 /* glClipPlanefOES */);
}

static PFNGLCLIPPLANEXPROC
epoxy_glClipPlanex_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 217 /* glClipPlanex */);
}

static PFNGLCLIPPLANEXIMGPROC
epoxy_glClipPlanexIMG_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IMG_user_clip_plane, 218 /* glClipPlanexIMG */);
}

static PFNGLCLIPPLANEXOESPROC
epoxy_glClipPlanexOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 219 /* glClipPlanexOES */);
}

static PFNGLCOLOR3BPROC
epoxy_glColor3b_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 220 /* glColor3b */);
}

static PFNGLCOLOR3BVPROC
epoxy_glColor3bv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 221 /* glColor3bv */);
}

static PFNGLCOLOR3DPROC
epoxy_glColor3d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 222 /* glColor3d */);
}

static PFNGLCOLOR3DVPROC
epoxy_glColor3dv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 223 /* glColor3dv */);
}

static PFNGLCOLOR3FPROC
epoxy_glColor3f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 224 /* glColor3f */);
}

static PFNGLCOLOR3FVERTEX3FSUNPROC
epoxy_glColor3fVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 225 /* glColor3fVertex3fSUN */);
}

static PFNGLCOLOR3FVERTEX3FVSUNPROC
epoxy_glColor3fVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 226 /* glColor3fVertex3fvSUN */);
}

static PFNGLCOLOR3FVPROC
epoxy_glColor3fv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 227 /* glColor3fv */);
}

static PFNGLCOLOR3HNVPROC
epoxy_glColor3hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 228 /* glColor3hNV */);
}

static PFNGLCOLOR3HVNVPROC
epoxy_glColor3hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 229 /* glColor3hvNV */);
}

static PFNGLCOLOR3IPROC
epoxy_glColor3i_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 230 /* glColor3i */);
}

static PFNGLCOLOR3IVPROC
epoxy_glColor3iv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 231 /* glColor3iv */);
}

static PFNGLCOLOR3SPROC
epoxy_glColor3s_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 232 /* glColor3s */);
}

static PFNGLCOLOR3SVPROC
epoxy_glColor3sv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 233 /* glColor3sv */);
}

static PFNGLCOLOR3UBPROC
epoxy_glColor3ub_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 234 /* glColor3ub */);
}

static PFNGLCOLOR3UBVPROC
epoxy_glColor3ubv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 235 /* glColor3ubv */);
}

static PFNGLCOLOR3UIPROC
epoxy_glColor3ui_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 236 /* glColor3ui */);
}

static PFNGLCOLOR3UIVPROC
epoxy_glColor3uiv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 237 /* glColor3uiv */);
}

static PFNGLCOLOR3USPROC
epoxy_glColor3us_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 238 /* glColor3us */);
}

static PFNGLCOLOR3USVPROC
epoxy_glColor3usv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 239 /* glColor3usv */);
}

static PFNGLCOLOR3XOESPROC
epoxy_glColor3xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 240 /* glColor3xOES */);
}

static PFNGLCOLOR3XVOESPROC
epoxy_glColor3xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 241 /* glColor3xvOES */);
}

static PFNGLCOLOR4BPROC
epoxy_glColor4b_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 242 /* glColor4b */);
}

static PFNGLCOLOR4BVPROC
epoxy_glColor4bv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 243 /* glColor4bv */);
}

static PFNGLCOLOR4DPROC
epoxy_glColor4d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 244 /* glColor4d */);
}

static PFNGLCOLOR4DVPROC
epoxy_glColor4dv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 245 /* glColor4dv */);
}

static PFNGLCOLOR4FPROC
epoxy_glColor4f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        246 /* "glColor4f" */,
        246 /* "glColor4f" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[246] /* "glColor4f" */,
                                providers, entrypoints);
}

static PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
epoxy_glColor4fNormal3fVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 247 /* glColor4fNormal3fVertex3fSUN */);
}

static PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
epoxy_glColor4fNormal3fVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 248 /* glColor4fNormal3fVertex3fvSUN */);
}

static PFNGLCOLOR4FVPROC
epoxy_glColor4fv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 249 /* glColor4fv */);
}

static PFNGLCOLOR4HNVPROC
epoxy_glColor4hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 250 /* glColor4hNV */);
}

static PFNGLCOLOR4HVNVPROC
epoxy_glColor4hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 251 /* glColor4hvNV */);
}

static PFNGLCOLOR4IPROC
epoxy_glColor4i_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 252 /* glColor4i */);
}

static PFNGLCOLOR4IVPROC
epoxy_glColor4iv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 253 /* glColor4iv */);
}

static PFNGLCOLOR4SPROC
epoxy_glColor4s_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 254 /* glColor4s */);
}

static PFNGLCOLOR4SVPROC
epoxy_glColor4sv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 255 /* glColor4sv */);
}

static PFNGLCOLOR4UBPROC
epoxy_glColor4ub_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        256 /* "glColor4ub" */,
        256 /* "glColor4ub" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[256] /* "glColor4ub" */,
                                providers, entrypoints);
}

static PFNGLCOLOR4UBVERTEX2FSUNPROC
epoxy_glColor4ubVertex2fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 257 /* glColor4ubVertex2fSUN */);
}

static PFNGLCOLOR4UBVERTEX2FVSUNPROC
epoxy_glColor4ubVertex2fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 258 /* glColor4ubVertex2fvSUN */);
}

static PFNGLCOLOR4UBVERTEX3FSUNPROC
epoxy_glColor4ubVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 259 /* glColor4ubVertex3fSUN */);
}

static PFNGLCOLOR4UBVERTEX3FVSUNPROC
epoxy_glColor4ubVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 260 /* glColor4ubVertex3fvSUN */);
}

static PFNGLCOLOR4UBVPROC
epoxy_glColor4ubv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 261 /* glColor4ubv */);
}

static PFNGLCOLOR4UIPROC
epoxy_glColor4ui_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 262 /* glColor4ui */);
}

static PFNGLCOLOR4UIVPROC
epoxy_glColor4uiv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 263 /* glColor4uiv */);
}

static PFNGLCOLOR4USPROC
epoxy_glColor4us_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 264 /* glColor4us */);
}

static PFNGLCOLOR4USVPROC
epoxy_glColor4usv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 265 /* glColor4usv */);
}

static PFNGLCOLOR4XPROC
epoxy_glColor4x_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 266 /* glColor4x */);
}

static PFNGLCOLOR4XOESPROC
epoxy_glColor4xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 267 /* glColor4xOES */);
}

static PFNGLCOLOR4XVOESPROC
epoxy_glColor4xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 268 /* glColor4xvOES */);
}

static PFNGLCOLORFORMATNVPROC
epoxy_glColorFormatNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_buffer_unified_memory, 269 /* glColorFormatNV */);
}

static PFNGLCOLORFRAGMENTOP1ATIPROC
epoxy_glColorFragmentOp1ATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_fragment_shader, 270 /* glColorFragmentOp1ATI */);
}

static PFNGLCOLORFRAGMENTOP2ATIPROC
epoxy_glColorFragmentOp2ATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_fragment_shader, 271 /* glColorFragmentOp2ATI */);
}

static PFNGLCOLORFRAGMENTOP3ATIPROC
epoxy_glColorFragmentOp3ATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_fragment_shader, 272 /* glColorFragmentOp3ATI */);
}

static PFNGLCOLORMASKPROC
epoxy_glColorMask_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        273 /* "glColorMask" */,
        273 /* "glColorMask" */,
        273 /* "glColorMask" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[273] /* "glColorMask" */,
                                providers, entrypoints);
}

static PFNGLCOLORMASKINDEXEDEXTPROC
epoxy_glColorMaskIndexedEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        274 /* "glColorMaskIndexedEXT" */,
        275 /* "glColorMaski" */,
        275 /* "glColorMaski" */,
        276 /* "glColorMaskiEXT" */,
        277 /* "glColorMaskiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[274] /* "glColorMaskIndexedEXT" */,
                                providers, entrypoints);
}

static PFNGLCOLORMASKIPROC
epoxy_glColorMaski_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        275 /* "glColorMaski" */,
        275 /* "glColorMaski" */,
        274 /* "glColorMaskIndexedEXT" */,
        276 /* "glColorMaskiEXT" */,
        277 /* "glColorMaskiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[275] /* "glColorMaski" */,
                                providers, entrypoints);
}

static PFNGLCOLORMASKIEXTPROC
epoxy_glColorMaskiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        276 /* "glColorMaskiEXT" */,
        274 /* "glColorMaskIndexedEXT" */,
        275 /* "glColorMaski" */,
        275 /* "glColorMaski" */,
        277 /* "glColorMaskiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[276] /* "glColorMaskiEXT" */,
                                providers, entrypoints);
}

static PFNGLCOLORMASKIOESPROC
epoxy_glColorMaskiOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_draw_buffers_indexed,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        277 /* "glColorMaskiOES" */,
        274 /* "glColorMaskIndexedEXT" */,
        275 /* "glColorMaski" */,
        275 /* "glColorMaski" */,
        276 /* "glColorMaskiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[277] /* "glColorMaskiOES" */,
                                providers, entrypoints);
}

static PFNGLCOLORMATERIALPROC
epoxy_glColorMaterial_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 278 /* glColorMaterial */);
}

static PFNGLCOLORP3UIPROC
epoxy_glColorP3ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        279 /* "glColorP3ui" */,
        279 /* "glColorP3ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[279] /* "glColorP3ui" */,
                                providers, entrypoints);
}

static PFNGLCOLORP3UIVPROC
epoxy_glColorP3uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        280 /* "glColorP3uiv" */,
        280 /* "glColorP3uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[280] /* "glColorP3uiv" */,
                                providers, entrypoints);
}

static PFNGLCOLORP4UIPROC
epoxy_glColorP4ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        281 /* "glColorP4ui" */,
        281 /* "glColorP4ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[281] /* "glColorP4ui" */,
                                providers, entrypoints);
}

static PFNGLCOLORP4UIVPROC
epoxy_glColorP4uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        282 /* "glColorP4uiv" */,
        282 /* "glColorP4uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[282] /* "glColorP4uiv" */,
                                providers, entrypoints);
}

static PFNGLCOLORPOINTERPROC
epoxy_glColorPointer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        283 /* "glColorPointer" */,
        283 /* "glColorPointer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[283] /* "glColorPointer" */,
                                providers, entrypoints);
}

static PFNGLCOLORPOINTEREXTPROC
epoxy_glColorPointerEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_array, 284 /* glColorPointerEXT */);
}

static PFNGLCOLORPOINTERLISTIBMPROC
epoxy_glColorPointerListIBM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IBM_vertex_array_lists, 285 /* glColorPointerListIBM */);
}

static PFNGLCOLORPOINTERVINTELPROC
epoxy_glColorPointervINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_parallel_arrays, 286 /* glColorPointervINTEL */);
}

static PFNGLCOLORSUBTABLEPROC
epoxy_glColorSubTable_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_color_subtable,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        287 /* "glColorSubTable" */,
        288 /* "glColorSubTableEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[287] /* "glColorSubTable" */,
                                providers, entrypoints);
}

static PFNGLCOLORSUBTABLEEXTPROC
epoxy_glColorSubTableEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_color_subtable,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        288 /* "glColorSubTableEXT" */,
        287 /* "glColorSubTable" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[288] /* "glColorSubTableEXT" */,
                                providers, entrypoints);
}

static PFNGLCOLORTABLEPROC
epoxy_glColorTable_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_paletted_texture,
        GL_extension_GL_SGI_color_table,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        289 /* "glColorTable" */,
        290 /* "glColorTableEXT" */,
        295 /* "glColorTableSGI" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[289] /* "glColorTable" */,
                                providers, entrypoints);
}

static PFNGLCOLORTABLEEXTPROC
epoxy_glColorTableEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_paletted_texture,
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_SGI_color_table,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        290 /* "glColorTableEXT" */,
        289 /* "glColorTable" */,
        295 /* "glColorTableSGI" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[290] /* "glColorTableEXT" */,
                                providers, entrypoints);
}

static PFNGLCOLORTABLEPARAMETERFVPROC
epoxy_glColorTableParameterfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_SGI_color_table,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        291 /* "glColorTableParameterfv" */,
        292 /* "glColorTableParameterfvSGI" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[291] /* "glColorTableParameterfv" */,
                                providers, entrypoints);
}

static PFNGLCOLORTABLEPARAMETERFVSGIPROC
epoxy_glColorTableParameterfvSGI_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_SGI_color_table,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        292 /* "glColorTableParameterfvSGI" */,
        291 /* "glColorTableParameterfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[292] /* "glColorTableParameterfvSGI" */,
                                providers, entrypoints);
}

static PFNGLCOLORTABLEPARAMETERIVPROC
epoxy_glColorTableParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_SGI_color_table,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        293 /* "glColorTableParameteriv" */,
        294 /* "glColorTableParameterivSGI" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[293] /* "glColorTableParameteriv" */,
                                providers, entrypoints);
}

static PFNGLCOLORTABLEPARAMETERIVSGIPROC
epoxy_glColorTableParameterivSGI_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_SGI_color_table,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        294 /* "glColorTableParameterivSGI" */,
        293 /* "glColorTableParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[294] /* "glColorTableParameterivSGI" */,
                                providers, entrypoints);
}

static PFNGLCOLORTABLESGIPROC
epoxy_glColorTableSGI_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_SGI_color_table,
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_paletted_texture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        295 /* "glColorTableSGI" */,
        289 /* "glColorTable" */,
        290 /* "glColorTableEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[295] /* "glColorTableSGI" */,
                                providers, entrypoints);
}

static PFNGLCOMBINERINPUTNVPROC
epoxy_glCombinerInputNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_register_combiners, 296 /* glCombinerInputNV */);
}

static PFNGLCOMBINEROUTPUTNVPROC
epoxy_glCombinerOutputNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_register_combiners, 297 /* glCombinerOutputNV */);
}

static PFNGLCOMBINERPARAMETERFNVPROC
epoxy_glCombinerParameterfNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_register_combiners, 298 /* glCombinerParameterfNV */);
}

static PFNGLCOMBINERPARAMETERFVNVPROC
epoxy_glCombinerParameterfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_register_combiners, 299 /* glCombinerParameterfvNV */);
}

static PFNGLCOMBINERPARAMETERINVPROC
epoxy_glCombinerParameteriNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_register_combiners, 300 /* glCombinerParameteriNV */);
}

static PFNGLCOMBINERPARAMETERIVNVPROC
epoxy_glCombinerParameterivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_register_combiners, 301 /* glCombinerParameterivNV */);
}

static PFNGLCOMBINERSTAGEPARAMETERFVNVPROC
epoxy_glCombinerStageParameterfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_register_combiners2, 302 /* glCombinerStageParameterfvNV */);
}

static PFNGLCOMMANDLISTSEGMENTSNVPROC
epoxy_glCommandListSegmentsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 303 /* glCommandListSegmentsNV */);
}

static PFNGLCOMPILECOMMANDLISTNVPROC
epoxy_glCompileCommandListNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 304 /* glCompileCommandListNV */);
}

static PFNGLCOMPILESHADERPROC
epoxy_glCompileShader_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        305 /* "glCompileShader" */,
        305 /* "glCompileShader" */,
        306 /* "glCompileShaderARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[305] /* "glCompileShader" */,
                                providers, entrypoints);
}

static PFNGLCOMPILESHADERARBPROC
epoxy_glCompileShaderARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        306 /* "glCompileShaderARB" */,
        305 /* "glCompileShader" */,
        305 /* "glCompileShader" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[306] /* "glCompileShaderARB" */,
                                providers, entrypoints);
}

static PFNGLCOMPILESHADERINCLUDEARBPROC
epoxy_glCompileShaderIncludeARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_shading_language_include, 307 /* glCompileShaderIncludeARB */);
}

static PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
epoxy_glCompressedMultiTexImage1DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 308 /* glCompressedMultiTexImage1DEXT */);
}

static PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
epoxy_glCompressedMultiTexImage2DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 309 /* glCompressedMultiTexImage2DEXT */);
}

static PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
epoxy_glCompressedMultiTexImage3DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 310 /* glCompressedMultiTexImage3DEXT */);
}

static PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
epoxy_glCompressedMultiTexSubImage1DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 311 /* glCompressedMultiTexSubImage1DEXT */);
}

static PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
epoxy_glCompressedMultiTexSubImage2DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 312 /* glCompressedMultiTexSubImage2DEXT */);
}

static PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
epoxy_glCompressedMultiTexSubImage3DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 313 /* glCompressedMultiTexSubImage3DEXT */);
}

static PFNGLCOMPRESSEDTEXIMAGE1DPROC
epoxy_glCompressedTexImage1D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_texture_compression,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        314 /* "glCompressedTexImage1D" */,
        315 /* "glCompressedTexImage1DARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[314] /* "glCompressedTexImage1D" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXIMAGE1DARBPROC
epoxy_glCompressedTexImage1DARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_texture_compression,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        315 /* "glCompressedTexImage1DARB" */,
        314 /* "glCompressedTexImage1D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[315] /* "glCompressedTexImage1DARB" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXIMAGE2DPROC
epoxy_glCompressedTexImage2D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_texture_compression,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        316 /* "glCompressedTexImage2D" */,
        316 /* "glCompressedTexImage2D" */,
        316 /* "glCompressedTexImage2D" */,
        317 /* "glCompressedTexImage2DARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[316] /* "glCompressedTexImage2D" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXIMAGE2DARBPROC
epoxy_glCompressedTexImage2DARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_texture_compression,
        Desktop_OpenGL_1_3,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        317 /* "glCompressedTexImage2DARB" */,
        316 /* "glCompressedTexImage2D" */,
        316 /* "glCompressedTexImage2D" */,
        316 /* "glCompressedTexImage2D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[317] /* "glCompressedTexImage2DARB" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXIMAGE3DPROC
epoxy_glCompressedTexImage3D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_texture_compression,
        GL_extension_GL_OES_texture_3D,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        318 /* "glCompressedTexImage3D" */,
        318 /* "glCompressedTexImage3D" */,
        319 /* "glCompressedTexImage3DARB" */,
        320 /* "glCompressedTexImage3DOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[318] /* "glCompressedTexImage3D" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXIMAGE3DARBPROC
epoxy_glCompressedTexImage3DARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_texture_compression,
        Desktop_OpenGL_1_3,
        OpenGL_ES_3_0,
        GL_extension_GL_OES_texture_3D,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        319 /* "glCompressedTexImage3DARB" */,
        318 /* "glCompressedTexImage3D" */,
        318 /* "glCompressedTexImage3D" */,
        320 /* "glCompressedTexImage3DOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[319] /* "glCompressedTexImage3DARB" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXIMAGE3DOESPROC
epoxy_glCompressedTexImage3DOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_3D,
        Desktop_OpenGL_1_3,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_texture_compression,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        320 /* "glCompressedTexImage3DOES" */,
        318 /* "glCompressedTexImage3D" */,
        318 /* "glCompressedTexImage3D" */,
        319 /* "glCompressedTexImage3DARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[320] /* "glCompressedTexImage3DOES" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
epoxy_glCompressedTexSubImage1D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_texture_compression,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        321 /* "glCompressedTexSubImage1D" */,
        322 /* "glCompressedTexSubImage1DARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[321] /* "glCompressedTexSubImage1D" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
epoxy_glCompressedTexSubImage1DARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_texture_compression,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        322 /* "glCompressedTexSubImage1DARB" */,
        321 /* "glCompressedTexSubImage1D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[322] /* "glCompressedTexSubImage1DARB" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
epoxy_glCompressedTexSubImage2D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_texture_compression,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        323 /* "glCompressedTexSubImage2D" */,
        323 /* "glCompressedTexSubImage2D" */,
        323 /* "glCompressedTexSubImage2D" */,
        324 /* "glCompressedTexSubImage2DARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[323] /* "glCompressedTexSubImage2D" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
epoxy_glCompressedTexSubImage2DARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_texture_compression,
        Desktop_OpenGL_1_3,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        324 /* "glCompressedTexSubImage2DARB" */,
        323 /* "glCompressedTexSubImage2D" */,
        323 /* "glCompressedTexSubImage2D" */,
        323 /* "glCompressedTexSubImage2D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[324] /* "glCompressedTexSubImage2DARB" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
epoxy_glCompressedTexSubImage3D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_texture_compression,
        GL_extension_GL_OES_texture_3D,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        325 /* "glCompressedTexSubImage3D" */,
        325 /* "glCompressedTexSubImage3D" */,
        326 /* "glCompressedTexSubImage3DARB" */,
        327 /* "glCompressedTexSubImage3DOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[325] /* "glCompressedTexSubImage3D" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
epoxy_glCompressedTexSubImage3DARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_texture_compression,
        Desktop_OpenGL_1_3,
        OpenGL_ES_3_0,
        GL_extension_GL_OES_texture_3D,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        326 /* "glCompressedTexSubImage3DARB" */,
        325 /* "glCompressedTexSubImage3D" */,
        325 /* "glCompressedTexSubImage3D" */,
        327 /* "glCompressedTexSubImage3DOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[326] /* "glCompressedTexSubImage3DARB" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC
epoxy_glCompressedTexSubImage3DOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_3D,
        Desktop_OpenGL_1_3,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_texture_compression,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        327 /* "glCompressedTexSubImage3DOES" */,
        325 /* "glCompressedTexSubImage3D" */,
        325 /* "glCompressedTexSubImage3D" */,
        326 /* "glCompressedTexSubImage3DARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[327] /* "glCompressedTexSubImage3DOES" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC
epoxy_glCompressedTextureImage1DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 328 /* glCompressedTextureImage1DEXT */);
}

static PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC
epoxy_glCompressedTextureImage2DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 329 /* glCompressedTextureImage2DEXT */);
}

static PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC
epoxy_glCompressedTextureImage3DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 330 /* glCompressedTextureImage3DEXT */);
}

static PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC
epoxy_glCompressedTextureSubImage1D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        331 /* "glCompressedTextureSubImage1D" */,
        331 /* "glCompressedTextureSubImage1D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[331] /* "glCompressedTextureSubImage1D" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
epoxy_glCompressedTextureSubImage1DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 332 /* glCompressedTextureSubImage1DEXT */);
}

static PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC
epoxy_glCompressedTextureSubImage2D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        333 /* "glCompressedTextureSubImage2D" */,
        333 /* "glCompressedTextureSubImage2D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[333] /* "glCompressedTextureSubImage2D" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
epoxy_glCompressedTextureSubImage2DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 334 /* glCompressedTextureSubImage2DEXT */);
}

static PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC
epoxy_glCompressedTextureSubImage3D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        335 /* "glCompressedTextureSubImage3D" */,
        335 /* "glCompressedTextureSubImage3D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[335] /* "glCompressedTextureSubImage3D" */,
                                providers, entrypoints);
}

static PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
epoxy_glCompressedTextureSubImage3DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 336 /* glCompressedTextureSubImage3DEXT */);
}

static PFNGLCONSERVATIVERASTERPARAMETERFNVPROC
epoxy_glConservativeRasterParameterfNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_conservative_raster_dilate, 337 /* glConservativeRasterParameterfNV */);
}

static PFNGLCONSERVATIVERASTERPARAMETERINVPROC
epoxy_glConservativeRasterParameteriNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_conservative_raster_pre_snap_triangles, 338 /* glConservativeRasterParameteriNV */);
}

static PFNGLCONVOLUTIONFILTER1DPROC
epoxy_glConvolutionFilter1D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_convolution,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        339 /* "glConvolutionFilter1D" */,
        340 /* "glConvolutionFilter1DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[339] /* "glConvolutionFilter1D" */,
                                providers, entrypoints);
}

static PFNGLCONVOLUTIONFILTER1DEXTPROC
epoxy_glConvolutionFilter1DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_convolution,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        340 /* "glConvolutionFilter1DEXT" */,
        339 /* "glConvolutionFilter1D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[340] /* "glConvolutionFilter1DEXT" */,
                                providers, entrypoints);
}

static PFNGLCONVOLUTIONFILTER2DPROC
epoxy_glConvolutionFilter2D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_convolution,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        341 /* "glConvolutionFilter2D" */,
        342 /* "glConvolutionFilter2DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[341] /* "glConvolutionFilter2D" */,
                                providers, entrypoints);
}

static PFNGLCONVOLUTIONFILTER2DEXTPROC
epoxy_glConvolutionFilter2DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_convolution,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        342 /* "glConvolutionFilter2DEXT" */,
        341 /* "glConvolutionFilter2D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[342] /* "glConvolutionFilter2DEXT" */,
                                providers, entrypoints);
}

static PFNGLCONVOLUTIONPARAMETERFPROC
epoxy_glConvolutionParameterf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_convolution,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        343 /* "glConvolutionParameterf" */,
        344 /* "glConvolutionParameterfEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[343] /* "glConvolutionParameterf" */,
                                providers, entrypoints);
}

static PFNGLCONVOLUTIONPARAMETERFEXTPROC
epoxy_glConvolutionParameterfEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_convolution,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        344 /* "glConvolutionParameterfEXT" */,
        343 /* "glConvolutionParameterf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[344] /* "glConvolutionParameterfEXT" */,
                                providers, entrypoints);
}

static PFNGLCONVOLUTIONPARAMETERFVPROC
epoxy_glConvolutionParameterfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_convolution,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        345 /* "glConvolutionParameterfv" */,
        346 /* "glConvolutionParameterfvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[345] /* "glConvolutionParameterfv" */,
                                providers, entrypoints);
}

static PFNGLCONVOLUTIONPARAMETERFVEXTPROC
epoxy_glConvolutionParameterfvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_convolution,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        346 /* "glConvolutionParameterfvEXT" */,
        345 /* "glConvolutionParameterfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[346] /* "glConvolutionParameterfvEXT" */,
                                providers, entrypoints);
}

static PFNGLCONVOLUTIONPARAMETERIPROC
epoxy_glConvolutionParameteri_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_convolution,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        347 /* "glConvolutionParameteri" */,
        348 /* "glConvolutionParameteriEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[347] /* "glConvolutionParameteri" */,
                                providers, entrypoints);
}

static PFNGLCONVOLUTIONPARAMETERIEXTPROC
epoxy_glConvolutionParameteriEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_convolution,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        348 /* "glConvolutionParameteriEXT" */,
        347 /* "glConvolutionParameteri" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[348] /* "glConvolutionParameteriEXT" */,
                                providers, entrypoints);
}

static PFNGLCONVOLUTIONPARAMETERIVPROC
epoxy_glConvolutionParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_convolution,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        349 /* "glConvolutionParameteriv" */,
        350 /* "glConvolutionParameterivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[349] /* "glConvolutionParameteriv" */,
                                providers, entrypoints);
}

static PFNGLCONVOLUTIONPARAMETERIVEXTPROC
epoxy_glConvolutionParameterivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_convolution,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        350 /* "glConvolutionParameterivEXT" */,
        349 /* "glConvolutionParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[350] /* "glConvolutionParameterivEXT" */,
                                providers, entrypoints);
}

static PFNGLCONVOLUTIONPARAMETERXOESPROC
epoxy_glConvolutionParameterxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 351 /* glConvolutionParameterxOES */);
}

static PFNGLCONVOLUTIONPARAMETERXVOESPROC
epoxy_glConvolutionParameterxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 352 /* glConvolutionParameterxvOES */);
}

static PFNGLCOPYBUFFERSUBDATAPROC
epoxy_glCopyBufferSubData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_copy_buffer,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_copy_buffer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        353 /* "glCopyBufferSubData" */,
        353 /* "glCopyBufferSubData" */,
        353 /* "glCopyBufferSubData" */,
        354 /* "glCopyBufferSubDataNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[353] /* "glCopyBufferSubData" */,
                                providers, entrypoints);
}

static PFNGLCOPYBUFFERSUBDATANVPROC
epoxy_glCopyBufferSubDataNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_copy_buffer,
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_copy_buffer,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        354 /* "glCopyBufferSubDataNV" */,
        353 /* "glCopyBufferSubData" */,
        353 /* "glCopyBufferSubData" */,
        353 /* "glCopyBufferSubData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[354] /* "glCopyBufferSubDataNV" */,
                                providers, entrypoints);
}

static PFNGLCOPYCOLORSUBTABLEPROC
epoxy_glCopyColorSubTable_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_color_subtable,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        355 /* "glCopyColorSubTable" */,
        356 /* "glCopyColorSubTableEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[355] /* "glCopyColorSubTable" */,
                                providers, entrypoints);
}

static PFNGLCOPYCOLORSUBTABLEEXTPROC
epoxy_glCopyColorSubTableEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_color_subtable,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        356 /* "glCopyColorSubTableEXT" */,
        355 /* "glCopyColorSubTable" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[356] /* "glCopyColorSubTableEXT" */,
                                providers, entrypoints);
}

static PFNGLCOPYCOLORTABLEPROC
epoxy_glCopyColorTable_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_SGI_color_table,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        357 /* "glCopyColorTable" */,
        358 /* "glCopyColorTableSGI" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[357] /* "glCopyColorTable" */,
                                providers, entrypoints);
}

static PFNGLCOPYCOLORTABLESGIPROC
epoxy_glCopyColorTableSGI_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_SGI_color_table,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        358 /* "glCopyColorTableSGI" */,
        357 /* "glCopyColorTable" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[358] /* "glCopyColorTableSGI" */,
                                providers, entrypoints);
}

static PFNGLCOPYCONVOLUTIONFILTER1DPROC
epoxy_glCopyConvolutionFilter1D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_convolution,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        359 /* "glCopyConvolutionFilter1D" */,
        360 /* "glCopyConvolutionFilter1DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[359] /* "glCopyConvolutionFilter1D" */,
                                providers, entrypoints);
}

static PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
epoxy_glCopyConvolutionFilter1DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_convolution,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        360 /* "glCopyConvolutionFilter1DEXT" */,
        359 /* "glCopyConvolutionFilter1D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[360] /* "glCopyConvolutionFilter1DEXT" */,
                                providers, entrypoints);
}

static PFNGLCOPYCONVOLUTIONFILTER2DPROC
epoxy_glCopyConvolutionFilter2D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_convolution,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        361 /* "glCopyConvolutionFilter2D" */,
        362 /* "glCopyConvolutionFilter2DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[361] /* "glCopyConvolutionFilter2D" */,
                                providers, entrypoints);
}

static PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
epoxy_glCopyConvolutionFilter2DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_convolution,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        362 /* "glCopyConvolutionFilter2DEXT" */,
        361 /* "glCopyConvolutionFilter2D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[362] /* "glCopyConvolutionFilter2DEXT" */,
                                providers, entrypoints);
}

static PFNGLCOPYIMAGESUBDATAPROC
epoxy_glCopyImageSubData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_copy_image,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_copy_image,
        GL_extension_GL_OES_copy_image,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        363 /* "glCopyImageSubData" */,
        363 /* "glCopyImageSubData" */,
        363 /* "glCopyImageSubData" */,
        364 /* "glCopyImageSubDataEXT" */,
        366 /* "glCopyImageSubDataOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[363] /* "glCopyImageSubData" */,
                                providers, entrypoints);
}

static PFNGLCOPYIMAGESUBDATAEXTPROC
epoxy_glCopyImageSubDataEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_copy_image,
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_copy_image,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_copy_image,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        364 /* "glCopyImageSubDataEXT" */,
        363 /* "glCopyImageSubData" */,
        363 /* "glCopyImageSubData" */,
        363 /* "glCopyImageSubData" */,
        366 /* "glCopyImageSubDataOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[364] /* "glCopyImageSubDataEXT" */,
                                providers, entrypoints);
}

static PFNGLCOPYIMAGESUBDATANVPROC
epoxy_glCopyImageSubDataNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_copy_image, 365 /* glCopyImageSubDataNV */);
}

static PFNGLCOPYIMAGESUBDATAOESPROC
epoxy_glCopyImageSubDataOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_copy_image,
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_copy_image,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_copy_image,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        366 /* "glCopyImageSubDataOES" */,
        363 /* "glCopyImageSubData" */,
        363 /* "glCopyImageSubData" */,
        363 /* "glCopyImageSubData" */,
        364 /* "glCopyImageSubDataEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[366] /* "glCopyImageSubDataOES" */,
                                providers, entrypoints);
}

static PFNGLCOPYMULTITEXIMAGE1DEXTPROC
epoxy_glCopyMultiTexImage1DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 367 /* glCopyMultiTexImage1DEXT */);
}

static PFNGLCOPYMULTITEXIMAGE2DEXTPROC
epoxy_glCopyMultiTexImage2DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 368 /* glCopyMultiTexImage2DEXT */);
}

static PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC
epoxy_glCopyMultiTexSubImage1DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 369 /* glCopyMultiTexSubImage1DEXT */);
}

static PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC
epoxy_glCopyMultiTexSubImage2DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 370 /* glCopyMultiTexSubImage2DEXT */);
}

static PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC
epoxy_glCopyMultiTexSubImage3DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 371 /* glCopyMultiTexSubImage3DEXT */);
}

static PFNGLCOPYNAMEDBUFFERSUBDATAPROC
epoxy_glCopyNamedBufferSubData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        372 /* "glCopyNamedBufferSubData" */,
        372 /* "glCopyNamedBufferSubData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[372] /* "glCopyNamedBufferSubData" */,
                                providers, entrypoints);
}

static PFNGLCOPYPATHNVPROC
epoxy_glCopyPathNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 373 /* glCopyPathNV */);
}

static PFNGLCOPYPIXELSPROC
epoxy_glCopyPixels_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 374 /* glCopyPixels */);
}

static PFNGLCOPYTEXIMAGE1DPROC
epoxy_glCopyTexImage1D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        GL_extension_GL_EXT_copy_texture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        375 /* "glCopyTexImage1D" */,
        376 /* "glCopyTexImage1DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[375] /* "glCopyTexImage1D" */,
                                providers, entrypoints);
}

static PFNGLCOPYTEXIMAGE1DEXTPROC
epoxy_glCopyTexImage1DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_copy_texture,
        Desktop_OpenGL_1_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        376 /* "glCopyTexImage1DEXT" */,
        375 /* "glCopyTexImage1D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[376] /* "glCopyTexImage1DEXT" */,
                                providers, entrypoints);
}

static PFNGLCOPYTEXIMAGE2DPROC
epoxy_glCopyTexImage2D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_copy_texture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        377 /* "glCopyTexImage2D" */,
        377 /* "glCopyTexImage2D" */,
        377 /* "glCopyTexImage2D" */,
        378 /* "glCopyTexImage2DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[377] /* "glCopyTexImage2D" */,
                                providers, entrypoints);
}

static PFNGLCOPYTEXIMAGE2DEXTPROC
epoxy_glCopyTexImage2DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_copy_texture,
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        378 /* "glCopyTexImage2DEXT" */,
        377 /* "glCopyTexImage2D" */,
        377 /* "glCopyTexImage2D" */,
        377 /* "glCopyTexImage2D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[378] /* "glCopyTexImage2DEXT" */,
                                providers, entrypoints);
}

static PFNGLCOPYTEXSUBIMAGE1DPROC
epoxy_glCopyTexSubImage1D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        GL_extension_GL_EXT_copy_texture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        379 /* "glCopyTexSubImage1D" */,
        380 /* "glCopyTexSubImage1DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[379] /* "glCopyTexSubImage1D" */,
                                providers, entrypoints);
}

static PFNGLCOPYTEXSUBIMAGE1DEXTPROC
epoxy_glCopyTexSubImage1DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_copy_texture,
        Desktop_OpenGL_1_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        380 /* "glCopyTexSubImage1DEXT" */,
        379 /* "glCopyTexSubImage1D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[380] /* "glCopyTexSubImage1DEXT" */,
                                providers, entrypoints);
}

static PFNGLCOPYTEXSUBIMAGE2DPROC
epoxy_glCopyTexSubImage2D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_copy_texture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        381 /* "glCopyTexSubImage2D" */,
        381 /* "glCopyTexSubImage2D" */,
        381 /* "glCopyTexSubImage2D" */,
        382 /* "glCopyTexSubImage2DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[381] /* "glCopyTexSubImage2D" */,
                                providers, entrypoints);
}

static PFNGLCOPYTEXSUBIMAGE2DEXTPROC
epoxy_glCopyTexSubImage2DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_copy_texture,
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        382 /* "glCopyTexSubImage2DEXT" */,
        381 /* "glCopyTexSubImage2D" */,
        381 /* "glCopyTexSubImage2D" */,
        381 /* "glCopyTexSubImage2D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[382] /* "glCopyTexSubImage2DEXT" */,
                                providers, entrypoints);
}

static PFNGLCOPYTEXSUBIMAGE3DPROC
epoxy_glCopyTexSubImage3D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_2,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_copy_texture,
        GL_extension_GL_OES_texture_3D,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        383 /* "glCopyTexSubImage3D" */,
        383 /* "glCopyTexSubImage3D" */,
        384 /* "glCopyTexSubImage3DEXT" */,
        385 /* "glCopyTexSubImage3DOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[383] /* "glCopyTexSubImage3D" */,
                                providers, entrypoints);
}

static PFNGLCOPYTEXSUBIMAGE3DEXTPROC
epoxy_glCopyTexSubImage3DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_copy_texture,
        Desktop_OpenGL_1_2,
        OpenGL_ES_3_0,
        GL_extension_GL_OES_texture_3D,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        384 /* "glCopyTexSubImage3DEXT" */,
        383 /* "glCopyTexSubImage3D" */,
        383 /* "glCopyTexSubImage3D" */,
        385 /* "glCopyTexSubImage3DOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[384] /* "glCopyTexSubImage3DEXT" */,
                                providers, entrypoints);
}

static PFNGLCOPYTEXSUBIMAGE3DOESPROC
epoxy_glCopyTexSubImage3DOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_3D,
        Desktop_OpenGL_1_2,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_copy_texture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        385 /* "glCopyTexSubImage3DOES" */,
        383 /* "glCopyTexSubImage3D" */,
        383 /* "glCopyTexSubImage3D" */,
        384 /* "glCopyTexSubImage3DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[385] /* "glCopyTexSubImage3DOES" */,
                                providers, entrypoints);
}

static PFNGLCOPYTEXTUREIMAGE1DEXTPROC
epoxy_glCopyTextureImage1DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 386 /* glCopyTextureImage1DEXT */);
}

static PFNGLCOPYTEXTUREIMAGE2DEXTPROC
epoxy_glCopyTextureImage2DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 387 /* glCopyTextureImage2DEXT */);
}

static PFNGLCOPYTEXTURELEVELSAPPLEPROC
epoxy_glCopyTextureLevelsAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_copy_texture_levels, 388 /* glCopyTextureLevelsAPPLE */);
}

static PFNGLCOPYTEXTURESUBIMAGE1DPROC
epoxy_glCopyTextureSubImage1D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        389 /* "glCopyTextureSubImage1D" */,
        389 /* "glCopyTextureSubImage1D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[389] /* "glCopyTextureSubImage1D" */,
                                providers, entrypoints);
}

static PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC
epoxy_glCopyTextureSubImage1DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 390 /* glCopyTextureSubImage1DEXT */);
}

static PFNGLCOPYTEXTURESUBIMAGE2DPROC
epoxy_glCopyTextureSubImage2D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        391 /* "glCopyTextureSubImage2D" */,
        391 /* "glCopyTextureSubImage2D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[391] /* "glCopyTextureSubImage2D" */,
                                providers, entrypoints);
}

static PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC
epoxy_glCopyTextureSubImage2DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 392 /* glCopyTextureSubImage2DEXT */);
}

static PFNGLCOPYTEXTURESUBIMAGE3DPROC
epoxy_glCopyTextureSubImage3D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        393 /* "glCopyTextureSubImage3D" */,
        393 /* "glCopyTextureSubImage3D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[393] /* "glCopyTextureSubImage3D" */,
                                providers, entrypoints);
}

static PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC
epoxy_glCopyTextureSubImage3DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 394 /* glCopyTextureSubImage3DEXT */);
}

static PFNGLCOVERFILLPATHINSTANCEDNVPROC
epoxy_glCoverFillPathInstancedNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 395 /* glCoverFillPathInstancedNV */);
}

static PFNGLCOVERFILLPATHNVPROC
epoxy_glCoverFillPathNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 396 /* glCoverFillPathNV */);
}

static PFNGLCOVERSTROKEPATHINSTANCEDNVPROC
epoxy_glCoverStrokePathInstancedNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 397 /* glCoverStrokePathInstancedNV */);
}

static PFNGLCOVERSTROKEPATHNVPROC
epoxy_glCoverStrokePathNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 398 /* glCoverStrokePathNV */);
}

static PFNGLCOVERAGEMASKNVPROC
epoxy_glCoverageMaskNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_coverage_sample, 399 /* glCoverageMaskNV */);
}

static PFNGLCOVERAGEMODULATIONNVPROC
epoxy_glCoverageModulationNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_framebuffer_mixed_samples, 400 /* glCoverageModulationNV */);
}

static PFNGLCOVERAGEMODULATIONTABLENVPROC
epoxy_glCoverageModulationTableNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_framebuffer_mixed_samples, 401 /* glCoverageModulationTableNV */);
}

static PFNGLCOVERAGEOPERATIONNVPROC
epoxy_glCoverageOperationNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_coverage_sample, 402 /* glCoverageOperationNV */);
}

static PFNGLCREATEBUFFERSPROC
epoxy_glCreateBuffers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        403 /* "glCreateBuffers" */,
        403 /* "glCreateBuffers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[403] /* "glCreateBuffers" */,
                                providers, entrypoints);
}

static PFNGLCREATECOMMANDLISTSNVPROC
epoxy_glCreateCommandListsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 404 /* glCreateCommandListsNV */);
}

static PFNGLCREATEFRAMEBUFFERSPROC
epoxy_glCreateFramebuffers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        405 /* "glCreateFramebuffers" */,
        405 /* "glCreateFramebuffers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[405] /* "glCreateFramebuffers" */,
                                providers, entrypoints);
}

static PFNGLCREATEPERFQUERYINTELPROC
epoxy_glCreatePerfQueryINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_performance_query, 406 /* glCreatePerfQueryINTEL */);
}

static PFNGLCREATEPROGRAMPROC
epoxy_glCreateProgram_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        407 /* "glCreateProgram" */,
        407 /* "glCreateProgram" */,
        408 /* "glCreateProgramObjectARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[407] /* "glCreateProgram" */,
                                providers, entrypoints);
}

static PFNGLCREATEPROGRAMOBJECTARBPROC
epoxy_glCreateProgramObjectARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        408 /* "glCreateProgramObjectARB" */,
        407 /* "glCreateProgram" */,
        407 /* "glCreateProgram" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[408] /* "glCreateProgramObjectARB" */,
                                providers, entrypoints);
}

static PFNGLCREATEPROGRAMPIPELINESPROC
epoxy_glCreateProgramPipelines_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        409 /* "glCreateProgramPipelines" */,
        409 /* "glCreateProgramPipelines" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[409] /* "glCreateProgramPipelines" */,
                                providers, entrypoints);
}

static PFNGLCREATEQUERIESPROC
epoxy_glCreateQueries_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        410 /* "glCreateQueries" */,
        410 /* "glCreateQueries" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[410] /* "glCreateQueries" */,
                                providers, entrypoints);
}

static PFNGLCREATERENDERBUFFERSPROC
epoxy_glCreateRenderbuffers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        411 /* "glCreateRenderbuffers" */,
        411 /* "glCreateRenderbuffers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[411] /* "glCreateRenderbuffers" */,
                                providers, entrypoints);
}

static PFNGLCREATESAMPLERSPROC
epoxy_glCreateSamplers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        412 /* "glCreateSamplers" */,
        412 /* "glCreateSamplers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[412] /* "glCreateSamplers" */,
                                providers, entrypoints);
}

static PFNGLCREATESHADERPROC
epoxy_glCreateShader_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        413 /* "glCreateShader" */,
        413 /* "glCreateShader" */,
        414 /* "glCreateShaderObjectARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[413] /* "glCreateShader" */,
                                providers, entrypoints);
}

static PFNGLCREATESHADEROBJECTARBPROC
epoxy_glCreateShaderObjectARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        414 /* "glCreateShaderObjectARB" */,
        413 /* "glCreateShader" */,
        413 /* "glCreateShader" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[414] /* "glCreateShaderObjectARB" */,
                                providers, entrypoints);
}

static PFNGLCREATESHADERPROGRAMEXTPROC
epoxy_glCreateShaderProgramEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_separate_shader_objects, 415 /* glCreateShaderProgramEXT */);
}

static PFNGLCREATESHADERPROGRAMVPROC
epoxy_glCreateShaderProgramv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        416 /* "glCreateShaderProgramv" */,
        416 /* "glCreateShaderProgramv" */,
        416 /* "glCreateShaderProgramv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[416] /* "glCreateShaderProgramv" */,
                                providers, entrypoints);
}

static PFNGLCREATESHADERPROGRAMVEXTPROC
epoxy_glCreateShaderProgramvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_separate_shader_objects, 417 /* glCreateShaderProgramvEXT */);
}

static PFNGLCREATESTATESNVPROC
epoxy_glCreateStatesNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 418 /* glCreateStatesNV */);
}

static PFNGLCREATESYNCFROMCLEVENTARBPROC
epoxy_glCreateSyncFromCLeventARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_cl_event, 419 /* glCreateSyncFromCLeventARB */);
}

static PFNGLCREATETEXTURESPROC
epoxy_glCreateTextures_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        420 /* "glCreateTextures" */,
        420 /* "glCreateTextures" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[420] /* "glCreateTextures" */,
                                providers, entrypoints);
}

static PFNGLCREATETRANSFORMFEEDBACKSPROC
epoxy_glCreateTransformFeedbacks_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        421 /* "glCreateTransformFeedbacks" */,
        421 /* "glCreateTransformFeedbacks" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[421] /* "glCreateTransformFeedbacks" */,
                                providers, entrypoints);
}

static PFNGLCREATEVERTEXARRAYSPROC
epoxy_glCreateVertexArrays_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        422 /* "glCreateVertexArrays" */,
        422 /* "glCreateVertexArrays" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[422] /* "glCreateVertexArrays" */,
                                providers, entrypoints);
}

static PFNGLCULLFACEPROC
epoxy_glCullFace_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        423 /* "glCullFace" */,
        423 /* "glCullFace" */,
        423 /* "glCullFace" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[423] /* "glCullFace" */,
                                providers, entrypoints);
}

static PFNGLCULLPARAMETERDVEXTPROC
epoxy_glCullParameterdvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_cull_vertex, 424 /* glCullParameterdvEXT */);
}

static PFNGLCULLPARAMETERFVEXTPROC
epoxy_glCullParameterfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_cull_vertex, 425 /* glCullParameterfvEXT */);
}

static PFNGLCURRENTPALETTEMATRIXARBPROC
epoxy_glCurrentPaletteMatrixARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_matrix_palette, 426 /* glCurrentPaletteMatrixARB */);
}

static PFNGLCURRENTPALETTEMATRIXOESPROC
epoxy_glCurrentPaletteMatrixOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_matrix_palette, 427 /* glCurrentPaletteMatrixOES */);
}

static PFNGLDEBUGMESSAGECALLBACKPROC
epoxy_glDebugMessageCallback_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_debug_output,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        428 /* "glDebugMessageCallback" */,
        428 /* "glDebugMessageCallback" */,
        428 /* "glDebugMessageCallback" */,
        430 /* "glDebugMessageCallbackARB" */,
        431 /* "glDebugMessageCallbackKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[428] /* "glDebugMessageCallback" */,
                                providers, entrypoints);
}

static PFNGLDEBUGMESSAGECALLBACKAMDPROC
epoxy_glDebugMessageCallbackAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_debug_output, 429 /* glDebugMessageCallbackAMD */);
}

static PFNGLDEBUGMESSAGECALLBACKARBPROC
epoxy_glDebugMessageCallbackARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_debug_output,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        430 /* "glDebugMessageCallbackARB" */,
        428 /* "glDebugMessageCallback" */,
        428 /* "glDebugMessageCallback" */,
        428 /* "glDebugMessageCallback" */,
        431 /* "glDebugMessageCallbackKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[430] /* "glDebugMessageCallbackARB" */,
                                providers, entrypoints);
}

static PFNGLDEBUGMESSAGECALLBACKKHRPROC
epoxy_glDebugMessageCallbackKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_debug,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_debug_output,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        431 /* "glDebugMessageCallbackKHR" */,
        428 /* "glDebugMessageCallback" */,
        428 /* "glDebugMessageCallback" */,
        428 /* "glDebugMessageCallback" */,
        430 /* "glDebugMessageCallbackARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[431] /* "glDebugMessageCallbackKHR" */,
                                providers, entrypoints);
}

static PFNGLDEBUGMESSAGECONTROLPROC
epoxy_glDebugMessageControl_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_debug_output,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        432 /* "glDebugMessageControl" */,
        432 /* "glDebugMessageControl" */,
        432 /* "glDebugMessageControl" */,
        433 /* "glDebugMessageControlARB" */,
        434 /* "glDebugMessageControlKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[432] /* "glDebugMessageControl" */,
                                providers, entrypoints);
}

static PFNGLDEBUGMESSAGECONTROLARBPROC
epoxy_glDebugMessageControlARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_debug_output,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        433 /* "glDebugMessageControlARB" */,
        432 /* "glDebugMessageControl" */,
        432 /* "glDebugMessageControl" */,
        432 /* "glDebugMessageControl" */,
        434 /* "glDebugMessageControlKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[433] /* "glDebugMessageControlARB" */,
                                providers, entrypoints);
}

static PFNGLDEBUGMESSAGECONTROLKHRPROC
epoxy_glDebugMessageControlKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_debug,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_debug_output,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        434 /* "glDebugMessageControlKHR" */,
        432 /* "glDebugMessageControl" */,
        432 /* "glDebugMessageControl" */,
        432 /* "glDebugMessageControl" */,
        433 /* "glDebugMessageControlARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[434] /* "glDebugMessageControlKHR" */,
                                providers, entrypoints);
}

static PFNGLDEBUGMESSAGEENABLEAMDPROC
epoxy_glDebugMessageEnableAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_debug_output, 435 /* glDebugMessageEnableAMD */);
}

static PFNGLDEBUGMESSAGEINSERTPROC
epoxy_glDebugMessageInsert_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_debug_output,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        436 /* "glDebugMessageInsert" */,
        436 /* "glDebugMessageInsert" */,
        436 /* "glDebugMessageInsert" */,
        438 /* "glDebugMessageInsertARB" */,
        439 /* "glDebugMessageInsertKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[436] /* "glDebugMessageInsert" */,
                                providers, entrypoints);
}

static PFNGLDEBUGMESSAGEINSERTAMDPROC
epoxy_glDebugMessageInsertAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_debug_output, 437 /* glDebugMessageInsertAMD */);
}

static PFNGLDEBUGMESSAGEINSERTARBPROC
epoxy_glDebugMessageInsertARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_debug_output,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        438 /* "glDebugMessageInsertARB" */,
        436 /* "glDebugMessageInsert" */,
        436 /* "glDebugMessageInsert" */,
        436 /* "glDebugMessageInsert" */,
        439 /* "glDebugMessageInsertKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[438] /* "glDebugMessageInsertARB" */,
                                providers, entrypoints);
}

static PFNGLDEBUGMESSAGEINSERTKHRPROC
epoxy_glDebugMessageInsertKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_debug,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_debug_output,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        439 /* "glDebugMessageInsertKHR" */,
        436 /* "glDebugMessageInsert" */,
        436 /* "glDebugMessageInsert" */,
        436 /* "glDebugMessageInsert" */,
        438 /* "glDebugMessageInsertARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[439] /* "glDebugMessageInsertKHR" */,
                                providers, entrypoints);
}

static PFNGLDEFORMSGIXPROC
epoxy_glDeformSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_polynomial_ffd, 440 /* glDeformSGIX */);
}

static PFNGLDEFORMATIONMAP3DSGIXPROC
epoxy_glDeformationMap3dSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_polynomial_ffd, 441 /* glDeformationMap3dSGIX */);
}

static PFNGLDEFORMATIONMAP3FSGIXPROC
epoxy_glDeformationMap3fSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_polynomial_ffd, 442 /* glDeformationMap3fSGIX */);
}

static PFNGLDELETEASYNCMARKERSSGIXPROC
epoxy_glDeleteAsyncMarkersSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_async, 443 /* glDeleteAsyncMarkersSGIX */);
}

static PFNGLDELETEBUFFERSPROC
epoxy_glDeleteBuffers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        444 /* "glDeleteBuffers" */,
        444 /* "glDeleteBuffers" */,
        444 /* "glDeleteBuffers" */,
        445 /* "glDeleteBuffersARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[444] /* "glDeleteBuffers" */,
                                providers, entrypoints);
}

static PFNGLDELETEBUFFERSARBPROC
epoxy_glDeleteBuffersARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_buffer_object,
        Desktop_OpenGL_1_5,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        445 /* "glDeleteBuffersARB" */,
        444 /* "glDeleteBuffers" */,
        444 /* "glDeleteBuffers" */,
        444 /* "glDeleteBuffers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[445] /* "glDeleteBuffersARB" */,
                                providers, entrypoints);
}

static PFNGLDELETECOMMANDLISTSNVPROC
epoxy_glDeleteCommandListsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 446 /* glDeleteCommandListsNV */);
}

static PFNGLDELETEFENCESAPPLEPROC
epoxy_glDeleteFencesAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_fence, 447 /* glDeleteFencesAPPLE */);
}

static PFNGLDELETEFENCESNVPROC
epoxy_glDeleteFencesNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_fence, 448 /* glDeleteFencesNV */);
}

static PFNGLDELETEFRAGMENTSHADERATIPROC
epoxy_glDeleteFragmentShaderATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_fragment_shader, 449 /* glDeleteFragmentShaderATI */);
}

static PFNGLDELETEFRAMEBUFFERSPROC
epoxy_glDeleteFramebuffers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        450 /* "glDeleteFramebuffers" */,
        450 /* "glDeleteFramebuffers" */,
        450 /* "glDeleteFramebuffers" */,
        451 /* "glDeleteFramebuffersEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[450] /* "glDeleteFramebuffers" */,
                                providers, entrypoints);
}

static PFNGLDELETEFRAMEBUFFERSEXTPROC
epoxy_glDeleteFramebuffersEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        451 /* "glDeleteFramebuffersEXT" */,
        450 /* "glDeleteFramebuffers" */,
        450 /* "glDeleteFramebuffers" */,
        450 /* "glDeleteFramebuffers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[451] /* "glDeleteFramebuffersEXT" */,
                                providers, entrypoints);
}

static PFNGLDELETEFRAMEBUFFERSOESPROC
epoxy_glDeleteFramebuffersOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_framebuffer_object, 452 /* glDeleteFramebuffersOES */);
}

static PFNGLDELETELISTSPROC
epoxy_glDeleteLists_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 453 /* glDeleteLists */);
}

static PFNGLDELETENAMEDSTRINGARBPROC
epoxy_glDeleteNamedStringARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_shading_language_include, 454 /* glDeleteNamedStringARB */);
}

static PFNGLDELETENAMESAMDPROC
epoxy_glDeleteNamesAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_name_gen_delete, 455 /* glDeleteNamesAMD */);
}

static PFNGLDELETEOBJECTARBPROC
epoxy_glDeleteObjectARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_shader_objects, 456 /* glDeleteObjectARB */);
}

static PFNGLDELETEOCCLUSIONQUERIESNVPROC
epoxy_glDeleteOcclusionQueriesNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_occlusion_query, 457 /* glDeleteOcclusionQueriesNV */);
}

static PFNGLDELETEPATHSNVPROC
epoxy_glDeletePathsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 458 /* glDeletePathsNV */);
}

static PFNGLDELETEPERFMONITORSAMDPROC
epoxy_glDeletePerfMonitorsAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_performance_monitor, 459 /* glDeletePerfMonitorsAMD */);
}

static PFNGLDELETEPERFQUERYINTELPROC
epoxy_glDeletePerfQueryINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_performance_query, 460 /* glDeletePerfQueryINTEL */);
}

static PFNGLDELETEPROGRAMPROC
epoxy_glDeleteProgram_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        461 /* "glDeleteProgram" */,
        461 /* "glDeleteProgram" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[461] /* "glDeleteProgram" */,
                                providers, entrypoints);
}

static PFNGLDELETEPROGRAMPIPELINESPROC
epoxy_glDeleteProgramPipelines_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        462 /* "glDeleteProgramPipelines" */,
        462 /* "glDeleteProgramPipelines" */,
        462 /* "glDeleteProgramPipelines" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[462] /* "glDeleteProgramPipelines" */,
                                providers, entrypoints);
}

static PFNGLDELETEPROGRAMPIPELINESEXTPROC
epoxy_glDeleteProgramPipelinesEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_separate_shader_objects, 463 /* glDeleteProgramPipelinesEXT */);
}

static PFNGLDELETEPROGRAMSARBPROC
epoxy_glDeleteProgramsARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        464 /* "glDeleteProgramsARB" */,
        464 /* "glDeleteProgramsARB" */,
        465 /* "glDeleteProgramsNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[464] /* "glDeleteProgramsARB" */,
                                providers, entrypoints);
}

static PFNGLDELETEPROGRAMSNVPROC
epoxy_glDeleteProgramsNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        465 /* "glDeleteProgramsNV" */,
        464 /* "glDeleteProgramsARB" */,
        464 /* "glDeleteProgramsARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[465] /* "glDeleteProgramsNV" */,
                                providers, entrypoints);
}

static PFNGLDELETEQUERIESPROC
epoxy_glDeleteQueries_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_occlusion_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        466 /* "glDeleteQueries" */,
        466 /* "glDeleteQueries" */,
        467 /* "glDeleteQueriesARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[466] /* "glDeleteQueries" */,
                                providers, entrypoints);
}

static PFNGLDELETEQUERIESARBPROC
epoxy_glDeleteQueriesARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_occlusion_query,
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        467 /* "glDeleteQueriesARB" */,
        466 /* "glDeleteQueries" */,
        466 /* "glDeleteQueries" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[467] /* "glDeleteQueriesARB" */,
                                providers, entrypoints);
}

static PFNGLDELETEQUERIESEXTPROC
epoxy_glDeleteQueriesEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_disjoint_timer_query,
        GL_extension_GL_EXT_occlusion_query_boolean,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        468 /* "glDeleteQueriesEXT" */,
        468 /* "glDeleteQueriesEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[468] /* "glDeleteQueriesEXT" */,
                                providers, entrypoints);
}

static PFNGLDELETERENDERBUFFERSPROC
epoxy_glDeleteRenderbuffers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        469 /* "glDeleteRenderbuffers" */,
        469 /* "glDeleteRenderbuffers" */,
        469 /* "glDeleteRenderbuffers" */,
        470 /* "glDeleteRenderbuffersEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[469] /* "glDeleteRenderbuffers" */,
                                providers, entrypoints);
}

static PFNGLDELETERENDERBUFFERSEXTPROC
epoxy_glDeleteRenderbuffersEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        470 /* "glDeleteRenderbuffersEXT" */,
        469 /* "glDeleteRenderbuffers" */,
        469 /* "glDeleteRenderbuffers" */,
        469 /* "glDeleteRenderbuffers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[470] /* "glDeleteRenderbuffersEXT" */,
                                providers, entrypoints);
}

static PFNGLDELETERENDERBUFFERSOESPROC
epoxy_glDeleteRenderbuffersOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_framebuffer_object, 471 /* glDeleteRenderbuffersOES */);
}

static PFNGLDELETESAMPLERSPROC
epoxy_glDeleteSamplers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        472 /* "glDeleteSamplers" */,
        472 /* "glDeleteSamplers" */,
        472 /* "glDeleteSamplers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[472] /* "glDeleteSamplers" */,
                                providers, entrypoints);
}

static PFNGLDELETESHADERPROC
epoxy_glDeleteShader_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        473 /* "glDeleteShader" */,
        473 /* "glDeleteShader" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[473] /* "glDeleteShader" */,
                                providers, entrypoints);
}

static PFNGLDELETESTATESNVPROC
epoxy_glDeleteStatesNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 474 /* glDeleteStatesNV */);
}

static PFNGLDELETESYNCPROC
epoxy_glDeleteSync_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_sync,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_sync,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        475 /* "glDeleteSync" */,
        475 /* "glDeleteSync" */,
        475 /* "glDeleteSync" */,
        476 /* "glDeleteSyncAPPLE" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[475] /* "glDeleteSync" */,
                                providers, entrypoints);
}

static PFNGLDELETESYNCAPPLEPROC
epoxy_glDeleteSyncAPPLE_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_APPLE_sync,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_sync,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        476 /* "glDeleteSyncAPPLE" */,
        475 /* "glDeleteSync" */,
        475 /* "glDeleteSync" */,
        475 /* "glDeleteSync" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[476] /* "glDeleteSyncAPPLE" */,
                                providers, entrypoints);
}

static PFNGLDELETETEXTURESPROC
epoxy_glDeleteTextures_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        477 /* "glDeleteTextures" */,
        477 /* "glDeleteTextures" */,
        477 /* "glDeleteTextures" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[477] /* "glDeleteTextures" */,
                                providers, entrypoints);
}

static PFNGLDELETETEXTURESEXTPROC
epoxy_glDeleteTexturesEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_texture_object, 478 /* glDeleteTexturesEXT */);
}

static PFNGLDELETETRANSFORMFEEDBACKSPROC
epoxy_glDeleteTransformFeedbacks_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback2,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_transform_feedback2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        479 /* "glDeleteTransformFeedbacks" */,
        479 /* "glDeleteTransformFeedbacks" */,
        479 /* "glDeleteTransformFeedbacks" */,
        480 /* "glDeleteTransformFeedbacksNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[479] /* "glDeleteTransformFeedbacks" */,
                                providers, entrypoints);
}

static PFNGLDELETETRANSFORMFEEDBACKSNVPROC
epoxy_glDeleteTransformFeedbacksNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_transform_feedback2,
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback2,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        480 /* "glDeleteTransformFeedbacksNV" */,
        479 /* "glDeleteTransformFeedbacks" */,
        479 /* "glDeleteTransformFeedbacks" */,
        479 /* "glDeleteTransformFeedbacks" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[480] /* "glDeleteTransformFeedbacksNV" */,
                                providers, entrypoints);
}

static PFNGLDELETEVERTEXARRAYSPROC
epoxy_glDeleteVertexArrays_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_vertex_array_object,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_vertex_array_object,
        GL_extension_GL_OES_vertex_array_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        481 /* "glDeleteVertexArrays" */,
        481 /* "glDeleteVertexArrays" */,
        481 /* "glDeleteVertexArrays" */,
        482 /* "glDeleteVertexArraysAPPLE" */,
        483 /* "glDeleteVertexArraysOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[481] /* "glDeleteVertexArrays" */,
                                providers, entrypoints);
}

static PFNGLDELETEVERTEXARRAYSAPPLEPROC
epoxy_glDeleteVertexArraysAPPLE_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_APPLE_vertex_array_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_vertex_array_object,
        OpenGL_ES_3_0,
        GL_extension_GL_OES_vertex_array_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        482 /* "glDeleteVertexArraysAPPLE" */,
        481 /* "glDeleteVertexArrays" */,
        481 /* "glDeleteVertexArrays" */,
        481 /* "glDeleteVertexArrays" */,
        483 /* "glDeleteVertexArraysOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[482] /* "glDeleteVertexArraysAPPLE" */,
                                providers, entrypoints);
}

static PFNGLDELETEVERTEXARRAYSOESPROC
epoxy_glDeleteVertexArraysOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_vertex_array_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_vertex_array_object,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_vertex_array_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        483 /* "glDeleteVertexArraysOES" */,
        481 /* "glDeleteVertexArrays" */,
        481 /* "glDeleteVertexArrays" */,
        481 /* "glDeleteVertexArrays" */,
        482 /* "glDeleteVertexArraysAPPLE" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[483] /* "glDeleteVertexArraysOES" */,
                                providers, entrypoints);
}

static PFNGLDELETEVERTEXSHADEREXTPROC
epoxy_glDeleteVertexShaderEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 484 /* glDeleteVertexShaderEXT */);
}

static PFNGLDEPTHBOUNDSEXTPROC
epoxy_glDepthBoundsEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_depth_bounds_test, 485 /* glDepthBoundsEXT */);
}

static PFNGLDEPTHBOUNDSDNVPROC
epoxy_glDepthBoundsdNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_depth_buffer_float, 486 /* glDepthBoundsdNV */);
}

static PFNGLDEPTHFUNCPROC
epoxy_glDepthFunc_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        487 /* "glDepthFunc" */,
        487 /* "glDepthFunc" */,
        487 /* "glDepthFunc" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[487] /* "glDepthFunc" */,
                                providers, entrypoints);
}

static PFNGLDEPTHMASKPROC
epoxy_glDepthMask_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        488 /* "glDepthMask" */,
        488 /* "glDepthMask" */,
        488 /* "glDepthMask" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[488] /* "glDepthMask" */,
                                providers, entrypoints);
}

static PFNGLDEPTHRANGEPROC
epoxy_glDepthRange_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 489 /* glDepthRange */);
}

static PFNGLDEPTHRANGEARRAYFVNVPROC
epoxy_glDepthRangeArrayfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_viewport_array, 490 /* glDepthRangeArrayfvNV */);
}

static PFNGLDEPTHRANGEARRAYVPROC
epoxy_glDepthRangeArrayv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        491 /* "glDepthRangeArrayv" */,
        491 /* "glDepthRangeArrayv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[491] /* "glDepthRangeArrayv" */,
                                providers, entrypoints);
}

static PFNGLDEPTHRANGEINDEXEDPROC
epoxy_glDepthRangeIndexed_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        492 /* "glDepthRangeIndexed" */,
        492 /* "glDepthRangeIndexed" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[492] /* "glDepthRangeIndexed" */,
                                providers, entrypoints);
}

static PFNGLDEPTHRANGEINDEXEDFNVPROC
epoxy_glDepthRangeIndexedfNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_viewport_array, 493 /* glDepthRangeIndexedfNV */);
}

static PFNGLDEPTHRANGEDNVPROC
epoxy_glDepthRangedNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_depth_buffer_float, 494 /* glDepthRangedNV */);
}

static PFNGLDEPTHRANGEFPROC
epoxy_glDepthRangef_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_ES2_compatibility,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_OES_single_precision,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        495 /* "glDepthRangef" */,
        495 /* "glDepthRangef" */,
        495 /* "glDepthRangef" */,
        495 /* "glDepthRangef" */,
        496 /* "glDepthRangefOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[495] /* "glDepthRangef" */,
                                providers, entrypoints);
}

static PFNGLDEPTHRANGEFOESPROC
epoxy_glDepthRangefOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_single_precision,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_ES2_compatibility,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        496 /* "glDepthRangefOES" */,
        495 /* "glDepthRangef" */,
        495 /* "glDepthRangef" */,
        495 /* "glDepthRangef" */,
        495 /* "glDepthRangef" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[496] /* "glDepthRangefOES" */,
                                providers, entrypoints);
}

static PFNGLDEPTHRANGEXPROC
epoxy_glDepthRangex_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 497 /* glDepthRangex */);
}

static PFNGLDEPTHRANGEXOESPROC
epoxy_glDepthRangexOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 498 /* glDepthRangexOES */);
}

static PFNGLDETACHOBJECTARBPROC
epoxy_glDetachObjectARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        499 /* "glDetachObjectARB" */,
        500 /* "glDetachShader" */,
        500 /* "glDetachShader" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[499] /* "glDetachObjectARB" */,
                                providers, entrypoints);
}

static PFNGLDETACHSHADERPROC
epoxy_glDetachShader_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        500 /* "glDetachShader" */,
        500 /* "glDetachShader" */,
        499 /* "glDetachObjectARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[500] /* "glDetachShader" */,
                                providers, entrypoints);
}

static PFNGLDETAILTEXFUNCSGISPROC
epoxy_glDetailTexFuncSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_detail_texture, 501 /* glDetailTexFuncSGIS */);
}

static PFNGLDISABLEPROC
epoxy_glDisable_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        502 /* "glDisable" */,
        502 /* "glDisable" */,
        502 /* "glDisable" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[502] /* "glDisable" */,
                                providers, entrypoints);
}

static PFNGLDISABLECLIENTSTATEPROC
epoxy_glDisableClientState_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        503 /* "glDisableClientState" */,
        503 /* "glDisableClientState" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[503] /* "glDisableClientState" */,
                                providers, entrypoints);
}

static PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
epoxy_glDisableClientStateIndexedEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 504 /* glDisableClientStateIndexedEXT */);
}

static PFNGLDISABLECLIENTSTATEIEXTPROC
epoxy_glDisableClientStateiEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 505 /* glDisableClientStateiEXT */);
}

static PFNGLDISABLEDRIVERCONTROLQCOMPROC
epoxy_glDisableDriverControlQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_driver_control, 506 /* glDisableDriverControlQCOM */);
}

static PFNGLDISABLEINDEXEDEXTPROC
epoxy_glDisableIndexedEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_NV_viewport_array,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        507 /* "glDisableIndexedEXT" */,
        507 /* "glDisableIndexedEXT" */,
        515 /* "glDisablei" */,
        515 /* "glDisablei" */,
        516 /* "glDisableiEXT" */,
        517 /* "glDisableiNV" */,
        518 /* "glDisableiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[507] /* "glDisableIndexedEXT" */,
                                providers, entrypoints);
}

static PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
epoxy_glDisableVariantClientStateEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 508 /* glDisableVariantClientStateEXT */);
}

static PFNGLDISABLEVERTEXARRAYATTRIBPROC
epoxy_glDisableVertexArrayAttrib_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        509 /* "glDisableVertexArrayAttrib" */,
        509 /* "glDisableVertexArrayAttrib" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[509] /* "glDisableVertexArrayAttrib" */,
                                providers, entrypoints);
}

static PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC
epoxy_glDisableVertexArrayAttribEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 510 /* glDisableVertexArrayAttribEXT */);
}

static PFNGLDISABLEVERTEXARRAYEXTPROC
epoxy_glDisableVertexArrayEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 511 /* glDisableVertexArrayEXT */);
}

static PFNGLDISABLEVERTEXATTRIBAPPLEPROC
epoxy_glDisableVertexAttribAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_vertex_program_evaluators, 512 /* glDisableVertexAttribAPPLE */);
}

static PFNGLDISABLEVERTEXATTRIBARRAYPROC
epoxy_glDisableVertexAttribArray_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        513 /* "glDisableVertexAttribArray" */,
        513 /* "glDisableVertexAttribArray" */,
        514 /* "glDisableVertexAttribArrayARB" */,
        514 /* "glDisableVertexAttribArrayARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[513] /* "glDisableVertexAttribArray" */,
                                providers, entrypoints);
}

static PFNGLDISABLEVERTEXATTRIBARRAYARBPROC
epoxy_glDisableVertexAttribArrayARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        514 /* "glDisableVertexAttribArrayARB" */,
        514 /* "glDisableVertexAttribArrayARB" */,
        513 /* "glDisableVertexAttribArray" */,
        513 /* "glDisableVertexAttribArray" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[514] /* "glDisableVertexAttribArrayARB" */,
                                providers, entrypoints);
}

static PFNGLDISABLEIPROC
epoxy_glDisablei_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_NV_viewport_array,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        515 /* "glDisablei" */,
        515 /* "glDisablei" */,
        507 /* "glDisableIndexedEXT" */,
        507 /* "glDisableIndexedEXT" */,
        516 /* "glDisableiEXT" */,
        517 /* "glDisableiNV" */,
        518 /* "glDisableiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[515] /* "glDisablei" */,
                                providers, entrypoints);
}

static PFNGLDISABLEIEXTPROC
epoxy_glDisableiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_NV_viewport_array,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        516 /* "glDisableiEXT" */,
        507 /* "glDisableIndexedEXT" */,
        507 /* "glDisableIndexedEXT" */,
        515 /* "glDisablei" */,
        515 /* "glDisablei" */,
        517 /* "glDisableiNV" */,
        518 /* "glDisableiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[516] /* "glDisableiEXT" */,
                                providers, entrypoints);
}

static PFNGLDISABLEINVPROC
epoxy_glDisableiNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_viewport_array,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        517 /* "glDisableiNV" */,
        507 /* "glDisableIndexedEXT" */,
        507 /* "glDisableIndexedEXT" */,
        515 /* "glDisablei" */,
        515 /* "glDisablei" */,
        516 /* "glDisableiEXT" */,
        518 /* "glDisableiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[517] /* "glDisableiNV" */,
                                providers, entrypoints);
}

static PFNGLDISABLEIOESPROC
epoxy_glDisableiOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_draw_buffers_indexed,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_NV_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        518 /* "glDisableiOES" */,
        507 /* "glDisableIndexedEXT" */,
        507 /* "glDisableIndexedEXT" */,
        515 /* "glDisablei" */,
        515 /* "glDisablei" */,
        516 /* "glDisableiEXT" */,
        517 /* "glDisableiNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[518] /* "glDisableiOES" */,
                                providers, entrypoints);
}

static PFNGLDISCARDFRAMEBUFFEREXTPROC
epoxy_glDiscardFramebufferEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_discard_framebuffer, 519 /* glDiscardFramebufferEXT */);
}

static PFNGLDISPATCHCOMPUTEPROC
epoxy_glDispatchCompute_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_compute_shader,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        520 /* "glDispatchCompute" */,
        520 /* "glDispatchCompute" */,
        520 /* "glDispatchCompute" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[520] /* "glDispatchCompute" */,
                                providers, entrypoints);
}

static PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC
epoxy_glDispatchComputeGroupSizeARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_compute_variable_group_size, 521 /* glDispatchComputeGroupSizeARB */);
}

static PFNGLDISPATCHCOMPUTEINDIRECTPROC
epoxy_glDispatchComputeIndirect_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_compute_shader,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        522 /* "glDispatchComputeIndirect" */,
        522 /* "glDispatchComputeIndirect" */,
        522 /* "glDispatchComputeIndirect" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[522] /* "glDispatchComputeIndirect" */,
                                providers, entrypoints);
}

static PFNGLDRAWARRAYSPROC
epoxy_glDrawArrays_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_vertex_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        523 /* "glDrawArrays" */,
        523 /* "glDrawArrays" */,
        523 /* "glDrawArrays" */,
        524 /* "glDrawArraysEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[523] /* "glDrawArrays" */,
                                providers, entrypoints);
}

static PFNGLDRAWARRAYSEXTPROC
epoxy_glDrawArraysEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_vertex_array,
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        524 /* "glDrawArraysEXT" */,
        523 /* "glDrawArrays" */,
        523 /* "glDrawArrays" */,
        523 /* "glDrawArrays" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[524] /* "glDrawArraysEXT" */,
                                providers, entrypoints);
}

static PFNGLDRAWARRAYSINDIRECTPROC
epoxy_glDrawArraysIndirect_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_draw_indirect,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        525 /* "glDrawArraysIndirect" */,
        525 /* "glDrawArraysIndirect" */,
        525 /* "glDrawArraysIndirect" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[525] /* "glDrawArraysIndirect" */,
                                providers, entrypoints);
}

static PFNGLDRAWARRAYSINSTANCEDPROC
epoxy_glDrawArraysInstanced_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_1,
        OpenGL_ES_3_0,
        GL_extension_GL_ANGLE_instanced_arrays,
        GL_extension_GL_ARB_draw_instanced,
        GL_extension_GL_EXT_draw_instanced,
        GL_extension_GL_EXT_instanced_arrays,
        GL_extension_GL_NV_draw_instanced,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        526 /* "glDrawArraysInstanced" */,
        526 /* "glDrawArraysInstanced" */,
        527 /* "glDrawArraysInstancedANGLE" */,
        528 /* "glDrawArraysInstancedARB" */,
        531 /* "glDrawArraysInstancedEXT" */,
        531 /* "glDrawArraysInstancedEXT" */,
        532 /* "glDrawArraysInstancedNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[526] /* "glDrawArraysInstanced" */,
                                providers, entrypoints);
}

static PFNGLDRAWARRAYSINSTANCEDANGLEPROC
epoxy_glDrawArraysInstancedANGLE_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ANGLE_instanced_arrays,
        Desktop_OpenGL_3_1,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_draw_instanced,
        GL_extension_GL_EXT_draw_instanced,
        GL_extension_GL_EXT_instanced_arrays,
        GL_extension_GL_NV_draw_instanced,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        527 /* "glDrawArraysInstancedANGLE" */,
        526 /* "glDrawArraysInstanced" */,
        526 /* "glDrawArraysInstanced" */,
        528 /* "glDrawArraysInstancedARB" */,
        531 /* "glDrawArraysInstancedEXT" */,
        531 /* "glDrawArraysInstancedEXT" */,
        532 /* "glDrawArraysInstancedNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[527] /* "glDrawArraysInstancedANGLE" */,
                                providers, entrypoints);
}

static PFNGLDRAWARRAYSINSTANCEDARBPROC
epoxy_glDrawArraysInstancedARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_draw_instanced,
        Desktop_OpenGL_3_1,
        OpenGL_ES_3_0,
        GL_extension_GL_ANGLE_instanced_arrays,
        GL_extension_GL_EXT_draw_instanced,
        GL_extension_GL_EXT_instanced_arrays,
        GL_extension_GL_NV_draw_instanced,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        528 /* "glDrawArraysInstancedARB" */,
        526 /* "glDrawArraysInstanced" */,
        526 /* "glDrawArraysInstanced" */,
        527 /* "glDrawArraysInstancedANGLE" */,
        531 /* "glDrawArraysInstancedEXT" */,
        531 /* "glDrawArraysInstancedEXT" */,
        532 /* "glDrawArraysInstancedNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[528] /* "glDrawArraysInstancedARB" */,
                                providers, entrypoints);
}

static PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
epoxy_glDrawArraysInstancedBaseInstance_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_base_instance,
        GL_extension_GL_EXT_base_instance,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        529 /* "glDrawArraysInstancedBaseInstance" */,
        529 /* "glDrawArraysInstancedBaseInstance" */,
        530 /* "glDrawArraysInstancedBaseInstanceEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[529] /* "glDrawArraysInstancedBaseInstance" */,
                                providers, entrypoints);
}

static PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC
epoxy_glDrawArraysInstancedBaseInstanceEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_base_instance,
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_base_instance,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        530 /* "glDrawArraysInstancedBaseInstanceEXT" */,
        529 /* "glDrawArraysInstancedBaseInstance" */,
        529 /* "glDrawArraysInstancedBaseInstance" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[530] /* "glDrawArraysInstancedBaseInstanceEXT" */,
                                providers, entrypoints);
}

static PFNGLDRAWARRAYSINSTANCEDEXTPROC
epoxy_glDrawArraysInstancedEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_instanced,
        GL_extension_GL_EXT_instanced_arrays,
        Desktop_OpenGL_3_1,
        OpenGL_ES_3_0,
        GL_extension_GL_ANGLE_instanced_arrays,
        GL_extension_GL_ARB_draw_instanced,
        GL_extension_GL_NV_draw_instanced,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        531 /* "glDrawArraysInstancedEXT" */,
        531 /* "glDrawArraysInstancedEXT" */,
        526 /* "glDrawArraysInstanced" */,
        526 /* "glDrawArraysInstanced" */,
        527 /* "glDrawArraysInstancedANGLE" */,
        528 /* "glDrawArraysInstancedARB" */,
        532 /* "glDrawArraysInstancedNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[531] /* "glDrawArraysInstancedEXT" */,
                                providers, entrypoints);
}

static PFNGLDRAWARRAYSINSTANCEDNVPROC
epoxy_glDrawArraysInstancedNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_draw_instanced,
        Desktop_OpenGL_3_1,
        OpenGL_ES_3_0,
        GL_extension_GL_ANGLE_instanced_arrays,
        GL_extension_GL_ARB_draw_instanced,
        GL_extension_GL_EXT_draw_instanced,
        GL_extension_GL_EXT_instanced_arrays,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        532 /* "glDrawArraysInstancedNV" */,
        526 /* "glDrawArraysInstanced" */,
        526 /* "glDrawArraysInstanced" */,
        527 /* "glDrawArraysInstancedANGLE" */,
        528 /* "glDrawArraysInstancedARB" */,
        531 /* "glDrawArraysInstancedEXT" */,
        531 /* "glDrawArraysInstancedEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[532] /* "glDrawArraysInstancedNV" */,
                                providers, entrypoints);
}

static PFNGLDRAWBUFFERPROC
epoxy_glDrawBuffer_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 533 /* glDrawBuffer */);
}

static PFNGLDRAWBUFFERSPROC
epoxy_glDrawBuffers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_draw_buffers,
        GL_extension_GL_ATI_draw_buffers,
        GL_extension_GL_EXT_draw_buffers,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        534 /* "glDrawBuffers" */,
        534 /* "glDrawBuffers" */,
        535 /* "glDrawBuffersARB" */,
        536 /* "glDrawBuffersATI" */,
        537 /* "glDrawBuffersEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[534] /* "glDrawBuffers" */,
                                providers, entrypoints);
}

static PFNGLDRAWBUFFERSARBPROC
epoxy_glDrawBuffersARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_draw_buffers,
        Desktop_OpenGL_2_0,
        OpenGL_ES_3_0,
        GL_extension_GL_ATI_draw_buffers,
        GL_extension_GL_EXT_draw_buffers,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        535 /* "glDrawBuffersARB" */,
        534 /* "glDrawBuffers" */,
        534 /* "glDrawBuffers" */,
        536 /* "glDrawBuffersATI" */,
        537 /* "glDrawBuffersEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[535] /* "glDrawBuffersARB" */,
                                providers, entrypoints);
}

static PFNGLDRAWBUFFERSATIPROC
epoxy_glDrawBuffersATI_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ATI_draw_buffers,
        Desktop_OpenGL_2_0,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_draw_buffers,
        GL_extension_GL_EXT_draw_buffers,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        536 /* "glDrawBuffersATI" */,
        534 /* "glDrawBuffers" */,
        534 /* "glDrawBuffers" */,
        535 /* "glDrawBuffersARB" */,
        537 /* "glDrawBuffersEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[536] /* "glDrawBuffersATI" */,
                                providers, entrypoints);
}

static PFNGLDRAWBUFFERSEXTPROC
epoxy_glDrawBuffersEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_buffers,
        Desktop_OpenGL_2_0,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_draw_buffers,
        GL_extension_GL_ATI_draw_buffers,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        537 /* "glDrawBuffersEXT" */,
        534 /* "glDrawBuffers" */,
        534 /* "glDrawBuffers" */,
        535 /* "glDrawBuffersARB" */,
        536 /* "glDrawBuffersATI" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[537] /* "glDrawBuffersEXT" */,
                                providers, entrypoints);
}

static PFNGLDRAWBUFFERSINDEXEDEXTPROC
epoxy_glDrawBuffersIndexedEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_multiview_draw_buffers, 538 /* glDrawBuffersIndexedEXT */);
}

static PFNGLDRAWBUFFERSNVPROC
epoxy_glDrawBuffersNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_draw_buffers, 539 /* glDrawBuffersNV */);
}

static PFNGLDRAWCOMMANDSADDRESSNVPROC
epoxy_glDrawCommandsAddressNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 540 /* glDrawCommandsAddressNV */);
}

static PFNGLDRAWCOMMANDSNVPROC
epoxy_glDrawCommandsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 541 /* glDrawCommandsNV */);
}

static PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC
epoxy_glDrawCommandsStatesAddressNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 542 /* glDrawCommandsStatesAddressNV */);
}

static PFNGLDRAWCOMMANDSSTATESNVPROC
epoxy_glDrawCommandsStatesNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 543 /* glDrawCommandsStatesNV */);
}

static PFNGLDRAWELEMENTARRAYAPPLEPROC
epoxy_glDrawElementArrayAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_element_array, 544 /* glDrawElementArrayAPPLE */);
}

static PFNGLDRAWELEMENTARRAYATIPROC
epoxy_glDrawElementArrayATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_element_array, 545 /* glDrawElementArrayATI */);
}

static PFNGLDRAWELEMENTSPROC
epoxy_glDrawElements_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        546 /* "glDrawElements" */,
        546 /* "glDrawElements" */,
        546 /* "glDrawElements" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[546] /* "glDrawElements" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSBASEVERTEXPROC
epoxy_glDrawElementsBaseVertex_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_draw_elements_base_vertex,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_elements_base_vertex,
        GL_extension_GL_OES_draw_elements_base_vertex,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        547 /* "glDrawElementsBaseVertex" */,
        547 /* "glDrawElementsBaseVertex" */,
        547 /* "glDrawElementsBaseVertex" */,
        548 /* "glDrawElementsBaseVertexEXT" */,
        549 /* "glDrawElementsBaseVertexOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[547] /* "glDrawElementsBaseVertex" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSBASEVERTEXEXTPROC
epoxy_glDrawElementsBaseVertexEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_elements_base_vertex,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_draw_elements_base_vertex,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_draw_elements_base_vertex,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        548 /* "glDrawElementsBaseVertexEXT" */,
        547 /* "glDrawElementsBaseVertex" */,
        547 /* "glDrawElementsBaseVertex" */,
        547 /* "glDrawElementsBaseVertex" */,
        549 /* "glDrawElementsBaseVertexOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[548] /* "glDrawElementsBaseVertexEXT" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSBASEVERTEXOESPROC
epoxy_glDrawElementsBaseVertexOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_draw_elements_base_vertex,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_draw_elements_base_vertex,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_elements_base_vertex,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        549 /* "glDrawElementsBaseVertexOES" */,
        547 /* "glDrawElementsBaseVertex" */,
        547 /* "glDrawElementsBaseVertex" */,
        547 /* "glDrawElementsBaseVertex" */,
        548 /* "glDrawElementsBaseVertexEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[549] /* "glDrawElementsBaseVertexOES" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSINDIRECTPROC
epoxy_glDrawElementsIndirect_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_draw_indirect,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        550 /* "glDrawElementsIndirect" */,
        550 /* "glDrawElementsIndirect" */,
        550 /* "glDrawElementsIndirect" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[550] /* "glDrawElementsIndirect" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSINSTANCEDPROC
epoxy_glDrawElementsInstanced_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_1,
        OpenGL_ES_3_0,
        GL_extension_GL_ANGLE_instanced_arrays,
        GL_extension_GL_ARB_draw_instanced,
        GL_extension_GL_EXT_draw_instanced,
        GL_extension_GL_EXT_instanced_arrays,
        GL_extension_GL_NV_draw_instanced,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        551 /* "glDrawElementsInstanced" */,
        551 /* "glDrawElementsInstanced" */,
        552 /* "glDrawElementsInstancedANGLE" */,
        553 /* "glDrawElementsInstancedARB" */,
        561 /* "glDrawElementsInstancedEXT" */,
        561 /* "glDrawElementsInstancedEXT" */,
        562 /* "glDrawElementsInstancedNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[551] /* "glDrawElementsInstanced" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSINSTANCEDANGLEPROC
epoxy_glDrawElementsInstancedANGLE_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ANGLE_instanced_arrays,
        Desktop_OpenGL_3_1,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_draw_instanced,
        GL_extension_GL_EXT_draw_instanced,
        GL_extension_GL_EXT_instanced_arrays,
        GL_extension_GL_NV_draw_instanced,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        552 /* "glDrawElementsInstancedANGLE" */,
        551 /* "glDrawElementsInstanced" */,
        551 /* "glDrawElementsInstanced" */,
        553 /* "glDrawElementsInstancedARB" */,
        561 /* "glDrawElementsInstancedEXT" */,
        561 /* "glDrawElementsInstancedEXT" */,
        562 /* "glDrawElementsInstancedNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[552] /* "glDrawElementsInstancedANGLE" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSINSTANCEDARBPROC
epoxy_glDrawElementsInstancedARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_draw_instanced,
        Desktop_OpenGL_3_1,
        OpenGL_ES_3_0,
        GL_extension_GL_ANGLE_instanced_arrays,
        GL_extension_GL_EXT_draw_instanced,
        GL_extension_GL_EXT_instanced_arrays,
        GL_extension_GL_NV_draw_instanced,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        553 /* "glDrawElementsInstancedARB" */,
        551 /* "glDrawElementsInstanced" */,
        551 /* "glDrawElementsInstanced" */,
        552 /* "glDrawElementsInstancedANGLE" */,
        561 /* "glDrawElementsInstancedEXT" */,
        561 /* "glDrawElementsInstancedEXT" */,
        562 /* "glDrawElementsInstancedNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[553] /* "glDrawElementsInstancedARB" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
epoxy_glDrawElementsInstancedBaseInstance_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_base_instance,
        GL_extension_GL_EXT_base_instance,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        554 /* "glDrawElementsInstancedBaseInstance" */,
        554 /* "glDrawElementsInstancedBaseInstance" */,
        555 /* "glDrawElementsInstancedBaseInstanceEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[554] /* "glDrawElementsInstancedBaseInstance" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC
epoxy_glDrawElementsInstancedBaseInstanceEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_base_instance,
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_base_instance,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        555 /* "glDrawElementsInstancedBaseInstanceEXT" */,
        554 /* "glDrawElementsInstancedBaseInstance" */,
        554 /* "glDrawElementsInstancedBaseInstance" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[555] /* "glDrawElementsInstancedBaseInstanceEXT" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
epoxy_glDrawElementsInstancedBaseVertex_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_draw_elements_base_vertex,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_elements_base_vertex,
        GL_extension_GL_OES_draw_elements_base_vertex,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        556 /* "glDrawElementsInstancedBaseVertex" */,
        556 /* "glDrawElementsInstancedBaseVertex" */,
        556 /* "glDrawElementsInstancedBaseVertex" */,
        559 /* "glDrawElementsInstancedBaseVertexEXT" */,
        560 /* "glDrawElementsInstancedBaseVertexOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[556] /* "glDrawElementsInstancedBaseVertex" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
epoxy_glDrawElementsInstancedBaseVertexBaseInstance_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_base_instance,
        GL_extension_GL_EXT_base_instance,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        557 /* "glDrawElementsInstancedBaseVertexBaseInstance" */,
        557 /* "glDrawElementsInstancedBaseVertexBaseInstance" */,
        558 /* "glDrawElementsInstancedBaseVertexBaseInstanceEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[557] /* "glDrawElementsInstancedBaseVertexBaseInstance" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC
epoxy_glDrawElementsInstancedBaseVertexBaseInstanceEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_base_instance,
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_base_instance,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        558 /* "glDrawElementsInstancedBaseVertexBaseInstanceEXT" */,
        557 /* "glDrawElementsInstancedBaseVertexBaseInstance" */,
        557 /* "glDrawElementsInstancedBaseVertexBaseInstance" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[558] /* "glDrawElementsInstancedBaseVertexBaseInstanceEXT" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC
epoxy_glDrawElementsInstancedBaseVertexEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_elements_base_vertex,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_draw_elements_base_vertex,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_draw_elements_base_vertex,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        559 /* "glDrawElementsInstancedBaseVertexEXT" */,
        556 /* "glDrawElementsInstancedBaseVertex" */,
        556 /* "glDrawElementsInstancedBaseVertex" */,
        556 /* "glDrawElementsInstancedBaseVertex" */,
        560 /* "glDrawElementsInstancedBaseVertexOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[559] /* "glDrawElementsInstancedBaseVertexEXT" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC
epoxy_glDrawElementsInstancedBaseVertexOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_draw_elements_base_vertex,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_draw_elements_base_vertex,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_elements_base_vertex,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        560 /* "glDrawElementsInstancedBaseVertexOES" */,
        556 /* "glDrawElementsInstancedBaseVertex" */,
        556 /* "glDrawElementsInstancedBaseVertex" */,
        556 /* "glDrawElementsInstancedBaseVertex" */,
        559 /* "glDrawElementsInstancedBaseVertexEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[560] /* "glDrawElementsInstancedBaseVertexOES" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSINSTANCEDEXTPROC
epoxy_glDrawElementsInstancedEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_instanced,
        GL_extension_GL_EXT_instanced_arrays,
        Desktop_OpenGL_3_1,
        OpenGL_ES_3_0,
        GL_extension_GL_ANGLE_instanced_arrays,
        GL_extension_GL_ARB_draw_instanced,
        GL_extension_GL_NV_draw_instanced,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        561 /* "glDrawElementsInstancedEXT" */,
        561 /* "glDrawElementsInstancedEXT" */,
        551 /* "glDrawElementsInstanced" */,
        551 /* "glDrawElementsInstanced" */,
        552 /* "glDrawElementsInstancedANGLE" */,
        553 /* "glDrawElementsInstancedARB" */,
        562 /* "glDrawElementsInstancedNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[561] /* "glDrawElementsInstancedEXT" */,
                                providers, entrypoints);
}

static PFNGLDRAWELEMENTSINSTANCEDNVPROC
epoxy_glDrawElementsInstancedNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_draw_instanced,
        Desktop_OpenGL_3_1,
        OpenGL_ES_3_0,
        GL_extension_GL_ANGLE_instanced_arrays,
        GL_extension_GL_ARB_draw_instanced,
        GL_extension_GL_EXT_draw_instanced,
        GL_extension_GL_EXT_instanced_arrays,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        562 /* "glDrawElementsInstancedNV" */,
        551 /* "glDrawElementsInstanced" */,
        551 /* "glDrawElementsInstanced" */,
        552 /* "glDrawElementsInstancedANGLE" */,
        553 /* "glDrawElementsInstancedARB" */,
        561 /* "glDrawElementsInstancedEXT" */,
        561 /* "glDrawElementsInstancedEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[562] /* "glDrawElementsInstancedNV" */,
                                providers, entrypoints);
}

static PFNGLDRAWMESHARRAYSSUNPROC
epoxy_glDrawMeshArraysSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_mesh_array, 563 /* glDrawMeshArraysSUN */);
}

static PFNGLDRAWPIXELSPROC
epoxy_glDrawPixels_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 564 /* glDrawPixels */);
}

static PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
epoxy_glDrawRangeElementArrayAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_element_array, 565 /* glDrawRangeElementArrayAPPLE */);
}

static PFNGLDRAWRANGEELEMENTARRAYATIPROC
epoxy_glDrawRangeElementArrayATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_element_array, 566 /* glDrawRangeElementArrayATI */);
}

static PFNGLDRAWRANGEELEMENTSPROC
epoxy_glDrawRangeElements_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_2,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_draw_range_elements,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        567 /* "glDrawRangeElements" */,
        567 /* "glDrawRangeElements" */,
        571 /* "glDrawRangeElementsEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[567] /* "glDrawRangeElements" */,
                                providers, entrypoints);
}

static PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
epoxy_glDrawRangeElementsBaseVertex_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_draw_elements_base_vertex,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_elements_base_vertex,
        GL_extension_GL_OES_draw_elements_base_vertex,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        568 /* "glDrawRangeElementsBaseVertex" */,
        568 /* "glDrawRangeElementsBaseVertex" */,
        568 /* "glDrawRangeElementsBaseVertex" */,
        569 /* "glDrawRangeElementsBaseVertexEXT" */,
        570 /* "glDrawRangeElementsBaseVertexOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[568] /* "glDrawRangeElementsBaseVertex" */,
                                providers, entrypoints);
}

static PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC
epoxy_glDrawRangeElementsBaseVertexEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_elements_base_vertex,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_draw_elements_base_vertex,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_draw_elements_base_vertex,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        569 /* "glDrawRangeElementsBaseVertexEXT" */,
        568 /* "glDrawRangeElementsBaseVertex" */,
        568 /* "glDrawRangeElementsBaseVertex" */,
        568 /* "glDrawRangeElementsBaseVertex" */,
        570 /* "glDrawRangeElementsBaseVertexOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[569] /* "glDrawRangeElementsBaseVertexEXT" */,
                                providers, entrypoints);
}

static PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC
epoxy_glDrawRangeElementsBaseVertexOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_draw_elements_base_vertex,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_draw_elements_base_vertex,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_elements_base_vertex,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        570 /* "glDrawRangeElementsBaseVertexOES" */,
        568 /* "glDrawRangeElementsBaseVertex" */,
        568 /* "glDrawRangeElementsBaseVertex" */,
        568 /* "glDrawRangeElementsBaseVertex" */,
        569 /* "glDrawRangeElementsBaseVertexEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[570] /* "glDrawRangeElementsBaseVertexOES" */,
                                providers, entrypoints);
}

static PFNGLDRAWRANGEELEMENTSEXTPROC
epoxy_glDrawRangeElementsEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_range_elements,
        Desktop_OpenGL_1_2,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        571 /* "glDrawRangeElementsEXT" */,
        567 /* "glDrawRangeElements" */,
        567 /* "glDrawRangeElements" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[571] /* "glDrawRangeElementsEXT" */,
                                providers, entrypoints);
}

static PFNGLDRAWTEXFOESPROC
epoxy_glDrawTexfOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_draw_texture, 572 /* glDrawTexfOES */);
}

static PFNGLDRAWTEXFVOESPROC
epoxy_glDrawTexfvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_draw_texture, 573 /* glDrawTexfvOES */);
}

static PFNGLDRAWTEXIOESPROC
epoxy_glDrawTexiOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_draw_texture, 574 /* glDrawTexiOES */);
}

static PFNGLDRAWTEXIVOESPROC
epoxy_glDrawTexivOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_draw_texture, 575 /* glDrawTexivOES */);
}

static PFNGLDRAWTEXSOESPROC
epoxy_glDrawTexsOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_draw_texture, 576 /* glDrawTexsOES */);
}

static PFNGLDRAWTEXSVOESPROC
epoxy_glDrawTexsvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_draw_texture, 577 /* glDrawTexsvOES */);
}

static PFNGLDRAWTEXTURENVPROC
epoxy_glDrawTextureNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_draw_texture, 578 /* glDrawTextureNV */);
}

static PFNGLDRAWTEXXOESPROC
epoxy_glDrawTexxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_draw_texture, 579 /* glDrawTexxOES */);
}

static PFNGLDRAWTEXXVOESPROC
epoxy_glDrawTexxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_draw_texture, 580 /* glDrawTexxvOES */);
}

static PFNGLDRAWTRANSFORMFEEDBACKPROC
epoxy_glDrawTransformFeedback_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback2,
        GL_extension_GL_NV_transform_feedback2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        581 /* "glDrawTransformFeedback" */,
        581 /* "glDrawTransformFeedback" */,
        583 /* "glDrawTransformFeedbackNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[581] /* "glDrawTransformFeedback" */,
                                providers, entrypoints);
}

static PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
epoxy_glDrawTransformFeedbackInstanced_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_transform_feedback_instanced,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        582 /* "glDrawTransformFeedbackInstanced" */,
        582 /* "glDrawTransformFeedbackInstanced" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[582] /* "glDrawTransformFeedbackInstanced" */,
                                providers, entrypoints);
}

static PFNGLDRAWTRANSFORMFEEDBACKNVPROC
epoxy_glDrawTransformFeedbackNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_transform_feedback2,
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        583 /* "glDrawTransformFeedbackNV" */,
        581 /* "glDrawTransformFeedback" */,
        581 /* "glDrawTransformFeedback" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[583] /* "glDrawTransformFeedbackNV" */,
                                providers, entrypoints);
}

static PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
epoxy_glDrawTransformFeedbackStream_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        584 /* "glDrawTransformFeedbackStream" */,
        584 /* "glDrawTransformFeedbackStream" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[584] /* "glDrawTransformFeedbackStream" */,
                                providers, entrypoints);
}

static PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
epoxy_glDrawTransformFeedbackStreamInstanced_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_transform_feedback_instanced,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        585 /* "glDrawTransformFeedbackStreamInstanced" */,
        585 /* "glDrawTransformFeedbackStreamInstanced" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[585] /* "glDrawTransformFeedbackStreamInstanced" */,
                                providers, entrypoints);
}

static PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
epoxy_glEGLImageTargetRenderbufferStorageOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_EGL_image, 586 /* glEGLImageTargetRenderbufferStorageOES */);
}

static PFNGLEGLIMAGETARGETTEXTURE2DOESPROC
epoxy_glEGLImageTargetTexture2DOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_EGL_image, 587 /* glEGLImageTargetTexture2DOES */);
}

static PFNGLEDGEFLAGPROC
epoxy_glEdgeFlag_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 588 /* glEdgeFlag */);
}

static PFNGLEDGEFLAGFORMATNVPROC
epoxy_glEdgeFlagFormatNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_buffer_unified_memory, 589 /* glEdgeFlagFormatNV */);
}

static PFNGLEDGEFLAGPOINTERPROC
epoxy_glEdgeFlagPointer_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_1, 590 /* glEdgeFlagPointer */);
}

static PFNGLEDGEFLAGPOINTEREXTPROC
epoxy_glEdgeFlagPointerEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_array, 591 /* glEdgeFlagPointerEXT */);
}

static PFNGLEDGEFLAGPOINTERLISTIBMPROC
epoxy_glEdgeFlagPointerListIBM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IBM_vertex_array_lists, 592 /* glEdgeFlagPointerListIBM */);
}

static PFNGLEDGEFLAGVPROC
epoxy_glEdgeFlagv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 593 /* glEdgeFlagv */);
}

static PFNGLELEMENTPOINTERAPPLEPROC
epoxy_glElementPointerAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_element_array, 594 /* glElementPointerAPPLE */);
}

static PFNGLELEMENTPOINTERATIPROC
epoxy_glElementPointerATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_element_array, 595 /* glElementPointerATI */);
}

static PFNGLENABLEPROC
epoxy_glEnable_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        596 /* "glEnable" */,
        596 /* "glEnable" */,
        596 /* "glEnable" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[596] /* "glEnable" */,
                                providers, entrypoints);
}

static PFNGLENABLECLIENTSTATEPROC
epoxy_glEnableClientState_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        597 /* "glEnableClientState" */,
        597 /* "glEnableClientState" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[597] /* "glEnableClientState" */,
                                providers, entrypoints);
}

static PFNGLENABLECLIENTSTATEINDEXEDEXTPROC
epoxy_glEnableClientStateIndexedEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 598 /* glEnableClientStateIndexedEXT */);
}

static PFNGLENABLECLIENTSTATEIEXTPROC
epoxy_glEnableClientStateiEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 599 /* glEnableClientStateiEXT */);
}

static PFNGLENABLEDRIVERCONTROLQCOMPROC
epoxy_glEnableDriverControlQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_driver_control, 600 /* glEnableDriverControlQCOM */);
}

static PFNGLENABLEINDEXEDEXTPROC
epoxy_glEnableIndexedEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_NV_viewport_array,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        601 /* "glEnableIndexedEXT" */,
        601 /* "glEnableIndexedEXT" */,
        609 /* "glEnablei" */,
        609 /* "glEnablei" */,
        610 /* "glEnableiEXT" */,
        611 /* "glEnableiNV" */,
        612 /* "glEnableiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[601] /* "glEnableIndexedEXT" */,
                                providers, entrypoints);
}

static PFNGLENABLEVARIANTCLIENTSTATEEXTPROC
epoxy_glEnableVariantClientStateEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 602 /* glEnableVariantClientStateEXT */);
}

static PFNGLENABLEVERTEXARRAYATTRIBPROC
epoxy_glEnableVertexArrayAttrib_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        603 /* "glEnableVertexArrayAttrib" */,
        603 /* "glEnableVertexArrayAttrib" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[603] /* "glEnableVertexArrayAttrib" */,
                                providers, entrypoints);
}

static PFNGLENABLEVERTEXARRAYATTRIBEXTPROC
epoxy_glEnableVertexArrayAttribEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 604 /* glEnableVertexArrayAttribEXT */);
}

static PFNGLENABLEVERTEXARRAYEXTPROC
epoxy_glEnableVertexArrayEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 605 /* glEnableVertexArrayEXT */);
}

static PFNGLENABLEVERTEXATTRIBAPPLEPROC
epoxy_glEnableVertexAttribAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_vertex_program_evaluators, 606 /* glEnableVertexAttribAPPLE */);
}

static PFNGLENABLEVERTEXATTRIBARRAYPROC
epoxy_glEnableVertexAttribArray_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        607 /* "glEnableVertexAttribArray" */,
        607 /* "glEnableVertexAttribArray" */,
        608 /* "glEnableVertexAttribArrayARB" */,
        608 /* "glEnableVertexAttribArrayARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[607] /* "glEnableVertexAttribArray" */,
                                providers, entrypoints);
}

static PFNGLENABLEVERTEXATTRIBARRAYARBPROC
epoxy_glEnableVertexAttribArrayARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        608 /* "glEnableVertexAttribArrayARB" */,
        608 /* "glEnableVertexAttribArrayARB" */,
        607 /* "glEnableVertexAttribArray" */,
        607 /* "glEnableVertexAttribArray" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[608] /* "glEnableVertexAttribArrayARB" */,
                                providers, entrypoints);
}

static PFNGLENABLEIPROC
epoxy_glEnablei_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_NV_viewport_array,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        609 /* "glEnablei" */,
        609 /* "glEnablei" */,
        601 /* "glEnableIndexedEXT" */,
        601 /* "glEnableIndexedEXT" */,
        610 /* "glEnableiEXT" */,
        611 /* "glEnableiNV" */,
        612 /* "glEnableiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[609] /* "glEnablei" */,
                                providers, entrypoints);
}

static PFNGLENABLEIEXTPROC
epoxy_glEnableiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_NV_viewport_array,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        610 /* "glEnableiEXT" */,
        601 /* "glEnableIndexedEXT" */,
        601 /* "glEnableIndexedEXT" */,
        609 /* "glEnablei" */,
        609 /* "glEnablei" */,
        611 /* "glEnableiNV" */,
        612 /* "glEnableiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[610] /* "glEnableiEXT" */,
                                providers, entrypoints);
}

static PFNGLENABLEINVPROC
epoxy_glEnableiNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_viewport_array,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        611 /* "glEnableiNV" */,
        601 /* "glEnableIndexedEXT" */,
        601 /* "glEnableIndexedEXT" */,
        609 /* "glEnablei" */,
        609 /* "glEnablei" */,
        610 /* "glEnableiEXT" */,
        612 /* "glEnableiOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[611] /* "glEnableiNV" */,
                                providers, entrypoints);
}

static PFNGLENABLEIOESPROC
epoxy_glEnableiOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_draw_buffers_indexed,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_NV_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        612 /* "glEnableiOES" */,
        601 /* "glEnableIndexedEXT" */,
        601 /* "glEnableIndexedEXT" */,
        609 /* "glEnablei" */,
        609 /* "glEnablei" */,
        610 /* "glEnableiEXT" */,
        611 /* "glEnableiNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[612] /* "glEnableiOES" */,
                                providers, entrypoints);
}

static PFNGLENDPROC
epoxy_glEnd_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 613 /* glEnd */);
}

static PFNGLENDCONDITIONALRENDERPROC
epoxy_glEndConditionalRender_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_conditional_render,
        GL_extension_GL_NVX_conditional_render,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        614 /* "glEndConditionalRender" */,
        615 /* "glEndConditionalRenderNV" */,
        616 /* "glEndConditionalRenderNVX" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[614] /* "glEndConditionalRender" */,
                                providers, entrypoints);
}

static PFNGLENDCONDITIONALRENDERNVPROC
epoxy_glEndConditionalRenderNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_conditional_render,
        Desktop_OpenGL_3_0,
        GL_extension_GL_NVX_conditional_render,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        615 /* "glEndConditionalRenderNV" */,
        614 /* "glEndConditionalRender" */,
        616 /* "glEndConditionalRenderNVX" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[615] /* "glEndConditionalRenderNV" */,
                                providers, entrypoints);
}

static PFNGLENDCONDITIONALRENDERNVXPROC
epoxy_glEndConditionalRenderNVX_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NVX_conditional_render,
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_conditional_render,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        616 /* "glEndConditionalRenderNVX" */,
        614 /* "glEndConditionalRender" */,
        615 /* "glEndConditionalRenderNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[616] /* "glEndConditionalRenderNVX" */,
                                providers, entrypoints);
}

static PFNGLENDFRAGMENTSHADERATIPROC
epoxy_glEndFragmentShaderATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_fragment_shader, 617 /* glEndFragmentShaderATI */);
}

static PFNGLENDLISTPROC
epoxy_glEndList_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 618 /* glEndList */);
}

static PFNGLENDOCCLUSIONQUERYNVPROC
epoxy_glEndOcclusionQueryNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_occlusion_query, 619 /* glEndOcclusionQueryNV */);
}

static PFNGLENDPERFMONITORAMDPROC
epoxy_glEndPerfMonitorAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_performance_monitor, 620 /* glEndPerfMonitorAMD */);
}

static PFNGLENDPERFQUERYINTELPROC
epoxy_glEndPerfQueryINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_performance_query, 621 /* glEndPerfQueryINTEL */);
}

static PFNGLENDQUERYPROC
epoxy_glEndQuery_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_occlusion_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        622 /* "glEndQuery" */,
        622 /* "glEndQuery" */,
        623 /* "glEndQueryARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[622] /* "glEndQuery" */,
                                providers, entrypoints);
}

static PFNGLENDQUERYARBPROC
epoxy_glEndQueryARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_occlusion_query,
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        623 /* "glEndQueryARB" */,
        622 /* "glEndQuery" */,
        622 /* "glEndQuery" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[623] /* "glEndQueryARB" */,
                                providers, entrypoints);
}

static PFNGLENDQUERYEXTPROC
epoxy_glEndQueryEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_disjoint_timer_query,
        GL_extension_GL_EXT_occlusion_query_boolean,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        624 /* "glEndQueryEXT" */,
        624 /* "glEndQueryEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[624] /* "glEndQueryEXT" */,
                                providers, entrypoints);
}

static PFNGLENDQUERYINDEXEDPROC
epoxy_glEndQueryIndexed_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        625 /* "glEndQueryIndexed" */,
        625 /* "glEndQueryIndexed" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[625] /* "glEndQueryIndexed" */,
                                providers, entrypoints);
}

static PFNGLENDTILINGQCOMPROC
epoxy_glEndTilingQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_tiled_rendering, 626 /* glEndTilingQCOM */);
}

static PFNGLENDTRANSFORMFEEDBACKPROC
epoxy_glEndTransformFeedback_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_transform_feedback,
        GL_extension_GL_NV_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        627 /* "glEndTransformFeedback" */,
        627 /* "glEndTransformFeedback" */,
        628 /* "glEndTransformFeedbackEXT" */,
        629 /* "glEndTransformFeedbackNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[627] /* "glEndTransformFeedback" */,
                                providers, entrypoints);
}

static PFNGLENDTRANSFORMFEEDBACKEXTPROC
epoxy_glEndTransformFeedbackEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_transform_feedback,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        628 /* "glEndTransformFeedbackEXT" */,
        627 /* "glEndTransformFeedback" */,
        627 /* "glEndTransformFeedback" */,
        629 /* "glEndTransformFeedbackNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[628] /* "glEndTransformFeedbackEXT" */,
                                providers, entrypoints);
}

static PFNGLENDTRANSFORMFEEDBACKNVPROC
epoxy_glEndTransformFeedbackNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_transform_feedback,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        629 /* "glEndTransformFeedbackNV" */,
        627 /* "glEndTransformFeedback" */,
        627 /* "glEndTransformFeedback" */,
        628 /* "glEndTransformFeedbackEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[629] /* "glEndTransformFeedbackNV" */,
                                providers, entrypoints);
}

static PFNGLENDVERTEXSHADEREXTPROC
epoxy_glEndVertexShaderEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 630 /* glEndVertexShaderEXT */);
}

static PFNGLENDVIDEOCAPTURENVPROC
epoxy_glEndVideoCaptureNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_video_capture, 631 /* glEndVideoCaptureNV */);
}

static PFNGLEVALCOORD1DPROC
epoxy_glEvalCoord1d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 632 /* glEvalCoord1d */);
}

static PFNGLEVALCOORD1DVPROC
epoxy_glEvalCoord1dv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 633 /* glEvalCoord1dv */);
}

static PFNGLEVALCOORD1FPROC
epoxy_glEvalCoord1f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 634 /* glEvalCoord1f */);
}

static PFNGLEVALCOORD1FVPROC
epoxy_glEvalCoord1fv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 635 /* glEvalCoord1fv */);
}

static PFNGLEVALCOORD1XOESPROC
epoxy_glEvalCoord1xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 636 /* glEvalCoord1xOES */);
}

static PFNGLEVALCOORD1XVOESPROC
epoxy_glEvalCoord1xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 637 /* glEvalCoord1xvOES */);
}

static PFNGLEVALCOORD2DPROC
epoxy_glEvalCoord2d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 638 /* glEvalCoord2d */);
}

static PFNGLEVALCOORD2DVPROC
epoxy_glEvalCoord2dv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 639 /* glEvalCoord2dv */);
}

static PFNGLEVALCOORD2FPROC
epoxy_glEvalCoord2f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 640 /* glEvalCoord2f */);
}

static PFNGLEVALCOORD2FVPROC
epoxy_glEvalCoord2fv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 641 /* glEvalCoord2fv */);
}

static PFNGLEVALCOORD2XOESPROC
epoxy_glEvalCoord2xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 642 /* glEvalCoord2xOES */);
}

static PFNGLEVALCOORD2XVOESPROC
epoxy_glEvalCoord2xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 643 /* glEvalCoord2xvOES */);
}

static PFNGLEVALMAPSNVPROC
epoxy_glEvalMapsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_evaluators, 644 /* glEvalMapsNV */);
}

static PFNGLEVALMESH1PROC
epoxy_glEvalMesh1_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 645 /* glEvalMesh1 */);
}

static PFNGLEVALMESH2PROC
epoxy_glEvalMesh2_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 646 /* glEvalMesh2 */);
}

static PFNGLEVALPOINT1PROC
epoxy_glEvalPoint1_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 647 /* glEvalPoint1 */);
}

static PFNGLEVALPOINT2PROC
epoxy_glEvalPoint2_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 648 /* glEvalPoint2 */);
}

static PFNGLEVALUATEDEPTHVALUESARBPROC
epoxy_glEvaluateDepthValuesARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_sample_locations, 649 /* glEvaluateDepthValuesARB */);
}

static PFNGLEXECUTEPROGRAMNVPROC
epoxy_glExecuteProgramNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 650 /* glExecuteProgramNV */);
}

static PFNGLEXTGETBUFFERPOINTERVQCOMPROC
epoxy_glExtGetBufferPointervQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_extended_get, 651 /* glExtGetBufferPointervQCOM */);
}

static PFNGLEXTGETBUFFERSQCOMPROC
epoxy_glExtGetBuffersQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_extended_get, 652 /* glExtGetBuffersQCOM */);
}

static PFNGLEXTGETFRAMEBUFFERSQCOMPROC
epoxy_glExtGetFramebuffersQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_extended_get, 653 /* glExtGetFramebuffersQCOM */);
}

static PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC
epoxy_glExtGetProgramBinarySourceQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_extended_get2, 654 /* glExtGetProgramBinarySourceQCOM */);
}

static PFNGLEXTGETPROGRAMSQCOMPROC
epoxy_glExtGetProgramsQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_extended_get2, 655 /* glExtGetProgramsQCOM */);
}

static PFNGLEXTGETRENDERBUFFERSQCOMPROC
epoxy_glExtGetRenderbuffersQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_extended_get, 656 /* glExtGetRenderbuffersQCOM */);
}

static PFNGLEXTGETSHADERSQCOMPROC
epoxy_glExtGetShadersQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_extended_get2, 657 /* glExtGetShadersQCOM */);
}

static PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC
epoxy_glExtGetTexLevelParameterivQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_extended_get, 658 /* glExtGetTexLevelParameterivQCOM */);
}

static PFNGLEXTGETTEXSUBIMAGEQCOMPROC
epoxy_glExtGetTexSubImageQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_extended_get, 659 /* glExtGetTexSubImageQCOM */);
}

static PFNGLEXTGETTEXTURESQCOMPROC
epoxy_glExtGetTexturesQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_extended_get, 660 /* glExtGetTexturesQCOM */);
}

static PFNGLEXTISPROGRAMBINARYQCOMPROC
epoxy_glExtIsProgramBinaryQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_extended_get2, 661 /* glExtIsProgramBinaryQCOM */);
}

static PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC
epoxy_glExtTexObjectStateOverrideiQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_extended_get, 662 /* glExtTexObjectStateOverrideiQCOM */);
}

static PFNGLEXTRACTCOMPONENTEXTPROC
epoxy_glExtractComponentEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 663 /* glExtractComponentEXT */);
}

static PFNGLFEEDBACKBUFFERPROC
epoxy_glFeedbackBuffer_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 664 /* glFeedbackBuffer */);
}

static PFNGLFEEDBACKBUFFERXOESPROC
epoxy_glFeedbackBufferxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 665 /* glFeedbackBufferxOES */);
}

static PFNGLFENCESYNCPROC
epoxy_glFenceSync_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_sync,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_sync,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        666 /* "glFenceSync" */,
        666 /* "glFenceSync" */,
        666 /* "glFenceSync" */,
        667 /* "glFenceSyncAPPLE" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[666] /* "glFenceSync" */,
                                providers, entrypoints);
}

static PFNGLFENCESYNCAPPLEPROC
epoxy_glFenceSyncAPPLE_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_APPLE_sync,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_sync,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        667 /* "glFenceSyncAPPLE" */,
        666 /* "glFenceSync" */,
        666 /* "glFenceSync" */,
        666 /* "glFenceSync" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[667] /* "glFenceSyncAPPLE" */,
                                providers, entrypoints);
}

static PFNGLFINALCOMBINERINPUTNVPROC
epoxy_glFinalCombinerInputNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_register_combiners, 668 /* glFinalCombinerInputNV */);
}

static PFNGLFINISHPROC
epoxy_glFinish_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        669 /* "glFinish" */,
        669 /* "glFinish" */,
        669 /* "glFinish" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[669] /* "glFinish" */,
                                providers, entrypoints);
}

static PFNGLFINISHASYNCSGIXPROC
epoxy_glFinishAsyncSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_async, 670 /* glFinishAsyncSGIX */);
}

static PFNGLFINISHFENCEAPPLEPROC
epoxy_glFinishFenceAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_fence, 671 /* glFinishFenceAPPLE */);
}

static PFNGLFINISHFENCENVPROC
epoxy_glFinishFenceNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_fence, 672 /* glFinishFenceNV */);
}

static PFNGLFINISHOBJECTAPPLEPROC
epoxy_glFinishObjectAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_fence, 673 /* glFinishObjectAPPLE */);
}

static PFNGLFINISHTEXTURESUNXPROC
epoxy_glFinishTextureSUNX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUNX_constant_data, 674 /* glFinishTextureSUNX */);
}

static PFNGLFLUSHPROC
epoxy_glFlush_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        675 /* "glFlush" */,
        675 /* "glFlush" */,
        675 /* "glFlush" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[675] /* "glFlush" */,
                                providers, entrypoints);
}

static PFNGLFLUSHMAPPEDBUFFERRANGEPROC
epoxy_glFlushMappedBufferRange_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_map_buffer_range,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_flush_buffer_range,
        GL_extension_GL_EXT_map_buffer_range,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        676 /* "glFlushMappedBufferRange" */,
        676 /* "glFlushMappedBufferRange" */,
        676 /* "glFlushMappedBufferRange" */,
        677 /* "glFlushMappedBufferRangeAPPLE" */,
        678 /* "glFlushMappedBufferRangeEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[676] /* "glFlushMappedBufferRange" */,
                                providers, entrypoints);
}

static PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
epoxy_glFlushMappedBufferRangeAPPLE_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_APPLE_flush_buffer_range,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_map_buffer_range,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_map_buffer_range,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        677 /* "glFlushMappedBufferRangeAPPLE" */,
        676 /* "glFlushMappedBufferRange" */,
        676 /* "glFlushMappedBufferRange" */,
        676 /* "glFlushMappedBufferRange" */,
        678 /* "glFlushMappedBufferRangeEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[677] /* "glFlushMappedBufferRangeAPPLE" */,
                                providers, entrypoints);
}

static PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC
epoxy_glFlushMappedBufferRangeEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_map_buffer_range,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_map_buffer_range,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_flush_buffer_range,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        678 /* "glFlushMappedBufferRangeEXT" */,
        676 /* "glFlushMappedBufferRange" */,
        676 /* "glFlushMappedBufferRange" */,
        676 /* "glFlushMappedBufferRange" */,
        677 /* "glFlushMappedBufferRangeAPPLE" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[678] /* "glFlushMappedBufferRangeEXT" */,
                                providers, entrypoints);
}

static PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC
epoxy_glFlushMappedNamedBufferRange_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        679 /* "glFlushMappedNamedBufferRange" */,
        679 /* "glFlushMappedNamedBufferRange" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[679] /* "glFlushMappedNamedBufferRange" */,
                                providers, entrypoints);
}

static PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC
epoxy_glFlushMappedNamedBufferRangeEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 680 /* glFlushMappedNamedBufferRangeEXT */);
}

static PFNGLFLUSHPIXELDATARANGENVPROC
epoxy_glFlushPixelDataRangeNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_pixel_data_range, 681 /* glFlushPixelDataRangeNV */);
}

static PFNGLFLUSHRASTERSGIXPROC
epoxy_glFlushRasterSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_flush_raster, 682 /* glFlushRasterSGIX */);
}

static PFNGLFLUSHSTATICDATAIBMPROC
epoxy_glFlushStaticDataIBM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IBM_static_data, 683 /* glFlushStaticDataIBM */);
}

static PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
epoxy_glFlushVertexArrayRangeAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_vertex_array_range, 684 /* glFlushVertexArrayRangeAPPLE */);
}

static PFNGLFLUSHVERTEXARRAYRANGENVPROC
epoxy_glFlushVertexArrayRangeNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_array_range, 685 /* glFlushVertexArrayRangeNV */);
}

static PFNGLFOGCOORDFORMATNVPROC
epoxy_glFogCoordFormatNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_buffer_unified_memory, 686 /* glFogCoordFormatNV */);
}

static PFNGLFOGCOORDPOINTERPROC
epoxy_glFogCoordPointer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_fog_coord,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        687 /* "glFogCoordPointer" */,
        688 /* "glFogCoordPointerEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[687] /* "glFogCoordPointer" */,
                                providers, entrypoints);
}

static PFNGLFOGCOORDPOINTEREXTPROC
epoxy_glFogCoordPointerEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_fog_coord,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        688 /* "glFogCoordPointerEXT" */,
        687 /* "glFogCoordPointer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[688] /* "glFogCoordPointerEXT" */,
                                providers, entrypoints);
}

static PFNGLFOGCOORDPOINTERLISTIBMPROC
epoxy_glFogCoordPointerListIBM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IBM_vertex_array_lists, 689 /* glFogCoordPointerListIBM */);
}

static PFNGLFOGCOORDDPROC
epoxy_glFogCoordd_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_fog_coord,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        690 /* "glFogCoordd" */,
        691 /* "glFogCoorddEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[690] /* "glFogCoordd" */,
                                providers, entrypoints);
}

static PFNGLFOGCOORDDEXTPROC
epoxy_glFogCoorddEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_fog_coord,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        691 /* "glFogCoorddEXT" */,
        690 /* "glFogCoordd" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[691] /* "glFogCoorddEXT" */,
                                providers, entrypoints);
}

static PFNGLFOGCOORDDVPROC
epoxy_glFogCoorddv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_fog_coord,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        692 /* "glFogCoorddv" */,
        693 /* "glFogCoorddvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[692] /* "glFogCoorddv" */,
                                providers, entrypoints);
}

static PFNGLFOGCOORDDVEXTPROC
epoxy_glFogCoorddvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_fog_coord,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        693 /* "glFogCoorddvEXT" */,
        692 /* "glFogCoorddv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[693] /* "glFogCoorddvEXT" */,
                                providers, entrypoints);
}

static PFNGLFOGCOORDFPROC
epoxy_glFogCoordf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_fog_coord,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        694 /* "glFogCoordf" */,
        695 /* "glFogCoordfEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[694] /* "glFogCoordf" */,
                                providers, entrypoints);
}

static PFNGLFOGCOORDFEXTPROC
epoxy_glFogCoordfEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_fog_coord,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        695 /* "glFogCoordfEXT" */,
        694 /* "glFogCoordf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[695] /* "glFogCoordfEXT" */,
                                providers, entrypoints);
}

static PFNGLFOGCOORDFVPROC
epoxy_glFogCoordfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_fog_coord,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        696 /* "glFogCoordfv" */,
        697 /* "glFogCoordfvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[696] /* "glFogCoordfv" */,
                                providers, entrypoints);
}

static PFNGLFOGCOORDFVEXTPROC
epoxy_glFogCoordfvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_fog_coord,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        697 /* "glFogCoordfvEXT" */,
        696 /* "glFogCoordfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[697] /* "glFogCoordfvEXT" */,
                                providers, entrypoints);
}

static PFNGLFOGCOORDHNVPROC
epoxy_glFogCoordhNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 698 /* glFogCoordhNV */);
}

static PFNGLFOGCOORDHVNVPROC
epoxy_glFogCoordhvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 699 /* glFogCoordhvNV */);
}

static PFNGLFOGFUNCSGISPROC
epoxy_glFogFuncSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_fog_function, 700 /* glFogFuncSGIS */);
}

static PFNGLFOGFPROC
epoxy_glFogf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        701 /* "glFogf" */,
        701 /* "glFogf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[701] /* "glFogf" */,
                                providers, entrypoints);
}

static PFNGLFOGFVPROC
epoxy_glFogfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        702 /* "glFogfv" */,
        702 /* "glFogfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[702] /* "glFogfv" */,
                                providers, entrypoints);
}

static PFNGLFOGIPROC
epoxy_glFogi_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 703 /* glFogi */);
}

static PFNGLFOGIVPROC
epoxy_glFogiv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 704 /* glFogiv */);
}

static PFNGLFOGXPROC
epoxy_glFogx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 705 /* glFogx */);
}

static PFNGLFOGXOESPROC
epoxy_glFogxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 706 /* glFogxOES */);
}

static PFNGLFOGXVPROC
epoxy_glFogxv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 707 /* glFogxv */);
}

static PFNGLFOGXVOESPROC
epoxy_glFogxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 708 /* glFogxvOES */);
}

static PFNGLFRAGMENTCOLORMATERIALSGIXPROC
epoxy_glFragmentColorMaterialSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 709 /* glFragmentColorMaterialSGIX */);
}

static PFNGLFRAGMENTCOVERAGECOLORNVPROC
epoxy_glFragmentCoverageColorNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_fragment_coverage_to_color, 710 /* glFragmentCoverageColorNV */);
}

static PFNGLFRAGMENTLIGHTMODELFSGIXPROC
epoxy_glFragmentLightModelfSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 711 /* glFragmentLightModelfSGIX */);
}

static PFNGLFRAGMENTLIGHTMODELFVSGIXPROC
epoxy_glFragmentLightModelfvSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 712 /* glFragmentLightModelfvSGIX */);
}

static PFNGLFRAGMENTLIGHTMODELISGIXPROC
epoxy_glFragmentLightModeliSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 713 /* glFragmentLightModeliSGIX */);
}

static PFNGLFRAGMENTLIGHTMODELIVSGIXPROC
epoxy_glFragmentLightModelivSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 714 /* glFragmentLightModelivSGIX */);
}

static PFNGLFRAGMENTLIGHTFSGIXPROC
epoxy_glFragmentLightfSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 715 /* glFragmentLightfSGIX */);
}

static PFNGLFRAGMENTLIGHTFVSGIXPROC
epoxy_glFragmentLightfvSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 716 /* glFragmentLightfvSGIX */);
}

static PFNGLFRAGMENTLIGHTISGIXPROC
epoxy_glFragmentLightiSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 717 /* glFragmentLightiSGIX */);
}

static PFNGLFRAGMENTLIGHTIVSGIXPROC
epoxy_glFragmentLightivSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 718 /* glFragmentLightivSGIX */);
}

static PFNGLFRAGMENTMATERIALFSGIXPROC
epoxy_glFragmentMaterialfSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 719 /* glFragmentMaterialfSGIX */);
}

static PFNGLFRAGMENTMATERIALFVSGIXPROC
epoxy_glFragmentMaterialfvSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 720 /* glFragmentMaterialfvSGIX */);
}

static PFNGLFRAGMENTMATERIALISGIXPROC
epoxy_glFragmentMaterialiSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 721 /* glFragmentMaterialiSGIX */);
}

static PFNGLFRAGMENTMATERIALIVSGIXPROC
epoxy_glFragmentMaterialivSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 722 /* glFragmentMaterialivSGIX */);
}

static PFNGLFRAMETERMINATORGREMEDYPROC
epoxy_glFrameTerminatorGREMEDY_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_GREMEDY_frame_terminator, 723 /* glFrameTerminatorGREMEDY */);
}

static PFNGLFRAMEZOOMSGIXPROC
epoxy_glFrameZoomSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_framezoom, 724 /* glFrameZoomSGIX */);
}

static PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC
epoxy_glFramebufferDrawBufferEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 725 /* glFramebufferDrawBufferEXT */);
}

static PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC
epoxy_glFramebufferDrawBuffersEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 726 /* glFramebufferDrawBuffersEXT */);
}

static PFNGLFRAMEBUFFERPARAMETERIPROC
epoxy_glFramebufferParameteri_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_framebuffer_no_attachments,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        727 /* "glFramebufferParameteri" */,
        727 /* "glFramebufferParameteri" */,
        727 /* "glFramebufferParameteri" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[727] /* "glFramebufferParameteri" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC
epoxy_glFramebufferPixelLocalStorageSizeEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_shader_pixel_local_storage2, 728 /* glFramebufferPixelLocalStorageSizeEXT */);
}

static PFNGLFRAMEBUFFERREADBUFFEREXTPROC
epoxy_glFramebufferReadBufferEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 729 /* glFramebufferReadBufferEXT */);
}

static PFNGLFRAMEBUFFERRENDERBUFFERPROC
epoxy_glFramebufferRenderbuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        730 /* "glFramebufferRenderbuffer" */,
        730 /* "glFramebufferRenderbuffer" */,
        730 /* "glFramebufferRenderbuffer" */,
        731 /* "glFramebufferRenderbufferEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[730] /* "glFramebufferRenderbuffer" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
epoxy_glFramebufferRenderbufferEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        731 /* "glFramebufferRenderbufferEXT" */,
        730 /* "glFramebufferRenderbuffer" */,
        730 /* "glFramebufferRenderbuffer" */,
        730 /* "glFramebufferRenderbuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[731] /* "glFramebufferRenderbufferEXT" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERRENDERBUFFEROESPROC
epoxy_glFramebufferRenderbufferOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_framebuffer_object, 732 /* glFramebufferRenderbufferOES */);
}

static PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC
epoxy_glFramebufferSampleLocationsfvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_sample_locations, 733 /* glFramebufferSampleLocationsfvARB */);
}

static PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC
epoxy_glFramebufferSampleLocationsfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_sample_locations, 734 /* glFramebufferSampleLocationsfvNV */);
}

static PFNGLFRAMEBUFFERTEXTUREPROC
epoxy_glFramebufferTexture_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_geometry_shader4,
        GL_extension_GL_EXT_geometry_shader,
        GL_extension_GL_NV_geometry_program4,
        GL_extension_GL_OES_geometry_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        735 /* "glFramebufferTexture" */,
        735 /* "glFramebufferTexture" */,
        747 /* "glFramebufferTextureARB" */,
        748 /* "glFramebufferTextureEXT" */,
        748 /* "glFramebufferTextureEXT" */,
        757 /* "glFramebufferTextureOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[735] /* "glFramebufferTexture" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERTEXTURE1DPROC
epoxy_glFramebufferTexture1D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        736 /* "glFramebufferTexture1D" */,
        736 /* "glFramebufferTexture1D" */,
        737 /* "glFramebufferTexture1DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[736] /* "glFramebufferTexture1D" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERTEXTURE1DEXTPROC
epoxy_glFramebufferTexture1DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        737 /* "glFramebufferTexture1DEXT" */,
        736 /* "glFramebufferTexture1D" */,
        736 /* "glFramebufferTexture1D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[737] /* "glFramebufferTexture1DEXT" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERTEXTURE2DPROC
epoxy_glFramebufferTexture2D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        738 /* "glFramebufferTexture2D" */,
        738 /* "glFramebufferTexture2D" */,
        738 /* "glFramebufferTexture2D" */,
        740 /* "glFramebufferTexture2DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[738] /* "glFramebufferTexture2D" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC
epoxy_glFramebufferTexture2DDownsampleIMG_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IMG_framebuffer_downsample, 739 /* glFramebufferTexture2DDownsampleIMG */);
}

static PFNGLFRAMEBUFFERTEXTURE2DEXTPROC
epoxy_glFramebufferTexture2DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        740 /* "glFramebufferTexture2DEXT" */,
        738 /* "glFramebufferTexture2D" */,
        738 /* "glFramebufferTexture2D" */,
        738 /* "glFramebufferTexture2D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[740] /* "glFramebufferTexture2DEXT" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC
epoxy_glFramebufferTexture2DMultisampleEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_multisampled_render_to_texture, 741 /* glFramebufferTexture2DMultisampleEXT */);
}

static PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC
epoxy_glFramebufferTexture2DMultisampleIMG_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IMG_multisampled_render_to_texture, 742 /* glFramebufferTexture2DMultisampleIMG */);
}

static PFNGLFRAMEBUFFERTEXTURE2DOESPROC
epoxy_glFramebufferTexture2DOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_framebuffer_object, 743 /* glFramebufferTexture2DOES */);
}

static PFNGLFRAMEBUFFERTEXTURE3DPROC
epoxy_glFramebufferTexture3D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        GL_extension_GL_EXT_framebuffer_object,
        GL_extension_GL_OES_texture_3D,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        744 /* "glFramebufferTexture3D" */,
        744 /* "glFramebufferTexture3D" */,
        745 /* "glFramebufferTexture3DEXT" */,
        746 /* "glFramebufferTexture3DOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[744] /* "glFramebufferTexture3D" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERTEXTURE3DEXTPROC
epoxy_glFramebufferTexture3DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        GL_extension_GL_OES_texture_3D,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        745 /* "glFramebufferTexture3DEXT" */,
        744 /* "glFramebufferTexture3D" */,
        744 /* "glFramebufferTexture3D" */,
        746 /* "glFramebufferTexture3DOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[745] /* "glFramebufferTexture3DEXT" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERTEXTURE3DOESPROC
epoxy_glFramebufferTexture3DOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_3D,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        746 /* "glFramebufferTexture3DOES" */,
        744 /* "glFramebufferTexture3D" */,
        744 /* "glFramebufferTexture3D" */,
        745 /* "glFramebufferTexture3DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[746] /* "glFramebufferTexture3DOES" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERTEXTUREARBPROC
epoxy_glFramebufferTextureARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_geometry_shader4,
        Desktop_OpenGL_3_2,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_geometry_shader,
        GL_extension_GL_NV_geometry_program4,
        GL_extension_GL_OES_geometry_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        747 /* "glFramebufferTextureARB" */,
        735 /* "glFramebufferTexture" */,
        735 /* "glFramebufferTexture" */,
        748 /* "glFramebufferTextureEXT" */,
        748 /* "glFramebufferTextureEXT" */,
        757 /* "glFramebufferTextureOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[747] /* "glFramebufferTextureARB" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERTEXTUREEXTPROC
epoxy_glFramebufferTextureEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_geometry_shader,
        GL_extension_GL_NV_geometry_program4,
        Desktop_OpenGL_3_2,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_geometry_shader4,
        GL_extension_GL_OES_geometry_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        748 /* "glFramebufferTextureEXT" */,
        748 /* "glFramebufferTextureEXT" */,
        735 /* "glFramebufferTexture" */,
        735 /* "glFramebufferTexture" */,
        747 /* "glFramebufferTextureARB" */,
        757 /* "glFramebufferTextureOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[748] /* "glFramebufferTextureEXT" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERTEXTUREFACEARBPROC
epoxy_glFramebufferTextureFaceARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_geometry_shader4,
        GL_extension_GL_NV_geometry_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        749 /* "glFramebufferTextureFaceARB" */,
        750 /* "glFramebufferTextureFaceEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[749] /* "glFramebufferTextureFaceARB" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
epoxy_glFramebufferTextureFaceEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_geometry_program4,
        GL_extension_GL_ARB_geometry_shader4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        750 /* "glFramebufferTextureFaceEXT" */,
        749 /* "glFramebufferTextureFaceARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[750] /* "glFramebufferTextureFaceEXT" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERTEXTURELAYERPROC
epoxy_glFramebufferTextureLayer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_geometry_shader4,
        GL_extension_GL_EXT_texture_array,
        GL_extension_GL_NV_geometry_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        751 /* "glFramebufferTextureLayer" */,
        751 /* "glFramebufferTextureLayer" */,
        751 /* "glFramebufferTextureLayer" */,
        752 /* "glFramebufferTextureLayerARB" */,
        754 /* "glFramebufferTextureLayerEXT" */,
        754 /* "glFramebufferTextureLayerEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[751] /* "glFramebufferTextureLayer" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERTEXTURELAYERARBPROC
epoxy_glFramebufferTextureLayerARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_geometry_shader4,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_texture_array,
        GL_extension_GL_NV_geometry_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        752 /* "glFramebufferTextureLayerARB" */,
        751 /* "glFramebufferTextureLayer" */,
        751 /* "glFramebufferTextureLayer" */,
        751 /* "glFramebufferTextureLayer" */,
        754 /* "glFramebufferTextureLayerEXT" */,
        754 /* "glFramebufferTextureLayerEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[752] /* "glFramebufferTextureLayerARB" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC
epoxy_glFramebufferTextureLayerDownsampleIMG_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IMG_framebuffer_downsample, 753 /* glFramebufferTextureLayerDownsampleIMG */);
}

static PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
epoxy_glFramebufferTextureLayerEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_array,
        GL_extension_GL_NV_geometry_program4,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_geometry_shader4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        754 /* "glFramebufferTextureLayerEXT" */,
        754 /* "glFramebufferTextureLayerEXT" */,
        751 /* "glFramebufferTextureLayer" */,
        751 /* "glFramebufferTextureLayer" */,
        751 /* "glFramebufferTextureLayer" */,
        752 /* "glFramebufferTextureLayerARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[754] /* "glFramebufferTextureLayerEXT" */,
                                providers, entrypoints);
}

static PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC
epoxy_glFramebufferTextureMultisampleMultiviewOVR_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OVR_multiview_multisampled_render_to_texture, 755 /* glFramebufferTextureMultisampleMultiviewOVR */);
}

static PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC
epoxy_glFramebufferTextureMultiviewOVR_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OVR_multiview, 756 /* glFramebufferTextureMultiviewOVR */);
}

static PFNGLFRAMEBUFFERTEXTUREOESPROC
epoxy_glFramebufferTextureOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_geometry_shader,
        Desktop_OpenGL_3_2,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_geometry_shader4,
        GL_extension_GL_EXT_geometry_shader,
        GL_extension_GL_NV_geometry_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        757 /* "glFramebufferTextureOES" */,
        735 /* "glFramebufferTexture" */,
        735 /* "glFramebufferTexture" */,
        747 /* "glFramebufferTextureARB" */,
        748 /* "glFramebufferTextureEXT" */,
        748 /* "glFramebufferTextureEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[757] /* "glFramebufferTextureOES" */,
                                providers, entrypoints);
}

static PFNGLFREEOBJECTBUFFERATIPROC
epoxy_glFreeObjectBufferATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_array_object, 758 /* glFreeObjectBufferATI */);
}

static PFNGLFRONTFACEPROC
epoxy_glFrontFace_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        759 /* "glFrontFace" */,
        759 /* "glFrontFace" */,
        759 /* "glFrontFace" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[759] /* "glFrontFace" */,
                                providers, entrypoints);
}

static PFNGLFRUSTUMPROC
epoxy_glFrustum_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 760 /* glFrustum */);
}

static PFNGLFRUSTUMFPROC
epoxy_glFrustumf_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 761 /* glFrustumf */);
}

static PFNGLFRUSTUMFOESPROC
epoxy_glFrustumfOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_single_precision, 762 /* glFrustumfOES */);
}

static PFNGLFRUSTUMXPROC
epoxy_glFrustumx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 763 /* glFrustumx */);
}

static PFNGLFRUSTUMXOESPROC
epoxy_glFrustumxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 764 /* glFrustumxOES */);
}

static PFNGLGENASYNCMARKERSSGIXPROC
epoxy_glGenAsyncMarkersSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_async, 765 /* glGenAsyncMarkersSGIX */);
}

static PFNGLGENBUFFERSPROC
epoxy_glGenBuffers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        766 /* "glGenBuffers" */,
        766 /* "glGenBuffers" */,
        766 /* "glGenBuffers" */,
        767 /* "glGenBuffersARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[766] /* "glGenBuffers" */,
                                providers, entrypoints);
}

static PFNGLGENBUFFERSARBPROC
epoxy_glGenBuffersARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_buffer_object,
        Desktop_OpenGL_1_5,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        767 /* "glGenBuffersARB" */,
        766 /* "glGenBuffers" */,
        766 /* "glGenBuffers" */,
        766 /* "glGenBuffers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[767] /* "glGenBuffersARB" */,
                                providers, entrypoints);
}

static PFNGLGENFENCESAPPLEPROC
epoxy_glGenFencesAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_fence, 768 /* glGenFencesAPPLE */);
}

static PFNGLGENFENCESNVPROC
epoxy_glGenFencesNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_fence, 769 /* glGenFencesNV */);
}

static PFNGLGENFRAGMENTSHADERSATIPROC
epoxy_glGenFragmentShadersATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_fragment_shader, 770 /* glGenFragmentShadersATI */);
}

static PFNGLGENFRAMEBUFFERSPROC
epoxy_glGenFramebuffers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        771 /* "glGenFramebuffers" */,
        771 /* "glGenFramebuffers" */,
        771 /* "glGenFramebuffers" */,
        772 /* "glGenFramebuffersEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[771] /* "glGenFramebuffers" */,
                                providers, entrypoints);
}

static PFNGLGENFRAMEBUFFERSEXTPROC
epoxy_glGenFramebuffersEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        772 /* "glGenFramebuffersEXT" */,
        771 /* "glGenFramebuffers" */,
        771 /* "glGenFramebuffers" */,
        771 /* "glGenFramebuffers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[772] /* "glGenFramebuffersEXT" */,
                                providers, entrypoints);
}

static PFNGLGENFRAMEBUFFERSOESPROC
epoxy_glGenFramebuffersOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_framebuffer_object, 773 /* glGenFramebuffersOES */);
}

static PFNGLGENLISTSPROC
epoxy_glGenLists_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 774 /* glGenLists */);
}

static PFNGLGENNAMESAMDPROC
epoxy_glGenNamesAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_name_gen_delete, 775 /* glGenNamesAMD */);
}

static PFNGLGENOCCLUSIONQUERIESNVPROC
epoxy_glGenOcclusionQueriesNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_occlusion_query, 776 /* glGenOcclusionQueriesNV */);
}

static PFNGLGENPATHSNVPROC
epoxy_glGenPathsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 777 /* glGenPathsNV */);
}

static PFNGLGENPERFMONITORSAMDPROC
epoxy_glGenPerfMonitorsAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_performance_monitor, 778 /* glGenPerfMonitorsAMD */);
}

static PFNGLGENPROGRAMPIPELINESPROC
epoxy_glGenProgramPipelines_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        779 /* "glGenProgramPipelines" */,
        779 /* "glGenProgramPipelines" */,
        779 /* "glGenProgramPipelines" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[779] /* "glGenProgramPipelines" */,
                                providers, entrypoints);
}

static PFNGLGENPROGRAMPIPELINESEXTPROC
epoxy_glGenProgramPipelinesEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_separate_shader_objects, 780 /* glGenProgramPipelinesEXT */);
}

static PFNGLGENPROGRAMSARBPROC
epoxy_glGenProgramsARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        781 /* "glGenProgramsARB" */,
        781 /* "glGenProgramsARB" */,
        782 /* "glGenProgramsNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[781] /* "glGenProgramsARB" */,
                                providers, entrypoints);
}

static PFNGLGENPROGRAMSNVPROC
epoxy_glGenProgramsNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        782 /* "glGenProgramsNV" */,
        781 /* "glGenProgramsARB" */,
        781 /* "glGenProgramsARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[782] /* "glGenProgramsNV" */,
                                providers, entrypoints);
}

static PFNGLGENQUERIESPROC
epoxy_glGenQueries_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_occlusion_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        783 /* "glGenQueries" */,
        783 /* "glGenQueries" */,
        784 /* "glGenQueriesARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[783] /* "glGenQueries" */,
                                providers, entrypoints);
}

static PFNGLGENQUERIESARBPROC
epoxy_glGenQueriesARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_occlusion_query,
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        784 /* "glGenQueriesARB" */,
        783 /* "glGenQueries" */,
        783 /* "glGenQueries" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[784] /* "glGenQueriesARB" */,
                                providers, entrypoints);
}

static PFNGLGENQUERIESEXTPROC
epoxy_glGenQueriesEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_disjoint_timer_query,
        GL_extension_GL_EXT_occlusion_query_boolean,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        785 /* "glGenQueriesEXT" */,
        785 /* "glGenQueriesEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[785] /* "glGenQueriesEXT" */,
                                providers, entrypoints);
}

static PFNGLGENRENDERBUFFERSPROC
epoxy_glGenRenderbuffers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        786 /* "glGenRenderbuffers" */,
        786 /* "glGenRenderbuffers" */,
        786 /* "glGenRenderbuffers" */,
        787 /* "glGenRenderbuffersEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[786] /* "glGenRenderbuffers" */,
                                providers, entrypoints);
}

static PFNGLGENRENDERBUFFERSEXTPROC
epoxy_glGenRenderbuffersEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        787 /* "glGenRenderbuffersEXT" */,
        786 /* "glGenRenderbuffers" */,
        786 /* "glGenRenderbuffers" */,
        786 /* "glGenRenderbuffers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[787] /* "glGenRenderbuffersEXT" */,
                                providers, entrypoints);
}

static PFNGLGENRENDERBUFFERSOESPROC
epoxy_glGenRenderbuffersOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_framebuffer_object, 788 /* glGenRenderbuffersOES */);
}

static PFNGLGENSAMPLERSPROC
epoxy_glGenSamplers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        789 /* "glGenSamplers" */,
        789 /* "glGenSamplers" */,
        789 /* "glGenSamplers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[789] /* "glGenSamplers" */,
                                providers, entrypoints);
}

static PFNGLGENSYMBOLSEXTPROC
epoxy_glGenSymbolsEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 790 /* glGenSymbolsEXT */);
}

static PFNGLGENTEXTURESPROC
epoxy_glGenTextures_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        791 /* "glGenTextures" */,
        791 /* "glGenTextures" */,
        791 /* "glGenTextures" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[791] /* "glGenTextures" */,
                                providers, entrypoints);
}

static PFNGLGENTEXTURESEXTPROC
epoxy_glGenTexturesEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_texture_object, 792 /* glGenTexturesEXT */);
}

static PFNGLGENTRANSFORMFEEDBACKSPROC
epoxy_glGenTransformFeedbacks_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback2,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_transform_feedback2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        793 /* "glGenTransformFeedbacks" */,
        793 /* "glGenTransformFeedbacks" */,
        793 /* "glGenTransformFeedbacks" */,
        794 /* "glGenTransformFeedbacksNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[793] /* "glGenTransformFeedbacks" */,
                                providers, entrypoints);
}

static PFNGLGENTRANSFORMFEEDBACKSNVPROC
epoxy_glGenTransformFeedbacksNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_transform_feedback2,
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback2,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        794 /* "glGenTransformFeedbacksNV" */,
        793 /* "glGenTransformFeedbacks" */,
        793 /* "glGenTransformFeedbacks" */,
        793 /* "glGenTransformFeedbacks" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[794] /* "glGenTransformFeedbacksNV" */,
                                providers, entrypoints);
}

static PFNGLGENVERTEXARRAYSPROC
epoxy_glGenVertexArrays_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_vertex_array_object,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_vertex_array_object,
        GL_extension_GL_OES_vertex_array_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        795 /* "glGenVertexArrays" */,
        795 /* "glGenVertexArrays" */,
        795 /* "glGenVertexArrays" */,
        796 /* "glGenVertexArraysAPPLE" */,
        797 /* "glGenVertexArraysOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[795] /* "glGenVertexArrays" */,
                                providers, entrypoints);
}

static PFNGLGENVERTEXARRAYSAPPLEPROC
epoxy_glGenVertexArraysAPPLE_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_APPLE_vertex_array_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_vertex_array_object,
        OpenGL_ES_3_0,
        GL_extension_GL_OES_vertex_array_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        796 /* "glGenVertexArraysAPPLE" */,
        795 /* "glGenVertexArrays" */,
        795 /* "glGenVertexArrays" */,
        795 /* "glGenVertexArrays" */,
        797 /* "glGenVertexArraysOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[796] /* "glGenVertexArraysAPPLE" */,
                                providers, entrypoints);
}

static PFNGLGENVERTEXARRAYSOESPROC
epoxy_glGenVertexArraysOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_vertex_array_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_vertex_array_object,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_vertex_array_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        797 /* "glGenVertexArraysOES" */,
        795 /* "glGenVertexArrays" */,
        795 /* "glGenVertexArrays" */,
        795 /* "glGenVertexArrays" */,
        796 /* "glGenVertexArraysAPPLE" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[797] /* "glGenVertexArraysOES" */,
                                providers, entrypoints);
}

static PFNGLGENVERTEXSHADERSEXTPROC
epoxy_glGenVertexShadersEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 798 /* glGenVertexShadersEXT */);
}

static PFNGLGENERATEMIPMAPPROC
epoxy_glGenerateMipmap_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        799 /* "glGenerateMipmap" */,
        799 /* "glGenerateMipmap" */,
        799 /* "glGenerateMipmap" */,
        800 /* "glGenerateMipmapEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[799] /* "glGenerateMipmap" */,
                                providers, entrypoints);
}

static PFNGLGENERATEMIPMAPEXTPROC
epoxy_glGenerateMipmapEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        800 /* "glGenerateMipmapEXT" */,
        799 /* "glGenerateMipmap" */,
        799 /* "glGenerateMipmap" */,
        799 /* "glGenerateMipmap" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[800] /* "glGenerateMipmapEXT" */,
                                providers, entrypoints);
}

static PFNGLGENERATEMIPMAPOESPROC
epoxy_glGenerateMipmapOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_framebuffer_object, 801 /* glGenerateMipmapOES */);
}

static PFNGLGENERATEMULTITEXMIPMAPEXTPROC
epoxy_glGenerateMultiTexMipmapEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 802 /* glGenerateMultiTexMipmapEXT */);
}

static PFNGLGENERATETEXTUREMIPMAPPROC
epoxy_glGenerateTextureMipmap_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        803 /* "glGenerateTextureMipmap" */,
        803 /* "glGenerateTextureMipmap" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[803] /* "glGenerateTextureMipmap" */,
                                providers, entrypoints);
}

static PFNGLGENERATETEXTUREMIPMAPEXTPROC
epoxy_glGenerateTextureMipmapEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 804 /* glGenerateTextureMipmapEXT */);
}

static PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
epoxy_glGetActiveAtomicCounterBufferiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_shader_atomic_counters,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        805 /* "glGetActiveAtomicCounterBufferiv" */,
        805 /* "glGetActiveAtomicCounterBufferiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[805] /* "glGetActiveAtomicCounterBufferiv" */,
                                providers, entrypoints);
}

static PFNGLGETACTIVEATTRIBPROC
epoxy_glGetActiveAttrib_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        806 /* "glGetActiveAttrib" */,
        806 /* "glGetActiveAttrib" */,
        807 /* "glGetActiveAttribARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[806] /* "glGetActiveAttrib" */,
                                providers, entrypoints);
}

static PFNGLGETACTIVEATTRIBARBPROC
epoxy_glGetActiveAttribARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        807 /* "glGetActiveAttribARB" */,
        806 /* "glGetActiveAttrib" */,
        806 /* "glGetActiveAttrib" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[807] /* "glGetActiveAttribARB" */,
                                providers, entrypoints);
}

static PFNGLGETACTIVESUBROUTINENAMEPROC
epoxy_glGetActiveSubroutineName_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_shader_subroutine,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        808 /* "glGetActiveSubroutineName" */,
        808 /* "glGetActiveSubroutineName" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[808] /* "glGetActiveSubroutineName" */,
                                providers, entrypoints);
}

static PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
epoxy_glGetActiveSubroutineUniformName_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_shader_subroutine,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        809 /* "glGetActiveSubroutineUniformName" */,
        809 /* "glGetActiveSubroutineUniformName" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[809] /* "glGetActiveSubroutineUniformName" */,
                                providers, entrypoints);
}

static PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
epoxy_glGetActiveSubroutineUniformiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_shader_subroutine,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        810 /* "glGetActiveSubroutineUniformiv" */,
        810 /* "glGetActiveSubroutineUniformiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[810] /* "glGetActiveSubroutineUniformiv" */,
                                providers, entrypoints);
}

static PFNGLGETACTIVEUNIFORMPROC
epoxy_glGetActiveUniform_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        811 /* "glGetActiveUniform" */,
        811 /* "glGetActiveUniform" */,
        812 /* "glGetActiveUniformARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[811] /* "glGetActiveUniform" */,
                                providers, entrypoints);
}

static PFNGLGETACTIVEUNIFORMARBPROC
epoxy_glGetActiveUniformARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        812 /* "glGetActiveUniformARB" */,
        811 /* "glGetActiveUniform" */,
        811 /* "glGetActiveUniform" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[812] /* "glGetActiveUniformARB" */,
                                providers, entrypoints);
}

static PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
epoxy_glGetActiveUniformBlockName_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_uniform_buffer_object,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        813 /* "glGetActiveUniformBlockName" */,
        813 /* "glGetActiveUniformBlockName" */,
        813 /* "glGetActiveUniformBlockName" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[813] /* "glGetActiveUniformBlockName" */,
                                providers, entrypoints);
}

static PFNGLGETACTIVEUNIFORMBLOCKIVPROC
epoxy_glGetActiveUniformBlockiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_uniform_buffer_object,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        814 /* "glGetActiveUniformBlockiv" */,
        814 /* "glGetActiveUniformBlockiv" */,
        814 /* "glGetActiveUniformBlockiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[814] /* "glGetActiveUniformBlockiv" */,
                                providers, entrypoints);
}

static PFNGLGETACTIVEUNIFORMNAMEPROC
epoxy_glGetActiveUniformName_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_uniform_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        815 /* "glGetActiveUniformName" */,
        815 /* "glGetActiveUniformName" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[815] /* "glGetActiveUniformName" */,
                                providers, entrypoints);
}

static PFNGLGETACTIVEUNIFORMSIVPROC
epoxy_glGetActiveUniformsiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_uniform_buffer_object,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        816 /* "glGetActiveUniformsiv" */,
        816 /* "glGetActiveUniformsiv" */,
        816 /* "glGetActiveUniformsiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[816] /* "glGetActiveUniformsiv" */,
                                providers, entrypoints);
}

static PFNGLGETACTIVEVARYINGNVPROC
epoxy_glGetActiveVaryingNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_transform_feedback, 817 /* glGetActiveVaryingNV */);
}

static PFNGLGETARRAYOBJECTFVATIPROC
epoxy_glGetArrayObjectfvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_array_object, 818 /* glGetArrayObjectfvATI */);
}

static PFNGLGETARRAYOBJECTIVATIPROC
epoxy_glGetArrayObjectivATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_array_object, 819 /* glGetArrayObjectivATI */);
}

static PFNGLGETATTACHEDOBJECTSARBPROC
epoxy_glGetAttachedObjectsARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_shader_objects, 820 /* glGetAttachedObjectsARB */);
}

static PFNGLGETATTACHEDSHADERSPROC
epoxy_glGetAttachedShaders_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        821 /* "glGetAttachedShaders" */,
        821 /* "glGetAttachedShaders" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[821] /* "glGetAttachedShaders" */,
                                providers, entrypoints);
}

static PFNGLGETATTRIBLOCATIONPROC
epoxy_glGetAttribLocation_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        822 /* "glGetAttribLocation" */,
        822 /* "glGetAttribLocation" */,
        823 /* "glGetAttribLocationARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[822] /* "glGetAttribLocation" */,
                                providers, entrypoints);
}

static PFNGLGETATTRIBLOCATIONARBPROC
epoxy_glGetAttribLocationARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        823 /* "glGetAttribLocationARB" */,
        822 /* "glGetAttribLocation" */,
        822 /* "glGetAttribLocation" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[823] /* "glGetAttribLocationARB" */,
                                providers, entrypoints);
}

static PFNGLGETBOOLEANINDEXEDVEXTPROC
epoxy_glGetBooleanIndexedvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        824 /* "glGetBooleanIndexedvEXT" */,
        824 /* "glGetBooleanIndexedvEXT" */,
        825 /* "glGetBooleani_v" */,
        825 /* "glGetBooleani_v" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[824] /* "glGetBooleanIndexedvEXT" */,
                                providers, entrypoints);
}

static PFNGLGETBOOLEANI_VPROC
epoxy_glGetBooleani_v_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        825 /* "glGetBooleani_v" */,
        825 /* "glGetBooleani_v" */,
        824 /* "glGetBooleanIndexedvEXT" */,
        824 /* "glGetBooleanIndexedvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[825] /* "glGetBooleani_v" */,
                                providers, entrypoints);
}

static PFNGLGETBOOLEANVPROC
epoxy_glGetBooleanv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        826 /* "glGetBooleanv" */,
        826 /* "glGetBooleanv" */,
        826 /* "glGetBooleanv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[826] /* "glGetBooleanv" */,
                                providers, entrypoints);
}

static PFNGLGETBUFFERPARAMETERI64VPROC
epoxy_glGetBufferParameteri64v_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        827 /* "glGetBufferParameteri64v" */,
        827 /* "glGetBufferParameteri64v" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[827] /* "glGetBufferParameteri64v" */,
                                providers, entrypoints);
}

static PFNGLGETBUFFERPARAMETERIVPROC
epoxy_glGetBufferParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        828 /* "glGetBufferParameteriv" */,
        828 /* "glGetBufferParameteriv" */,
        828 /* "glGetBufferParameteriv" */,
        829 /* "glGetBufferParameterivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[828] /* "glGetBufferParameteriv" */,
                                providers, entrypoints);
}

static PFNGLGETBUFFERPARAMETERIVARBPROC
epoxy_glGetBufferParameterivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_buffer_object,
        Desktop_OpenGL_1_5,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        829 /* "glGetBufferParameterivARB" */,
        828 /* "glGetBufferParameteriv" */,
        828 /* "glGetBufferParameteriv" */,
        828 /* "glGetBufferParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[829] /* "glGetBufferParameterivARB" */,
                                providers, entrypoints);
}

static PFNGLGETBUFFERPARAMETERUI64VNVPROC
epoxy_glGetBufferParameterui64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_shader_buffer_load, 830 /* glGetBufferParameterui64vNV */);
}

static PFNGLGETBUFFERPOINTERVPROC
epoxy_glGetBufferPointerv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_vertex_buffer_object,
        GL_extension_GL_OES_mapbuffer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        831 /* "glGetBufferPointerv" */,
        831 /* "glGetBufferPointerv" */,
        832 /* "glGetBufferPointervARB" */,
        833 /* "glGetBufferPointervOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[831] /* "glGetBufferPointerv" */,
                                providers, entrypoints);
}

static PFNGLGETBUFFERPOINTERVARBPROC
epoxy_glGetBufferPointervARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_buffer_object,
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        GL_extension_GL_OES_mapbuffer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        832 /* "glGetBufferPointervARB" */,
        831 /* "glGetBufferPointerv" */,
        831 /* "glGetBufferPointerv" */,
        833 /* "glGetBufferPointervOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[832] /* "glGetBufferPointervARB" */,
                                providers, entrypoints);
}

static PFNGLGETBUFFERPOINTERVOESPROC
epoxy_glGetBufferPointervOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_mapbuffer,
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_vertex_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        833 /* "glGetBufferPointervOES" */,
        831 /* "glGetBufferPointerv" */,
        831 /* "glGetBufferPointerv" */,
        832 /* "glGetBufferPointervARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[833] /* "glGetBufferPointervOES" */,
                                providers, entrypoints);
}

static PFNGLGETBUFFERSUBDATAPROC
epoxy_glGetBufferSubData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        GL_extension_GL_ARB_vertex_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        834 /* "glGetBufferSubData" */,
        835 /* "glGetBufferSubDataARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[834] /* "glGetBufferSubData" */,
                                providers, entrypoints);
}

static PFNGLGETBUFFERSUBDATAARBPROC
epoxy_glGetBufferSubDataARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_buffer_object,
        Desktop_OpenGL_1_5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        835 /* "glGetBufferSubDataARB" */,
        834 /* "glGetBufferSubData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[835] /* "glGetBufferSubDataARB" */,
                                providers, entrypoints);
}

static PFNGLGETCLIPPLANEPROC
epoxy_glGetClipPlane_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 836 /* glGetClipPlane */);
}

static PFNGLGETCLIPPLANEFPROC
epoxy_glGetClipPlanef_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 837 /* glGetClipPlanef */);
}

static PFNGLGETCLIPPLANEFOESPROC
epoxy_glGetClipPlanefOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_single_precision, 838 /* glGetClipPlanefOES */);
}

static PFNGLGETCLIPPLANEXPROC
epoxy_glGetClipPlanex_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 839 /* glGetClipPlanex */);
}

static PFNGLGETCLIPPLANEXOESPROC
epoxy_glGetClipPlanexOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 840 /* glGetClipPlanexOES */);
}

static PFNGLGETCOLORTABLEPROC
epoxy_glGetColorTable_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_paletted_texture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        841 /* "glGetColorTable" */,
        842 /* "glGetColorTableEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[841] /* "glGetColorTable" */,
                                providers, entrypoints);
}

static PFNGLGETCOLORTABLEEXTPROC
epoxy_glGetColorTableEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_paletted_texture,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        842 /* "glGetColorTableEXT" */,
        841 /* "glGetColorTable" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[842] /* "glGetColorTableEXT" */,
                                providers, entrypoints);
}

static PFNGLGETCOLORTABLEPARAMETERFVPROC
epoxy_glGetColorTableParameterfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_paletted_texture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        843 /* "glGetColorTableParameterfv" */,
        844 /* "glGetColorTableParameterfvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[843] /* "glGetColorTableParameterfv" */,
                                providers, entrypoints);
}

static PFNGLGETCOLORTABLEPARAMETERFVEXTPROC
epoxy_glGetColorTableParameterfvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_paletted_texture,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        844 /* "glGetColorTableParameterfvEXT" */,
        843 /* "glGetColorTableParameterfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[844] /* "glGetColorTableParameterfvEXT" */,
                                providers, entrypoints);
}

static PFNGLGETCOLORTABLEPARAMETERFVSGIPROC
epoxy_glGetColorTableParameterfvSGI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGI_color_table, 845 /* glGetColorTableParameterfvSGI */);
}

static PFNGLGETCOLORTABLEPARAMETERIVPROC
epoxy_glGetColorTableParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_paletted_texture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        846 /* "glGetColorTableParameteriv" */,
        847 /* "glGetColorTableParameterivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[846] /* "glGetColorTableParameteriv" */,
                                providers, entrypoints);
}

static PFNGLGETCOLORTABLEPARAMETERIVEXTPROC
epoxy_glGetColorTableParameterivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_paletted_texture,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        847 /* "glGetColorTableParameterivEXT" */,
        846 /* "glGetColorTableParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[847] /* "glGetColorTableParameterivEXT" */,
                                providers, entrypoints);
}

static PFNGLGETCOLORTABLEPARAMETERIVSGIPROC
epoxy_glGetColorTableParameterivSGI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGI_color_table, 848 /* glGetColorTableParameterivSGI */);
}

static PFNGLGETCOLORTABLESGIPROC
epoxy_glGetColorTableSGI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGI_color_table, 849 /* glGetColorTableSGI */);
}

static PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
epoxy_glGetCombinerInputParameterfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_register_combiners, 850 /* glGetCombinerInputParameterfvNV */);
}

static PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
epoxy_glGetCombinerInputParameterivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_register_combiners, 851 /* glGetCombinerInputParameterivNV */);
}

static PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
epoxy_glGetCombinerOutputParameterfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_register_combiners, 852 /* glGetCombinerOutputParameterfvNV */);
}

static PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
epoxy_glGetCombinerOutputParameterivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_register_combiners, 853 /* glGetCombinerOutputParameterivNV */);
}

static PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
epoxy_glGetCombinerStageParameterfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_register_combiners2, 854 /* glGetCombinerStageParameterfvNV */);
}

static PFNGLGETCOMMANDHEADERNVPROC
epoxy_glGetCommandHeaderNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 855 /* glGetCommandHeaderNV */);
}

static PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
epoxy_glGetCompressedMultiTexImageEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 856 /* glGetCompressedMultiTexImageEXT */);
}

static PFNGLGETCOMPRESSEDTEXIMAGEPROC
epoxy_glGetCompressedTexImage_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_texture_compression,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        857 /* "glGetCompressedTexImage" */,
        858 /* "glGetCompressedTexImageARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[857] /* "glGetCompressedTexImage" */,
                                providers, entrypoints);
}

static PFNGLGETCOMPRESSEDTEXIMAGEARBPROC
epoxy_glGetCompressedTexImageARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_texture_compression,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        858 /* "glGetCompressedTexImageARB" */,
        857 /* "glGetCompressedTexImage" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[858] /* "glGetCompressedTexImageARB" */,
                                providers, entrypoints);
}

static PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC
epoxy_glGetCompressedTextureImage_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        859 /* "glGetCompressedTextureImage" */,
        859 /* "glGetCompressedTextureImage" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[859] /* "glGetCompressedTextureImage" */,
                                providers, entrypoints);
}

static PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
epoxy_glGetCompressedTextureImageEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 860 /* glGetCompressedTextureImageEXT */);
}

static PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC
epoxy_glGetCompressedTextureSubImage_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_get_texture_sub_image,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        861 /* "glGetCompressedTextureSubImage" */,
        861 /* "glGetCompressedTextureSubImage" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[861] /* "glGetCompressedTextureSubImage" */,
                                providers, entrypoints);
}

static PFNGLGETCONVOLUTIONFILTERPROC
epoxy_glGetConvolutionFilter_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_imaging, 862 /* glGetConvolutionFilter */);
}

static PFNGLGETCONVOLUTIONFILTEREXTPROC
epoxy_glGetConvolutionFilterEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_convolution, 863 /* glGetConvolutionFilterEXT */);
}

static PFNGLGETCONVOLUTIONPARAMETERFVPROC
epoxy_glGetConvolutionParameterfv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_imaging, 864 /* glGetConvolutionParameterfv */);
}

static PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
epoxy_glGetConvolutionParameterfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_convolution, 865 /* glGetConvolutionParameterfvEXT */);
}

static PFNGLGETCONVOLUTIONPARAMETERIVPROC
epoxy_glGetConvolutionParameteriv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_imaging, 866 /* glGetConvolutionParameteriv */);
}

static PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
epoxy_glGetConvolutionParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_convolution, 867 /* glGetConvolutionParameterivEXT */);
}

static PFNGLGETCONVOLUTIONPARAMETERXVOESPROC
epoxy_glGetConvolutionParameterxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 868 /* glGetConvolutionParameterxvOES */);
}

static PFNGLGETCOVERAGEMODULATIONTABLENVPROC
epoxy_glGetCoverageModulationTableNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_framebuffer_mixed_samples, 869 /* glGetCoverageModulationTableNV */);
}

static PFNGLGETDEBUGMESSAGELOGPROC
epoxy_glGetDebugMessageLog_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_debug_output,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        870 /* "glGetDebugMessageLog" */,
        870 /* "glGetDebugMessageLog" */,
        870 /* "glGetDebugMessageLog" */,
        872 /* "glGetDebugMessageLogARB" */,
        873 /* "glGetDebugMessageLogKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[870] /* "glGetDebugMessageLog" */,
                                providers, entrypoints);
}

static PFNGLGETDEBUGMESSAGELOGAMDPROC
epoxy_glGetDebugMessageLogAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_debug_output, 871 /* glGetDebugMessageLogAMD */);
}

static PFNGLGETDEBUGMESSAGELOGARBPROC
epoxy_glGetDebugMessageLogARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_debug_output,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        872 /* "glGetDebugMessageLogARB" */,
        870 /* "glGetDebugMessageLog" */,
        870 /* "glGetDebugMessageLog" */,
        870 /* "glGetDebugMessageLog" */,
        873 /* "glGetDebugMessageLogKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[872] /* "glGetDebugMessageLogARB" */,
                                providers, entrypoints);
}

static PFNGLGETDEBUGMESSAGELOGKHRPROC
epoxy_glGetDebugMessageLogKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_debug,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_debug_output,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        873 /* "glGetDebugMessageLogKHR" */,
        870 /* "glGetDebugMessageLog" */,
        870 /* "glGetDebugMessageLog" */,
        870 /* "glGetDebugMessageLog" */,
        872 /* "glGetDebugMessageLogARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[873] /* "glGetDebugMessageLogKHR" */,
                                providers, entrypoints);
}

static PFNGLGETDETAILTEXFUNCSGISPROC
epoxy_glGetDetailTexFuncSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_detail_texture, 874 /* glGetDetailTexFuncSGIS */);
}

static PFNGLGETDOUBLEINDEXEDVEXTPROC
epoxy_glGetDoubleIndexedvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        GL_extension_GL_EXT_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        875 /* "glGetDoubleIndexedvEXT" */,
        876 /* "glGetDoublei_v" */,
        876 /* "glGetDoublei_v" */,
        877 /* "glGetDoublei_vEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[875] /* "glGetDoubleIndexedvEXT" */,
                                providers, entrypoints);
}

static PFNGLGETDOUBLEI_VPROC
epoxy_glGetDoublei_v_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        876 /* "glGetDoublei_v" */,
        876 /* "glGetDoublei_v" */,
        875 /* "glGetDoubleIndexedvEXT" */,
        877 /* "glGetDoublei_vEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[876] /* "glGetDoublei_v" */,
                                providers, entrypoints);
}

static PFNGLGETDOUBLEI_VEXTPROC
epoxy_glGetDoublei_vEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_direct_state_access,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        877 /* "glGetDoublei_vEXT" */,
        875 /* "glGetDoubleIndexedvEXT" */,
        876 /* "glGetDoublei_v" */,
        876 /* "glGetDoublei_v" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[877] /* "glGetDoublei_vEXT" */,
                                providers, entrypoints);
}

static PFNGLGETDOUBLEVPROC
epoxy_glGetDoublev_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 878 /* glGetDoublev */);
}

static PFNGLGETDRIVERCONTROLSTRINGQCOMPROC
epoxy_glGetDriverControlStringQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_driver_control, 879 /* glGetDriverControlStringQCOM */);
}

static PFNGLGETDRIVERCONTROLSQCOMPROC
epoxy_glGetDriverControlsQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_driver_control, 880 /* glGetDriverControlsQCOM */);
}

static PFNGLGETERRORPROC
epoxy_glGetError_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        881 /* "glGetError" */,
        881 /* "glGetError" */,
        881 /* "glGetError" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[881] /* "glGetError" */,
                                providers, entrypoints);
}

static PFNGLGETFENCEIVNVPROC
epoxy_glGetFenceivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_fence, 882 /* glGetFenceivNV */);
}

static PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
epoxy_glGetFinalCombinerInputParameterfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_register_combiners, 883 /* glGetFinalCombinerInputParameterfvNV */);
}

static PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
epoxy_glGetFinalCombinerInputParameterivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_register_combiners, 884 /* glGetFinalCombinerInputParameterivNV */);
}

static PFNGLGETFIRSTPERFQUERYIDINTELPROC
epoxy_glGetFirstPerfQueryIdINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_performance_query, 885 /* glGetFirstPerfQueryIdINTEL */);
}

static PFNGLGETFIXEDVPROC
epoxy_glGetFixedv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 886 /* glGetFixedv */);
}

static PFNGLGETFIXEDVOESPROC
epoxy_glGetFixedvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 887 /* glGetFixedvOES */);
}

static PFNGLGETFLOATINDEXEDVEXTPROC
epoxy_glGetFloatIndexedvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_NV_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        888 /* "glGetFloatIndexedvEXT" */,
        889 /* "glGetFloati_v" */,
        889 /* "glGetFloati_v" */,
        890 /* "glGetFloati_vEXT" */,
        891 /* "glGetFloati_vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[888] /* "glGetFloatIndexedvEXT" */,
                                providers, entrypoints);
}

static PFNGLGETFLOATI_VPROC
epoxy_glGetFloati_v_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_NV_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        889 /* "glGetFloati_v" */,
        889 /* "glGetFloati_v" */,
        888 /* "glGetFloatIndexedvEXT" */,
        890 /* "glGetFloati_vEXT" */,
        891 /* "glGetFloati_vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[889] /* "glGetFloati_v" */,
                                providers, entrypoints);
}

static PFNGLGETFLOATI_VEXTPROC
epoxy_glGetFloati_vEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_direct_state_access,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        GL_extension_GL_NV_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        890 /* "glGetFloati_vEXT" */,
        888 /* "glGetFloatIndexedvEXT" */,
        889 /* "glGetFloati_v" */,
        889 /* "glGetFloati_v" */,
        891 /* "glGetFloati_vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[890] /* "glGetFloati_vEXT" */,
                                providers, entrypoints);
}

static PFNGLGETFLOATI_VNVPROC
epoxy_glGetFloati_vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_viewport_array,
        GL_extension_GL_EXT_direct_state_access,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        GL_extension_GL_EXT_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        891 /* "glGetFloati_vNV" */,
        888 /* "glGetFloatIndexedvEXT" */,
        889 /* "glGetFloati_v" */,
        889 /* "glGetFloati_v" */,
        890 /* "glGetFloati_vEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[891] /* "glGetFloati_vNV" */,
                                providers, entrypoints);
}

static PFNGLGETFLOATVPROC
epoxy_glGetFloatv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        892 /* "glGetFloatv" */,
        892 /* "glGetFloatv" */,
        892 /* "glGetFloatv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[892] /* "glGetFloatv" */,
                                providers, entrypoints);
}

static PFNGLGETFOGFUNCSGISPROC
epoxy_glGetFogFuncSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_fog_function, 893 /* glGetFogFuncSGIS */);
}

static PFNGLGETFRAGDATAINDEXPROC
epoxy_glGetFragDataIndex_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_blend_func_extended,
        GL_extension_GL_EXT_blend_func_extended,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        894 /* "glGetFragDataIndex" */,
        894 /* "glGetFragDataIndex" */,
        895 /* "glGetFragDataIndexEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[894] /* "glGetFragDataIndex" */,
                                providers, entrypoints);
}

static PFNGLGETFRAGDATAINDEXEXTPROC
epoxy_glGetFragDataIndexEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_blend_func_extended,
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_blend_func_extended,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        895 /* "glGetFragDataIndexEXT" */,
        894 /* "glGetFragDataIndex" */,
        894 /* "glGetFragDataIndex" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[895] /* "glGetFragDataIndexEXT" */,
                                providers, entrypoints);
}

static PFNGLGETFRAGDATALOCATIONPROC
epoxy_glGetFragDataLocation_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_gpu_shader4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        896 /* "glGetFragDataLocation" */,
        896 /* "glGetFragDataLocation" */,
        897 /* "glGetFragDataLocationEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[896] /* "glGetFragDataLocation" */,
                                providers, entrypoints);
}

static PFNGLGETFRAGDATALOCATIONEXTPROC
epoxy_glGetFragDataLocationEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_gpu_shader4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        897 /* "glGetFragDataLocationEXT" */,
        896 /* "glGetFragDataLocation" */,
        896 /* "glGetFragDataLocation" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[897] /* "glGetFragDataLocationEXT" */,
                                providers, entrypoints);
}

static PFNGLGETFRAGMENTLIGHTFVSGIXPROC
epoxy_glGetFragmentLightfvSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 898 /* glGetFragmentLightfvSGIX */);
}

static PFNGLGETFRAGMENTLIGHTIVSGIXPROC
epoxy_glGetFragmentLightivSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 899 /* glGetFragmentLightivSGIX */);
}

static PFNGLGETFRAGMENTMATERIALFVSGIXPROC
epoxy_glGetFragmentMaterialfvSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 900 /* glGetFragmentMaterialfvSGIX */);
}

static PFNGLGETFRAGMENTMATERIALIVSGIXPROC
epoxy_glGetFragmentMaterialivSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 901 /* glGetFragmentMaterialivSGIX */);
}

static PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
epoxy_glGetFramebufferAttachmentParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        902 /* "glGetFramebufferAttachmentParameteriv" */,
        902 /* "glGetFramebufferAttachmentParameteriv" */,
        902 /* "glGetFramebufferAttachmentParameteriv" */,
        903 /* "glGetFramebufferAttachmentParameterivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[902] /* "glGetFramebufferAttachmentParameteriv" */,
                                providers, entrypoints);
}

static PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
epoxy_glGetFramebufferAttachmentParameterivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        903 /* "glGetFramebufferAttachmentParameterivEXT" */,
        902 /* "glGetFramebufferAttachmentParameteriv" */,
        902 /* "glGetFramebufferAttachmentParameteriv" */,
        902 /* "glGetFramebufferAttachmentParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[903] /* "glGetFramebufferAttachmentParameterivEXT" */,
                                providers, entrypoints);
}

static PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC
epoxy_glGetFramebufferAttachmentParameterivOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_framebuffer_object, 904 /* glGetFramebufferAttachmentParameterivOES */);
}

static PFNGLGETFRAMEBUFFERPARAMETERIVPROC
epoxy_glGetFramebufferParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_framebuffer_no_attachments,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        905 /* "glGetFramebufferParameteriv" */,
        905 /* "glGetFramebufferParameteriv" */,
        905 /* "glGetFramebufferParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[905] /* "glGetFramebufferParameteriv" */,
                                providers, entrypoints);
}

static PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
epoxy_glGetFramebufferParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 906 /* glGetFramebufferParameterivEXT */);
}

static PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC
epoxy_glGetFramebufferPixelLocalStorageSizeEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_shader_pixel_local_storage2, 907 /* glGetFramebufferPixelLocalStorageSizeEXT */);
}

static PFNGLGETGRAPHICSRESETSTATUSPROC
epoxy_glGetGraphicsResetStatus_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_KHR_robustness,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_robustness,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        908 /* "glGetGraphicsResetStatus" */,
        908 /* "glGetGraphicsResetStatus" */,
        908 /* "glGetGraphicsResetStatus" */,
        911 /* "glGetGraphicsResetStatusKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[908] /* "glGetGraphicsResetStatus" */,
                                providers, entrypoints);
}

static PFNGLGETGRAPHICSRESETSTATUSARBPROC
epoxy_glGetGraphicsResetStatusARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 909 /* glGetGraphicsResetStatusARB */);
}

static PFNGLGETGRAPHICSRESETSTATUSEXTPROC
epoxy_glGetGraphicsResetStatusEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_robustness, 910 /* glGetGraphicsResetStatusEXT */);
}

static PFNGLGETGRAPHICSRESETSTATUSKHRPROC
epoxy_glGetGraphicsResetStatusKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_robustness,
        Desktop_OpenGL_4_5,
        GL_extension_GL_KHR_robustness,
        OpenGL_ES_3_2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        911 /* "glGetGraphicsResetStatusKHR" */,
        908 /* "glGetGraphicsResetStatus" */,
        908 /* "glGetGraphicsResetStatus" */,
        908 /* "glGetGraphicsResetStatus" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[911] /* "glGetGraphicsResetStatusKHR" */,
                                providers, entrypoints);
}

static PFNGLGETHANDLEARBPROC
epoxy_glGetHandleARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_shader_objects, 912 /* glGetHandleARB */);
}

static PFNGLGETHISTOGRAMPROC
epoxy_glGetHistogram_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_imaging, 913 /* glGetHistogram */);
}

static PFNGLGETHISTOGRAMEXTPROC
epoxy_glGetHistogramEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_histogram, 914 /* glGetHistogramEXT */);
}

static PFNGLGETHISTOGRAMPARAMETERFVPROC
epoxy_glGetHistogramParameterfv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_imaging, 915 /* glGetHistogramParameterfv */);
}

static PFNGLGETHISTOGRAMPARAMETERFVEXTPROC
epoxy_glGetHistogramParameterfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_histogram, 916 /* glGetHistogramParameterfvEXT */);
}

static PFNGLGETHISTOGRAMPARAMETERIVPROC
epoxy_glGetHistogramParameteriv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_imaging, 917 /* glGetHistogramParameteriv */);
}

static PFNGLGETHISTOGRAMPARAMETERIVEXTPROC
epoxy_glGetHistogramParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_histogram, 918 /* glGetHistogramParameterivEXT */);
}

static PFNGLGETHISTOGRAMPARAMETERXVOESPROC
epoxy_glGetHistogramParameterxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 919 /* glGetHistogramParameterxvOES */);
}

static PFNGLGETIMAGEHANDLEARBPROC
epoxy_glGetImageHandleARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 920 /* glGetImageHandleARB */);
}

static PFNGLGETIMAGEHANDLENVPROC
epoxy_glGetImageHandleNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_texture, 921 /* glGetImageHandleNV */);
}

static PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
epoxy_glGetImageTransformParameterfvHP_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_HP_image_transform, 922 /* glGetImageTransformParameterfvHP */);
}

static PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
epoxy_glGetImageTransformParameterivHP_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_HP_image_transform, 923 /* glGetImageTransformParameterivHP */);
}

static PFNGLGETINFOLOGARBPROC
epoxy_glGetInfoLogARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_shader_objects, 924 /* glGetInfoLogARB */);
}

static PFNGLGETINSTRUMENTSSGIXPROC
epoxy_glGetInstrumentsSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_instruments, 925 /* glGetInstrumentsSGIX */);
}

static PFNGLGETINTEGER64I_VPROC
epoxy_glGetInteger64i_v_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        926 /* "glGetInteger64i_v" */,
        926 /* "glGetInteger64i_v" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[926] /* "glGetInteger64i_v" */,
                                providers, entrypoints);
}

static PFNGLGETINTEGER64VPROC
epoxy_glGetInteger64v_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_sync,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_sync,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        927 /* "glGetInteger64v" */,
        927 /* "glGetInteger64v" */,
        927 /* "glGetInteger64v" */,
        928 /* "glGetInteger64vAPPLE" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[927] /* "glGetInteger64v" */,
                                providers, entrypoints);
}

static PFNGLGETINTEGER64VAPPLEPROC
epoxy_glGetInteger64vAPPLE_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_APPLE_sync,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_sync,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        928 /* "glGetInteger64vAPPLE" */,
        927 /* "glGetInteger64v" */,
        927 /* "glGetInteger64v" */,
        927 /* "glGetInteger64v" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[928] /* "glGetInteger64vAPPLE" */,
                                providers, entrypoints);
}

static PFNGLGETINTEGERINDEXEDVEXTPROC
epoxy_glGetIntegerIndexedvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_uniform_buffer_object,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        929 /* "glGetIntegerIndexedvEXT" */,
        929 /* "glGetIntegerIndexedvEXT" */,
        930 /* "glGetIntegeri_v" */,
        930 /* "glGetIntegeri_v" */,
        930 /* "glGetIntegeri_v" */,
        930 /* "glGetIntegeri_v" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[929] /* "glGetIntegerIndexedvEXT" */,
                                providers, entrypoints);
}

static PFNGLGETINTEGERI_VPROC
epoxy_glGetIntegeri_v_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_uniform_buffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        930 /* "glGetIntegeri_v" */,
        930 /* "glGetIntegeri_v" */,
        930 /* "glGetIntegeri_v" */,
        930 /* "glGetIntegeri_v" */,
        929 /* "glGetIntegerIndexedvEXT" */,
        929 /* "glGetIntegerIndexedvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[930] /* "glGetIntegeri_v" */,
                                providers, entrypoints);
}

static PFNGLGETINTEGERI_VEXTPROC
epoxy_glGetIntegeri_vEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_multiview_draw_buffers, 931 /* glGetIntegeri_vEXT */);
}

static PFNGLGETINTEGERUI64I_VNVPROC
epoxy_glGetIntegerui64i_vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_buffer_unified_memory, 932 /* glGetIntegerui64i_vNV */);
}

static PFNGLGETINTEGERUI64VNVPROC
epoxy_glGetIntegerui64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_shader_buffer_load, 933 /* glGetIntegerui64vNV */);
}

static PFNGLGETINTEGERVPROC
epoxy_glGetIntegerv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, always_present, 934 /* glGetIntegerv */);
}

static PFNGLGETINTERNALFORMATSAMPLEIVNVPROC
epoxy_glGetInternalformatSampleivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_internalformat_sample_query, 935 /* glGetInternalformatSampleivNV */);
}

static PFNGLGETINTERNALFORMATI64VPROC
epoxy_glGetInternalformati64v_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_internalformat_query2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        936 /* "glGetInternalformati64v" */,
        936 /* "glGetInternalformati64v" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[936] /* "glGetInternalformati64v" */,
                                providers, entrypoints);
}

static PFNGLGETINTERNALFORMATIVPROC
epoxy_glGetInternalformativ_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_internalformat_query,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        937 /* "glGetInternalformativ" */,
        937 /* "glGetInternalformativ" */,
        937 /* "glGetInternalformativ" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[937] /* "glGetInternalformativ" */,
                                providers, entrypoints);
}

static PFNGLGETINVARIANTBOOLEANVEXTPROC
epoxy_glGetInvariantBooleanvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 938 /* glGetInvariantBooleanvEXT */);
}

static PFNGLGETINVARIANTFLOATVEXTPROC
epoxy_glGetInvariantFloatvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 939 /* glGetInvariantFloatvEXT */);
}

static PFNGLGETINVARIANTINTEGERVEXTPROC
epoxy_glGetInvariantIntegervEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 940 /* glGetInvariantIntegervEXT */);
}

static PFNGLGETLIGHTFVPROC
epoxy_glGetLightfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        941 /* "glGetLightfv" */,
        941 /* "glGetLightfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[941] /* "glGetLightfv" */,
                                providers, entrypoints);
}

static PFNGLGETLIGHTIVPROC
epoxy_glGetLightiv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 942 /* glGetLightiv */);
}

static PFNGLGETLIGHTXOESPROC
epoxy_glGetLightxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 943 /* glGetLightxOES */);
}

static PFNGLGETLIGHTXVPROC
epoxy_glGetLightxv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 944 /* glGetLightxv */);
}

static PFNGLGETLIGHTXVOESPROC
epoxy_glGetLightxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 945 /* glGetLightxvOES */);
}

static PFNGLGETLISTPARAMETERFVSGIXPROC
epoxy_glGetListParameterfvSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_list_priority, 946 /* glGetListParameterfvSGIX */);
}

static PFNGLGETLISTPARAMETERIVSGIXPROC
epoxy_glGetListParameterivSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_list_priority, 947 /* glGetListParameterivSGIX */);
}

static PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
epoxy_glGetLocalConstantBooleanvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 948 /* glGetLocalConstantBooleanvEXT */);
}

static PFNGLGETLOCALCONSTANTFLOATVEXTPROC
epoxy_glGetLocalConstantFloatvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 949 /* glGetLocalConstantFloatvEXT */);
}

static PFNGLGETLOCALCONSTANTINTEGERVEXTPROC
epoxy_glGetLocalConstantIntegervEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 950 /* glGetLocalConstantIntegervEXT */);
}

static PFNGLGETMAPATTRIBPARAMETERFVNVPROC
epoxy_glGetMapAttribParameterfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_evaluators, 951 /* glGetMapAttribParameterfvNV */);
}

static PFNGLGETMAPATTRIBPARAMETERIVNVPROC
epoxy_glGetMapAttribParameterivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_evaluators, 952 /* glGetMapAttribParameterivNV */);
}

static PFNGLGETMAPCONTROLPOINTSNVPROC
epoxy_glGetMapControlPointsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_evaluators, 953 /* glGetMapControlPointsNV */);
}

static PFNGLGETMAPPARAMETERFVNVPROC
epoxy_glGetMapParameterfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_evaluators, 954 /* glGetMapParameterfvNV */);
}

static PFNGLGETMAPPARAMETERIVNVPROC
epoxy_glGetMapParameterivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_evaluators, 955 /* glGetMapParameterivNV */);
}

static PFNGLGETMAPDVPROC
epoxy_glGetMapdv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 956 /* glGetMapdv */);
}

static PFNGLGETMAPFVPROC
epoxy_glGetMapfv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 957 /* glGetMapfv */);
}

static PFNGLGETMAPIVPROC
epoxy_glGetMapiv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 958 /* glGetMapiv */);
}

static PFNGLGETMAPXVOESPROC
epoxy_glGetMapxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 959 /* glGetMapxvOES */);
}

static PFNGLGETMATERIALFVPROC
epoxy_glGetMaterialfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        960 /* "glGetMaterialfv" */,
        960 /* "glGetMaterialfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[960] /* "glGetMaterialfv" */,
                                providers, entrypoints);
}

static PFNGLGETMATERIALIVPROC
epoxy_glGetMaterialiv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 961 /* glGetMaterialiv */);
}

static PFNGLGETMATERIALXOESPROC
epoxy_glGetMaterialxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 962 /* glGetMaterialxOES */);
}

static PFNGLGETMATERIALXVPROC
epoxy_glGetMaterialxv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 963 /* glGetMaterialxv */);
}

static PFNGLGETMATERIALXVOESPROC
epoxy_glGetMaterialxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 964 /* glGetMaterialxvOES */);
}

static PFNGLGETMINMAXPROC
epoxy_glGetMinmax_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_imaging, 965 /* glGetMinmax */);
}

static PFNGLGETMINMAXEXTPROC
epoxy_glGetMinmaxEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_histogram, 966 /* glGetMinmaxEXT */);
}

static PFNGLGETMINMAXPARAMETERFVPROC
epoxy_glGetMinmaxParameterfv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_imaging, 967 /* glGetMinmaxParameterfv */);
}

static PFNGLGETMINMAXPARAMETERFVEXTPROC
epoxy_glGetMinmaxParameterfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_histogram, 968 /* glGetMinmaxParameterfvEXT */);
}

static PFNGLGETMINMAXPARAMETERIVPROC
epoxy_glGetMinmaxParameteriv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_imaging, 969 /* glGetMinmaxParameteriv */);
}

static PFNGLGETMINMAXPARAMETERIVEXTPROC
epoxy_glGetMinmaxParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_histogram, 970 /* glGetMinmaxParameterivEXT */);
}

static PFNGLGETMULTITEXENVFVEXTPROC
epoxy_glGetMultiTexEnvfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 971 /* glGetMultiTexEnvfvEXT */);
}

static PFNGLGETMULTITEXENVIVEXTPROC
epoxy_glGetMultiTexEnvivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 972 /* glGetMultiTexEnvivEXT */);
}

static PFNGLGETMULTITEXGENDVEXTPROC
epoxy_glGetMultiTexGendvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 973 /* glGetMultiTexGendvEXT */);
}

static PFNGLGETMULTITEXGENFVEXTPROC
epoxy_glGetMultiTexGenfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 974 /* glGetMultiTexGenfvEXT */);
}

static PFNGLGETMULTITEXGENIVEXTPROC
epoxy_glGetMultiTexGenivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 975 /* glGetMultiTexGenivEXT */);
}

static PFNGLGETMULTITEXIMAGEEXTPROC
epoxy_glGetMultiTexImageEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 976 /* glGetMultiTexImageEXT */);
}

static PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
epoxy_glGetMultiTexLevelParameterfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 977 /* glGetMultiTexLevelParameterfvEXT */);
}

static PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
epoxy_glGetMultiTexLevelParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 978 /* glGetMultiTexLevelParameterivEXT */);
}

static PFNGLGETMULTITEXPARAMETERIIVEXTPROC
epoxy_glGetMultiTexParameterIivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 979 /* glGetMultiTexParameterIivEXT */);
}

static PFNGLGETMULTITEXPARAMETERIUIVEXTPROC
epoxy_glGetMultiTexParameterIuivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 980 /* glGetMultiTexParameterIuivEXT */);
}

static PFNGLGETMULTITEXPARAMETERFVEXTPROC
epoxy_glGetMultiTexParameterfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 981 /* glGetMultiTexParameterfvEXT */);
}

static PFNGLGETMULTITEXPARAMETERIVEXTPROC
epoxy_glGetMultiTexParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 982 /* glGetMultiTexParameterivEXT */);
}

static PFNGLGETMULTISAMPLEFVPROC
epoxy_glGetMultisamplefv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_texture_multisample,
        OpenGL_ES_3_1,
        GL_extension_GL_NV_explicit_multisample,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        983 /* "glGetMultisamplefv" */,
        983 /* "glGetMultisamplefv" */,
        983 /* "glGetMultisamplefv" */,
        984 /* "glGetMultisamplefvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[983] /* "glGetMultisamplefv" */,
                                providers, entrypoints);
}

static PFNGLGETMULTISAMPLEFVNVPROC
epoxy_glGetMultisamplefvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_explicit_multisample,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_texture_multisample,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        984 /* "glGetMultisamplefvNV" */,
        983 /* "glGetMultisamplefv" */,
        983 /* "glGetMultisamplefv" */,
        983 /* "glGetMultisamplefv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[984] /* "glGetMultisamplefvNV" */,
                                providers, entrypoints);
}

static PFNGLGETNAMEDBUFFERPARAMETERI64VPROC
epoxy_glGetNamedBufferParameteri64v_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        985 /* "glGetNamedBufferParameteri64v" */,
        985 /* "glGetNamedBufferParameteri64v" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[985] /* "glGetNamedBufferParameteri64v" */,
                                providers, entrypoints);
}

static PFNGLGETNAMEDBUFFERPARAMETERIVPROC
epoxy_glGetNamedBufferParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        986 /* "glGetNamedBufferParameteriv" */,
        986 /* "glGetNamedBufferParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[986] /* "glGetNamedBufferParameteriv" */,
                                providers, entrypoints);
}

static PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
epoxy_glGetNamedBufferParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 987 /* glGetNamedBufferParameterivEXT */);
}

static PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
epoxy_glGetNamedBufferParameterui64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_shader_buffer_load, 988 /* glGetNamedBufferParameterui64vNV */);
}

static PFNGLGETNAMEDBUFFERPOINTERVPROC
epoxy_glGetNamedBufferPointerv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        989 /* "glGetNamedBufferPointerv" */,
        989 /* "glGetNamedBufferPointerv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[989] /* "glGetNamedBufferPointerv" */,
                                providers, entrypoints);
}

static PFNGLGETNAMEDBUFFERPOINTERVEXTPROC
epoxy_glGetNamedBufferPointervEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 990 /* glGetNamedBufferPointervEXT */);
}

static PFNGLGETNAMEDBUFFERSUBDATAPROC
epoxy_glGetNamedBufferSubData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        991 /* "glGetNamedBufferSubData" */,
        991 /* "glGetNamedBufferSubData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[991] /* "glGetNamedBufferSubData" */,
                                providers, entrypoints);
}

static PFNGLGETNAMEDBUFFERSUBDATAEXTPROC
epoxy_glGetNamedBufferSubDataEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 992 /* glGetNamedBufferSubDataEXT */);
}

static PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC
epoxy_glGetNamedFramebufferAttachmentParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        993 /* "glGetNamedFramebufferAttachmentParameteriv" */,
        993 /* "glGetNamedFramebufferAttachmentParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[993] /* "glGetNamedFramebufferAttachmentParameteriv" */,
                                providers, entrypoints);
}

static PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
epoxy_glGetNamedFramebufferAttachmentParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 994 /* glGetNamedFramebufferAttachmentParameterivEXT */);
}

static PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC
epoxy_glGetNamedFramebufferParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        995 /* "glGetNamedFramebufferParameteriv" */,
        995 /* "glGetNamedFramebufferParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[995] /* "glGetNamedFramebufferParameteriv" */,
                                providers, entrypoints);
}

static PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
epoxy_glGetNamedFramebufferParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 996 /* glGetNamedFramebufferParameterivEXT */);
}

static PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
epoxy_glGetNamedProgramLocalParameterIivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 997 /* glGetNamedProgramLocalParameterIivEXT */);
}

static PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
epoxy_glGetNamedProgramLocalParameterIuivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 998 /* glGetNamedProgramLocalParameterIuivEXT */);
}

static PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
epoxy_glGetNamedProgramLocalParameterdvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 999 /* glGetNamedProgramLocalParameterdvEXT */);
}

static PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
epoxy_glGetNamedProgramLocalParameterfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1000 /* glGetNamedProgramLocalParameterfvEXT */);
}

static PFNGLGETNAMEDPROGRAMSTRINGEXTPROC
epoxy_glGetNamedProgramStringEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1001 /* glGetNamedProgramStringEXT */);
}

static PFNGLGETNAMEDPROGRAMIVEXTPROC
epoxy_glGetNamedProgramivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1002 /* glGetNamedProgramivEXT */);
}

static PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC
epoxy_glGetNamedRenderbufferParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1003 /* "glGetNamedRenderbufferParameteriv" */,
        1003 /* "glGetNamedRenderbufferParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1003] /* "glGetNamedRenderbufferParameteriv" */,
                                providers, entrypoints);
}

static PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
epoxy_glGetNamedRenderbufferParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1004 /* glGetNamedRenderbufferParameterivEXT */);
}

static PFNGLGETNAMEDSTRINGARBPROC
epoxy_glGetNamedStringARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_shading_language_include, 1005 /* glGetNamedStringARB */);
}

static PFNGLGETNAMEDSTRINGIVARBPROC
epoxy_glGetNamedStringivARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_shading_language_include, 1006 /* glGetNamedStringivARB */);
}

static PFNGLGETNEXTPERFQUERYIDINTELPROC
epoxy_glGetNextPerfQueryIdINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_performance_query, 1007 /* glGetNextPerfQueryIdINTEL */);
}

static PFNGLGETOBJECTBUFFERFVATIPROC
epoxy_glGetObjectBufferfvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_array_object, 1008 /* glGetObjectBufferfvATI */);
}

static PFNGLGETOBJECTBUFFERIVATIPROC
epoxy_glGetObjectBufferivATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_array_object, 1009 /* glGetObjectBufferivATI */);
}

static PFNGLGETOBJECTLABELPROC
epoxy_glGetObjectLabel_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1010 /* "glGetObjectLabel" */,
        1010 /* "glGetObjectLabel" */,
        1010 /* "glGetObjectLabel" */,
        1012 /* "glGetObjectLabelKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1010] /* "glGetObjectLabel" */,
                                providers, entrypoints);
}

static PFNGLGETOBJECTLABELEXTPROC
epoxy_glGetObjectLabelEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_debug_label, 1011 /* glGetObjectLabelEXT */);
}

static PFNGLGETOBJECTLABELKHRPROC
epoxy_glGetObjectLabelKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_debug,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1012 /* "glGetObjectLabelKHR" */,
        1010 /* "glGetObjectLabel" */,
        1010 /* "glGetObjectLabel" */,
        1010 /* "glGetObjectLabel" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1012] /* "glGetObjectLabelKHR" */,
                                providers, entrypoints);
}

static PFNGLGETOBJECTPARAMETERFVARBPROC
epoxy_glGetObjectParameterfvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_shader_objects, 1013 /* glGetObjectParameterfvARB */);
}

static PFNGLGETOBJECTPARAMETERIVAPPLEPROC
epoxy_glGetObjectParameterivAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_object_purgeable, 1014 /* glGetObjectParameterivAPPLE */);
}

static PFNGLGETOBJECTPARAMETERIVARBPROC
epoxy_glGetObjectParameterivARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_shader_objects, 1015 /* glGetObjectParameterivARB */);
}

static PFNGLGETOBJECTPTRLABELPROC
epoxy_glGetObjectPtrLabel_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1016 /* "glGetObjectPtrLabel" */,
        1016 /* "glGetObjectPtrLabel" */,
        1016 /* "glGetObjectPtrLabel" */,
        1017 /* "glGetObjectPtrLabelKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1016] /* "glGetObjectPtrLabel" */,
                                providers, entrypoints);
}

static PFNGLGETOBJECTPTRLABELKHRPROC
epoxy_glGetObjectPtrLabelKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_debug,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1017 /* "glGetObjectPtrLabelKHR" */,
        1016 /* "glGetObjectPtrLabel" */,
        1016 /* "glGetObjectPtrLabel" */,
        1016 /* "glGetObjectPtrLabel" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1017] /* "glGetObjectPtrLabelKHR" */,
                                providers, entrypoints);
}

static PFNGLGETOCCLUSIONQUERYIVNVPROC
epoxy_glGetOcclusionQueryivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_occlusion_query, 1018 /* glGetOcclusionQueryivNV */);
}

static PFNGLGETOCCLUSIONQUERYUIVNVPROC
epoxy_glGetOcclusionQueryuivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_occlusion_query, 1019 /* glGetOcclusionQueryuivNV */);
}

static PFNGLGETPATHCOLORGENFVNVPROC
epoxy_glGetPathColorGenfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1020 /* glGetPathColorGenfvNV */);
}

static PFNGLGETPATHCOLORGENIVNVPROC
epoxy_glGetPathColorGenivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1021 /* glGetPathColorGenivNV */);
}

static PFNGLGETPATHCOMMANDSNVPROC
epoxy_glGetPathCommandsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1022 /* glGetPathCommandsNV */);
}

static PFNGLGETPATHCOORDSNVPROC
epoxy_glGetPathCoordsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1023 /* glGetPathCoordsNV */);
}

static PFNGLGETPATHDASHARRAYNVPROC
epoxy_glGetPathDashArrayNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1024 /* glGetPathDashArrayNV */);
}

static PFNGLGETPATHLENGTHNVPROC
epoxy_glGetPathLengthNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1025 /* glGetPathLengthNV */);
}

static PFNGLGETPATHMETRICRANGENVPROC
epoxy_glGetPathMetricRangeNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1026 /* glGetPathMetricRangeNV */);
}

static PFNGLGETPATHMETRICSNVPROC
epoxy_glGetPathMetricsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1027 /* glGetPathMetricsNV */);
}

static PFNGLGETPATHPARAMETERFVNVPROC
epoxy_glGetPathParameterfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1028 /* glGetPathParameterfvNV */);
}

static PFNGLGETPATHPARAMETERIVNVPROC
epoxy_glGetPathParameterivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1029 /* glGetPathParameterivNV */);
}

static PFNGLGETPATHSPACINGNVPROC
epoxy_glGetPathSpacingNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1030 /* glGetPathSpacingNV */);
}

static PFNGLGETPATHTEXGENFVNVPROC
epoxy_glGetPathTexGenfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1031 /* glGetPathTexGenfvNV */);
}

static PFNGLGETPATHTEXGENIVNVPROC
epoxy_glGetPathTexGenivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1032 /* glGetPathTexGenivNV */);
}

static PFNGLGETPERFCOUNTERINFOINTELPROC
epoxy_glGetPerfCounterInfoINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_performance_query, 1033 /* glGetPerfCounterInfoINTEL */);
}

static PFNGLGETPERFMONITORCOUNTERDATAAMDPROC
epoxy_glGetPerfMonitorCounterDataAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_performance_monitor, 1034 /* glGetPerfMonitorCounterDataAMD */);
}

static PFNGLGETPERFMONITORCOUNTERINFOAMDPROC
epoxy_glGetPerfMonitorCounterInfoAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_performance_monitor, 1035 /* glGetPerfMonitorCounterInfoAMD */);
}

static PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
epoxy_glGetPerfMonitorCounterStringAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_performance_monitor, 1036 /* glGetPerfMonitorCounterStringAMD */);
}

static PFNGLGETPERFMONITORCOUNTERSAMDPROC
epoxy_glGetPerfMonitorCountersAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_performance_monitor, 1037 /* glGetPerfMonitorCountersAMD */);
}

static PFNGLGETPERFMONITORGROUPSTRINGAMDPROC
epoxy_glGetPerfMonitorGroupStringAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_performance_monitor, 1038 /* glGetPerfMonitorGroupStringAMD */);
}

static PFNGLGETPERFMONITORGROUPSAMDPROC
epoxy_glGetPerfMonitorGroupsAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_performance_monitor, 1039 /* glGetPerfMonitorGroupsAMD */);
}

static PFNGLGETPERFQUERYDATAINTELPROC
epoxy_glGetPerfQueryDataINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_performance_query, 1040 /* glGetPerfQueryDataINTEL */);
}

static PFNGLGETPERFQUERYIDBYNAMEINTELPROC
epoxy_glGetPerfQueryIdByNameINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_performance_query, 1041 /* glGetPerfQueryIdByNameINTEL */);
}

static PFNGLGETPERFQUERYINFOINTELPROC
epoxy_glGetPerfQueryInfoINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_performance_query, 1042 /* glGetPerfQueryInfoINTEL */);
}

static PFNGLGETPIXELMAPFVPROC
epoxy_glGetPixelMapfv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1043 /* glGetPixelMapfv */);
}

static PFNGLGETPIXELMAPUIVPROC
epoxy_glGetPixelMapuiv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1044 /* glGetPixelMapuiv */);
}

static PFNGLGETPIXELMAPUSVPROC
epoxy_glGetPixelMapusv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1045 /* glGetPixelMapusv */);
}

static PFNGLGETPIXELMAPXVPROC
epoxy_glGetPixelMapxv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1046 /* glGetPixelMapxv */);
}

static PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
epoxy_glGetPixelTexGenParameterfvSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_pixel_texture, 1047 /* glGetPixelTexGenParameterfvSGIS */);
}

static PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
epoxy_glGetPixelTexGenParameterivSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_pixel_texture, 1048 /* glGetPixelTexGenParameterivSGIS */);
}

static PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC
epoxy_glGetPixelTransformParameterfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_pixel_transform, 1049 /* glGetPixelTransformParameterfvEXT */);
}

static PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC
epoxy_glGetPixelTransformParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_pixel_transform, 1050 /* glGetPixelTransformParameterivEXT */);
}

static PFNGLGETPOINTERINDEXEDVEXTPROC
epoxy_glGetPointerIndexedvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1051 /* glGetPointerIndexedvEXT */);
}

static PFNGLGETPOINTERI_VEXTPROC
epoxy_glGetPointeri_vEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1052 /* glGetPointeri_vEXT */);
}

static PFNGLGETPOINTERVPROC
epoxy_glGetPointerv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_1_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_vertex_array,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1053 /* "glGetPointerv" */,
        1053 /* "glGetPointerv" */,
        1053 /* "glGetPointerv" */,
        1053 /* "glGetPointerv" */,
        1053 /* "glGetPointerv" */,
        1054 /* "glGetPointervEXT" */,
        1055 /* "glGetPointervKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1053] /* "glGetPointerv" */,
                                providers, entrypoints);
}

static PFNGLGETPOINTERVEXTPROC
epoxy_glGetPointervEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_vertex_array,
        Desktop_OpenGL_1_1,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_1_0,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1054 /* "glGetPointervEXT" */,
        1053 /* "glGetPointerv" */,
        1053 /* "glGetPointerv" */,
        1053 /* "glGetPointerv" */,
        1053 /* "glGetPointerv" */,
        1053 /* "glGetPointerv" */,
        1055 /* "glGetPointervKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1054] /* "glGetPointervEXT" */,
                                providers, entrypoints);
}

static PFNGLGETPOINTERVKHRPROC
epoxy_glGetPointervKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_debug,
        Desktop_OpenGL_1_1,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_1_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_vertex_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1055 /* "glGetPointervKHR" */,
        1053 /* "glGetPointerv" */,
        1053 /* "glGetPointerv" */,
        1053 /* "glGetPointerv" */,
        1053 /* "glGetPointerv" */,
        1053 /* "glGetPointerv" */,
        1054 /* "glGetPointervEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1055] /* "glGetPointervKHR" */,
                                providers, entrypoints);
}

static PFNGLGETPOLYGONSTIPPLEPROC
epoxy_glGetPolygonStipple_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1056 /* glGetPolygonStipple */);
}

static PFNGLGETPROGRAMBINARYPROC
epoxy_glGetProgramBinary_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_get_program_binary,
        OpenGL_ES_3_0,
        GL_extension_GL_OES_get_program_binary,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1057 /* "glGetProgramBinary" */,
        1057 /* "glGetProgramBinary" */,
        1057 /* "glGetProgramBinary" */,
        1058 /* "glGetProgramBinaryOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1057] /* "glGetProgramBinary" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMBINARYOESPROC
epoxy_glGetProgramBinaryOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_get_program_binary,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_get_program_binary,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1058 /* "glGetProgramBinaryOES" */,
        1057 /* "glGetProgramBinary" */,
        1057 /* "glGetProgramBinary" */,
        1057 /* "glGetProgramBinary" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1058] /* "glGetProgramBinaryOES" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMENVPARAMETERIIVNVPROC
epoxy_glGetProgramEnvParameterIivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1059 /* glGetProgramEnvParameterIivNV */);
}

static PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC
epoxy_glGetProgramEnvParameterIuivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1060 /* glGetProgramEnvParameterIuivNV */);
}

static PFNGLGETPROGRAMENVPARAMETERDVARBPROC
epoxy_glGetProgramEnvParameterdvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1061 /* "glGetProgramEnvParameterdvARB" */,
        1061 /* "glGetProgramEnvParameterdvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1061] /* "glGetProgramEnvParameterdvARB" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMENVPARAMETERFVARBPROC
epoxy_glGetProgramEnvParameterfvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1062 /* "glGetProgramEnvParameterfvARB" */,
        1062 /* "glGetProgramEnvParameterfvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1062] /* "glGetProgramEnvParameterfvARB" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMINFOLOGPROC
epoxy_glGetProgramInfoLog_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1063 /* "glGetProgramInfoLog" */,
        1063 /* "glGetProgramInfoLog" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1063] /* "glGetProgramInfoLog" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMINTERFACEIVPROC
epoxy_glGetProgramInterfaceiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_program_interface_query,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1064 /* "glGetProgramInterfaceiv" */,
        1064 /* "glGetProgramInterfaceiv" */,
        1064 /* "glGetProgramInterfaceiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1064] /* "glGetProgramInterfaceiv" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC
epoxy_glGetProgramLocalParameterIivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1065 /* glGetProgramLocalParameterIivNV */);
}

static PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC
epoxy_glGetProgramLocalParameterIuivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1066 /* glGetProgramLocalParameterIuivNV */);
}

static PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
epoxy_glGetProgramLocalParameterdvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1067 /* "glGetProgramLocalParameterdvARB" */,
        1067 /* "glGetProgramLocalParameterdvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1067] /* "glGetProgramLocalParameterdvARB" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
epoxy_glGetProgramLocalParameterfvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1068 /* "glGetProgramLocalParameterfvARB" */,
        1068 /* "glGetProgramLocalParameterfvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1068] /* "glGetProgramLocalParameterfvARB" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
epoxy_glGetProgramNamedParameterdvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_fragment_program, 1069 /* glGetProgramNamedParameterdvNV */);
}

static PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
epoxy_glGetProgramNamedParameterfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_fragment_program, 1070 /* glGetProgramNamedParameterfvNV */);
}

static PFNGLGETPROGRAMPARAMETERDVNVPROC
epoxy_glGetProgramParameterdvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 1071 /* glGetProgramParameterdvNV */);
}

static PFNGLGETPROGRAMPARAMETERFVNVPROC
epoxy_glGetProgramParameterfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 1072 /* glGetProgramParameterfvNV */);
}

static PFNGLGETPROGRAMPIPELINEINFOLOGPROC
epoxy_glGetProgramPipelineInfoLog_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1073 /* "glGetProgramPipelineInfoLog" */,
        1073 /* "glGetProgramPipelineInfoLog" */,
        1073 /* "glGetProgramPipelineInfoLog" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1073] /* "glGetProgramPipelineInfoLog" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC
epoxy_glGetProgramPipelineInfoLogEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_separate_shader_objects, 1074 /* glGetProgramPipelineInfoLogEXT */);
}

static PFNGLGETPROGRAMPIPELINEIVPROC
epoxy_glGetProgramPipelineiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1075 /* "glGetProgramPipelineiv" */,
        1075 /* "glGetProgramPipelineiv" */,
        1075 /* "glGetProgramPipelineiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1075] /* "glGetProgramPipelineiv" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMPIPELINEIVEXTPROC
epoxy_glGetProgramPipelineivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_separate_shader_objects, 1076 /* glGetProgramPipelineivEXT */);
}

static PFNGLGETPROGRAMRESOURCEINDEXPROC
epoxy_glGetProgramResourceIndex_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_program_interface_query,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1077 /* "glGetProgramResourceIndex" */,
        1077 /* "glGetProgramResourceIndex" */,
        1077 /* "glGetProgramResourceIndex" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1077] /* "glGetProgramResourceIndex" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMRESOURCELOCATIONPROC
epoxy_glGetProgramResourceLocation_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_program_interface_query,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1078 /* "glGetProgramResourceLocation" */,
        1078 /* "glGetProgramResourceLocation" */,
        1078 /* "glGetProgramResourceLocation" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1078] /* "glGetProgramResourceLocation" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
epoxy_glGetProgramResourceLocationIndex_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_program_interface_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1079 /* "glGetProgramResourceLocationIndex" */,
        1079 /* "glGetProgramResourceLocationIndex" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1079] /* "glGetProgramResourceLocationIndex" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC
epoxy_glGetProgramResourceLocationIndexEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_blend_func_extended, 1080 /* glGetProgramResourceLocationIndexEXT */);
}

static PFNGLGETPROGRAMRESOURCENAMEPROC
epoxy_glGetProgramResourceName_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_program_interface_query,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1081 /* "glGetProgramResourceName" */,
        1081 /* "glGetProgramResourceName" */,
        1081 /* "glGetProgramResourceName" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1081] /* "glGetProgramResourceName" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMRESOURCEFVNVPROC
epoxy_glGetProgramResourcefvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1082 /* glGetProgramResourcefvNV */);
}

static PFNGLGETPROGRAMRESOURCEIVPROC
epoxy_glGetProgramResourceiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_program_interface_query,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1083 /* "glGetProgramResourceiv" */,
        1083 /* "glGetProgramResourceiv" */,
        1083 /* "glGetProgramResourceiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1083] /* "glGetProgramResourceiv" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMSTAGEIVPROC
epoxy_glGetProgramStageiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_shader_subroutine,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1084 /* "glGetProgramStageiv" */,
        1084 /* "glGetProgramStageiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1084] /* "glGetProgramStageiv" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMSTRINGARBPROC
epoxy_glGetProgramStringARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1085 /* "glGetProgramStringARB" */,
        1085 /* "glGetProgramStringARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1085] /* "glGetProgramStringARB" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMSTRINGNVPROC
epoxy_glGetProgramStringNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 1086 /* glGetProgramStringNV */);
}

static PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC
epoxy_glGetProgramSubroutineParameteruivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program5, 1087 /* glGetProgramSubroutineParameteruivNV */);
}

static PFNGLGETPROGRAMIVPROC
epoxy_glGetProgramiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1088 /* "glGetProgramiv" */,
        1088 /* "glGetProgramiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1088] /* "glGetProgramiv" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMIVARBPROC
epoxy_glGetProgramivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1089 /* "glGetProgramivARB" */,
        1089 /* "glGetProgramivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1089] /* "glGetProgramivARB" */,
                                providers, entrypoints);
}

static PFNGLGETPROGRAMIVNVPROC
epoxy_glGetProgramivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 1090 /* glGetProgramivNV */);
}

static PFNGLGETQUERYBUFFEROBJECTI64VPROC
epoxy_glGetQueryBufferObjecti64v_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1091 /* "glGetQueryBufferObjecti64v" */,
        1091 /* "glGetQueryBufferObjecti64v" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1091] /* "glGetQueryBufferObjecti64v" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYBUFFEROBJECTIVPROC
epoxy_glGetQueryBufferObjectiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1092 /* "glGetQueryBufferObjectiv" */,
        1092 /* "glGetQueryBufferObjectiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1092] /* "glGetQueryBufferObjectiv" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYBUFFEROBJECTUI64VPROC
epoxy_glGetQueryBufferObjectui64v_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1093 /* "glGetQueryBufferObjectui64v" */,
        1093 /* "glGetQueryBufferObjectui64v" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1093] /* "glGetQueryBufferObjectui64v" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYBUFFEROBJECTUIVPROC
epoxy_glGetQueryBufferObjectuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1094 /* "glGetQueryBufferObjectuiv" */,
        1094 /* "glGetQueryBufferObjectuiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1094] /* "glGetQueryBufferObjectuiv" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYINDEXEDIVPROC
epoxy_glGetQueryIndexediv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1095 /* "glGetQueryIndexediv" */,
        1095 /* "glGetQueryIndexediv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1095] /* "glGetQueryIndexediv" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYOBJECTI64VPROC
epoxy_glGetQueryObjecti64v_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_timer_query,
        GL_extension_GL_EXT_disjoint_timer_query,
        GL_extension_GL_EXT_timer_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1096 /* "glGetQueryObjecti64v" */,
        1096 /* "glGetQueryObjecti64v" */,
        1097 /* "glGetQueryObjecti64vEXT" */,
        1097 /* "glGetQueryObjecti64vEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1096] /* "glGetQueryObjecti64v" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYOBJECTI64VEXTPROC
epoxy_glGetQueryObjecti64vEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_disjoint_timer_query,
        GL_extension_GL_EXT_timer_query,
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_timer_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1097 /* "glGetQueryObjecti64vEXT" */,
        1097 /* "glGetQueryObjecti64vEXT" */,
        1096 /* "glGetQueryObjecti64v" */,
        1096 /* "glGetQueryObjecti64v" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1097] /* "glGetQueryObjecti64vEXT" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYOBJECTIVPROC
epoxy_glGetQueryObjectiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        GL_extension_GL_ARB_occlusion_query,
        GL_extension_GL_EXT_disjoint_timer_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1098 /* "glGetQueryObjectiv" */,
        1099 /* "glGetQueryObjectivARB" */,
        1100 /* "glGetQueryObjectivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1098] /* "glGetQueryObjectiv" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYOBJECTIVARBPROC
epoxy_glGetQueryObjectivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_occlusion_query,
        Desktop_OpenGL_1_5,
        GL_extension_GL_EXT_disjoint_timer_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1099 /* "glGetQueryObjectivARB" */,
        1098 /* "glGetQueryObjectiv" */,
        1100 /* "glGetQueryObjectivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1099] /* "glGetQueryObjectivARB" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYOBJECTIVEXTPROC
epoxy_glGetQueryObjectivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_disjoint_timer_query,
        Desktop_OpenGL_1_5,
        GL_extension_GL_ARB_occlusion_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1100 /* "glGetQueryObjectivEXT" */,
        1098 /* "glGetQueryObjectiv" */,
        1099 /* "glGetQueryObjectivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1100] /* "glGetQueryObjectivEXT" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYOBJECTUI64VPROC
epoxy_glGetQueryObjectui64v_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_timer_query,
        GL_extension_GL_EXT_disjoint_timer_query,
        GL_extension_GL_EXT_timer_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1101 /* "glGetQueryObjectui64v" */,
        1101 /* "glGetQueryObjectui64v" */,
        1102 /* "glGetQueryObjectui64vEXT" */,
        1102 /* "glGetQueryObjectui64vEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1101] /* "glGetQueryObjectui64v" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYOBJECTUI64VEXTPROC
epoxy_glGetQueryObjectui64vEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_disjoint_timer_query,
        GL_extension_GL_EXT_timer_query,
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_timer_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1102 /* "glGetQueryObjectui64vEXT" */,
        1102 /* "glGetQueryObjectui64vEXT" */,
        1101 /* "glGetQueryObjectui64v" */,
        1101 /* "glGetQueryObjectui64v" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1102] /* "glGetQueryObjectui64vEXT" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYOBJECTUIVPROC
epoxy_glGetQueryObjectuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_occlusion_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1103 /* "glGetQueryObjectuiv" */,
        1103 /* "glGetQueryObjectuiv" */,
        1104 /* "glGetQueryObjectuivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1103] /* "glGetQueryObjectuiv" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYOBJECTUIVARBPROC
epoxy_glGetQueryObjectuivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_occlusion_query,
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1104 /* "glGetQueryObjectuivARB" */,
        1103 /* "glGetQueryObjectuiv" */,
        1103 /* "glGetQueryObjectuiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1104] /* "glGetQueryObjectuivARB" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYOBJECTUIVEXTPROC
epoxy_glGetQueryObjectuivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_disjoint_timer_query,
        GL_extension_GL_EXT_occlusion_query_boolean,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1105 /* "glGetQueryObjectuivEXT" */,
        1105 /* "glGetQueryObjectuivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1105] /* "glGetQueryObjectuivEXT" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYIVPROC
epoxy_glGetQueryiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_occlusion_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1106 /* "glGetQueryiv" */,
        1106 /* "glGetQueryiv" */,
        1107 /* "glGetQueryivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1106] /* "glGetQueryiv" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYIVARBPROC
epoxy_glGetQueryivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_occlusion_query,
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1107 /* "glGetQueryivARB" */,
        1106 /* "glGetQueryiv" */,
        1106 /* "glGetQueryiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1107] /* "glGetQueryivARB" */,
                                providers, entrypoints);
}

static PFNGLGETQUERYIVEXTPROC
epoxy_glGetQueryivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_disjoint_timer_query,
        GL_extension_GL_EXT_occlusion_query_boolean,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1108 /* "glGetQueryivEXT" */,
        1108 /* "glGetQueryivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1108] /* "glGetQueryivEXT" */,
                                providers, entrypoints);
}

static PFNGLGETRENDERBUFFERPARAMETERIVPROC
epoxy_glGetRenderbufferParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1109 /* "glGetRenderbufferParameteriv" */,
        1109 /* "glGetRenderbufferParameteriv" */,
        1109 /* "glGetRenderbufferParameteriv" */,
        1110 /* "glGetRenderbufferParameterivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1109] /* "glGetRenderbufferParameteriv" */,
                                providers, entrypoints);
}

static PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
epoxy_glGetRenderbufferParameterivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1110 /* "glGetRenderbufferParameterivEXT" */,
        1109 /* "glGetRenderbufferParameteriv" */,
        1109 /* "glGetRenderbufferParameteriv" */,
        1109 /* "glGetRenderbufferParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1110] /* "glGetRenderbufferParameterivEXT" */,
                                providers, entrypoints);
}

static PFNGLGETRENDERBUFFERPARAMETERIVOESPROC
epoxy_glGetRenderbufferParameterivOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_framebuffer_object, 1111 /* glGetRenderbufferParameterivOES */);
}

static PFNGLGETSAMPLERPARAMETERIIVPROC
epoxy_glGetSamplerParameterIiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1112 /* "glGetSamplerParameterIiv" */,
        1112 /* "glGetSamplerParameterIiv" */,
        1112 /* "glGetSamplerParameterIiv" */,
        1113 /* "glGetSamplerParameterIivEXT" */,
        1114 /* "glGetSamplerParameterIivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1112] /* "glGetSamplerParameterIiv" */,
                                providers, entrypoints);
}

static PFNGLGETSAMPLERPARAMETERIIVEXTPROC
epoxy_glGetSamplerParameterIivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_border_clamp,
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1113 /* "glGetSamplerParameterIivEXT" */,
        1112 /* "glGetSamplerParameterIiv" */,
        1112 /* "glGetSamplerParameterIiv" */,
        1112 /* "glGetSamplerParameterIiv" */,
        1114 /* "glGetSamplerParameterIivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1113] /* "glGetSamplerParameterIivEXT" */,
                                providers, entrypoints);
}

static PFNGLGETSAMPLERPARAMETERIIVOESPROC
epoxy_glGetSamplerParameterIivOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_border_clamp,
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1114 /* "glGetSamplerParameterIivOES" */,
        1112 /* "glGetSamplerParameterIiv" */,
        1112 /* "glGetSamplerParameterIiv" */,
        1112 /* "glGetSamplerParameterIiv" */,
        1113 /* "glGetSamplerParameterIivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1114] /* "glGetSamplerParameterIivOES" */,
                                providers, entrypoints);
}

static PFNGLGETSAMPLERPARAMETERIUIVPROC
epoxy_glGetSamplerParameterIuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1115 /* "glGetSamplerParameterIuiv" */,
        1115 /* "glGetSamplerParameterIuiv" */,
        1115 /* "glGetSamplerParameterIuiv" */,
        1116 /* "glGetSamplerParameterIuivEXT" */,
        1117 /* "glGetSamplerParameterIuivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1115] /* "glGetSamplerParameterIuiv" */,
                                providers, entrypoints);
}

static PFNGLGETSAMPLERPARAMETERIUIVEXTPROC
epoxy_glGetSamplerParameterIuivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_border_clamp,
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1116 /* "glGetSamplerParameterIuivEXT" */,
        1115 /* "glGetSamplerParameterIuiv" */,
        1115 /* "glGetSamplerParameterIuiv" */,
        1115 /* "glGetSamplerParameterIuiv" */,
        1117 /* "glGetSamplerParameterIuivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1116] /* "glGetSamplerParameterIuivEXT" */,
                                providers, entrypoints);
}

static PFNGLGETSAMPLERPARAMETERIUIVOESPROC
epoxy_glGetSamplerParameterIuivOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_border_clamp,
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1117 /* "glGetSamplerParameterIuivOES" */,
        1115 /* "glGetSamplerParameterIuiv" */,
        1115 /* "glGetSamplerParameterIuiv" */,
        1115 /* "glGetSamplerParameterIuiv" */,
        1116 /* "glGetSamplerParameterIuivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1117] /* "glGetSamplerParameterIuivOES" */,
                                providers, entrypoints);
}

static PFNGLGETSAMPLERPARAMETERFVPROC
epoxy_glGetSamplerParameterfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1118 /* "glGetSamplerParameterfv" */,
        1118 /* "glGetSamplerParameterfv" */,
        1118 /* "glGetSamplerParameterfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1118] /* "glGetSamplerParameterfv" */,
                                providers, entrypoints);
}

static PFNGLGETSAMPLERPARAMETERIVPROC
epoxy_glGetSamplerParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1119 /* "glGetSamplerParameteriv" */,
        1119 /* "glGetSamplerParameteriv" */,
        1119 /* "glGetSamplerParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1119] /* "glGetSamplerParameteriv" */,
                                providers, entrypoints);
}

static PFNGLGETSEPARABLEFILTERPROC
epoxy_glGetSeparableFilter_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_imaging, 1120 /* glGetSeparableFilter */);
}

static PFNGLGETSEPARABLEFILTEREXTPROC
epoxy_glGetSeparableFilterEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_convolution, 1121 /* glGetSeparableFilterEXT */);
}

static PFNGLGETSHADERINFOLOGPROC
epoxy_glGetShaderInfoLog_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1122 /* "glGetShaderInfoLog" */,
        1122 /* "glGetShaderInfoLog" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1122] /* "glGetShaderInfoLog" */,
                                providers, entrypoints);
}

static PFNGLGETSHADERPRECISIONFORMATPROC
epoxy_glGetShaderPrecisionFormat_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_ES2_compatibility,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1123 /* "glGetShaderPrecisionFormat" */,
        1123 /* "glGetShaderPrecisionFormat" */,
        1123 /* "glGetShaderPrecisionFormat" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1123] /* "glGetShaderPrecisionFormat" */,
                                providers, entrypoints);
}

static PFNGLGETSHADERSOURCEPROC
epoxy_glGetShaderSource_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1124 /* "glGetShaderSource" */,
        1124 /* "glGetShaderSource" */,
        1125 /* "glGetShaderSourceARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1124] /* "glGetShaderSource" */,
                                providers, entrypoints);
}

static PFNGLGETSHADERSOURCEARBPROC
epoxy_glGetShaderSourceARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1125 /* "glGetShaderSourceARB" */,
        1124 /* "glGetShaderSource" */,
        1124 /* "glGetShaderSource" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1125] /* "glGetShaderSourceARB" */,
                                providers, entrypoints);
}

static PFNGLGETSHADERIVPROC
epoxy_glGetShaderiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1126 /* "glGetShaderiv" */,
        1126 /* "glGetShaderiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1126] /* "glGetShaderiv" */,
                                providers, entrypoints);
}

static PFNGLGETSHARPENTEXFUNCSGISPROC
epoxy_glGetSharpenTexFuncSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_sharpen_texture, 1127 /* glGetSharpenTexFuncSGIS */);
}

static PFNGLGETSTAGEINDEXNVPROC
epoxy_glGetStageIndexNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 1128 /* glGetStageIndexNV */);
}

static PFNGLGETSTRINGPROC
epoxy_glGetString_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, always_present, 1129 /* glGetString */);
}

static PFNGLGETSTRINGIPROC
epoxy_glGetStringi_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1130 /* "glGetStringi" */,
        1130 /* "glGetStringi" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1130] /* "glGetStringi" */,
                                providers, entrypoints);
}

static PFNGLGETSUBROUTINEINDEXPROC
epoxy_glGetSubroutineIndex_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_shader_subroutine,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1131 /* "glGetSubroutineIndex" */,
        1131 /* "glGetSubroutineIndex" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1131] /* "glGetSubroutineIndex" */,
                                providers, entrypoints);
}

static PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
epoxy_glGetSubroutineUniformLocation_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_shader_subroutine,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1132 /* "glGetSubroutineUniformLocation" */,
        1132 /* "glGetSubroutineUniformLocation" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1132] /* "glGetSubroutineUniformLocation" */,
                                providers, entrypoints);
}

static PFNGLGETSYNCIVPROC
epoxy_glGetSynciv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_sync,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_sync,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1133 /* "glGetSynciv" */,
        1133 /* "glGetSynciv" */,
        1133 /* "glGetSynciv" */,
        1134 /* "glGetSyncivAPPLE" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1133] /* "glGetSynciv" */,
                                providers, entrypoints);
}

static PFNGLGETSYNCIVAPPLEPROC
epoxy_glGetSyncivAPPLE_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_APPLE_sync,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_sync,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1134 /* "glGetSyncivAPPLE" */,
        1133 /* "glGetSynciv" */,
        1133 /* "glGetSynciv" */,
        1133 /* "glGetSynciv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1134] /* "glGetSyncivAPPLE" */,
                                providers, entrypoints);
}

static PFNGLGETTEXBUMPPARAMETERFVATIPROC
epoxy_glGetTexBumpParameterfvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_envmap_bumpmap, 1135 /* glGetTexBumpParameterfvATI */);
}

static PFNGLGETTEXBUMPPARAMETERIVATIPROC
epoxy_glGetTexBumpParameterivATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_envmap_bumpmap, 1136 /* glGetTexBumpParameterivATI */);
}

static PFNGLGETTEXENVFVPROC
epoxy_glGetTexEnvfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1137 /* "glGetTexEnvfv" */,
        1137 /* "glGetTexEnvfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1137] /* "glGetTexEnvfv" */,
                                providers, entrypoints);
}

static PFNGLGETTEXENVIVPROC
epoxy_glGetTexEnviv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1138 /* "glGetTexEnviv" */,
        1138 /* "glGetTexEnviv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1138] /* "glGetTexEnviv" */,
                                providers, entrypoints);
}

static PFNGLGETTEXENVXVPROC
epoxy_glGetTexEnvxv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1139 /* glGetTexEnvxv */);
}

static PFNGLGETTEXENVXVOESPROC
epoxy_glGetTexEnvxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1140 /* glGetTexEnvxvOES */);
}

static PFNGLGETTEXFILTERFUNCSGISPROC
epoxy_glGetTexFilterFuncSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_texture_filter4, 1141 /* glGetTexFilterFuncSGIS */);
}

static PFNGLGETTEXGENDVPROC
epoxy_glGetTexGendv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1142 /* glGetTexGendv */);
}

static PFNGLGETTEXGENFVPROC
epoxy_glGetTexGenfv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1143 /* glGetTexGenfv */);
}

static PFNGLGETTEXGENFVOESPROC
epoxy_glGetTexGenfvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_texture_cube_map, 1144 /* glGetTexGenfvOES */);
}

static PFNGLGETTEXGENIVPROC
epoxy_glGetTexGeniv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1145 /* glGetTexGeniv */);
}

static PFNGLGETTEXGENIVOESPROC
epoxy_glGetTexGenivOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_texture_cube_map, 1146 /* glGetTexGenivOES */);
}

static PFNGLGETTEXGENXVOESPROC
epoxy_glGetTexGenxvOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_fixed_point,
        GL_extension_GL_OES_texture_cube_map,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1147 /* "glGetTexGenxvOES" */,
        1147 /* "glGetTexGenxvOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1147] /* "glGetTexGenxvOES" */,
                                providers, entrypoints);
}

static PFNGLGETTEXIMAGEPROC
epoxy_glGetTexImage_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1148 /* glGetTexImage */);
}

static PFNGLGETTEXLEVELPARAMETERFVPROC
epoxy_glGetTexLevelParameterfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1149 /* "glGetTexLevelParameterfv" */,
        1149 /* "glGetTexLevelParameterfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1149] /* "glGetTexLevelParameterfv" */,
                                providers, entrypoints);
}

static PFNGLGETTEXLEVELPARAMETERIVPROC
epoxy_glGetTexLevelParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1150 /* "glGetTexLevelParameteriv" */,
        1150 /* "glGetTexLevelParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1150] /* "glGetTexLevelParameteriv" */,
                                providers, entrypoints);
}

static PFNGLGETTEXLEVELPARAMETERXVOESPROC
epoxy_glGetTexLevelParameterxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1151 /* glGetTexLevelParameterxvOES */);
}

static PFNGLGETTEXPARAMETERIIVPROC
epoxy_glGetTexParameterIiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_EXT_texture_integer,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1152 /* "glGetTexParameterIiv" */,
        1152 /* "glGetTexParameterIiv" */,
        1153 /* "glGetTexParameterIivEXT" */,
        1153 /* "glGetTexParameterIivEXT" */,
        1154 /* "glGetTexParameterIivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1152] /* "glGetTexParameterIiv" */,
                                providers, entrypoints);
}

static PFNGLGETTEXPARAMETERIIVEXTPROC
epoxy_glGetTexParameterIivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_EXT_texture_integer,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1153 /* "glGetTexParameterIivEXT" */,
        1153 /* "glGetTexParameterIivEXT" */,
        1152 /* "glGetTexParameterIiv" */,
        1152 /* "glGetTexParameterIiv" */,
        1154 /* "glGetTexParameterIivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1153] /* "glGetTexParameterIivEXT" */,
                                providers, entrypoints);
}

static PFNGLGETTEXPARAMETERIIVOESPROC
epoxy_glGetTexParameterIivOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_border_clamp,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_EXT_texture_integer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1154 /* "glGetTexParameterIivOES" */,
        1152 /* "glGetTexParameterIiv" */,
        1152 /* "glGetTexParameterIiv" */,
        1153 /* "glGetTexParameterIivEXT" */,
        1153 /* "glGetTexParameterIivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1154] /* "glGetTexParameterIivOES" */,
                                providers, entrypoints);
}

static PFNGLGETTEXPARAMETERIUIVPROC
epoxy_glGetTexParameterIuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_EXT_texture_integer,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1155 /* "glGetTexParameterIuiv" */,
        1155 /* "glGetTexParameterIuiv" */,
        1156 /* "glGetTexParameterIuivEXT" */,
        1156 /* "glGetTexParameterIuivEXT" */,
        1157 /* "glGetTexParameterIuivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1155] /* "glGetTexParameterIuiv" */,
                                providers, entrypoints);
}

static PFNGLGETTEXPARAMETERIUIVEXTPROC
epoxy_glGetTexParameterIuivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_EXT_texture_integer,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1156 /* "glGetTexParameterIuivEXT" */,
        1156 /* "glGetTexParameterIuivEXT" */,
        1155 /* "glGetTexParameterIuiv" */,
        1155 /* "glGetTexParameterIuiv" */,
        1157 /* "glGetTexParameterIuivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1156] /* "glGetTexParameterIuivEXT" */,
                                providers, entrypoints);
}

static PFNGLGETTEXPARAMETERIUIVOESPROC
epoxy_glGetTexParameterIuivOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_border_clamp,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_EXT_texture_integer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1157 /* "glGetTexParameterIuivOES" */,
        1155 /* "glGetTexParameterIuiv" */,
        1155 /* "glGetTexParameterIuiv" */,
        1156 /* "glGetTexParameterIuivEXT" */,
        1156 /* "glGetTexParameterIuivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1157] /* "glGetTexParameterIuivOES" */,
                                providers, entrypoints);
}

static PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
epoxy_glGetTexParameterPointervAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_texture_range, 1158 /* glGetTexParameterPointervAPPLE */);
}

static PFNGLGETTEXPARAMETERFVPROC
epoxy_glGetTexParameterfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1159 /* "glGetTexParameterfv" */,
        1159 /* "glGetTexParameterfv" */,
        1159 /* "glGetTexParameterfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1159] /* "glGetTexParameterfv" */,
                                providers, entrypoints);
}

static PFNGLGETTEXPARAMETERIVPROC
epoxy_glGetTexParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1160 /* "glGetTexParameteriv" */,
        1160 /* "glGetTexParameteriv" */,
        1160 /* "glGetTexParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1160] /* "glGetTexParameteriv" */,
                                providers, entrypoints);
}

static PFNGLGETTEXPARAMETERXVPROC
epoxy_glGetTexParameterxv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1161 /* glGetTexParameterxv */);
}

static PFNGLGETTEXPARAMETERXVOESPROC
epoxy_glGetTexParameterxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1162 /* glGetTexParameterxvOES */);
}

static PFNGLGETTEXTUREHANDLEARBPROC
epoxy_glGetTextureHandleARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 1163 /* glGetTextureHandleARB */);
}

static PFNGLGETTEXTUREHANDLENVPROC
epoxy_glGetTextureHandleNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_texture, 1164 /* glGetTextureHandleNV */);
}

static PFNGLGETTEXTUREIMAGEPROC
epoxy_glGetTextureImage_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1165 /* "glGetTextureImage" */,
        1165 /* "glGetTextureImage" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1165] /* "glGetTextureImage" */,
                                providers, entrypoints);
}

static PFNGLGETTEXTUREIMAGEEXTPROC
epoxy_glGetTextureImageEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1166 /* glGetTextureImageEXT */);
}

static PFNGLGETTEXTURELEVELPARAMETERFVPROC
epoxy_glGetTextureLevelParameterfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1167 /* "glGetTextureLevelParameterfv" */,
        1167 /* "glGetTextureLevelParameterfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1167] /* "glGetTextureLevelParameterfv" */,
                                providers, entrypoints);
}

static PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
epoxy_glGetTextureLevelParameterfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1168 /* glGetTextureLevelParameterfvEXT */);
}

static PFNGLGETTEXTURELEVELPARAMETERIVPROC
epoxy_glGetTextureLevelParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1169 /* "glGetTextureLevelParameteriv" */,
        1169 /* "glGetTextureLevelParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1169] /* "glGetTextureLevelParameteriv" */,
                                providers, entrypoints);
}

static PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
epoxy_glGetTextureLevelParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1170 /* glGetTextureLevelParameterivEXT */);
}

static PFNGLGETTEXTUREPARAMETERIIVPROC
epoxy_glGetTextureParameterIiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1171 /* "glGetTextureParameterIiv" */,
        1171 /* "glGetTextureParameterIiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1171] /* "glGetTextureParameterIiv" */,
                                providers, entrypoints);
}

static PFNGLGETTEXTUREPARAMETERIIVEXTPROC
epoxy_glGetTextureParameterIivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1172 /* glGetTextureParameterIivEXT */);
}

static PFNGLGETTEXTUREPARAMETERIUIVPROC
epoxy_glGetTextureParameterIuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1173 /* "glGetTextureParameterIuiv" */,
        1173 /* "glGetTextureParameterIuiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1173] /* "glGetTextureParameterIuiv" */,
                                providers, entrypoints);
}

static PFNGLGETTEXTUREPARAMETERIUIVEXTPROC
epoxy_glGetTextureParameterIuivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1174 /* glGetTextureParameterIuivEXT */);
}

static PFNGLGETTEXTUREPARAMETERFVPROC
epoxy_glGetTextureParameterfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1175 /* "glGetTextureParameterfv" */,
        1175 /* "glGetTextureParameterfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1175] /* "glGetTextureParameterfv" */,
                                providers, entrypoints);
}

static PFNGLGETTEXTUREPARAMETERFVEXTPROC
epoxy_glGetTextureParameterfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1176 /* glGetTextureParameterfvEXT */);
}

static PFNGLGETTEXTUREPARAMETERIVPROC
epoxy_glGetTextureParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1177 /* "glGetTextureParameteriv" */,
        1177 /* "glGetTextureParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1177] /* "glGetTextureParameteriv" */,
                                providers, entrypoints);
}

static PFNGLGETTEXTUREPARAMETERIVEXTPROC
epoxy_glGetTextureParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1178 /* glGetTextureParameterivEXT */);
}

static PFNGLGETTEXTURESAMPLERHANDLEARBPROC
epoxy_glGetTextureSamplerHandleARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 1179 /* glGetTextureSamplerHandleARB */);
}

static PFNGLGETTEXTURESAMPLERHANDLENVPROC
epoxy_glGetTextureSamplerHandleNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_texture, 1180 /* glGetTextureSamplerHandleNV */);
}

static PFNGLGETTEXTURESUBIMAGEPROC
epoxy_glGetTextureSubImage_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_get_texture_sub_image,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1181 /* "glGetTextureSubImage" */,
        1181 /* "glGetTextureSubImage" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1181] /* "glGetTextureSubImage" */,
                                providers, entrypoints);
}

static PFNGLGETTRACKMATRIXIVNVPROC
epoxy_glGetTrackMatrixivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 1182 /* glGetTrackMatrixivNV */);
}

static PFNGLGETTRANSFORMFEEDBACKVARYINGPROC
epoxy_glGetTransformFeedbackVarying_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1183 /* "glGetTransformFeedbackVarying" */,
        1183 /* "glGetTransformFeedbackVarying" */,
        1184 /* "glGetTransformFeedbackVaryingEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1183] /* "glGetTransformFeedbackVarying" */,
                                providers, entrypoints);
}

static PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
epoxy_glGetTransformFeedbackVaryingEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_transform_feedback,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1184 /* "glGetTransformFeedbackVaryingEXT" */,
        1183 /* "glGetTransformFeedbackVarying" */,
        1183 /* "glGetTransformFeedbackVarying" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1184] /* "glGetTransformFeedbackVaryingEXT" */,
                                providers, entrypoints);
}

static PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
epoxy_glGetTransformFeedbackVaryingNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_transform_feedback, 1185 /* glGetTransformFeedbackVaryingNV */);
}

static PFNGLGETTRANSFORMFEEDBACKI64_VPROC
epoxy_glGetTransformFeedbacki64_v_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1186 /* "glGetTransformFeedbacki64_v" */,
        1186 /* "glGetTransformFeedbacki64_v" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1186] /* "glGetTransformFeedbacki64_v" */,
                                providers, entrypoints);
}

static PFNGLGETTRANSFORMFEEDBACKI_VPROC
epoxy_glGetTransformFeedbacki_v_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1187 /* "glGetTransformFeedbacki_v" */,
        1187 /* "glGetTransformFeedbacki_v" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1187] /* "glGetTransformFeedbacki_v" */,
                                providers, entrypoints);
}

static PFNGLGETTRANSFORMFEEDBACKIVPROC
epoxy_glGetTransformFeedbackiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1188 /* "glGetTransformFeedbackiv" */,
        1188 /* "glGetTransformFeedbackiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1188] /* "glGetTransformFeedbackiv" */,
                                providers, entrypoints);
}

static PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC
epoxy_glGetTranslatedShaderSourceANGLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ANGLE_translated_shader_source, 1189 /* glGetTranslatedShaderSourceANGLE */);
}

static PFNGLGETUNIFORMBLOCKINDEXPROC
epoxy_glGetUniformBlockIndex_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_uniform_buffer_object,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1190 /* "glGetUniformBlockIndex" */,
        1190 /* "glGetUniformBlockIndex" */,
        1190 /* "glGetUniformBlockIndex" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1190] /* "glGetUniformBlockIndex" */,
                                providers, entrypoints);
}

static PFNGLGETUNIFORMBUFFERSIZEEXTPROC
epoxy_glGetUniformBufferSizeEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_bindable_uniform, 1191 /* glGetUniformBufferSizeEXT */);
}

static PFNGLGETUNIFORMINDICESPROC
epoxy_glGetUniformIndices_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_uniform_buffer_object,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1192 /* "glGetUniformIndices" */,
        1192 /* "glGetUniformIndices" */,
        1192 /* "glGetUniformIndices" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1192] /* "glGetUniformIndices" */,
                                providers, entrypoints);
}

static PFNGLGETUNIFORMLOCATIONPROC
epoxy_glGetUniformLocation_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1193 /* "glGetUniformLocation" */,
        1193 /* "glGetUniformLocation" */,
        1194 /* "glGetUniformLocationARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1193] /* "glGetUniformLocation" */,
                                providers, entrypoints);
}

static PFNGLGETUNIFORMLOCATIONARBPROC
epoxy_glGetUniformLocationARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1194 /* "glGetUniformLocationARB" */,
        1193 /* "glGetUniformLocation" */,
        1193 /* "glGetUniformLocation" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1194] /* "glGetUniformLocationARB" */,
                                providers, entrypoints);
}

static PFNGLGETUNIFORMOFFSETEXTPROC
epoxy_glGetUniformOffsetEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_bindable_uniform, 1195 /* glGetUniformOffsetEXT */);
}

static PFNGLGETUNIFORMSUBROUTINEUIVPROC
epoxy_glGetUniformSubroutineuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_shader_subroutine,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1196 /* "glGetUniformSubroutineuiv" */,
        1196 /* "glGetUniformSubroutineuiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1196] /* "glGetUniformSubroutineuiv" */,
                                providers, entrypoints);
}

static PFNGLGETUNIFORMDVPROC
epoxy_glGetUniformdv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1197 /* "glGetUniformdv" */,
        1197 /* "glGetUniformdv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1197] /* "glGetUniformdv" */,
                                providers, entrypoints);
}

static PFNGLGETUNIFORMFVPROC
epoxy_glGetUniformfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1198 /* "glGetUniformfv" */,
        1198 /* "glGetUniformfv" */,
        1199 /* "glGetUniformfvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1198] /* "glGetUniformfv" */,
                                providers, entrypoints);
}

static PFNGLGETUNIFORMFVARBPROC
epoxy_glGetUniformfvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1199 /* "glGetUniformfvARB" */,
        1198 /* "glGetUniformfv" */,
        1198 /* "glGetUniformfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1199] /* "glGetUniformfvARB" */,
                                providers, entrypoints);
}

static PFNGLGETUNIFORMI64VARBPROC
epoxy_glGetUniformi64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1200 /* glGetUniformi64vARB */);
}

static PFNGLGETUNIFORMI64VNVPROC
epoxy_glGetUniformi64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1201 /* "glGetUniformi64vNV" */,
        1201 /* "glGetUniformi64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1201] /* "glGetUniformi64vNV" */,
                                providers, entrypoints);
}

static PFNGLGETUNIFORMIVPROC
epoxy_glGetUniformiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1202 /* "glGetUniformiv" */,
        1202 /* "glGetUniformiv" */,
        1203 /* "glGetUniformivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1202] /* "glGetUniformiv" */,
                                providers, entrypoints);
}

static PFNGLGETUNIFORMIVARBPROC
epoxy_glGetUniformivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1203 /* "glGetUniformivARB" */,
        1202 /* "glGetUniformiv" */,
        1202 /* "glGetUniformiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1203] /* "glGetUniformivARB" */,
                                providers, entrypoints);
}

static PFNGLGETUNIFORMUI64VARBPROC
epoxy_glGetUniformui64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1204 /* glGetUniformui64vARB */);
}

static PFNGLGETUNIFORMUI64VNVPROC
epoxy_glGetUniformui64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_shader_buffer_load,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1205 /* "glGetUniformui64vNV" */,
        1205 /* "glGetUniformui64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1205] /* "glGetUniformui64vNV" */,
                                providers, entrypoints);
}

static PFNGLGETUNIFORMUIVPROC
epoxy_glGetUniformuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_gpu_shader4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1206 /* "glGetUniformuiv" */,
        1206 /* "glGetUniformuiv" */,
        1207 /* "glGetUniformuivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1206] /* "glGetUniformuiv" */,
                                providers, entrypoints);
}

static PFNGLGETUNIFORMUIVEXTPROC
epoxy_glGetUniformuivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_gpu_shader4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1207 /* "glGetUniformuivEXT" */,
        1206 /* "glGetUniformuiv" */,
        1206 /* "glGetUniformuiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1207] /* "glGetUniformuivEXT" */,
                                providers, entrypoints);
}

static PFNGLGETVARIANTARRAYOBJECTFVATIPROC
epoxy_glGetVariantArrayObjectfvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_array_object, 1208 /* glGetVariantArrayObjectfvATI */);
}

static PFNGLGETVARIANTARRAYOBJECTIVATIPROC
epoxy_glGetVariantArrayObjectivATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_array_object, 1209 /* glGetVariantArrayObjectivATI */);
}

static PFNGLGETVARIANTBOOLEANVEXTPROC
epoxy_glGetVariantBooleanvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 1210 /* glGetVariantBooleanvEXT */);
}

static PFNGLGETVARIANTFLOATVEXTPROC
epoxy_glGetVariantFloatvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 1211 /* glGetVariantFloatvEXT */);
}

static PFNGLGETVARIANTINTEGERVEXTPROC
epoxy_glGetVariantIntegervEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 1212 /* glGetVariantIntegervEXT */);
}

static PFNGLGETVARIANTPOINTERVEXTPROC
epoxy_glGetVariantPointervEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 1213 /* glGetVariantPointervEXT */);
}

static PFNGLGETVARYINGLOCATIONNVPROC
epoxy_glGetVaryingLocationNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_transform_feedback, 1214 /* glGetVaryingLocationNV */);
}

static PFNGLGETVERTEXARRAYINDEXED64IVPROC
epoxy_glGetVertexArrayIndexed64iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1215 /* "glGetVertexArrayIndexed64iv" */,
        1215 /* "glGetVertexArrayIndexed64iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1215] /* "glGetVertexArrayIndexed64iv" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXARRAYINDEXEDIVPROC
epoxy_glGetVertexArrayIndexediv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1216 /* "glGetVertexArrayIndexediv" */,
        1216 /* "glGetVertexArrayIndexediv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1216] /* "glGetVertexArrayIndexediv" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC
epoxy_glGetVertexArrayIntegeri_vEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1217 /* glGetVertexArrayIntegeri_vEXT */);
}

static PFNGLGETVERTEXARRAYINTEGERVEXTPROC
epoxy_glGetVertexArrayIntegervEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1218 /* glGetVertexArrayIntegervEXT */);
}

static PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC
epoxy_glGetVertexArrayPointeri_vEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1219 /* glGetVertexArrayPointeri_vEXT */);
}

static PFNGLGETVERTEXARRAYPOINTERVEXTPROC
epoxy_glGetVertexArrayPointervEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1220 /* glGetVertexArrayPointervEXT */);
}

static PFNGLGETVERTEXARRAYIVPROC
epoxy_glGetVertexArrayiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1221 /* "glGetVertexArrayiv" */,
        1221 /* "glGetVertexArrayiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1221] /* "glGetVertexArrayiv" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
epoxy_glGetVertexAttribArrayObjectfvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_attrib_array_object, 1222 /* glGetVertexAttribArrayObjectfvATI */);
}

static PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
epoxy_glGetVertexAttribArrayObjectivATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_attrib_array_object, 1223 /* glGetVertexAttribArrayObjectivATI */);
}

static PFNGLGETVERTEXATTRIBIIVPROC
epoxy_glGetVertexAttribIiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1224 /* "glGetVertexAttribIiv" */,
        1224 /* "glGetVertexAttribIiv" */,
        1225 /* "glGetVertexAttribIivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1224] /* "glGetVertexAttribIiv" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBIIVEXTPROC
epoxy_glGetVertexAttribIivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1225 /* "glGetVertexAttribIivEXT" */,
        1224 /* "glGetVertexAttribIiv" */,
        1224 /* "glGetVertexAttribIiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1225] /* "glGetVertexAttribIivEXT" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBIUIVPROC
epoxy_glGetVertexAttribIuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1226 /* "glGetVertexAttribIuiv" */,
        1226 /* "glGetVertexAttribIuiv" */,
        1227 /* "glGetVertexAttribIuivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1226] /* "glGetVertexAttribIuiv" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBIUIVEXTPROC
epoxy_glGetVertexAttribIuivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1227 /* "glGetVertexAttribIuivEXT" */,
        1226 /* "glGetVertexAttribIuiv" */,
        1226 /* "glGetVertexAttribIuiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1227] /* "glGetVertexAttribIuivEXT" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBLDVPROC
epoxy_glGetVertexAttribLdv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        GL_extension_GL_EXT_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1228 /* "glGetVertexAttribLdv" */,
        1228 /* "glGetVertexAttribLdv" */,
        1229 /* "glGetVertexAttribLdvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1228] /* "glGetVertexAttribLdv" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBLDVEXTPROC
epoxy_glGetVertexAttribLdvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_vertex_attrib_64bit,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1229 /* "glGetVertexAttribLdvEXT" */,
        1228 /* "glGetVertexAttribLdv" */,
        1228 /* "glGetVertexAttribLdv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1229] /* "glGetVertexAttribLdvEXT" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBLI64VNVPROC
epoxy_glGetVertexAttribLi64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 1230 /* glGetVertexAttribLi64vNV */);
}

static PFNGLGETVERTEXATTRIBLUI64VARBPROC
epoxy_glGetVertexAttribLui64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 1231 /* glGetVertexAttribLui64vARB */);
}

static PFNGLGETVERTEXATTRIBLUI64VNVPROC
epoxy_glGetVertexAttribLui64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 1232 /* glGetVertexAttribLui64vNV */);
}

static PFNGLGETVERTEXATTRIBPOINTERVPROC
epoxy_glGetVertexAttribPointerv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1233 /* "glGetVertexAttribPointerv" */,
        1233 /* "glGetVertexAttribPointerv" */,
        1234 /* "glGetVertexAttribPointervARB" */,
        1234 /* "glGetVertexAttribPointervARB" */,
        1235 /* "glGetVertexAttribPointervNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1233] /* "glGetVertexAttribPointerv" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBPOINTERVARBPROC
epoxy_glGetVertexAttribPointervARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1234 /* "glGetVertexAttribPointervARB" */,
        1234 /* "glGetVertexAttribPointervARB" */,
        1233 /* "glGetVertexAttribPointerv" */,
        1233 /* "glGetVertexAttribPointerv" */,
        1235 /* "glGetVertexAttribPointervNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1234] /* "glGetVertexAttribPointervARB" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBPOINTERVNVPROC
epoxy_glGetVertexAttribPointervNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1235 /* "glGetVertexAttribPointervNV" */,
        1233 /* "glGetVertexAttribPointerv" */,
        1233 /* "glGetVertexAttribPointerv" */,
        1234 /* "glGetVertexAttribPointervARB" */,
        1234 /* "glGetVertexAttribPointervARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1235] /* "glGetVertexAttribPointervNV" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBDVPROC
epoxy_glGetVertexAttribdv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1236 /* "glGetVertexAttribdv" */,
        1237 /* "glGetVertexAttribdvARB" */,
        1237 /* "glGetVertexAttribdvARB" */,
        1238 /* "glGetVertexAttribdvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1236] /* "glGetVertexAttribdv" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBDVARBPROC
epoxy_glGetVertexAttribdvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1237 /* "glGetVertexAttribdvARB" */,
        1237 /* "glGetVertexAttribdvARB" */,
        1236 /* "glGetVertexAttribdv" */,
        1238 /* "glGetVertexAttribdvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1237] /* "glGetVertexAttribdvARB" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBDVNVPROC
epoxy_glGetVertexAttribdvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1238 /* "glGetVertexAttribdvNV" */,
        1236 /* "glGetVertexAttribdv" */,
        1237 /* "glGetVertexAttribdvARB" */,
        1237 /* "glGetVertexAttribdvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1238] /* "glGetVertexAttribdvNV" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBFVPROC
epoxy_glGetVertexAttribfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1239 /* "glGetVertexAttribfv" */,
        1239 /* "glGetVertexAttribfv" */,
        1240 /* "glGetVertexAttribfvARB" */,
        1240 /* "glGetVertexAttribfvARB" */,
        1241 /* "glGetVertexAttribfvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1239] /* "glGetVertexAttribfv" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBFVARBPROC
epoxy_glGetVertexAttribfvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1240 /* "glGetVertexAttribfvARB" */,
        1240 /* "glGetVertexAttribfvARB" */,
        1239 /* "glGetVertexAttribfv" */,
        1239 /* "glGetVertexAttribfv" */,
        1241 /* "glGetVertexAttribfvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1240] /* "glGetVertexAttribfvARB" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBFVNVPROC
epoxy_glGetVertexAttribfvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1241 /* "glGetVertexAttribfvNV" */,
        1239 /* "glGetVertexAttribfv" */,
        1239 /* "glGetVertexAttribfv" */,
        1240 /* "glGetVertexAttribfvARB" */,
        1240 /* "glGetVertexAttribfvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1241] /* "glGetVertexAttribfvNV" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBIVPROC
epoxy_glGetVertexAttribiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1242 /* "glGetVertexAttribiv" */,
        1242 /* "glGetVertexAttribiv" */,
        1243 /* "glGetVertexAttribivARB" */,
        1243 /* "glGetVertexAttribivARB" */,
        1244 /* "glGetVertexAttribivNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1242] /* "glGetVertexAttribiv" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBIVARBPROC
epoxy_glGetVertexAttribivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1243 /* "glGetVertexAttribivARB" */,
        1243 /* "glGetVertexAttribivARB" */,
        1242 /* "glGetVertexAttribiv" */,
        1242 /* "glGetVertexAttribiv" */,
        1244 /* "glGetVertexAttribivNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1243] /* "glGetVertexAttribivARB" */,
                                providers, entrypoints);
}

static PFNGLGETVERTEXATTRIBIVNVPROC
epoxy_glGetVertexAttribivNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1244 /* "glGetVertexAttribivNV" */,
        1242 /* "glGetVertexAttribiv" */,
        1242 /* "glGetVertexAttribiv" */,
        1243 /* "glGetVertexAttribivARB" */,
        1243 /* "glGetVertexAttribivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1244] /* "glGetVertexAttribivNV" */,
                                providers, entrypoints);
}

static PFNGLGETVIDEOCAPTURESTREAMDVNVPROC
epoxy_glGetVideoCaptureStreamdvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_video_capture, 1245 /* glGetVideoCaptureStreamdvNV */);
}

static PFNGLGETVIDEOCAPTURESTREAMFVNVPROC
epoxy_glGetVideoCaptureStreamfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_video_capture, 1246 /* glGetVideoCaptureStreamfvNV */);
}

static PFNGLGETVIDEOCAPTURESTREAMIVNVPROC
epoxy_glGetVideoCaptureStreamivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_video_capture, 1247 /* glGetVideoCaptureStreamivNV */);
}

static PFNGLGETVIDEOCAPTUREIVNVPROC
epoxy_glGetVideoCaptureivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_video_capture, 1248 /* glGetVideoCaptureivNV */);
}

static PFNGLGETVIDEOI64VNVPROC
epoxy_glGetVideoi64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_present_video, 1249 /* glGetVideoi64vNV */);
}

static PFNGLGETVIDEOIVNVPROC
epoxy_glGetVideoivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_present_video, 1250 /* glGetVideoivNV */);
}

static PFNGLGETVIDEOUI64VNVPROC
epoxy_glGetVideoui64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_present_video, 1251 /* glGetVideoui64vNV */);
}

static PFNGLGETVIDEOUIVNVPROC
epoxy_glGetVideouivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_present_video, 1252 /* glGetVideouivNV */);
}

static PFNGLGETNCOLORTABLEPROC
epoxy_glGetnColorTable_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_4_5, 1253 /* glGetnColorTable */);
}

static PFNGLGETNCOLORTABLEARBPROC
epoxy_glGetnColorTableARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1254 /* glGetnColorTableARB */);
}

static PFNGLGETNCOMPRESSEDTEXIMAGEPROC
epoxy_glGetnCompressedTexImage_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_4_5, 1255 /* glGetnCompressedTexImage */);
}

static PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
epoxy_glGetnCompressedTexImageARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1256 /* glGetnCompressedTexImageARB */);
}

static PFNGLGETNCONVOLUTIONFILTERPROC
epoxy_glGetnConvolutionFilter_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_4_5, 1257 /* glGetnConvolutionFilter */);
}

static PFNGLGETNCONVOLUTIONFILTERARBPROC
epoxy_glGetnConvolutionFilterARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1258 /* glGetnConvolutionFilterARB */);
}

static PFNGLGETNHISTOGRAMPROC
epoxy_glGetnHistogram_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_4_5, 1259 /* glGetnHistogram */);
}

static PFNGLGETNHISTOGRAMARBPROC
epoxy_glGetnHistogramARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1260 /* glGetnHistogramARB */);
}

static PFNGLGETNMAPDVPROC
epoxy_glGetnMapdv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_4_5, 1261 /* glGetnMapdv */);
}

static PFNGLGETNMAPDVARBPROC
epoxy_glGetnMapdvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1262 /* glGetnMapdvARB */);
}

static PFNGLGETNMAPFVPROC
epoxy_glGetnMapfv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_4_5, 1263 /* glGetnMapfv */);
}

static PFNGLGETNMAPFVARBPROC
epoxy_glGetnMapfvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1264 /* glGetnMapfvARB */);
}

static PFNGLGETNMAPIVPROC
epoxy_glGetnMapiv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_4_5, 1265 /* glGetnMapiv */);
}

static PFNGLGETNMAPIVARBPROC
epoxy_glGetnMapivARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1266 /* glGetnMapivARB */);
}

static PFNGLGETNMINMAXPROC
epoxy_glGetnMinmax_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_4_5, 1267 /* glGetnMinmax */);
}

static PFNGLGETNMINMAXARBPROC
epoxy_glGetnMinmaxARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1268 /* glGetnMinmaxARB */);
}

static PFNGLGETNPIXELMAPFVPROC
epoxy_glGetnPixelMapfv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_4_5, 1269 /* glGetnPixelMapfv */);
}

static PFNGLGETNPIXELMAPFVARBPROC
epoxy_glGetnPixelMapfvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1270 /* glGetnPixelMapfvARB */);
}

static PFNGLGETNPIXELMAPUIVPROC
epoxy_glGetnPixelMapuiv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_4_5, 1271 /* glGetnPixelMapuiv */);
}

static PFNGLGETNPIXELMAPUIVARBPROC
epoxy_glGetnPixelMapuivARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1272 /* glGetnPixelMapuivARB */);
}

static PFNGLGETNPIXELMAPUSVPROC
epoxy_glGetnPixelMapusv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_4_5, 1273 /* glGetnPixelMapusv */);
}

static PFNGLGETNPIXELMAPUSVARBPROC
epoxy_glGetnPixelMapusvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1274 /* glGetnPixelMapusvARB */);
}

static PFNGLGETNPOLYGONSTIPPLEPROC
epoxy_glGetnPolygonStipple_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_4_5, 1275 /* glGetnPolygonStipple */);
}

static PFNGLGETNPOLYGONSTIPPLEARBPROC
epoxy_glGetnPolygonStippleARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1276 /* glGetnPolygonStippleARB */);
}

static PFNGLGETNSEPARABLEFILTERPROC
epoxy_glGetnSeparableFilter_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_4_5, 1277 /* glGetnSeparableFilter */);
}

static PFNGLGETNSEPARABLEFILTERARBPROC
epoxy_glGetnSeparableFilterARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1278 /* glGetnSeparableFilterARB */);
}

static PFNGLGETNTEXIMAGEPROC
epoxy_glGetnTexImage_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_4_5, 1279 /* glGetnTexImage */);
}

static PFNGLGETNTEXIMAGEARBPROC
epoxy_glGetnTexImageARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1280 /* glGetnTexImageARB */);
}

static PFNGLGETNUNIFORMDVPROC
epoxy_glGetnUniformdv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_4_5, 1281 /* glGetnUniformdv */);
}

static PFNGLGETNUNIFORMDVARBPROC
epoxy_glGetnUniformdvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1282 /* glGetnUniformdvARB */);
}

static PFNGLGETNUNIFORMFVPROC
epoxy_glGetnUniformfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_KHR_robustness,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_robustness,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1283 /* "glGetnUniformfv" */,
        1283 /* "glGetnUniformfv" */,
        1283 /* "glGetnUniformfv" */,
        1286 /* "glGetnUniformfvKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1283] /* "glGetnUniformfv" */,
                                providers, entrypoints);
}

static PFNGLGETNUNIFORMFVARBPROC
epoxy_glGetnUniformfvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1284 /* glGetnUniformfvARB */);
}

static PFNGLGETNUNIFORMFVEXTPROC
epoxy_glGetnUniformfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_robustness, 1285 /* glGetnUniformfvEXT */);
}

static PFNGLGETNUNIFORMFVKHRPROC
epoxy_glGetnUniformfvKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_robustness,
        Desktop_OpenGL_4_5,
        GL_extension_GL_KHR_robustness,
        OpenGL_ES_3_2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1286 /* "glGetnUniformfvKHR" */,
        1283 /* "glGetnUniformfv" */,
        1283 /* "glGetnUniformfv" */,
        1283 /* "glGetnUniformfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1286] /* "glGetnUniformfvKHR" */,
                                providers, entrypoints);
}

static PFNGLGETNUNIFORMI64VARBPROC
epoxy_glGetnUniformi64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1287 /* glGetnUniformi64vARB */);
}

static PFNGLGETNUNIFORMIVPROC
epoxy_glGetnUniformiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_KHR_robustness,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_robustness,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1288 /* "glGetnUniformiv" */,
        1288 /* "glGetnUniformiv" */,
        1288 /* "glGetnUniformiv" */,
        1291 /* "glGetnUniformivKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1288] /* "glGetnUniformiv" */,
                                providers, entrypoints);
}

static PFNGLGETNUNIFORMIVARBPROC
epoxy_glGetnUniformivARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1289 /* glGetnUniformivARB */);
}

static PFNGLGETNUNIFORMIVEXTPROC
epoxy_glGetnUniformivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_robustness, 1290 /* glGetnUniformivEXT */);
}

static PFNGLGETNUNIFORMIVKHRPROC
epoxy_glGetnUniformivKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_robustness,
        Desktop_OpenGL_4_5,
        GL_extension_GL_KHR_robustness,
        OpenGL_ES_3_2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1291 /* "glGetnUniformivKHR" */,
        1288 /* "glGetnUniformiv" */,
        1288 /* "glGetnUniformiv" */,
        1288 /* "glGetnUniformiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1291] /* "glGetnUniformivKHR" */,
                                providers, entrypoints);
}

static PFNGLGETNUNIFORMUI64VARBPROC
epoxy_glGetnUniformui64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1292 /* glGetnUniformui64vARB */);
}

static PFNGLGETNUNIFORMUIVPROC
epoxy_glGetnUniformuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_KHR_robustness,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_robustness,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1293 /* "glGetnUniformuiv" */,
        1293 /* "glGetnUniformuiv" */,
        1293 /* "glGetnUniformuiv" */,
        1295 /* "glGetnUniformuivKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1293] /* "glGetnUniformuiv" */,
                                providers, entrypoints);
}

static PFNGLGETNUNIFORMUIVARBPROC
epoxy_glGetnUniformuivARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_robustness, 1294 /* glGetnUniformuivARB */);
}

static PFNGLGETNUNIFORMUIVKHRPROC
epoxy_glGetnUniformuivKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_robustness,
        Desktop_OpenGL_4_5,
        GL_extension_GL_KHR_robustness,
        OpenGL_ES_3_2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1295 /* "glGetnUniformuivKHR" */,
        1293 /* "glGetnUniformuiv" */,
        1293 /* "glGetnUniformuiv" */,
        1293 /* "glGetnUniformuiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1295] /* "glGetnUniformuivKHR" */,
                                providers, entrypoints);
}

static PFNGLGLOBALALPHAFACTORBSUNPROC
epoxy_glGlobalAlphaFactorbSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_global_alpha, 1296 /* glGlobalAlphaFactorbSUN */);
}

static PFNGLGLOBALALPHAFACTORDSUNPROC
epoxy_glGlobalAlphaFactordSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_global_alpha, 1297 /* glGlobalAlphaFactordSUN */);
}

static PFNGLGLOBALALPHAFACTORFSUNPROC
epoxy_glGlobalAlphaFactorfSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_global_alpha, 1298 /* glGlobalAlphaFactorfSUN */);
}

static PFNGLGLOBALALPHAFACTORISUNPROC
epoxy_glGlobalAlphaFactoriSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_global_alpha, 1299 /* glGlobalAlphaFactoriSUN */);
}

static PFNGLGLOBALALPHAFACTORSSUNPROC
epoxy_glGlobalAlphaFactorsSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_global_alpha, 1300 /* glGlobalAlphaFactorsSUN */);
}

static PFNGLGLOBALALPHAFACTORUBSUNPROC
epoxy_glGlobalAlphaFactorubSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_global_alpha, 1301 /* glGlobalAlphaFactorubSUN */);
}

static PFNGLGLOBALALPHAFACTORUISUNPROC
epoxy_glGlobalAlphaFactoruiSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_global_alpha, 1302 /* glGlobalAlphaFactoruiSUN */);
}

static PFNGLGLOBALALPHAFACTORUSSUNPROC
epoxy_glGlobalAlphaFactorusSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_global_alpha, 1303 /* glGlobalAlphaFactorusSUN */);
}

static PFNGLHINTPROC
epoxy_glHint_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1304 /* "glHint" */,
        1304 /* "glHint" */,
        1304 /* "glHint" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1304] /* "glHint" */,
                                providers, entrypoints);
}

static PFNGLHINTPGIPROC
epoxy_glHintPGI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_PGI_misc_hints, 1305 /* glHintPGI */);
}

static PFNGLHISTOGRAMPROC
epoxy_glHistogram_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_histogram,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1306 /* "glHistogram" */,
        1307 /* "glHistogramEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1306] /* "glHistogram" */,
                                providers, entrypoints);
}

static PFNGLHISTOGRAMEXTPROC
epoxy_glHistogramEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_histogram,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1307 /* "glHistogramEXT" */,
        1306 /* "glHistogram" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1307] /* "glHistogramEXT" */,
                                providers, entrypoints);
}

static PFNGLIGLOOINTERFACESGIXPROC
epoxy_glIglooInterfaceSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_igloo_interface, 1308 /* glIglooInterfaceSGIX */);
}

static PFNGLIMAGETRANSFORMPARAMETERFHPPROC
epoxy_glImageTransformParameterfHP_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_HP_image_transform, 1309 /* glImageTransformParameterfHP */);
}

static PFNGLIMAGETRANSFORMPARAMETERFVHPPROC
epoxy_glImageTransformParameterfvHP_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_HP_image_transform, 1310 /* glImageTransformParameterfvHP */);
}

static PFNGLIMAGETRANSFORMPARAMETERIHPPROC
epoxy_glImageTransformParameteriHP_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_HP_image_transform, 1311 /* glImageTransformParameteriHP */);
}

static PFNGLIMAGETRANSFORMPARAMETERIVHPPROC
epoxy_glImageTransformParameterivHP_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_HP_image_transform, 1312 /* glImageTransformParameterivHP */);
}

static PFNGLIMPORTSYNCEXTPROC
epoxy_glImportSyncEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_x11_sync_object, 1313 /* glImportSyncEXT */);
}

static PFNGLINDEXFORMATNVPROC
epoxy_glIndexFormatNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_buffer_unified_memory, 1314 /* glIndexFormatNV */);
}

static PFNGLINDEXFUNCEXTPROC
epoxy_glIndexFuncEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_index_func, 1315 /* glIndexFuncEXT */);
}

static PFNGLINDEXMASKPROC
epoxy_glIndexMask_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1316 /* glIndexMask */);
}

static PFNGLINDEXMATERIALEXTPROC
epoxy_glIndexMaterialEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_index_material, 1317 /* glIndexMaterialEXT */);
}

static PFNGLINDEXPOINTERPROC
epoxy_glIndexPointer_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_1, 1318 /* glIndexPointer */);
}

static PFNGLINDEXPOINTEREXTPROC
epoxy_glIndexPointerEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_array, 1319 /* glIndexPointerEXT */);
}

static PFNGLINDEXPOINTERLISTIBMPROC
epoxy_glIndexPointerListIBM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IBM_vertex_array_lists, 1320 /* glIndexPointerListIBM */);
}

static PFNGLINDEXDPROC
epoxy_glIndexd_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1321 /* glIndexd */);
}

static PFNGLINDEXDVPROC
epoxy_glIndexdv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1322 /* glIndexdv */);
}

static PFNGLINDEXFPROC
epoxy_glIndexf_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1323 /* glIndexf */);
}

static PFNGLINDEXFVPROC
epoxy_glIndexfv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1324 /* glIndexfv */);
}

static PFNGLINDEXIPROC
epoxy_glIndexi_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1325 /* glIndexi */);
}

static PFNGLINDEXIVPROC
epoxy_glIndexiv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1326 /* glIndexiv */);
}

static PFNGLINDEXSPROC
epoxy_glIndexs_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1327 /* glIndexs */);
}

static PFNGLINDEXSVPROC
epoxy_glIndexsv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1328 /* glIndexsv */);
}

static PFNGLINDEXUBPROC
epoxy_glIndexub_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_1, 1329 /* glIndexub */);
}

static PFNGLINDEXUBVPROC
epoxy_glIndexubv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_1, 1330 /* glIndexubv */);
}

static PFNGLINDEXXOESPROC
epoxy_glIndexxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1331 /* glIndexxOES */);
}

static PFNGLINDEXXVOESPROC
epoxy_glIndexxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1332 /* glIndexxvOES */);
}

static PFNGLINITNAMESPROC
epoxy_glInitNames_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1333 /* glInitNames */);
}

static PFNGLINSERTCOMPONENTEXTPROC
epoxy_glInsertComponentEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 1334 /* glInsertComponentEXT */);
}

static PFNGLINSERTEVENTMARKEREXTPROC
epoxy_glInsertEventMarkerEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_debug_marker, 1335 /* glInsertEventMarkerEXT */);
}

static PFNGLINSTRUMENTSBUFFERSGIXPROC
epoxy_glInstrumentsBufferSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_instruments, 1336 /* glInstrumentsBufferSGIX */);
}

static PFNGLINTERLEAVEDARRAYSPROC
epoxy_glInterleavedArrays_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_1, 1337 /* glInterleavedArrays */);
}

static PFNGLINTERPOLATEPATHSNVPROC
epoxy_glInterpolatePathsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1338 /* glInterpolatePathsNV */);
}

static PFNGLINVALIDATEBUFFERDATAPROC
epoxy_glInvalidateBufferData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_invalidate_subdata,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1339 /* "glInvalidateBufferData" */,
        1339 /* "glInvalidateBufferData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1339] /* "glInvalidateBufferData" */,
                                providers, entrypoints);
}

static PFNGLINVALIDATEBUFFERSUBDATAPROC
epoxy_glInvalidateBufferSubData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_invalidate_subdata,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1340 /* "glInvalidateBufferSubData" */,
        1340 /* "glInvalidateBufferSubData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1340] /* "glInvalidateBufferSubData" */,
                                providers, entrypoints);
}

static PFNGLINVALIDATEFRAMEBUFFERPROC
epoxy_glInvalidateFramebuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_invalidate_subdata,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1341 /* "glInvalidateFramebuffer" */,
        1341 /* "glInvalidateFramebuffer" */,
        1341 /* "glInvalidateFramebuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1341] /* "glInvalidateFramebuffer" */,
                                providers, entrypoints);
}

static PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC
epoxy_glInvalidateNamedFramebufferData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1342 /* "glInvalidateNamedFramebufferData" */,
        1342 /* "glInvalidateNamedFramebufferData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1342] /* "glInvalidateNamedFramebufferData" */,
                                providers, entrypoints);
}

static PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC
epoxy_glInvalidateNamedFramebufferSubData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1343 /* "glInvalidateNamedFramebufferSubData" */,
        1343 /* "glInvalidateNamedFramebufferSubData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1343] /* "glInvalidateNamedFramebufferSubData" */,
                                providers, entrypoints);
}

static PFNGLINVALIDATESUBFRAMEBUFFERPROC
epoxy_glInvalidateSubFramebuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_invalidate_subdata,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1344 /* "glInvalidateSubFramebuffer" */,
        1344 /* "glInvalidateSubFramebuffer" */,
        1344 /* "glInvalidateSubFramebuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1344] /* "glInvalidateSubFramebuffer" */,
                                providers, entrypoints);
}

static PFNGLINVALIDATETEXIMAGEPROC
epoxy_glInvalidateTexImage_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_invalidate_subdata,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1345 /* "glInvalidateTexImage" */,
        1345 /* "glInvalidateTexImage" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1345] /* "glInvalidateTexImage" */,
                                providers, entrypoints);
}

static PFNGLINVALIDATETEXSUBIMAGEPROC
epoxy_glInvalidateTexSubImage_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_invalidate_subdata,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1346 /* "glInvalidateTexSubImage" */,
        1346 /* "glInvalidateTexSubImage" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1346] /* "glInvalidateTexSubImage" */,
                                providers, entrypoints);
}

static PFNGLISASYNCMARKERSGIXPROC
epoxy_glIsAsyncMarkerSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_async, 1347 /* glIsAsyncMarkerSGIX */);
}

static PFNGLISBUFFERPROC
epoxy_glIsBuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1348 /* "glIsBuffer" */,
        1348 /* "glIsBuffer" */,
        1348 /* "glIsBuffer" */,
        1349 /* "glIsBufferARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1348] /* "glIsBuffer" */,
                                providers, entrypoints);
}

static PFNGLISBUFFERARBPROC
epoxy_glIsBufferARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_buffer_object,
        Desktop_OpenGL_1_5,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1349 /* "glIsBufferARB" */,
        1348 /* "glIsBuffer" */,
        1348 /* "glIsBuffer" */,
        1348 /* "glIsBuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1349] /* "glIsBufferARB" */,
                                providers, entrypoints);
}

static PFNGLISBUFFERRESIDENTNVPROC
epoxy_glIsBufferResidentNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_shader_buffer_load, 1350 /* glIsBufferResidentNV */);
}

static PFNGLISCOMMANDLISTNVPROC
epoxy_glIsCommandListNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 1351 /* glIsCommandListNV */);
}

static PFNGLISENABLEDPROC
epoxy_glIsEnabled_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1352 /* "glIsEnabled" */,
        1352 /* "glIsEnabled" */,
        1352 /* "glIsEnabled" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1352] /* "glIsEnabled" */,
                                providers, entrypoints);
}

static PFNGLISENABLEDINDEXEDEXTPROC
epoxy_glIsEnabledIndexedEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_NV_viewport_array,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1353 /* "glIsEnabledIndexedEXT" */,
        1353 /* "glIsEnabledIndexedEXT" */,
        1354 /* "glIsEnabledi" */,
        1354 /* "glIsEnabledi" */,
        1355 /* "glIsEnablediEXT" */,
        1356 /* "glIsEnablediNV" */,
        1357 /* "glIsEnablediOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1353] /* "glIsEnabledIndexedEXT" */,
                                providers, entrypoints);
}

static PFNGLISENABLEDIPROC
epoxy_glIsEnabledi_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_NV_viewport_array,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1354 /* "glIsEnabledi" */,
        1354 /* "glIsEnabledi" */,
        1353 /* "glIsEnabledIndexedEXT" */,
        1353 /* "glIsEnabledIndexedEXT" */,
        1355 /* "glIsEnablediEXT" */,
        1356 /* "glIsEnablediNV" */,
        1357 /* "glIsEnablediOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1354] /* "glIsEnabledi" */,
                                providers, entrypoints);
}

static PFNGLISENABLEDIEXTPROC
epoxy_glIsEnablediEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_NV_viewport_array,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1355 /* "glIsEnablediEXT" */,
        1353 /* "glIsEnabledIndexedEXT" */,
        1353 /* "glIsEnabledIndexedEXT" */,
        1354 /* "glIsEnabledi" */,
        1354 /* "glIsEnabledi" */,
        1356 /* "glIsEnablediNV" */,
        1357 /* "glIsEnablediOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1355] /* "glIsEnablediEXT" */,
                                providers, entrypoints);
}

static PFNGLISENABLEDINVPROC
epoxy_glIsEnablediNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_viewport_array,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_OES_draw_buffers_indexed,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1356 /* "glIsEnablediNV" */,
        1353 /* "glIsEnabledIndexedEXT" */,
        1353 /* "glIsEnabledIndexedEXT" */,
        1354 /* "glIsEnabledi" */,
        1354 /* "glIsEnabledi" */,
        1355 /* "glIsEnablediEXT" */,
        1357 /* "glIsEnablediOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1356] /* "glIsEnablediNV" */,
                                providers, entrypoints);
}

static PFNGLISENABLEDIOESPROC
epoxy_glIsEnablediOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_draw_buffers_indexed,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_draw_buffers2,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_draw_buffers_indexed,
        GL_extension_GL_NV_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1357 /* "glIsEnablediOES" */,
        1353 /* "glIsEnabledIndexedEXT" */,
        1353 /* "glIsEnabledIndexedEXT" */,
        1354 /* "glIsEnabledi" */,
        1354 /* "glIsEnabledi" */,
        1355 /* "glIsEnablediEXT" */,
        1356 /* "glIsEnablediNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1357] /* "glIsEnablediOES" */,
                                providers, entrypoints);
}

static PFNGLISFENCEAPPLEPROC
epoxy_glIsFenceAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_fence, 1358 /* glIsFenceAPPLE */);
}

static PFNGLISFENCENVPROC
epoxy_glIsFenceNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_fence, 1359 /* glIsFenceNV */);
}

static PFNGLISFRAMEBUFFERPROC
epoxy_glIsFramebuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1360 /* "glIsFramebuffer" */,
        1360 /* "glIsFramebuffer" */,
        1360 /* "glIsFramebuffer" */,
        1361 /* "glIsFramebufferEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1360] /* "glIsFramebuffer" */,
                                providers, entrypoints);
}

static PFNGLISFRAMEBUFFEREXTPROC
epoxy_glIsFramebufferEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1361 /* "glIsFramebufferEXT" */,
        1360 /* "glIsFramebuffer" */,
        1360 /* "glIsFramebuffer" */,
        1360 /* "glIsFramebuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1361] /* "glIsFramebufferEXT" */,
                                providers, entrypoints);
}

static PFNGLISFRAMEBUFFEROESPROC
epoxy_glIsFramebufferOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_framebuffer_object, 1362 /* glIsFramebufferOES */);
}

static PFNGLISIMAGEHANDLERESIDENTARBPROC
epoxy_glIsImageHandleResidentARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 1363 /* glIsImageHandleResidentARB */);
}

static PFNGLISIMAGEHANDLERESIDENTNVPROC
epoxy_glIsImageHandleResidentNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_texture, 1364 /* glIsImageHandleResidentNV */);
}

static PFNGLISLISTPROC
epoxy_glIsList_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1365 /* glIsList */);
}

static PFNGLISNAMEAMDPROC
epoxy_glIsNameAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_name_gen_delete, 1366 /* glIsNameAMD */);
}

static PFNGLISNAMEDBUFFERRESIDENTNVPROC
epoxy_glIsNamedBufferResidentNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_shader_buffer_load, 1367 /* glIsNamedBufferResidentNV */);
}

static PFNGLISNAMEDSTRINGARBPROC
epoxy_glIsNamedStringARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_shading_language_include, 1368 /* glIsNamedStringARB */);
}

static PFNGLISOBJECTBUFFERATIPROC
epoxy_glIsObjectBufferATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_array_object, 1369 /* glIsObjectBufferATI */);
}

static PFNGLISOCCLUSIONQUERYNVPROC
epoxy_glIsOcclusionQueryNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_occlusion_query, 1370 /* glIsOcclusionQueryNV */);
}

static PFNGLISPATHNVPROC
epoxy_glIsPathNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1371 /* glIsPathNV */);
}

static PFNGLISPOINTINFILLPATHNVPROC
epoxy_glIsPointInFillPathNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1372 /* glIsPointInFillPathNV */);
}

static PFNGLISPOINTINSTROKEPATHNVPROC
epoxy_glIsPointInStrokePathNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1373 /* glIsPointInStrokePathNV */);
}

static PFNGLISPROGRAMPROC
epoxy_glIsProgram_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1374 /* "glIsProgram" */,
        1374 /* "glIsProgram" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1374] /* "glIsProgram" */,
                                providers, entrypoints);
}

static PFNGLISPROGRAMARBPROC
epoxy_glIsProgramARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1375 /* "glIsProgramARB" */,
        1375 /* "glIsProgramARB" */,
        1376 /* "glIsProgramNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1375] /* "glIsProgramARB" */,
                                providers, entrypoints);
}

static PFNGLISPROGRAMNVPROC
epoxy_glIsProgramNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1376 /* "glIsProgramNV" */,
        1375 /* "glIsProgramARB" */,
        1375 /* "glIsProgramARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1376] /* "glIsProgramNV" */,
                                providers, entrypoints);
}

static PFNGLISPROGRAMPIPELINEPROC
epoxy_glIsProgramPipeline_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1377 /* "glIsProgramPipeline" */,
        1377 /* "glIsProgramPipeline" */,
        1377 /* "glIsProgramPipeline" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1377] /* "glIsProgramPipeline" */,
                                providers, entrypoints);
}

static PFNGLISPROGRAMPIPELINEEXTPROC
epoxy_glIsProgramPipelineEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_separate_shader_objects, 1378 /* glIsProgramPipelineEXT */);
}

static PFNGLISQUERYPROC
epoxy_glIsQuery_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_occlusion_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1379 /* "glIsQuery" */,
        1379 /* "glIsQuery" */,
        1380 /* "glIsQueryARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1379] /* "glIsQuery" */,
                                providers, entrypoints);
}

static PFNGLISQUERYARBPROC
epoxy_glIsQueryARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_occlusion_query,
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1380 /* "glIsQueryARB" */,
        1379 /* "glIsQuery" */,
        1379 /* "glIsQuery" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1380] /* "glIsQueryARB" */,
                                providers, entrypoints);
}

static PFNGLISQUERYEXTPROC
epoxy_glIsQueryEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_disjoint_timer_query,
        GL_extension_GL_EXT_occlusion_query_boolean,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1381 /* "glIsQueryEXT" */,
        1381 /* "glIsQueryEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1381] /* "glIsQueryEXT" */,
                                providers, entrypoints);
}

static PFNGLISRENDERBUFFERPROC
epoxy_glIsRenderbuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1382 /* "glIsRenderbuffer" */,
        1382 /* "glIsRenderbuffer" */,
        1382 /* "glIsRenderbuffer" */,
        1383 /* "glIsRenderbufferEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1382] /* "glIsRenderbuffer" */,
                                providers, entrypoints);
}

static PFNGLISRENDERBUFFEREXTPROC
epoxy_glIsRenderbufferEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1383 /* "glIsRenderbufferEXT" */,
        1382 /* "glIsRenderbuffer" */,
        1382 /* "glIsRenderbuffer" */,
        1382 /* "glIsRenderbuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1383] /* "glIsRenderbufferEXT" */,
                                providers, entrypoints);
}

static PFNGLISRENDERBUFFEROESPROC
epoxy_glIsRenderbufferOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_framebuffer_object, 1384 /* glIsRenderbufferOES */);
}

static PFNGLISSAMPLERPROC
epoxy_glIsSampler_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1385 /* "glIsSampler" */,
        1385 /* "glIsSampler" */,
        1385 /* "glIsSampler" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1385] /* "glIsSampler" */,
                                providers, entrypoints);
}

static PFNGLISSHADERPROC
epoxy_glIsShader_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1386 /* "glIsShader" */,
        1386 /* "glIsShader" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1386] /* "glIsShader" */,
                                providers, entrypoints);
}

static PFNGLISSTATENVPROC
epoxy_glIsStateNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 1387 /* glIsStateNV */);
}

static PFNGLISSYNCPROC
epoxy_glIsSync_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_sync,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_sync,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1388 /* "glIsSync" */,
        1388 /* "glIsSync" */,
        1388 /* "glIsSync" */,
        1389 /* "glIsSyncAPPLE" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1388] /* "glIsSync" */,
                                providers, entrypoints);
}

static PFNGLISSYNCAPPLEPROC
epoxy_glIsSyncAPPLE_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_APPLE_sync,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_sync,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1389 /* "glIsSyncAPPLE" */,
        1388 /* "glIsSync" */,
        1388 /* "glIsSync" */,
        1388 /* "glIsSync" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1389] /* "glIsSyncAPPLE" */,
                                providers, entrypoints);
}

static PFNGLISTEXTUREPROC
epoxy_glIsTexture_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1390 /* "glIsTexture" */,
        1390 /* "glIsTexture" */,
        1390 /* "glIsTexture" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1390] /* "glIsTexture" */,
                                providers, entrypoints);
}

static PFNGLISTEXTUREEXTPROC
epoxy_glIsTextureEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_texture_object, 1391 /* glIsTextureEXT */);
}

static PFNGLISTEXTUREHANDLERESIDENTARBPROC
epoxy_glIsTextureHandleResidentARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 1392 /* glIsTextureHandleResidentARB */);
}

static PFNGLISTEXTUREHANDLERESIDENTNVPROC
epoxy_glIsTextureHandleResidentNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_texture, 1393 /* glIsTextureHandleResidentNV */);
}

static PFNGLISTRANSFORMFEEDBACKPROC
epoxy_glIsTransformFeedback_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback2,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_transform_feedback2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1394 /* "glIsTransformFeedback" */,
        1394 /* "glIsTransformFeedback" */,
        1394 /* "glIsTransformFeedback" */,
        1395 /* "glIsTransformFeedbackNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1394] /* "glIsTransformFeedback" */,
                                providers, entrypoints);
}

static PFNGLISTRANSFORMFEEDBACKNVPROC
epoxy_glIsTransformFeedbackNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_transform_feedback2,
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback2,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1395 /* "glIsTransformFeedbackNV" */,
        1394 /* "glIsTransformFeedback" */,
        1394 /* "glIsTransformFeedback" */,
        1394 /* "glIsTransformFeedback" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1395] /* "glIsTransformFeedbackNV" */,
                                providers, entrypoints);
}

static PFNGLISVARIANTENABLEDEXTPROC
epoxy_glIsVariantEnabledEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 1396 /* glIsVariantEnabledEXT */);
}

static PFNGLISVERTEXARRAYPROC
epoxy_glIsVertexArray_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_vertex_array_object,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_vertex_array_object,
        GL_extension_GL_OES_vertex_array_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1397 /* "glIsVertexArray" */,
        1397 /* "glIsVertexArray" */,
        1397 /* "glIsVertexArray" */,
        1398 /* "glIsVertexArrayAPPLE" */,
        1399 /* "glIsVertexArrayOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1397] /* "glIsVertexArray" */,
                                providers, entrypoints);
}

static PFNGLISVERTEXARRAYAPPLEPROC
epoxy_glIsVertexArrayAPPLE_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_APPLE_vertex_array_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_vertex_array_object,
        OpenGL_ES_3_0,
        GL_extension_GL_OES_vertex_array_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1398 /* "glIsVertexArrayAPPLE" */,
        1397 /* "glIsVertexArray" */,
        1397 /* "glIsVertexArray" */,
        1397 /* "glIsVertexArray" */,
        1399 /* "glIsVertexArrayOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1398] /* "glIsVertexArrayAPPLE" */,
                                providers, entrypoints);
}

static PFNGLISVERTEXARRAYOESPROC
epoxy_glIsVertexArrayOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_vertex_array_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_vertex_array_object,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_vertex_array_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1399 /* "glIsVertexArrayOES" */,
        1397 /* "glIsVertexArray" */,
        1397 /* "glIsVertexArray" */,
        1397 /* "glIsVertexArray" */,
        1398 /* "glIsVertexArrayAPPLE" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1399] /* "glIsVertexArrayOES" */,
                                providers, entrypoints);
}

static PFNGLISVERTEXATTRIBENABLEDAPPLEPROC
epoxy_glIsVertexAttribEnabledAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_vertex_program_evaluators, 1400 /* glIsVertexAttribEnabledAPPLE */);
}

static PFNGLLABELOBJECTEXTPROC
epoxy_glLabelObjectEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_debug_label, 1401 /* glLabelObjectEXT */);
}

static PFNGLLIGHTENVISGIXPROC
epoxy_glLightEnviSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_fragment_lighting, 1402 /* glLightEnviSGIX */);
}

static PFNGLLIGHTMODELFPROC
epoxy_glLightModelf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1403 /* "glLightModelf" */,
        1403 /* "glLightModelf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1403] /* "glLightModelf" */,
                                providers, entrypoints);
}

static PFNGLLIGHTMODELFVPROC
epoxy_glLightModelfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1404 /* "glLightModelfv" */,
        1404 /* "glLightModelfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1404] /* "glLightModelfv" */,
                                providers, entrypoints);
}

static PFNGLLIGHTMODELIPROC
epoxy_glLightModeli_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1405 /* glLightModeli */);
}

static PFNGLLIGHTMODELIVPROC
epoxy_glLightModeliv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1406 /* glLightModeliv */);
}

static PFNGLLIGHTMODELXPROC
epoxy_glLightModelx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1407 /* glLightModelx */);
}

static PFNGLLIGHTMODELXOESPROC
epoxy_glLightModelxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1408 /* glLightModelxOES */);
}

static PFNGLLIGHTMODELXVPROC
epoxy_glLightModelxv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1409 /* glLightModelxv */);
}

static PFNGLLIGHTMODELXVOESPROC
epoxy_glLightModelxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1410 /* glLightModelxvOES */);
}

static PFNGLLIGHTFPROC
epoxy_glLightf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1411 /* "glLightf" */,
        1411 /* "glLightf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1411] /* "glLightf" */,
                                providers, entrypoints);
}

static PFNGLLIGHTFVPROC
epoxy_glLightfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1412 /* "glLightfv" */,
        1412 /* "glLightfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1412] /* "glLightfv" */,
                                providers, entrypoints);
}

static PFNGLLIGHTIPROC
epoxy_glLighti_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1413 /* glLighti */);
}

static PFNGLLIGHTIVPROC
epoxy_glLightiv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1414 /* glLightiv */);
}

static PFNGLLIGHTXPROC
epoxy_glLightx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1415 /* glLightx */);
}

static PFNGLLIGHTXOESPROC
epoxy_glLightxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1416 /* glLightxOES */);
}

static PFNGLLIGHTXVPROC
epoxy_glLightxv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1417 /* glLightxv */);
}

static PFNGLLIGHTXVOESPROC
epoxy_glLightxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1418 /* glLightxvOES */);
}

static PFNGLLINESTIPPLEPROC
epoxy_glLineStipple_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1419 /* glLineStipple */);
}

static PFNGLLINEWIDTHPROC
epoxy_glLineWidth_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1420 /* "glLineWidth" */,
        1420 /* "glLineWidth" */,
        1420 /* "glLineWidth" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1420] /* "glLineWidth" */,
                                providers, entrypoints);
}

static PFNGLLINEWIDTHXPROC
epoxy_glLineWidthx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1421 /* glLineWidthx */);
}

static PFNGLLINEWIDTHXOESPROC
epoxy_glLineWidthxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1422 /* glLineWidthxOES */);
}

static PFNGLLINKPROGRAMPROC
epoxy_glLinkProgram_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1423 /* "glLinkProgram" */,
        1423 /* "glLinkProgram" */,
        1424 /* "glLinkProgramARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1423] /* "glLinkProgram" */,
                                providers, entrypoints);
}

static PFNGLLINKPROGRAMARBPROC
epoxy_glLinkProgramARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1424 /* "glLinkProgramARB" */,
        1423 /* "glLinkProgram" */,
        1423 /* "glLinkProgram" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1424] /* "glLinkProgramARB" */,
                                providers, entrypoints);
}

static PFNGLLISTBASEPROC
epoxy_glListBase_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1425 /* glListBase */);
}

static PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC
epoxy_glListDrawCommandsStatesClientNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 1426 /* glListDrawCommandsStatesClientNV */);
}

static PFNGLLISTPARAMETERFSGIXPROC
epoxy_glListParameterfSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_list_priority, 1427 /* glListParameterfSGIX */);
}

static PFNGLLISTPARAMETERFVSGIXPROC
epoxy_glListParameterfvSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_list_priority, 1428 /* glListParameterfvSGIX */);
}

static PFNGLLISTPARAMETERISGIXPROC
epoxy_glListParameteriSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_list_priority, 1429 /* glListParameteriSGIX */);
}

static PFNGLLISTPARAMETERIVSGIXPROC
epoxy_glListParameterivSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_list_priority, 1430 /* glListParameterivSGIX */);
}

static PFNGLLOADIDENTITYPROC
epoxy_glLoadIdentity_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1431 /* "glLoadIdentity" */,
        1431 /* "glLoadIdentity" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1431] /* "glLoadIdentity" */,
                                providers, entrypoints);
}

static PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
epoxy_glLoadIdentityDeformationMapSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_polynomial_ffd, 1432 /* glLoadIdentityDeformationMapSGIX */);
}

static PFNGLLOADMATRIXDPROC
epoxy_glLoadMatrixd_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1433 /* glLoadMatrixd */);
}

static PFNGLLOADMATRIXFPROC
epoxy_glLoadMatrixf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1434 /* "glLoadMatrixf" */,
        1434 /* "glLoadMatrixf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1434] /* "glLoadMatrixf" */,
                                providers, entrypoints);
}

static PFNGLLOADMATRIXXPROC
epoxy_glLoadMatrixx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1435 /* glLoadMatrixx */);
}

static PFNGLLOADMATRIXXOESPROC
epoxy_glLoadMatrixxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1436 /* glLoadMatrixxOES */);
}

static PFNGLLOADNAMEPROC
epoxy_glLoadName_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1437 /* glLoadName */);
}

static PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC
epoxy_glLoadPaletteFromModelViewMatrixOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_matrix_palette, 1438 /* glLoadPaletteFromModelViewMatrixOES */);
}

static PFNGLLOADPROGRAMNVPROC
epoxy_glLoadProgramNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 1439 /* glLoadProgramNV */);
}

static PFNGLLOADTRANSPOSEMATRIXDPROC
epoxy_glLoadTransposeMatrixd_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_transpose_matrix,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1440 /* "glLoadTransposeMatrixd" */,
        1441 /* "glLoadTransposeMatrixdARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1440] /* "glLoadTransposeMatrixd" */,
                                providers, entrypoints);
}

static PFNGLLOADTRANSPOSEMATRIXDARBPROC
epoxy_glLoadTransposeMatrixdARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_transpose_matrix,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1441 /* "glLoadTransposeMatrixdARB" */,
        1440 /* "glLoadTransposeMatrixd" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1441] /* "glLoadTransposeMatrixdARB" */,
                                providers, entrypoints);
}

static PFNGLLOADTRANSPOSEMATRIXFPROC
epoxy_glLoadTransposeMatrixf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_transpose_matrix,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1442 /* "glLoadTransposeMatrixf" */,
        1443 /* "glLoadTransposeMatrixfARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1442] /* "glLoadTransposeMatrixf" */,
                                providers, entrypoints);
}

static PFNGLLOADTRANSPOSEMATRIXFARBPROC
epoxy_glLoadTransposeMatrixfARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_transpose_matrix,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1443 /* "glLoadTransposeMatrixfARB" */,
        1442 /* "glLoadTransposeMatrixf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1443] /* "glLoadTransposeMatrixfARB" */,
                                providers, entrypoints);
}

static PFNGLLOADTRANSPOSEMATRIXXOESPROC
epoxy_glLoadTransposeMatrixxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1444 /* glLoadTransposeMatrixxOES */);
}

static PFNGLLOCKARRAYSEXTPROC
epoxy_glLockArraysEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_compiled_vertex_array, 1445 /* glLockArraysEXT */);
}

static PFNGLLOGICOPPROC
epoxy_glLogicOp_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1446 /* "glLogicOp" */,
        1446 /* "glLogicOp" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1446] /* "glLogicOp" */,
                                providers, entrypoints);
}

static PFNGLMAKEBUFFERNONRESIDENTNVPROC
epoxy_glMakeBufferNonResidentNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_shader_buffer_load, 1447 /* glMakeBufferNonResidentNV */);
}

static PFNGLMAKEBUFFERRESIDENTNVPROC
epoxy_glMakeBufferResidentNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_shader_buffer_load, 1448 /* glMakeBufferResidentNV */);
}

static PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC
epoxy_glMakeImageHandleNonResidentARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 1449 /* glMakeImageHandleNonResidentARB */);
}

static PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
epoxy_glMakeImageHandleNonResidentNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_texture, 1450 /* glMakeImageHandleNonResidentNV */);
}

static PFNGLMAKEIMAGEHANDLERESIDENTARBPROC
epoxy_glMakeImageHandleResidentARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 1451 /* glMakeImageHandleResidentARB */);
}

static PFNGLMAKEIMAGEHANDLERESIDENTNVPROC
epoxy_glMakeImageHandleResidentNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_texture, 1452 /* glMakeImageHandleResidentNV */);
}

static PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC
epoxy_glMakeNamedBufferNonResidentNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_shader_buffer_load, 1453 /* glMakeNamedBufferNonResidentNV */);
}

static PFNGLMAKENAMEDBUFFERRESIDENTNVPROC
epoxy_glMakeNamedBufferResidentNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_shader_buffer_load, 1454 /* glMakeNamedBufferResidentNV */);
}

static PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC
epoxy_glMakeTextureHandleNonResidentARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 1455 /* glMakeTextureHandleNonResidentARB */);
}

static PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
epoxy_glMakeTextureHandleNonResidentNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_texture, 1456 /* glMakeTextureHandleNonResidentNV */);
}

static PFNGLMAKETEXTUREHANDLERESIDENTARBPROC
epoxy_glMakeTextureHandleResidentARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 1457 /* glMakeTextureHandleResidentARB */);
}

static PFNGLMAKETEXTUREHANDLERESIDENTNVPROC
epoxy_glMakeTextureHandleResidentNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_texture, 1458 /* glMakeTextureHandleResidentNV */);
}

static PFNGLMAP1DPROC
epoxy_glMap1d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1459 /* glMap1d */);
}

static PFNGLMAP1FPROC
epoxy_glMap1f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1460 /* glMap1f */);
}

static PFNGLMAP1XOESPROC
epoxy_glMap1xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1461 /* glMap1xOES */);
}

static PFNGLMAP2DPROC
epoxy_glMap2d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1462 /* glMap2d */);
}

static PFNGLMAP2FPROC
epoxy_glMap2f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1463 /* glMap2f */);
}

static PFNGLMAP2XOESPROC
epoxy_glMap2xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1464 /* glMap2xOES */);
}

static PFNGLMAPBUFFERPROC
epoxy_glMapBuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        GL_extension_GL_ARB_vertex_buffer_object,
        GL_extension_GL_OES_mapbuffer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1465 /* "glMapBuffer" */,
        1466 /* "glMapBufferARB" */,
        1467 /* "glMapBufferOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1465] /* "glMapBuffer" */,
                                providers, entrypoints);
}

static PFNGLMAPBUFFERARBPROC
epoxy_glMapBufferARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_buffer_object,
        Desktop_OpenGL_1_5,
        GL_extension_GL_OES_mapbuffer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1466 /* "glMapBufferARB" */,
        1465 /* "glMapBuffer" */,
        1467 /* "glMapBufferOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1466] /* "glMapBufferARB" */,
                                providers, entrypoints);
}

static PFNGLMAPBUFFEROESPROC
epoxy_glMapBufferOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_mapbuffer,
        Desktop_OpenGL_1_5,
        GL_extension_GL_ARB_vertex_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1467 /* "glMapBufferOES" */,
        1465 /* "glMapBuffer" */,
        1466 /* "glMapBufferARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1467] /* "glMapBufferOES" */,
                                providers, entrypoints);
}

static PFNGLMAPBUFFERRANGEPROC
epoxy_glMapBufferRange_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_map_buffer_range,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_map_buffer_range,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1468 /* "glMapBufferRange" */,
        1468 /* "glMapBufferRange" */,
        1468 /* "glMapBufferRange" */,
        1469 /* "glMapBufferRangeEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1468] /* "glMapBufferRange" */,
                                providers, entrypoints);
}

static PFNGLMAPBUFFERRANGEEXTPROC
epoxy_glMapBufferRangeEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_map_buffer_range,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_map_buffer_range,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1469 /* "glMapBufferRangeEXT" */,
        1468 /* "glMapBufferRange" */,
        1468 /* "glMapBufferRange" */,
        1468 /* "glMapBufferRange" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1469] /* "glMapBufferRangeEXT" */,
                                providers, entrypoints);
}

static PFNGLMAPCONTROLPOINTSNVPROC
epoxy_glMapControlPointsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_evaluators, 1470 /* glMapControlPointsNV */);
}

static PFNGLMAPGRID1DPROC
epoxy_glMapGrid1d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1471 /* glMapGrid1d */);
}

static PFNGLMAPGRID1FPROC
epoxy_glMapGrid1f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1472 /* glMapGrid1f */);
}

static PFNGLMAPGRID1XOESPROC
epoxy_glMapGrid1xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1473 /* glMapGrid1xOES */);
}

static PFNGLMAPGRID2DPROC
epoxy_glMapGrid2d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1474 /* glMapGrid2d */);
}

static PFNGLMAPGRID2FPROC
epoxy_glMapGrid2f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1475 /* glMapGrid2f */);
}

static PFNGLMAPGRID2XOESPROC
epoxy_glMapGrid2xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1476 /* glMapGrid2xOES */);
}

static PFNGLMAPNAMEDBUFFERPROC
epoxy_glMapNamedBuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1477 /* "glMapNamedBuffer" */,
        1477 /* "glMapNamedBuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1477] /* "glMapNamedBuffer" */,
                                providers, entrypoints);
}

static PFNGLMAPNAMEDBUFFEREXTPROC
epoxy_glMapNamedBufferEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1478 /* glMapNamedBufferEXT */);
}

static PFNGLMAPNAMEDBUFFERRANGEPROC
epoxy_glMapNamedBufferRange_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1479 /* "glMapNamedBufferRange" */,
        1479 /* "glMapNamedBufferRange" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1479] /* "glMapNamedBufferRange" */,
                                providers, entrypoints);
}

static PFNGLMAPNAMEDBUFFERRANGEEXTPROC
epoxy_glMapNamedBufferRangeEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1480 /* glMapNamedBufferRangeEXT */);
}

static PFNGLMAPOBJECTBUFFERATIPROC
epoxy_glMapObjectBufferATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_map_object_buffer, 1481 /* glMapObjectBufferATI */);
}

static PFNGLMAPPARAMETERFVNVPROC
epoxy_glMapParameterfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_evaluators, 1482 /* glMapParameterfvNV */);
}

static PFNGLMAPPARAMETERIVNVPROC
epoxy_glMapParameterivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_evaluators, 1483 /* glMapParameterivNV */);
}

static PFNGLMAPTEXTURE2DINTELPROC
epoxy_glMapTexture2DINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_map_texture, 1484 /* glMapTexture2DINTEL */);
}

static PFNGLMAPVERTEXATTRIB1DAPPLEPROC
epoxy_glMapVertexAttrib1dAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_vertex_program_evaluators, 1485 /* glMapVertexAttrib1dAPPLE */);
}

static PFNGLMAPVERTEXATTRIB1FAPPLEPROC
epoxy_glMapVertexAttrib1fAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_vertex_program_evaluators, 1486 /* glMapVertexAttrib1fAPPLE */);
}

static PFNGLMAPVERTEXATTRIB2DAPPLEPROC
epoxy_glMapVertexAttrib2dAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_vertex_program_evaluators, 1487 /* glMapVertexAttrib2dAPPLE */);
}

static PFNGLMAPVERTEXATTRIB2FAPPLEPROC
epoxy_glMapVertexAttrib2fAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_vertex_program_evaluators, 1488 /* glMapVertexAttrib2fAPPLE */);
}

static PFNGLMATERIALFPROC
epoxy_glMaterialf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1489 /* "glMaterialf" */,
        1489 /* "glMaterialf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1489] /* "glMaterialf" */,
                                providers, entrypoints);
}

static PFNGLMATERIALFVPROC
epoxy_glMaterialfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1490 /* "glMaterialfv" */,
        1490 /* "glMaterialfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1490] /* "glMaterialfv" */,
                                providers, entrypoints);
}

static PFNGLMATERIALIPROC
epoxy_glMateriali_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1491 /* glMateriali */);
}

static PFNGLMATERIALIVPROC
epoxy_glMaterialiv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1492 /* glMaterialiv */);
}

static PFNGLMATERIALXPROC
epoxy_glMaterialx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1493 /* glMaterialx */);
}

static PFNGLMATERIALXOESPROC
epoxy_glMaterialxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1494 /* glMaterialxOES */);
}

static PFNGLMATERIALXVPROC
epoxy_glMaterialxv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1495 /* glMaterialxv */);
}

static PFNGLMATERIALXVOESPROC
epoxy_glMaterialxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1496 /* glMaterialxvOES */);
}

static PFNGLMATRIXFRUSTUMEXTPROC
epoxy_glMatrixFrustumEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1497 /* glMatrixFrustumEXT */);
}

static PFNGLMATRIXINDEXPOINTERARBPROC
epoxy_glMatrixIndexPointerARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_matrix_palette, 1498 /* glMatrixIndexPointerARB */);
}

static PFNGLMATRIXINDEXPOINTEROESPROC
epoxy_glMatrixIndexPointerOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_matrix_palette, 1499 /* glMatrixIndexPointerOES */);
}

static PFNGLMATRIXINDEXUBVARBPROC
epoxy_glMatrixIndexubvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_matrix_palette, 1500 /* glMatrixIndexubvARB */);
}

static PFNGLMATRIXINDEXUIVARBPROC
epoxy_glMatrixIndexuivARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_matrix_palette, 1501 /* glMatrixIndexuivARB */);
}

static PFNGLMATRIXINDEXUSVARBPROC
epoxy_glMatrixIndexusvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_matrix_palette, 1502 /* glMatrixIndexusvARB */);
}

static PFNGLMATRIXLOAD3X2FNVPROC
epoxy_glMatrixLoad3x2fNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1503 /* glMatrixLoad3x2fNV */);
}

static PFNGLMATRIXLOAD3X3FNVPROC
epoxy_glMatrixLoad3x3fNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1504 /* glMatrixLoad3x3fNV */);
}

static PFNGLMATRIXLOADIDENTITYEXTPROC
epoxy_glMatrixLoadIdentityEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1505 /* glMatrixLoadIdentityEXT */);
}

static PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC
epoxy_glMatrixLoadTranspose3x3fNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1506 /* glMatrixLoadTranspose3x3fNV */);
}

static PFNGLMATRIXLOADTRANSPOSEDEXTPROC
epoxy_glMatrixLoadTransposedEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1507 /* glMatrixLoadTransposedEXT */);
}

static PFNGLMATRIXLOADTRANSPOSEFEXTPROC
epoxy_glMatrixLoadTransposefEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1508 /* glMatrixLoadTransposefEXT */);
}

static PFNGLMATRIXLOADDEXTPROC
epoxy_glMatrixLoaddEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1509 /* glMatrixLoaddEXT */);
}

static PFNGLMATRIXLOADFEXTPROC
epoxy_glMatrixLoadfEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1510 /* glMatrixLoadfEXT */);
}

static PFNGLMATRIXMODEPROC
epoxy_glMatrixMode_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1511 /* "glMatrixMode" */,
        1511 /* "glMatrixMode" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1511] /* "glMatrixMode" */,
                                providers, entrypoints);
}

static PFNGLMATRIXMULT3X2FNVPROC
epoxy_glMatrixMult3x2fNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1512 /* glMatrixMult3x2fNV */);
}

static PFNGLMATRIXMULT3X3FNVPROC
epoxy_glMatrixMult3x3fNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1513 /* glMatrixMult3x3fNV */);
}

static PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC
epoxy_glMatrixMultTranspose3x3fNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1514 /* glMatrixMultTranspose3x3fNV */);
}

static PFNGLMATRIXMULTTRANSPOSEDEXTPROC
epoxy_glMatrixMultTransposedEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1515 /* glMatrixMultTransposedEXT */);
}

static PFNGLMATRIXMULTTRANSPOSEFEXTPROC
epoxy_glMatrixMultTransposefEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1516 /* glMatrixMultTransposefEXT */);
}

static PFNGLMATRIXMULTDEXTPROC
epoxy_glMatrixMultdEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1517 /* glMatrixMultdEXT */);
}

static PFNGLMATRIXMULTFEXTPROC
epoxy_glMatrixMultfEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1518 /* glMatrixMultfEXT */);
}

static PFNGLMATRIXORTHOEXTPROC
epoxy_glMatrixOrthoEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1519 /* glMatrixOrthoEXT */);
}

static PFNGLMATRIXPOPEXTPROC
epoxy_glMatrixPopEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1520 /* glMatrixPopEXT */);
}

static PFNGLMATRIXPUSHEXTPROC
epoxy_glMatrixPushEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1521 /* glMatrixPushEXT */);
}

static PFNGLMATRIXROTATEDEXTPROC
epoxy_glMatrixRotatedEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1522 /* glMatrixRotatedEXT */);
}

static PFNGLMATRIXROTATEFEXTPROC
epoxy_glMatrixRotatefEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1523 /* glMatrixRotatefEXT */);
}

static PFNGLMATRIXSCALEDEXTPROC
epoxy_glMatrixScaledEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1524 /* glMatrixScaledEXT */);
}

static PFNGLMATRIXSCALEFEXTPROC
epoxy_glMatrixScalefEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1525 /* glMatrixScalefEXT */);
}

static PFNGLMATRIXTRANSLATEDEXTPROC
epoxy_glMatrixTranslatedEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1526 /* glMatrixTranslatedEXT */);
}

static PFNGLMATRIXTRANSLATEFEXTPROC
epoxy_glMatrixTranslatefEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1527 /* glMatrixTranslatefEXT */);
}

static PFNGLMAXSHADERCOMPILERTHREADSARBPROC
epoxy_glMaxShaderCompilerThreadsARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_parallel_shader_compile, 1528 /* glMaxShaderCompilerThreadsARB */);
}

static PFNGLMEMORYBARRIERPROC
epoxy_glMemoryBarrier_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_shader_image_load_store,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_shader_image_load_store,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1529 /* "glMemoryBarrier" */,
        1529 /* "glMemoryBarrier" */,
        1529 /* "glMemoryBarrier" */,
        1531 /* "glMemoryBarrierEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1529] /* "glMemoryBarrier" */,
                                providers, entrypoints);
}

static PFNGLMEMORYBARRIERBYREGIONPROC
epoxy_glMemoryBarrierByRegion_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_ES3_1_compatibility,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1530 /* "glMemoryBarrierByRegion" */,
        1530 /* "glMemoryBarrierByRegion" */,
        1530 /* "glMemoryBarrierByRegion" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1530] /* "glMemoryBarrierByRegion" */,
                                providers, entrypoints);
}

static PFNGLMEMORYBARRIEREXTPROC
epoxy_glMemoryBarrierEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_shader_image_load_store,
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_shader_image_load_store,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1531 /* "glMemoryBarrierEXT" */,
        1529 /* "glMemoryBarrier" */,
        1529 /* "glMemoryBarrier" */,
        1529 /* "glMemoryBarrier" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1531] /* "glMemoryBarrierEXT" */,
                                providers, entrypoints);
}

static PFNGLMINSAMPLESHADINGPROC
epoxy_glMinSampleShading_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_sample_shading,
        GL_extension_GL_OES_sample_shading,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1532 /* "glMinSampleShading" */,
        1532 /* "glMinSampleShading" */,
        1533 /* "glMinSampleShadingARB" */,
        1534 /* "glMinSampleShadingOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1532] /* "glMinSampleShading" */,
                                providers, entrypoints);
}

static PFNGLMINSAMPLESHADINGARBPROC
epoxy_glMinSampleShadingARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_sample_shading,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_sample_shading,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1533 /* "glMinSampleShadingARB" */,
        1532 /* "glMinSampleShading" */,
        1532 /* "glMinSampleShading" */,
        1534 /* "glMinSampleShadingOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1533] /* "glMinSampleShadingARB" */,
                                providers, entrypoints);
}

static PFNGLMINSAMPLESHADINGOESPROC
epoxy_glMinSampleShadingOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_sample_shading,
        Desktop_OpenGL_4_0,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_sample_shading,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1534 /* "glMinSampleShadingOES" */,
        1532 /* "glMinSampleShading" */,
        1532 /* "glMinSampleShading" */,
        1533 /* "glMinSampleShadingARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1534] /* "glMinSampleShadingOES" */,
                                providers, entrypoints);
}

static PFNGLMINMAXPROC
epoxy_glMinmax_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_histogram,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1535 /* "glMinmax" */,
        1536 /* "glMinmaxEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1535] /* "glMinmax" */,
                                providers, entrypoints);
}

static PFNGLMINMAXEXTPROC
epoxy_glMinmaxEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_histogram,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1536 /* "glMinmaxEXT" */,
        1535 /* "glMinmax" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1536] /* "glMinmaxEXT" */,
                                providers, entrypoints);
}

static PFNGLMULTMATRIXDPROC
epoxy_glMultMatrixd_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1537 /* glMultMatrixd */);
}

static PFNGLMULTMATRIXFPROC
epoxy_glMultMatrixf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1538 /* "glMultMatrixf" */,
        1538 /* "glMultMatrixf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1538] /* "glMultMatrixf" */,
                                providers, entrypoints);
}

static PFNGLMULTMATRIXXPROC
epoxy_glMultMatrixx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1539 /* glMultMatrixx */);
}

static PFNGLMULTMATRIXXOESPROC
epoxy_glMultMatrixxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1540 /* glMultMatrixxOES */);
}

static PFNGLMULTTRANSPOSEMATRIXDPROC
epoxy_glMultTransposeMatrixd_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_transpose_matrix,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1541 /* "glMultTransposeMatrixd" */,
        1542 /* "glMultTransposeMatrixdARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1541] /* "glMultTransposeMatrixd" */,
                                providers, entrypoints);
}

static PFNGLMULTTRANSPOSEMATRIXDARBPROC
epoxy_glMultTransposeMatrixdARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_transpose_matrix,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1542 /* "glMultTransposeMatrixdARB" */,
        1541 /* "glMultTransposeMatrixd" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1542] /* "glMultTransposeMatrixdARB" */,
                                providers, entrypoints);
}

static PFNGLMULTTRANSPOSEMATRIXFPROC
epoxy_glMultTransposeMatrixf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_transpose_matrix,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1543 /* "glMultTransposeMatrixf" */,
        1544 /* "glMultTransposeMatrixfARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1543] /* "glMultTransposeMatrixf" */,
                                providers, entrypoints);
}

static PFNGLMULTTRANSPOSEMATRIXFARBPROC
epoxy_glMultTransposeMatrixfARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_transpose_matrix,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1544 /* "glMultTransposeMatrixfARB" */,
        1543 /* "glMultTransposeMatrixf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1544] /* "glMultTransposeMatrixfARB" */,
                                providers, entrypoints);
}

static PFNGLMULTTRANSPOSEMATRIXXOESPROC
epoxy_glMultTransposeMatrixxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1545 /* glMultTransposeMatrixxOES */);
}

static PFNGLMULTIDRAWARRAYSPROC
epoxy_glMultiDrawArrays_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_multi_draw_arrays,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1546 /* "glMultiDrawArrays" */,
        1547 /* "glMultiDrawArraysEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1546] /* "glMultiDrawArrays" */,
                                providers, entrypoints);
}

static PFNGLMULTIDRAWARRAYSEXTPROC
epoxy_glMultiDrawArraysEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_multi_draw_arrays,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1547 /* "glMultiDrawArraysEXT" */,
        1546 /* "glMultiDrawArrays" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1547] /* "glMultiDrawArraysEXT" */,
                                providers, entrypoints);
}

static PFNGLMULTIDRAWARRAYSINDIRECTPROC
epoxy_glMultiDrawArraysIndirect_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_multi_draw_indirect,
        GL_extension_GL_AMD_multi_draw_indirect,
        GL_extension_GL_EXT_multi_draw_indirect,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1548 /* "glMultiDrawArraysIndirect" */,
        1548 /* "glMultiDrawArraysIndirect" */,
        1549 /* "glMultiDrawArraysIndirectAMD" */,
        1553 /* "glMultiDrawArraysIndirectEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1548] /* "glMultiDrawArraysIndirect" */,
                                providers, entrypoints);
}

static PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC
epoxy_glMultiDrawArraysIndirectAMD_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_multi_draw_indirect,
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_multi_draw_indirect,
        GL_extension_GL_EXT_multi_draw_indirect,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1549 /* "glMultiDrawArraysIndirectAMD" */,
        1548 /* "glMultiDrawArraysIndirect" */,
        1548 /* "glMultiDrawArraysIndirect" */,
        1553 /* "glMultiDrawArraysIndirectEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1549] /* "glMultiDrawArraysIndirectAMD" */,
                                providers, entrypoints);
}

static PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC
epoxy_glMultiDrawArraysIndirectBindlessCountNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_multi_draw_indirect_count, 1550 /* glMultiDrawArraysIndirectBindlessCountNV */);
}

static PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC
epoxy_glMultiDrawArraysIndirectBindlessNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_multi_draw_indirect, 1551 /* glMultiDrawArraysIndirectBindlessNV */);
}

static PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC
epoxy_glMultiDrawArraysIndirectCountARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_indirect_parameters, 1552 /* glMultiDrawArraysIndirectCountARB */);
}

static PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC
epoxy_glMultiDrawArraysIndirectEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_multi_draw_indirect,
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_multi_draw_indirect,
        GL_extension_GL_AMD_multi_draw_indirect,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1553 /* "glMultiDrawArraysIndirectEXT" */,
        1548 /* "glMultiDrawArraysIndirect" */,
        1548 /* "glMultiDrawArraysIndirect" */,
        1549 /* "glMultiDrawArraysIndirectAMD" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1553] /* "glMultiDrawArraysIndirectEXT" */,
                                providers, entrypoints);
}

static PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
epoxy_glMultiDrawElementArrayAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_element_array, 1554 /* glMultiDrawElementArrayAPPLE */);
}

static PFNGLMULTIDRAWELEMENTSPROC
epoxy_glMultiDrawElements_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_multi_draw_arrays,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1555 /* "glMultiDrawElements" */,
        1559 /* "glMultiDrawElementsEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1555] /* "glMultiDrawElements" */,
                                providers, entrypoints);
}

static PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
epoxy_glMultiDrawElementsBaseVertex_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_draw_elements_base_vertex,
        GL_extension_GL_EXT_draw_elements_base_vertex,
        GL_extension_GL_OES_draw_elements_base_vertex,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1556 /* "glMultiDrawElementsBaseVertex" */,
        1556 /* "glMultiDrawElementsBaseVertex" */,
        1557 /* "glMultiDrawElementsBaseVertexEXT" */,
        1558 /* "glMultiDrawElementsBaseVertexOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1556] /* "glMultiDrawElementsBaseVertex" */,
                                providers, entrypoints);
}

static PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC
epoxy_glMultiDrawElementsBaseVertexEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_draw_elements_base_vertex,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_draw_elements_base_vertex,
        GL_extension_GL_OES_draw_elements_base_vertex,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1557 /* "glMultiDrawElementsBaseVertexEXT" */,
        1556 /* "glMultiDrawElementsBaseVertex" */,
        1556 /* "glMultiDrawElementsBaseVertex" */,
        1558 /* "glMultiDrawElementsBaseVertexOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1557] /* "glMultiDrawElementsBaseVertexEXT" */,
                                providers, entrypoints);
}

static PFNGLMULTIDRAWELEMENTSBASEVERTEXOESPROC
epoxy_glMultiDrawElementsBaseVertexOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_draw_elements_base_vertex,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_draw_elements_base_vertex,
        GL_extension_GL_EXT_draw_elements_base_vertex,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1558 /* "glMultiDrawElementsBaseVertexOES" */,
        1556 /* "glMultiDrawElementsBaseVertex" */,
        1556 /* "glMultiDrawElementsBaseVertex" */,
        1557 /* "glMultiDrawElementsBaseVertexEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1558] /* "glMultiDrawElementsBaseVertexOES" */,
                                providers, entrypoints);
}

static PFNGLMULTIDRAWELEMENTSEXTPROC
epoxy_glMultiDrawElementsEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_multi_draw_arrays,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1559 /* "glMultiDrawElementsEXT" */,
        1555 /* "glMultiDrawElements" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1559] /* "glMultiDrawElementsEXT" */,
                                providers, entrypoints);
}

static PFNGLMULTIDRAWELEMENTSINDIRECTPROC
epoxy_glMultiDrawElementsIndirect_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_multi_draw_indirect,
        GL_extension_GL_AMD_multi_draw_indirect,
        GL_extension_GL_EXT_multi_draw_indirect,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1560 /* "glMultiDrawElementsIndirect" */,
        1560 /* "glMultiDrawElementsIndirect" */,
        1561 /* "glMultiDrawElementsIndirectAMD" */,
        1565 /* "glMultiDrawElementsIndirectEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1560] /* "glMultiDrawElementsIndirect" */,
                                providers, entrypoints);
}

static PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC
epoxy_glMultiDrawElementsIndirectAMD_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_multi_draw_indirect,
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_multi_draw_indirect,
        GL_extension_GL_EXT_multi_draw_indirect,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1561 /* "glMultiDrawElementsIndirectAMD" */,
        1560 /* "glMultiDrawElementsIndirect" */,
        1560 /* "glMultiDrawElementsIndirect" */,
        1565 /* "glMultiDrawElementsIndirectEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1561] /* "glMultiDrawElementsIndirectAMD" */,
                                providers, entrypoints);
}

static PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC
epoxy_glMultiDrawElementsIndirectBindlessCountNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_multi_draw_indirect_count, 1562 /* glMultiDrawElementsIndirectBindlessCountNV */);
}

static PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC
epoxy_glMultiDrawElementsIndirectBindlessNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_multi_draw_indirect, 1563 /* glMultiDrawElementsIndirectBindlessNV */);
}

static PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC
epoxy_glMultiDrawElementsIndirectCountARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_indirect_parameters, 1564 /* glMultiDrawElementsIndirectCountARB */);
}

static PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC
epoxy_glMultiDrawElementsIndirectEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_multi_draw_indirect,
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_multi_draw_indirect,
        GL_extension_GL_AMD_multi_draw_indirect,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1565 /* "glMultiDrawElementsIndirectEXT" */,
        1560 /* "glMultiDrawElementsIndirect" */,
        1560 /* "glMultiDrawElementsIndirect" */,
        1561 /* "glMultiDrawElementsIndirectAMD" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1565] /* "glMultiDrawElementsIndirectEXT" */,
                                providers, entrypoints);
}

static PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
epoxy_glMultiDrawRangeElementArrayAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_element_array, 1566 /* glMultiDrawRangeElementArrayAPPLE */);
}

static PFNGLMULTIMODEDRAWARRAYSIBMPROC
epoxy_glMultiModeDrawArraysIBM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IBM_multimode_draw_arrays, 1567 /* glMultiModeDrawArraysIBM */);
}

static PFNGLMULTIMODEDRAWELEMENTSIBMPROC
epoxy_glMultiModeDrawElementsIBM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IBM_multimode_draw_arrays, 1568 /* glMultiModeDrawElementsIBM */);
}

static PFNGLMULTITEXBUFFEREXTPROC
epoxy_glMultiTexBufferEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1569 /* glMultiTexBufferEXT */);
}

static PFNGLMULTITEXCOORD1BOESPROC
epoxy_glMultiTexCoord1bOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 1570 /* glMultiTexCoord1bOES */);
}

static PFNGLMULTITEXCOORD1BVOESPROC
epoxy_glMultiTexCoord1bvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 1571 /* glMultiTexCoord1bvOES */);
}

static PFNGLMULTITEXCOORD1DPROC
epoxy_glMultiTexCoord1d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1572 /* "glMultiTexCoord1d" */,
        1573 /* "glMultiTexCoord1dARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1572] /* "glMultiTexCoord1d" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1DARBPROC
epoxy_glMultiTexCoord1dARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1573 /* "glMultiTexCoord1dARB" */,
        1572 /* "glMultiTexCoord1d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1573] /* "glMultiTexCoord1dARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1DVPROC
epoxy_glMultiTexCoord1dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1574 /* "glMultiTexCoord1dv" */,
        1575 /* "glMultiTexCoord1dvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1574] /* "glMultiTexCoord1dv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1DVARBPROC
epoxy_glMultiTexCoord1dvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1575 /* "glMultiTexCoord1dvARB" */,
        1574 /* "glMultiTexCoord1dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1575] /* "glMultiTexCoord1dvARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1FPROC
epoxy_glMultiTexCoord1f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1576 /* "glMultiTexCoord1f" */,
        1577 /* "glMultiTexCoord1fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1576] /* "glMultiTexCoord1f" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1FARBPROC
epoxy_glMultiTexCoord1fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1577 /* "glMultiTexCoord1fARB" */,
        1576 /* "glMultiTexCoord1f" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1577] /* "glMultiTexCoord1fARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1FVPROC
epoxy_glMultiTexCoord1fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1578 /* "glMultiTexCoord1fv" */,
        1579 /* "glMultiTexCoord1fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1578] /* "glMultiTexCoord1fv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1FVARBPROC
epoxy_glMultiTexCoord1fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1579 /* "glMultiTexCoord1fvARB" */,
        1578 /* "glMultiTexCoord1fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1579] /* "glMultiTexCoord1fvARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1HNVPROC
epoxy_glMultiTexCoord1hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 1580 /* glMultiTexCoord1hNV */);
}

static PFNGLMULTITEXCOORD1HVNVPROC
epoxy_glMultiTexCoord1hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 1581 /* glMultiTexCoord1hvNV */);
}

static PFNGLMULTITEXCOORD1IPROC
epoxy_glMultiTexCoord1i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1582 /* "glMultiTexCoord1i" */,
        1583 /* "glMultiTexCoord1iARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1582] /* "glMultiTexCoord1i" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1IARBPROC
epoxy_glMultiTexCoord1iARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1583 /* "glMultiTexCoord1iARB" */,
        1582 /* "glMultiTexCoord1i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1583] /* "glMultiTexCoord1iARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1IVPROC
epoxy_glMultiTexCoord1iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1584 /* "glMultiTexCoord1iv" */,
        1585 /* "glMultiTexCoord1ivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1584] /* "glMultiTexCoord1iv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1IVARBPROC
epoxy_glMultiTexCoord1ivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1585 /* "glMultiTexCoord1ivARB" */,
        1584 /* "glMultiTexCoord1iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1585] /* "glMultiTexCoord1ivARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1SPROC
epoxy_glMultiTexCoord1s_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1586 /* "glMultiTexCoord1s" */,
        1587 /* "glMultiTexCoord1sARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1586] /* "glMultiTexCoord1s" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1SARBPROC
epoxy_glMultiTexCoord1sARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1587 /* "glMultiTexCoord1sARB" */,
        1586 /* "glMultiTexCoord1s" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1587] /* "glMultiTexCoord1sARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1SVPROC
epoxy_glMultiTexCoord1sv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1588 /* "glMultiTexCoord1sv" */,
        1589 /* "glMultiTexCoord1svARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1588] /* "glMultiTexCoord1sv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1SVARBPROC
epoxy_glMultiTexCoord1svARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1589 /* "glMultiTexCoord1svARB" */,
        1588 /* "glMultiTexCoord1sv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1589] /* "glMultiTexCoord1svARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD1XOESPROC
epoxy_glMultiTexCoord1xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1590 /* glMultiTexCoord1xOES */);
}

static PFNGLMULTITEXCOORD1XVOESPROC
epoxy_glMultiTexCoord1xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1591 /* glMultiTexCoord1xvOES */);
}

static PFNGLMULTITEXCOORD2BOESPROC
epoxy_glMultiTexCoord2bOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 1592 /* glMultiTexCoord2bOES */);
}

static PFNGLMULTITEXCOORD2BVOESPROC
epoxy_glMultiTexCoord2bvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 1593 /* glMultiTexCoord2bvOES */);
}

static PFNGLMULTITEXCOORD2DPROC
epoxy_glMultiTexCoord2d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1594 /* "glMultiTexCoord2d" */,
        1595 /* "glMultiTexCoord2dARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1594] /* "glMultiTexCoord2d" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2DARBPROC
epoxy_glMultiTexCoord2dARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1595 /* "glMultiTexCoord2dARB" */,
        1594 /* "glMultiTexCoord2d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1595] /* "glMultiTexCoord2dARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2DVPROC
epoxy_glMultiTexCoord2dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1596 /* "glMultiTexCoord2dv" */,
        1597 /* "glMultiTexCoord2dvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1596] /* "glMultiTexCoord2dv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2DVARBPROC
epoxy_glMultiTexCoord2dvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1597 /* "glMultiTexCoord2dvARB" */,
        1596 /* "glMultiTexCoord2dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1597] /* "glMultiTexCoord2dvARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2FPROC
epoxy_glMultiTexCoord2f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1598 /* "glMultiTexCoord2f" */,
        1599 /* "glMultiTexCoord2fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1598] /* "glMultiTexCoord2f" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2FARBPROC
epoxy_glMultiTexCoord2fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1599 /* "glMultiTexCoord2fARB" */,
        1598 /* "glMultiTexCoord2f" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1599] /* "glMultiTexCoord2fARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2FVPROC
epoxy_glMultiTexCoord2fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1600 /* "glMultiTexCoord2fv" */,
        1601 /* "glMultiTexCoord2fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1600] /* "glMultiTexCoord2fv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2FVARBPROC
epoxy_glMultiTexCoord2fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1601 /* "glMultiTexCoord2fvARB" */,
        1600 /* "glMultiTexCoord2fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1601] /* "glMultiTexCoord2fvARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2HNVPROC
epoxy_glMultiTexCoord2hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 1602 /* glMultiTexCoord2hNV */);
}

static PFNGLMULTITEXCOORD2HVNVPROC
epoxy_glMultiTexCoord2hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 1603 /* glMultiTexCoord2hvNV */);
}

static PFNGLMULTITEXCOORD2IPROC
epoxy_glMultiTexCoord2i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1604 /* "glMultiTexCoord2i" */,
        1605 /* "glMultiTexCoord2iARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1604] /* "glMultiTexCoord2i" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2IARBPROC
epoxy_glMultiTexCoord2iARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1605 /* "glMultiTexCoord2iARB" */,
        1604 /* "glMultiTexCoord2i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1605] /* "glMultiTexCoord2iARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2IVPROC
epoxy_glMultiTexCoord2iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1606 /* "glMultiTexCoord2iv" */,
        1607 /* "glMultiTexCoord2ivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1606] /* "glMultiTexCoord2iv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2IVARBPROC
epoxy_glMultiTexCoord2ivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1607 /* "glMultiTexCoord2ivARB" */,
        1606 /* "glMultiTexCoord2iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1607] /* "glMultiTexCoord2ivARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2SPROC
epoxy_glMultiTexCoord2s_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1608 /* "glMultiTexCoord2s" */,
        1609 /* "glMultiTexCoord2sARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1608] /* "glMultiTexCoord2s" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2SARBPROC
epoxy_glMultiTexCoord2sARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1609 /* "glMultiTexCoord2sARB" */,
        1608 /* "glMultiTexCoord2s" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1609] /* "glMultiTexCoord2sARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2SVPROC
epoxy_glMultiTexCoord2sv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1610 /* "glMultiTexCoord2sv" */,
        1611 /* "glMultiTexCoord2svARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1610] /* "glMultiTexCoord2sv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2SVARBPROC
epoxy_glMultiTexCoord2svARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1611 /* "glMultiTexCoord2svARB" */,
        1610 /* "glMultiTexCoord2sv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1611] /* "glMultiTexCoord2svARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD2XOESPROC
epoxy_glMultiTexCoord2xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1612 /* glMultiTexCoord2xOES */);
}

static PFNGLMULTITEXCOORD2XVOESPROC
epoxy_glMultiTexCoord2xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1613 /* glMultiTexCoord2xvOES */);
}

static PFNGLMULTITEXCOORD3BOESPROC
epoxy_glMultiTexCoord3bOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 1614 /* glMultiTexCoord3bOES */);
}

static PFNGLMULTITEXCOORD3BVOESPROC
epoxy_glMultiTexCoord3bvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 1615 /* glMultiTexCoord3bvOES */);
}

static PFNGLMULTITEXCOORD3DPROC
epoxy_glMultiTexCoord3d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1616 /* "glMultiTexCoord3d" */,
        1617 /* "glMultiTexCoord3dARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1616] /* "glMultiTexCoord3d" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3DARBPROC
epoxy_glMultiTexCoord3dARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1617 /* "glMultiTexCoord3dARB" */,
        1616 /* "glMultiTexCoord3d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1617] /* "glMultiTexCoord3dARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3DVPROC
epoxy_glMultiTexCoord3dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1618 /* "glMultiTexCoord3dv" */,
        1619 /* "glMultiTexCoord3dvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1618] /* "glMultiTexCoord3dv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3DVARBPROC
epoxy_glMultiTexCoord3dvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1619 /* "glMultiTexCoord3dvARB" */,
        1618 /* "glMultiTexCoord3dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1619] /* "glMultiTexCoord3dvARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3FPROC
epoxy_glMultiTexCoord3f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1620 /* "glMultiTexCoord3f" */,
        1621 /* "glMultiTexCoord3fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1620] /* "glMultiTexCoord3f" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3FARBPROC
epoxy_glMultiTexCoord3fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1621 /* "glMultiTexCoord3fARB" */,
        1620 /* "glMultiTexCoord3f" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1621] /* "glMultiTexCoord3fARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3FVPROC
epoxy_glMultiTexCoord3fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1622 /* "glMultiTexCoord3fv" */,
        1623 /* "glMultiTexCoord3fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1622] /* "glMultiTexCoord3fv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3FVARBPROC
epoxy_glMultiTexCoord3fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1623 /* "glMultiTexCoord3fvARB" */,
        1622 /* "glMultiTexCoord3fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1623] /* "glMultiTexCoord3fvARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3HNVPROC
epoxy_glMultiTexCoord3hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 1624 /* glMultiTexCoord3hNV */);
}

static PFNGLMULTITEXCOORD3HVNVPROC
epoxy_glMultiTexCoord3hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 1625 /* glMultiTexCoord3hvNV */);
}

static PFNGLMULTITEXCOORD3IPROC
epoxy_glMultiTexCoord3i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1626 /* "glMultiTexCoord3i" */,
        1627 /* "glMultiTexCoord3iARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1626] /* "glMultiTexCoord3i" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3IARBPROC
epoxy_glMultiTexCoord3iARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1627 /* "glMultiTexCoord3iARB" */,
        1626 /* "glMultiTexCoord3i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1627] /* "glMultiTexCoord3iARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3IVPROC
epoxy_glMultiTexCoord3iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1628 /* "glMultiTexCoord3iv" */,
        1629 /* "glMultiTexCoord3ivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1628] /* "glMultiTexCoord3iv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3IVARBPROC
epoxy_glMultiTexCoord3ivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1629 /* "glMultiTexCoord3ivARB" */,
        1628 /* "glMultiTexCoord3iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1629] /* "glMultiTexCoord3ivARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3SPROC
epoxy_glMultiTexCoord3s_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1630 /* "glMultiTexCoord3s" */,
        1631 /* "glMultiTexCoord3sARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1630] /* "glMultiTexCoord3s" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3SARBPROC
epoxy_glMultiTexCoord3sARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1631 /* "glMultiTexCoord3sARB" */,
        1630 /* "glMultiTexCoord3s" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1631] /* "glMultiTexCoord3sARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3SVPROC
epoxy_glMultiTexCoord3sv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1632 /* "glMultiTexCoord3sv" */,
        1633 /* "glMultiTexCoord3svARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1632] /* "glMultiTexCoord3sv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3SVARBPROC
epoxy_glMultiTexCoord3svARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1633 /* "glMultiTexCoord3svARB" */,
        1632 /* "glMultiTexCoord3sv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1633] /* "glMultiTexCoord3svARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD3XOESPROC
epoxy_glMultiTexCoord3xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1634 /* glMultiTexCoord3xOES */);
}

static PFNGLMULTITEXCOORD3XVOESPROC
epoxy_glMultiTexCoord3xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1635 /* glMultiTexCoord3xvOES */);
}

static PFNGLMULTITEXCOORD4BOESPROC
epoxy_glMultiTexCoord4bOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 1636 /* glMultiTexCoord4bOES */);
}

static PFNGLMULTITEXCOORD4BVOESPROC
epoxy_glMultiTexCoord4bvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 1637 /* glMultiTexCoord4bvOES */);
}

static PFNGLMULTITEXCOORD4DPROC
epoxy_glMultiTexCoord4d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1638 /* "glMultiTexCoord4d" */,
        1639 /* "glMultiTexCoord4dARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1638] /* "glMultiTexCoord4d" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4DARBPROC
epoxy_glMultiTexCoord4dARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1639 /* "glMultiTexCoord4dARB" */,
        1638 /* "glMultiTexCoord4d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1639] /* "glMultiTexCoord4dARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4DVPROC
epoxy_glMultiTexCoord4dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1640 /* "glMultiTexCoord4dv" */,
        1641 /* "glMultiTexCoord4dvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1640] /* "glMultiTexCoord4dv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4DVARBPROC
epoxy_glMultiTexCoord4dvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1641 /* "glMultiTexCoord4dvARB" */,
        1640 /* "glMultiTexCoord4dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1641] /* "glMultiTexCoord4dvARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4FPROC
epoxy_glMultiTexCoord4f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        OpenGL_ES_1_0,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1642 /* "glMultiTexCoord4f" */,
        1642 /* "glMultiTexCoord4f" */,
        1643 /* "glMultiTexCoord4fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1642] /* "glMultiTexCoord4f" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4FARBPROC
epoxy_glMultiTexCoord4fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1643 /* "glMultiTexCoord4fARB" */,
        1642 /* "glMultiTexCoord4f" */,
        1642 /* "glMultiTexCoord4f" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1643] /* "glMultiTexCoord4fARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4FVPROC
epoxy_glMultiTexCoord4fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1644 /* "glMultiTexCoord4fv" */,
        1645 /* "glMultiTexCoord4fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1644] /* "glMultiTexCoord4fv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4FVARBPROC
epoxy_glMultiTexCoord4fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1645 /* "glMultiTexCoord4fvARB" */,
        1644 /* "glMultiTexCoord4fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1645] /* "glMultiTexCoord4fvARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4HNVPROC
epoxy_glMultiTexCoord4hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 1646 /* glMultiTexCoord4hNV */);
}

static PFNGLMULTITEXCOORD4HVNVPROC
epoxy_glMultiTexCoord4hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 1647 /* glMultiTexCoord4hvNV */);
}

static PFNGLMULTITEXCOORD4IPROC
epoxy_glMultiTexCoord4i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1648 /* "glMultiTexCoord4i" */,
        1649 /* "glMultiTexCoord4iARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1648] /* "glMultiTexCoord4i" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4IARBPROC
epoxy_glMultiTexCoord4iARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1649 /* "glMultiTexCoord4iARB" */,
        1648 /* "glMultiTexCoord4i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1649] /* "glMultiTexCoord4iARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4IVPROC
epoxy_glMultiTexCoord4iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1650 /* "glMultiTexCoord4iv" */,
        1651 /* "glMultiTexCoord4ivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1650] /* "glMultiTexCoord4iv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4IVARBPROC
epoxy_glMultiTexCoord4ivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1651 /* "glMultiTexCoord4ivARB" */,
        1650 /* "glMultiTexCoord4iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1651] /* "glMultiTexCoord4ivARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4SPROC
epoxy_glMultiTexCoord4s_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1652 /* "glMultiTexCoord4s" */,
        1653 /* "glMultiTexCoord4sARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1652] /* "glMultiTexCoord4s" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4SARBPROC
epoxy_glMultiTexCoord4sARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1653 /* "glMultiTexCoord4sARB" */,
        1652 /* "glMultiTexCoord4s" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1653] /* "glMultiTexCoord4sARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4SVPROC
epoxy_glMultiTexCoord4sv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        GL_extension_GL_ARB_multitexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1654 /* "glMultiTexCoord4sv" */,
        1655 /* "glMultiTexCoord4svARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1654] /* "glMultiTexCoord4sv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4SVARBPROC
epoxy_glMultiTexCoord4svARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multitexture,
        Desktop_OpenGL_1_3,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1655 /* "glMultiTexCoord4svARB" */,
        1654 /* "glMultiTexCoord4sv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1655] /* "glMultiTexCoord4svARB" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORD4XPROC
epoxy_glMultiTexCoord4x_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1656 /* glMultiTexCoord4x */);
}

static PFNGLMULTITEXCOORD4XOESPROC
epoxy_glMultiTexCoord4xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1657 /* glMultiTexCoord4xOES */);
}

static PFNGLMULTITEXCOORD4XVOESPROC
epoxy_glMultiTexCoord4xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1658 /* glMultiTexCoord4xvOES */);
}

static PFNGLMULTITEXCOORDP1UIPROC
epoxy_glMultiTexCoordP1ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1659 /* "glMultiTexCoordP1ui" */,
        1659 /* "glMultiTexCoordP1ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1659] /* "glMultiTexCoordP1ui" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORDP1UIVPROC
epoxy_glMultiTexCoordP1uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1660 /* "glMultiTexCoordP1uiv" */,
        1660 /* "glMultiTexCoordP1uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1660] /* "glMultiTexCoordP1uiv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORDP2UIPROC
epoxy_glMultiTexCoordP2ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1661 /* "glMultiTexCoordP2ui" */,
        1661 /* "glMultiTexCoordP2ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1661] /* "glMultiTexCoordP2ui" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORDP2UIVPROC
epoxy_glMultiTexCoordP2uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1662 /* "glMultiTexCoordP2uiv" */,
        1662 /* "glMultiTexCoordP2uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1662] /* "glMultiTexCoordP2uiv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORDP3UIPROC
epoxy_glMultiTexCoordP3ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1663 /* "glMultiTexCoordP3ui" */,
        1663 /* "glMultiTexCoordP3ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1663] /* "glMultiTexCoordP3ui" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORDP3UIVPROC
epoxy_glMultiTexCoordP3uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1664 /* "glMultiTexCoordP3uiv" */,
        1664 /* "glMultiTexCoordP3uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1664] /* "glMultiTexCoordP3uiv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORDP4UIPROC
epoxy_glMultiTexCoordP4ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1665 /* "glMultiTexCoordP4ui" */,
        1665 /* "glMultiTexCoordP4ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1665] /* "glMultiTexCoordP4ui" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORDP4UIVPROC
epoxy_glMultiTexCoordP4uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1666 /* "glMultiTexCoordP4uiv" */,
        1666 /* "glMultiTexCoordP4uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1666] /* "glMultiTexCoordP4uiv" */,
                                providers, entrypoints);
}

static PFNGLMULTITEXCOORDPOINTEREXTPROC
epoxy_glMultiTexCoordPointerEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1667 /* glMultiTexCoordPointerEXT */);
}

static PFNGLMULTITEXENVFEXTPROC
epoxy_glMultiTexEnvfEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1668 /* glMultiTexEnvfEXT */);
}

static PFNGLMULTITEXENVFVEXTPROC
epoxy_glMultiTexEnvfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1669 /* glMultiTexEnvfvEXT */);
}

static PFNGLMULTITEXENVIEXTPROC
epoxy_glMultiTexEnviEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1670 /* glMultiTexEnviEXT */);
}

static PFNGLMULTITEXENVIVEXTPROC
epoxy_glMultiTexEnvivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1671 /* glMultiTexEnvivEXT */);
}

static PFNGLMULTITEXGENDEXTPROC
epoxy_glMultiTexGendEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1672 /* glMultiTexGendEXT */);
}

static PFNGLMULTITEXGENDVEXTPROC
epoxy_glMultiTexGendvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1673 /* glMultiTexGendvEXT */);
}

static PFNGLMULTITEXGENFEXTPROC
epoxy_glMultiTexGenfEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1674 /* glMultiTexGenfEXT */);
}

static PFNGLMULTITEXGENFVEXTPROC
epoxy_glMultiTexGenfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1675 /* glMultiTexGenfvEXT */);
}

static PFNGLMULTITEXGENIEXTPROC
epoxy_glMultiTexGeniEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1676 /* glMultiTexGeniEXT */);
}

static PFNGLMULTITEXGENIVEXTPROC
epoxy_glMultiTexGenivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1677 /* glMultiTexGenivEXT */);
}

static PFNGLMULTITEXIMAGE1DEXTPROC
epoxy_glMultiTexImage1DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1678 /* glMultiTexImage1DEXT */);
}

static PFNGLMULTITEXIMAGE2DEXTPROC
epoxy_glMultiTexImage2DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1679 /* glMultiTexImage2DEXT */);
}

static PFNGLMULTITEXIMAGE3DEXTPROC
epoxy_glMultiTexImage3DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1680 /* glMultiTexImage3DEXT */);
}

static PFNGLMULTITEXPARAMETERIIVEXTPROC
epoxy_glMultiTexParameterIivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1681 /* glMultiTexParameterIivEXT */);
}

static PFNGLMULTITEXPARAMETERIUIVEXTPROC
epoxy_glMultiTexParameterIuivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1682 /* glMultiTexParameterIuivEXT */);
}

static PFNGLMULTITEXPARAMETERFEXTPROC
epoxy_glMultiTexParameterfEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1683 /* glMultiTexParameterfEXT */);
}

static PFNGLMULTITEXPARAMETERFVEXTPROC
epoxy_glMultiTexParameterfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1684 /* glMultiTexParameterfvEXT */);
}

static PFNGLMULTITEXPARAMETERIEXTPROC
epoxy_glMultiTexParameteriEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1685 /* glMultiTexParameteriEXT */);
}

static PFNGLMULTITEXPARAMETERIVEXTPROC
epoxy_glMultiTexParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1686 /* glMultiTexParameterivEXT */);
}

static PFNGLMULTITEXRENDERBUFFEREXTPROC
epoxy_glMultiTexRenderbufferEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1687 /* glMultiTexRenderbufferEXT */);
}

static PFNGLMULTITEXSUBIMAGE1DEXTPROC
epoxy_glMultiTexSubImage1DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1688 /* glMultiTexSubImage1DEXT */);
}

static PFNGLMULTITEXSUBIMAGE2DEXTPROC
epoxy_glMultiTexSubImage2DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1689 /* glMultiTexSubImage2DEXT */);
}

static PFNGLMULTITEXSUBIMAGE3DEXTPROC
epoxy_glMultiTexSubImage3DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1690 /* glMultiTexSubImage3DEXT */);
}

static PFNGLNAMEDBUFFERDATAPROC
epoxy_glNamedBufferData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1691 /* "glNamedBufferData" */,
        1691 /* "glNamedBufferData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1691] /* "glNamedBufferData" */,
                                providers, entrypoints);
}

static PFNGLNAMEDBUFFERDATAEXTPROC
epoxy_glNamedBufferDataEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1692 /* glNamedBufferDataEXT */);
}

static PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC
epoxy_glNamedBufferPageCommitmentARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_sparse_buffer, 1693 /* glNamedBufferPageCommitmentARB */);
}

static PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC
epoxy_glNamedBufferPageCommitmentEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_sparse_buffer, 1694 /* glNamedBufferPageCommitmentEXT */);
}

static PFNGLNAMEDBUFFERSTORAGEPROC
epoxy_glNamedBufferStorage_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        GL_extension_GL_EXT_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1695 /* "glNamedBufferStorage" */,
        1695 /* "glNamedBufferStorage" */,
        1696 /* "glNamedBufferStorageEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1695] /* "glNamedBufferStorage" */,
                                providers, entrypoints);
}

static PFNGLNAMEDBUFFERSTORAGEEXTPROC
epoxy_glNamedBufferStorageEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1696 /* "glNamedBufferStorageEXT" */,
        1695 /* "glNamedBufferStorage" */,
        1695 /* "glNamedBufferStorage" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1696] /* "glNamedBufferStorageEXT" */,
                                providers, entrypoints);
}

static PFNGLNAMEDBUFFERSUBDATAPROC
epoxy_glNamedBufferSubData_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        GL_extension_GL_EXT_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1697 /* "glNamedBufferSubData" */,
        1697 /* "glNamedBufferSubData" */,
        1698 /* "glNamedBufferSubDataEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1697] /* "glNamedBufferSubData" */,
                                providers, entrypoints);
}

static PFNGLNAMEDBUFFERSUBDATAEXTPROC
epoxy_glNamedBufferSubDataEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1698 /* "glNamedBufferSubDataEXT" */,
        1697 /* "glNamedBufferSubData" */,
        1697 /* "glNamedBufferSubData" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1698] /* "glNamedBufferSubDataEXT" */,
                                providers, entrypoints);
}

static PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC
epoxy_glNamedCopyBufferSubDataEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1699 /* glNamedCopyBufferSubDataEXT */);
}

static PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC
epoxy_glNamedFramebufferDrawBuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1700 /* "glNamedFramebufferDrawBuffer" */,
        1700 /* "glNamedFramebufferDrawBuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1700] /* "glNamedFramebufferDrawBuffer" */,
                                providers, entrypoints);
}

static PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC
epoxy_glNamedFramebufferDrawBuffers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1701 /* "glNamedFramebufferDrawBuffers" */,
        1701 /* "glNamedFramebufferDrawBuffers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1701] /* "glNamedFramebufferDrawBuffers" */,
                                providers, entrypoints);
}

static PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC
epoxy_glNamedFramebufferParameteri_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1702 /* "glNamedFramebufferParameteri" */,
        1702 /* "glNamedFramebufferParameteri" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1702] /* "glNamedFramebufferParameteri" */,
                                providers, entrypoints);
}

static PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
epoxy_glNamedFramebufferParameteriEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1703 /* glNamedFramebufferParameteriEXT */);
}

static PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC
epoxy_glNamedFramebufferReadBuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1704 /* "glNamedFramebufferReadBuffer" */,
        1704 /* "glNamedFramebufferReadBuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1704] /* "glNamedFramebufferReadBuffer" */,
                                providers, entrypoints);
}

static PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC
epoxy_glNamedFramebufferRenderbuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1705 /* "glNamedFramebufferRenderbuffer" */,
        1705 /* "glNamedFramebufferRenderbuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1705] /* "glNamedFramebufferRenderbuffer" */,
                                providers, entrypoints);
}

static PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
epoxy_glNamedFramebufferRenderbufferEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1706 /* glNamedFramebufferRenderbufferEXT */);
}

static PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC
epoxy_glNamedFramebufferSampleLocationsfvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_sample_locations, 1707 /* glNamedFramebufferSampleLocationsfvARB */);
}

static PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC
epoxy_glNamedFramebufferSampleLocationsfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_sample_locations, 1708 /* glNamedFramebufferSampleLocationsfvNV */);
}

static PFNGLNAMEDFRAMEBUFFERTEXTUREPROC
epoxy_glNamedFramebufferTexture_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1709 /* "glNamedFramebufferTexture" */,
        1709 /* "glNamedFramebufferTexture" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1709] /* "glNamedFramebufferTexture" */,
                                providers, entrypoints);
}

static PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
epoxy_glNamedFramebufferTexture1DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1710 /* glNamedFramebufferTexture1DEXT */);
}

static PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
epoxy_glNamedFramebufferTexture2DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1711 /* glNamedFramebufferTexture2DEXT */);
}

static PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
epoxy_glNamedFramebufferTexture3DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1712 /* glNamedFramebufferTexture3DEXT */);
}

static PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC
epoxy_glNamedFramebufferTextureEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1713 /* glNamedFramebufferTextureEXT */);
}

static PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
epoxy_glNamedFramebufferTextureFaceEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1714 /* glNamedFramebufferTextureFaceEXT */);
}

static PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC
epoxy_glNamedFramebufferTextureLayer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1715 /* "glNamedFramebufferTextureLayer" */,
        1715 /* "glNamedFramebufferTextureLayer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1715] /* "glNamedFramebufferTextureLayer" */,
                                providers, entrypoints);
}

static PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
epoxy_glNamedFramebufferTextureLayerEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1716 /* glNamedFramebufferTextureLayerEXT */);
}

static PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
epoxy_glNamedProgramLocalParameter4dEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1717 /* glNamedProgramLocalParameter4dEXT */);
}

static PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
epoxy_glNamedProgramLocalParameter4dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1718 /* glNamedProgramLocalParameter4dvEXT */);
}

static PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
epoxy_glNamedProgramLocalParameter4fEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1719 /* glNamedProgramLocalParameter4fEXT */);
}

static PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
epoxy_glNamedProgramLocalParameter4fvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1720 /* glNamedProgramLocalParameter4fvEXT */);
}

static PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
epoxy_glNamedProgramLocalParameterI4iEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1721 /* glNamedProgramLocalParameterI4iEXT */);
}

static PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
epoxy_glNamedProgramLocalParameterI4ivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1722 /* glNamedProgramLocalParameterI4ivEXT */);
}

static PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
epoxy_glNamedProgramLocalParameterI4uiEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1723 /* glNamedProgramLocalParameterI4uiEXT */);
}

static PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
epoxy_glNamedProgramLocalParameterI4uivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1724 /* glNamedProgramLocalParameterI4uivEXT */);
}

static PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
epoxy_glNamedProgramLocalParameters4fvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1725 /* glNamedProgramLocalParameters4fvEXT */);
}

static PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
epoxy_glNamedProgramLocalParametersI4ivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1726 /* glNamedProgramLocalParametersI4ivEXT */);
}

static PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
epoxy_glNamedProgramLocalParametersI4uivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1727 /* glNamedProgramLocalParametersI4uivEXT */);
}

static PFNGLNAMEDPROGRAMSTRINGEXTPROC
epoxy_glNamedProgramStringEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1728 /* glNamedProgramStringEXT */);
}

static PFNGLNAMEDRENDERBUFFERSTORAGEPROC
epoxy_glNamedRenderbufferStorage_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1729 /* "glNamedRenderbufferStorage" */,
        1729 /* "glNamedRenderbufferStorage" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1729] /* "glNamedRenderbufferStorage" */,
                                providers, entrypoints);
}

static PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC
epoxy_glNamedRenderbufferStorageEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1730 /* glNamedRenderbufferStorageEXT */);
}

static PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC
epoxy_glNamedRenderbufferStorageMultisample_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1731 /* "glNamedRenderbufferStorageMultisample" */,
        1731 /* "glNamedRenderbufferStorageMultisample" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1731] /* "glNamedRenderbufferStorageMultisample" */,
                                providers, entrypoints);
}

static PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
epoxy_glNamedRenderbufferStorageMultisampleCoverageEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1732 /* glNamedRenderbufferStorageMultisampleCoverageEXT */);
}

static PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
epoxy_glNamedRenderbufferStorageMultisampleEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1733 /* glNamedRenderbufferStorageMultisampleEXT */);
}

static PFNGLNAMEDSTRINGARBPROC
epoxy_glNamedStringARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_shading_language_include, 1734 /* glNamedStringARB */);
}

static PFNGLNEWLISTPROC
epoxy_glNewList_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1735 /* glNewList */);
}

static PFNGLNEWOBJECTBUFFERATIPROC
epoxy_glNewObjectBufferATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_array_object, 1736 /* glNewObjectBufferATI */);
}

static PFNGLNORMAL3BPROC
epoxy_glNormal3b_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1737 /* glNormal3b */);
}

static PFNGLNORMAL3BVPROC
epoxy_glNormal3bv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1738 /* glNormal3bv */);
}

static PFNGLNORMAL3DPROC
epoxy_glNormal3d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1739 /* glNormal3d */);
}

static PFNGLNORMAL3DVPROC
epoxy_glNormal3dv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1740 /* glNormal3dv */);
}

static PFNGLNORMAL3FPROC
epoxy_glNormal3f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1741 /* "glNormal3f" */,
        1741 /* "glNormal3f" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1741] /* "glNormal3f" */,
                                providers, entrypoints);
}

static PFNGLNORMAL3FVERTEX3FSUNPROC
epoxy_glNormal3fVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 1742 /* glNormal3fVertex3fSUN */);
}

static PFNGLNORMAL3FVERTEX3FVSUNPROC
epoxy_glNormal3fVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 1743 /* glNormal3fVertex3fvSUN */);
}

static PFNGLNORMAL3FVPROC
epoxy_glNormal3fv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1744 /* glNormal3fv */);
}

static PFNGLNORMAL3HNVPROC
epoxy_glNormal3hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 1745 /* glNormal3hNV */);
}

static PFNGLNORMAL3HVNVPROC
epoxy_glNormal3hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 1746 /* glNormal3hvNV */);
}

static PFNGLNORMAL3IPROC
epoxy_glNormal3i_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1747 /* glNormal3i */);
}

static PFNGLNORMAL3IVPROC
epoxy_glNormal3iv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1748 /* glNormal3iv */);
}

static PFNGLNORMAL3SPROC
epoxy_glNormal3s_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1749 /* glNormal3s */);
}

static PFNGLNORMAL3SVPROC
epoxy_glNormal3sv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1750 /* glNormal3sv */);
}

static PFNGLNORMAL3XPROC
epoxy_glNormal3x_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1751 /* glNormal3x */);
}

static PFNGLNORMAL3XOESPROC
epoxy_glNormal3xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1752 /* glNormal3xOES */);
}

static PFNGLNORMAL3XVOESPROC
epoxy_glNormal3xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1753 /* glNormal3xvOES */);
}

static PFNGLNORMALFORMATNVPROC
epoxy_glNormalFormatNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_buffer_unified_memory, 1754 /* glNormalFormatNV */);
}

static PFNGLNORMALP3UIPROC
epoxy_glNormalP3ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1755 /* "glNormalP3ui" */,
        1755 /* "glNormalP3ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1755] /* "glNormalP3ui" */,
                                providers, entrypoints);
}

static PFNGLNORMALP3UIVPROC
epoxy_glNormalP3uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1756 /* "glNormalP3uiv" */,
        1756 /* "glNormalP3uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1756] /* "glNormalP3uiv" */,
                                providers, entrypoints);
}

static PFNGLNORMALPOINTERPROC
epoxy_glNormalPointer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1757 /* "glNormalPointer" */,
        1757 /* "glNormalPointer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1757] /* "glNormalPointer" */,
                                providers, entrypoints);
}

static PFNGLNORMALPOINTEREXTPROC
epoxy_glNormalPointerEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_array, 1758 /* glNormalPointerEXT */);
}

static PFNGLNORMALPOINTERLISTIBMPROC
epoxy_glNormalPointerListIBM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IBM_vertex_array_lists, 1759 /* glNormalPointerListIBM */);
}

static PFNGLNORMALPOINTERVINTELPROC
epoxy_glNormalPointervINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_parallel_arrays, 1760 /* glNormalPointervINTEL */);
}

static PFNGLNORMALSTREAM3BATIPROC
epoxy_glNormalStream3bATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 1761 /* glNormalStream3bATI */);
}

static PFNGLNORMALSTREAM3BVATIPROC
epoxy_glNormalStream3bvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 1762 /* glNormalStream3bvATI */);
}

static PFNGLNORMALSTREAM3DATIPROC
epoxy_glNormalStream3dATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 1763 /* glNormalStream3dATI */);
}

static PFNGLNORMALSTREAM3DVATIPROC
epoxy_glNormalStream3dvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 1764 /* glNormalStream3dvATI */);
}

static PFNGLNORMALSTREAM3FATIPROC
epoxy_glNormalStream3fATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 1765 /* glNormalStream3fATI */);
}

static PFNGLNORMALSTREAM3FVATIPROC
epoxy_glNormalStream3fvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 1766 /* glNormalStream3fvATI */);
}

static PFNGLNORMALSTREAM3IATIPROC
epoxy_glNormalStream3iATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 1767 /* glNormalStream3iATI */);
}

static PFNGLNORMALSTREAM3IVATIPROC
epoxy_glNormalStream3ivATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 1768 /* glNormalStream3ivATI */);
}

static PFNGLNORMALSTREAM3SATIPROC
epoxy_glNormalStream3sATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 1769 /* glNormalStream3sATI */);
}

static PFNGLNORMALSTREAM3SVATIPROC
epoxy_glNormalStream3svATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 1770 /* glNormalStream3svATI */);
}

static PFNGLOBJECTLABELPROC
epoxy_glObjectLabel_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1771 /* "glObjectLabel" */,
        1771 /* "glObjectLabel" */,
        1771 /* "glObjectLabel" */,
        1772 /* "glObjectLabelKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1771] /* "glObjectLabel" */,
                                providers, entrypoints);
}

static PFNGLOBJECTLABELKHRPROC
epoxy_glObjectLabelKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_debug,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1772 /* "glObjectLabelKHR" */,
        1771 /* "glObjectLabel" */,
        1771 /* "glObjectLabel" */,
        1771 /* "glObjectLabel" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1772] /* "glObjectLabelKHR" */,
                                providers, entrypoints);
}

static PFNGLOBJECTPTRLABELPROC
epoxy_glObjectPtrLabel_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1773 /* "glObjectPtrLabel" */,
        1773 /* "glObjectPtrLabel" */,
        1773 /* "glObjectPtrLabel" */,
        1774 /* "glObjectPtrLabelKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1773] /* "glObjectPtrLabel" */,
                                providers, entrypoints);
}

static PFNGLOBJECTPTRLABELKHRPROC
epoxy_glObjectPtrLabelKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_debug,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1774 /* "glObjectPtrLabelKHR" */,
        1773 /* "glObjectPtrLabel" */,
        1773 /* "glObjectPtrLabel" */,
        1773 /* "glObjectPtrLabel" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1774] /* "glObjectPtrLabelKHR" */,
                                providers, entrypoints);
}

static PFNGLOBJECTPURGEABLEAPPLEPROC
epoxy_glObjectPurgeableAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_object_purgeable, 1775 /* glObjectPurgeableAPPLE */);
}

static PFNGLOBJECTUNPURGEABLEAPPLEPROC
epoxy_glObjectUnpurgeableAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_object_purgeable, 1776 /* glObjectUnpurgeableAPPLE */);
}

static PFNGLORTHOPROC
epoxy_glOrtho_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1777 /* glOrtho */);
}

static PFNGLORTHOFPROC
epoxy_glOrthof_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1778 /* glOrthof */);
}

static PFNGLORTHOFOESPROC
epoxy_glOrthofOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_single_precision, 1779 /* glOrthofOES */);
}

static PFNGLORTHOXPROC
epoxy_glOrthox_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1780 /* glOrthox */);
}

static PFNGLORTHOXOESPROC
epoxy_glOrthoxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1781 /* glOrthoxOES */);
}

static PFNGLPNTRIANGLESFATIPROC
epoxy_glPNTrianglesfATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_pn_triangles, 1782 /* glPNTrianglesfATI */);
}

static PFNGLPNTRIANGLESIATIPROC
epoxy_glPNTrianglesiATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_pn_triangles, 1783 /* glPNTrianglesiATI */);
}

static PFNGLPASSTEXCOORDATIPROC
epoxy_glPassTexCoordATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_fragment_shader, 1784 /* glPassTexCoordATI */);
}

static PFNGLPASSTHROUGHPROC
epoxy_glPassThrough_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1785 /* glPassThrough */);
}

static PFNGLPASSTHROUGHXOESPROC
epoxy_glPassThroughxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1786 /* glPassThroughxOES */);
}

static PFNGLPATCHPARAMETERFVPROC
epoxy_glPatchParameterfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_tessellation_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1787 /* "glPatchParameterfv" */,
        1787 /* "glPatchParameterfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1787] /* "glPatchParameterfv" */,
                                providers, entrypoints);
}

static PFNGLPATCHPARAMETERIPROC
epoxy_glPatchParameteri_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_tessellation_shader,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_tessellation_shader,
        GL_extension_GL_OES_tessellation_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1788 /* "glPatchParameteri" */,
        1788 /* "glPatchParameteri" */,
        1788 /* "glPatchParameteri" */,
        1789 /* "glPatchParameteriEXT" */,
        1790 /* "glPatchParameteriOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1788] /* "glPatchParameteri" */,
                                providers, entrypoints);
}

static PFNGLPATCHPARAMETERIEXTPROC
epoxy_glPatchParameteriEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_tessellation_shader,
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_tessellation_shader,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_tessellation_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1789 /* "glPatchParameteriEXT" */,
        1788 /* "glPatchParameteri" */,
        1788 /* "glPatchParameteri" */,
        1788 /* "glPatchParameteri" */,
        1790 /* "glPatchParameteriOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1789] /* "glPatchParameteriEXT" */,
                                providers, entrypoints);
}

static PFNGLPATCHPARAMETERIOESPROC
epoxy_glPatchParameteriOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_tessellation_shader,
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_tessellation_shader,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_tessellation_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1790 /* "glPatchParameteriOES" */,
        1788 /* "glPatchParameteri" */,
        1788 /* "glPatchParameteri" */,
        1788 /* "glPatchParameteri" */,
        1789 /* "glPatchParameteriEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1790] /* "glPatchParameteriOES" */,
                                providers, entrypoints);
}

static PFNGLPATHCOLORGENNVPROC
epoxy_glPathColorGenNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1791 /* glPathColorGenNV */);
}

static PFNGLPATHCOMMANDSNVPROC
epoxy_glPathCommandsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1792 /* glPathCommandsNV */);
}

static PFNGLPATHCOORDSNVPROC
epoxy_glPathCoordsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1793 /* glPathCoordsNV */);
}

static PFNGLPATHCOVERDEPTHFUNCNVPROC
epoxy_glPathCoverDepthFuncNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1794 /* glPathCoverDepthFuncNV */);
}

static PFNGLPATHDASHARRAYNVPROC
epoxy_glPathDashArrayNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1795 /* glPathDashArrayNV */);
}

static PFNGLPATHFOGGENNVPROC
epoxy_glPathFogGenNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1796 /* glPathFogGenNV */);
}

static PFNGLPATHGLYPHINDEXARRAYNVPROC
epoxy_glPathGlyphIndexArrayNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1797 /* glPathGlyphIndexArrayNV */);
}

static PFNGLPATHGLYPHINDEXRANGENVPROC
epoxy_glPathGlyphIndexRangeNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1798 /* glPathGlyphIndexRangeNV */);
}

static PFNGLPATHGLYPHRANGENVPROC
epoxy_glPathGlyphRangeNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1799 /* glPathGlyphRangeNV */);
}

static PFNGLPATHGLYPHSNVPROC
epoxy_glPathGlyphsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1800 /* glPathGlyphsNV */);
}

static PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC
epoxy_glPathMemoryGlyphIndexArrayNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1801 /* glPathMemoryGlyphIndexArrayNV */);
}

static PFNGLPATHPARAMETERFNVPROC
epoxy_glPathParameterfNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1802 /* glPathParameterfNV */);
}

static PFNGLPATHPARAMETERFVNVPROC
epoxy_glPathParameterfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1803 /* glPathParameterfvNV */);
}

static PFNGLPATHPARAMETERINVPROC
epoxy_glPathParameteriNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1804 /* glPathParameteriNV */);
}

static PFNGLPATHPARAMETERIVNVPROC
epoxy_glPathParameterivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1805 /* glPathParameterivNV */);
}

static PFNGLPATHSTENCILDEPTHOFFSETNVPROC
epoxy_glPathStencilDepthOffsetNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1806 /* glPathStencilDepthOffsetNV */);
}

static PFNGLPATHSTENCILFUNCNVPROC
epoxy_glPathStencilFuncNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1807 /* glPathStencilFuncNV */);
}

static PFNGLPATHSTRINGNVPROC
epoxy_glPathStringNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1808 /* glPathStringNV */);
}

static PFNGLPATHSUBCOMMANDSNVPROC
epoxy_glPathSubCommandsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1809 /* glPathSubCommandsNV */);
}

static PFNGLPATHSUBCOORDSNVPROC
epoxy_glPathSubCoordsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1810 /* glPathSubCoordsNV */);
}

static PFNGLPATHTEXGENNVPROC
epoxy_glPathTexGenNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1811 /* glPathTexGenNV */);
}

static PFNGLPAUSETRANSFORMFEEDBACKPROC
epoxy_glPauseTransformFeedback_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback2,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_transform_feedback2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1812 /* "glPauseTransformFeedback" */,
        1812 /* "glPauseTransformFeedback" */,
        1812 /* "glPauseTransformFeedback" */,
        1813 /* "glPauseTransformFeedbackNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1812] /* "glPauseTransformFeedback" */,
                                providers, entrypoints);
}

static PFNGLPAUSETRANSFORMFEEDBACKNVPROC
epoxy_glPauseTransformFeedbackNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_transform_feedback2,
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback2,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1813 /* "glPauseTransformFeedbackNV" */,
        1812 /* "glPauseTransformFeedback" */,
        1812 /* "glPauseTransformFeedback" */,
        1812 /* "glPauseTransformFeedback" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1813] /* "glPauseTransformFeedbackNV" */,
                                providers, entrypoints);
}

static PFNGLPIXELDATARANGENVPROC
epoxy_glPixelDataRangeNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_pixel_data_range, 1814 /* glPixelDataRangeNV */);
}

static PFNGLPIXELMAPFVPROC
epoxy_glPixelMapfv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1815 /* glPixelMapfv */);
}

static PFNGLPIXELMAPUIVPROC
epoxy_glPixelMapuiv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1816 /* glPixelMapuiv */);
}

static PFNGLPIXELMAPUSVPROC
epoxy_glPixelMapusv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1817 /* glPixelMapusv */);
}

static PFNGLPIXELMAPXPROC
epoxy_glPixelMapx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1818 /* glPixelMapx */);
}

static PFNGLPIXELSTOREFPROC
epoxy_glPixelStoref_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1819 /* glPixelStoref */);
}

static PFNGLPIXELSTOREIPROC
epoxy_glPixelStorei_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1820 /* "glPixelStorei" */,
        1820 /* "glPixelStorei" */,
        1820 /* "glPixelStorei" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1820] /* "glPixelStorei" */,
                                providers, entrypoints);
}

static PFNGLPIXELSTOREXPROC
epoxy_glPixelStorex_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1821 /* glPixelStorex */);
}

static PFNGLPIXELTEXGENPARAMETERFSGISPROC
epoxy_glPixelTexGenParameterfSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_pixel_texture, 1822 /* glPixelTexGenParameterfSGIS */);
}

static PFNGLPIXELTEXGENPARAMETERFVSGISPROC
epoxy_glPixelTexGenParameterfvSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_pixel_texture, 1823 /* glPixelTexGenParameterfvSGIS */);
}

static PFNGLPIXELTEXGENPARAMETERISGISPROC
epoxy_glPixelTexGenParameteriSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_pixel_texture, 1824 /* glPixelTexGenParameteriSGIS */);
}

static PFNGLPIXELTEXGENPARAMETERIVSGISPROC
epoxy_glPixelTexGenParameterivSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_pixel_texture, 1825 /* glPixelTexGenParameterivSGIS */);
}

static PFNGLPIXELTEXGENSGIXPROC
epoxy_glPixelTexGenSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_pixel_texture, 1826 /* glPixelTexGenSGIX */);
}

static PFNGLPIXELTRANSFERFPROC
epoxy_glPixelTransferf_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1827 /* glPixelTransferf */);
}

static PFNGLPIXELTRANSFERIPROC
epoxy_glPixelTransferi_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1828 /* glPixelTransferi */);
}

static PFNGLPIXELTRANSFERXOESPROC
epoxy_glPixelTransferxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1829 /* glPixelTransferxOES */);
}

static PFNGLPIXELTRANSFORMPARAMETERFEXTPROC
epoxy_glPixelTransformParameterfEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_pixel_transform, 1830 /* glPixelTransformParameterfEXT */);
}

static PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
epoxy_glPixelTransformParameterfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_pixel_transform, 1831 /* glPixelTransformParameterfvEXT */);
}

static PFNGLPIXELTRANSFORMPARAMETERIEXTPROC
epoxy_glPixelTransformParameteriEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_pixel_transform, 1832 /* glPixelTransformParameteriEXT */);
}

static PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
epoxy_glPixelTransformParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_pixel_transform, 1833 /* glPixelTransformParameterivEXT */);
}

static PFNGLPIXELZOOMPROC
epoxy_glPixelZoom_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1834 /* glPixelZoom */);
}

static PFNGLPIXELZOOMXOESPROC
epoxy_glPixelZoomxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1835 /* glPixelZoomxOES */);
}

static PFNGLPOINTALONGPATHNVPROC
epoxy_glPointAlongPathNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1836 /* glPointAlongPathNV */);
}

static PFNGLPOINTPARAMETERFPROC
epoxy_glPointParameterf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        OpenGL_ES_1_0,
        GL_extension_GL_ARB_point_parameters,
        GL_extension_GL_EXT_point_parameters,
        GL_extension_GL_SGIS_point_parameters,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1837 /* "glPointParameterf" */,
        1837 /* "glPointParameterf" */,
        1838 /* "glPointParameterfARB" */,
        1839 /* "glPointParameterfEXT" */,
        1840 /* "glPointParameterfSGIS" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1837] /* "glPointParameterf" */,
                                providers, entrypoints);
}

static PFNGLPOINTPARAMETERFARBPROC
epoxy_glPointParameterfARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_point_parameters,
        Desktop_OpenGL_1_4,
        OpenGL_ES_1_0,
        GL_extension_GL_EXT_point_parameters,
        GL_extension_GL_SGIS_point_parameters,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1838 /* "glPointParameterfARB" */,
        1837 /* "glPointParameterf" */,
        1837 /* "glPointParameterf" */,
        1839 /* "glPointParameterfEXT" */,
        1840 /* "glPointParameterfSGIS" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1838] /* "glPointParameterfARB" */,
                                providers, entrypoints);
}

static PFNGLPOINTPARAMETERFEXTPROC
epoxy_glPointParameterfEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_point_parameters,
        Desktop_OpenGL_1_4,
        OpenGL_ES_1_0,
        GL_extension_GL_ARB_point_parameters,
        GL_extension_GL_SGIS_point_parameters,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1839 /* "glPointParameterfEXT" */,
        1837 /* "glPointParameterf" */,
        1837 /* "glPointParameterf" */,
        1838 /* "glPointParameterfARB" */,
        1840 /* "glPointParameterfSGIS" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1839] /* "glPointParameterfEXT" */,
                                providers, entrypoints);
}

static PFNGLPOINTPARAMETERFSGISPROC
epoxy_glPointParameterfSGIS_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_SGIS_point_parameters,
        Desktop_OpenGL_1_4,
        OpenGL_ES_1_0,
        GL_extension_GL_ARB_point_parameters,
        GL_extension_GL_EXT_point_parameters,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1840 /* "glPointParameterfSGIS" */,
        1837 /* "glPointParameterf" */,
        1837 /* "glPointParameterf" */,
        1838 /* "glPointParameterfARB" */,
        1839 /* "glPointParameterfEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1840] /* "glPointParameterfSGIS" */,
                                providers, entrypoints);
}

static PFNGLPOINTPARAMETERFVPROC
epoxy_glPointParameterfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        OpenGL_ES_1_0,
        GL_extension_GL_ARB_point_parameters,
        GL_extension_GL_EXT_point_parameters,
        GL_extension_GL_SGIS_point_parameters,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1841 /* "glPointParameterfv" */,
        1841 /* "glPointParameterfv" */,
        1842 /* "glPointParameterfvARB" */,
        1843 /* "glPointParameterfvEXT" */,
        1844 /* "glPointParameterfvSGIS" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1841] /* "glPointParameterfv" */,
                                providers, entrypoints);
}

static PFNGLPOINTPARAMETERFVARBPROC
epoxy_glPointParameterfvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_point_parameters,
        Desktop_OpenGL_1_4,
        OpenGL_ES_1_0,
        GL_extension_GL_EXT_point_parameters,
        GL_extension_GL_SGIS_point_parameters,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1842 /* "glPointParameterfvARB" */,
        1841 /* "glPointParameterfv" */,
        1841 /* "glPointParameterfv" */,
        1843 /* "glPointParameterfvEXT" */,
        1844 /* "glPointParameterfvSGIS" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1842] /* "glPointParameterfvARB" */,
                                providers, entrypoints);
}

static PFNGLPOINTPARAMETERFVEXTPROC
epoxy_glPointParameterfvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_point_parameters,
        Desktop_OpenGL_1_4,
        OpenGL_ES_1_0,
        GL_extension_GL_ARB_point_parameters,
        GL_extension_GL_SGIS_point_parameters,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1843 /* "glPointParameterfvEXT" */,
        1841 /* "glPointParameterfv" */,
        1841 /* "glPointParameterfv" */,
        1842 /* "glPointParameterfvARB" */,
        1844 /* "glPointParameterfvSGIS" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1843] /* "glPointParameterfvEXT" */,
                                providers, entrypoints);
}

static PFNGLPOINTPARAMETERFVSGISPROC
epoxy_glPointParameterfvSGIS_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_SGIS_point_parameters,
        Desktop_OpenGL_1_4,
        OpenGL_ES_1_0,
        GL_extension_GL_ARB_point_parameters,
        GL_extension_GL_EXT_point_parameters,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1844 /* "glPointParameterfvSGIS" */,
        1841 /* "glPointParameterfv" */,
        1841 /* "glPointParameterfv" */,
        1842 /* "glPointParameterfvARB" */,
        1843 /* "glPointParameterfvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1844] /* "glPointParameterfvSGIS" */,
                                providers, entrypoints);
}

static PFNGLPOINTPARAMETERIPROC
epoxy_glPointParameteri_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_NV_point_sprite,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1845 /* "glPointParameteri" */,
        1846 /* "glPointParameteriNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1845] /* "glPointParameteri" */,
                                providers, entrypoints);
}

static PFNGLPOINTPARAMETERINVPROC
epoxy_glPointParameteriNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_point_sprite,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1846 /* "glPointParameteriNV" */,
        1845 /* "glPointParameteri" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1846] /* "glPointParameteriNV" */,
                                providers, entrypoints);
}

static PFNGLPOINTPARAMETERIVPROC
epoxy_glPointParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_NV_point_sprite,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1847 /* "glPointParameteriv" */,
        1848 /* "glPointParameterivNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1847] /* "glPointParameteriv" */,
                                providers, entrypoints);
}

static PFNGLPOINTPARAMETERIVNVPROC
epoxy_glPointParameterivNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_point_sprite,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1848 /* "glPointParameterivNV" */,
        1847 /* "glPointParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1848] /* "glPointParameterivNV" */,
                                providers, entrypoints);
}

static PFNGLPOINTPARAMETERXPROC
epoxy_glPointParameterx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1849 /* glPointParameterx */);
}

static PFNGLPOINTPARAMETERXOESPROC
epoxy_glPointParameterxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1850 /* glPointParameterxOES */);
}

static PFNGLPOINTPARAMETERXVPROC
epoxy_glPointParameterxv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1851 /* glPointParameterxv */);
}

static PFNGLPOINTPARAMETERXVOESPROC
epoxy_glPointParameterxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1852 /* glPointParameterxvOES */);
}

static PFNGLPOINTSIZEPROC
epoxy_glPointSize_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1853 /* "glPointSize" */,
        1853 /* "glPointSize" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1853] /* "glPointSize" */,
                                providers, entrypoints);
}

static PFNGLPOINTSIZEPOINTEROESPROC
epoxy_glPointSizePointerOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_point_size_array, 1854 /* glPointSizePointerOES */);
}

static PFNGLPOINTSIZEXPROC
epoxy_glPointSizex_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1855 /* glPointSizex */);
}

static PFNGLPOINTSIZEXOESPROC
epoxy_glPointSizexOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1856 /* glPointSizexOES */);
}

static PFNGLPOLLASYNCSGIXPROC
epoxy_glPollAsyncSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_async, 1857 /* glPollAsyncSGIX */);
}

static PFNGLPOLLINSTRUMENTSSGIXPROC
epoxy_glPollInstrumentsSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_instruments, 1858 /* glPollInstrumentsSGIX */);
}

static PFNGLPOLYGONMODEPROC
epoxy_glPolygonMode_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        GL_extension_GL_NV_polygon_mode,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1859 /* "glPolygonMode" */,
        1860 /* "glPolygonModeNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1859] /* "glPolygonMode" */,
                                providers, entrypoints);
}

static PFNGLPOLYGONMODENVPROC
epoxy_glPolygonModeNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_polygon_mode,
        Desktop_OpenGL_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1860 /* "glPolygonModeNV" */,
        1859 /* "glPolygonMode" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1860] /* "glPolygonModeNV" */,
                                providers, entrypoints);
}

static PFNGLPOLYGONOFFSETPROC
epoxy_glPolygonOffset_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1861 /* "glPolygonOffset" */,
        1861 /* "glPolygonOffset" */,
        1861 /* "glPolygonOffset" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1861] /* "glPolygonOffset" */,
                                providers, entrypoints);
}

static PFNGLPOLYGONOFFSETCLAMPEXTPROC
epoxy_glPolygonOffsetClampEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_polygon_offset_clamp, 1862 /* glPolygonOffsetClampEXT */);
}

static PFNGLPOLYGONOFFSETEXTPROC
epoxy_glPolygonOffsetEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_polygon_offset, 1863 /* glPolygonOffsetEXT */);
}

static PFNGLPOLYGONOFFSETXPROC
epoxy_glPolygonOffsetx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 1864 /* glPolygonOffsetx */);
}

static PFNGLPOLYGONOFFSETXOESPROC
epoxy_glPolygonOffsetxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1865 /* glPolygonOffsetxOES */);
}

static PFNGLPOLYGONSTIPPLEPROC
epoxy_glPolygonStipple_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1866 /* glPolygonStipple */);
}

static PFNGLPOPATTRIBPROC
epoxy_glPopAttrib_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1867 /* glPopAttrib */);
}

static PFNGLPOPCLIENTATTRIBPROC
epoxy_glPopClientAttrib_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_1, 1868 /* glPopClientAttrib */);
}

static PFNGLPOPDEBUGGROUPPROC
epoxy_glPopDebugGroup_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1869 /* "glPopDebugGroup" */,
        1869 /* "glPopDebugGroup" */,
        1869 /* "glPopDebugGroup" */,
        1870 /* "glPopDebugGroupKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1869] /* "glPopDebugGroup" */,
                                providers, entrypoints);
}

static PFNGLPOPDEBUGGROUPKHRPROC
epoxy_glPopDebugGroupKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_debug,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1870 /* "glPopDebugGroupKHR" */,
        1869 /* "glPopDebugGroup" */,
        1869 /* "glPopDebugGroup" */,
        1869 /* "glPopDebugGroup" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1870] /* "glPopDebugGroupKHR" */,
                                providers, entrypoints);
}

static PFNGLPOPGROUPMARKEREXTPROC
epoxy_glPopGroupMarkerEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_debug_marker, 1871 /* glPopGroupMarkerEXT */);
}

static PFNGLPOPMATRIXPROC
epoxy_glPopMatrix_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1872 /* "glPopMatrix" */,
        1872 /* "glPopMatrix" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1872] /* "glPopMatrix" */,
                                providers, entrypoints);
}

static PFNGLPOPNAMEPROC
epoxy_glPopName_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 1873 /* glPopName */);
}

static PFNGLPRESENTFRAMEDUALFILLNVPROC
epoxy_glPresentFrameDualFillNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_present_video, 1874 /* glPresentFrameDualFillNV */);
}

static PFNGLPRESENTFRAMEKEYEDNVPROC
epoxy_glPresentFrameKeyedNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_present_video, 1875 /* glPresentFrameKeyedNV */);
}

static PFNGLPRIMITIVEBOUNDINGBOXPROC
epoxy_glPrimitiveBoundingBox_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_ES3_2_compatibility,
        GL_extension_GL_EXT_primitive_bounding_box,
        GL_extension_GL_OES_primitive_bounding_box,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1876 /* "glPrimitiveBoundingBox" */,
        1877 /* "glPrimitiveBoundingBoxARB" */,
        1878 /* "glPrimitiveBoundingBoxEXT" */,
        1879 /* "glPrimitiveBoundingBoxOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1876] /* "glPrimitiveBoundingBox" */,
                                providers, entrypoints);
}

static PFNGLPRIMITIVEBOUNDINGBOXARBPROC
epoxy_glPrimitiveBoundingBoxARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_ES3_2_compatibility,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_primitive_bounding_box,
        GL_extension_GL_OES_primitive_bounding_box,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1877 /* "glPrimitiveBoundingBoxARB" */,
        1876 /* "glPrimitiveBoundingBox" */,
        1878 /* "glPrimitiveBoundingBoxEXT" */,
        1879 /* "glPrimitiveBoundingBoxOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1877] /* "glPrimitiveBoundingBoxARB" */,
                                providers, entrypoints);
}

static PFNGLPRIMITIVEBOUNDINGBOXEXTPROC
epoxy_glPrimitiveBoundingBoxEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_primitive_bounding_box,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_ES3_2_compatibility,
        GL_extension_GL_OES_primitive_bounding_box,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1878 /* "glPrimitiveBoundingBoxEXT" */,
        1876 /* "glPrimitiveBoundingBox" */,
        1877 /* "glPrimitiveBoundingBoxARB" */,
        1879 /* "glPrimitiveBoundingBoxOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1878] /* "glPrimitiveBoundingBoxEXT" */,
                                providers, entrypoints);
}

static PFNGLPRIMITIVEBOUNDINGBOXOESPROC
epoxy_glPrimitiveBoundingBoxOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_primitive_bounding_box,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_ES3_2_compatibility,
        GL_extension_GL_EXT_primitive_bounding_box,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1879 /* "glPrimitiveBoundingBoxOES" */,
        1876 /* "glPrimitiveBoundingBox" */,
        1877 /* "glPrimitiveBoundingBoxARB" */,
        1878 /* "glPrimitiveBoundingBoxEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1879] /* "glPrimitiveBoundingBoxOES" */,
                                providers, entrypoints);
}

static PFNGLPRIMITIVERESTARTINDEXPROC
epoxy_glPrimitiveRestartIndex_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_3_1, 1880 /* glPrimitiveRestartIndex */);
}

static PFNGLPRIMITIVERESTARTINDEXNVPROC
epoxy_glPrimitiveRestartIndexNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_primitive_restart, 1881 /* glPrimitiveRestartIndexNV */);
}

static PFNGLPRIMITIVERESTARTNVPROC
epoxy_glPrimitiveRestartNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_primitive_restart, 1882 /* glPrimitiveRestartNV */);
}

static PFNGLPRIORITIZETEXTURESPROC
epoxy_glPrioritizeTextures_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        GL_extension_GL_EXT_texture_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1883 /* "glPrioritizeTextures" */,
        1884 /* "glPrioritizeTexturesEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1883] /* "glPrioritizeTextures" */,
                                providers, entrypoints);
}

static PFNGLPRIORITIZETEXTURESEXTPROC
epoxy_glPrioritizeTexturesEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_object,
        Desktop_OpenGL_1_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1884 /* "glPrioritizeTexturesEXT" */,
        1883 /* "glPrioritizeTextures" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1884] /* "glPrioritizeTexturesEXT" */,
                                providers, entrypoints);
}

static PFNGLPRIORITIZETEXTURESXOESPROC
epoxy_glPrioritizeTexturesxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 1885 /* glPrioritizeTexturesxOES */);
}

static PFNGLPROGRAMBINARYPROC
epoxy_glProgramBinary_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_get_program_binary,
        OpenGL_ES_3_0,
        GL_extension_GL_OES_get_program_binary,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1886 /* "glProgramBinary" */,
        1886 /* "glProgramBinary" */,
        1886 /* "glProgramBinary" */,
        1887 /* "glProgramBinaryOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1886] /* "glProgramBinary" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMBINARYOESPROC
epoxy_glProgramBinaryOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_get_program_binary,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_get_program_binary,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1887 /* "glProgramBinaryOES" */,
        1886 /* "glProgramBinary" */,
        1886 /* "glProgramBinary" */,
        1886 /* "glProgramBinary" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1887] /* "glProgramBinaryOES" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
epoxy_glProgramBufferParametersIivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_parameter_buffer_object, 1888 /* glProgramBufferParametersIivNV */);
}

static PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
epoxy_glProgramBufferParametersIuivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_parameter_buffer_object, 1889 /* glProgramBufferParametersIuivNV */);
}

static PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
epoxy_glProgramBufferParametersfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_parameter_buffer_object, 1890 /* glProgramBufferParametersfvNV */);
}

static PFNGLPROGRAMENVPARAMETER4DARBPROC
epoxy_glProgramEnvParameter4dARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1891 /* "glProgramEnvParameter4dARB" */,
        1891 /* "glProgramEnvParameter4dARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1891] /* "glProgramEnvParameter4dARB" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMENVPARAMETER4DVARBPROC
epoxy_glProgramEnvParameter4dvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1892 /* "glProgramEnvParameter4dvARB" */,
        1892 /* "glProgramEnvParameter4dvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1892] /* "glProgramEnvParameter4dvARB" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMENVPARAMETER4FARBPROC
epoxy_glProgramEnvParameter4fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1893 /* "glProgramEnvParameter4fARB" */,
        1893 /* "glProgramEnvParameter4fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1893] /* "glProgramEnvParameter4fARB" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMENVPARAMETER4FVARBPROC
epoxy_glProgramEnvParameter4fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1894 /* "glProgramEnvParameter4fvARB" */,
        1894 /* "glProgramEnvParameter4fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1894] /* "glProgramEnvParameter4fvARB" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMENVPARAMETERI4INVPROC
epoxy_glProgramEnvParameterI4iNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1895 /* glProgramEnvParameterI4iNV */);
}

static PFNGLPROGRAMENVPARAMETERI4IVNVPROC
epoxy_glProgramEnvParameterI4ivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1896 /* glProgramEnvParameterI4ivNV */);
}

static PFNGLPROGRAMENVPARAMETERI4UINVPROC
epoxy_glProgramEnvParameterI4uiNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1897 /* glProgramEnvParameterI4uiNV */);
}

static PFNGLPROGRAMENVPARAMETERI4UIVNVPROC
epoxy_glProgramEnvParameterI4uivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1898 /* glProgramEnvParameterI4uivNV */);
}

static PFNGLPROGRAMENVPARAMETERS4FVEXTPROC
epoxy_glProgramEnvParameters4fvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_gpu_program_parameters, 1899 /* glProgramEnvParameters4fvEXT */);
}

static PFNGLPROGRAMENVPARAMETERSI4IVNVPROC
epoxy_glProgramEnvParametersI4ivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1900 /* glProgramEnvParametersI4ivNV */);
}

static PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
epoxy_glProgramEnvParametersI4uivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1901 /* glProgramEnvParametersI4uivNV */);
}

static PFNGLPROGRAMLOCALPARAMETER4DARBPROC
epoxy_glProgramLocalParameter4dARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1902 /* "glProgramLocalParameter4dARB" */,
        1902 /* "glProgramLocalParameter4dARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1902] /* "glProgramLocalParameter4dARB" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMLOCALPARAMETER4DVARBPROC
epoxy_glProgramLocalParameter4dvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1903 /* "glProgramLocalParameter4dvARB" */,
        1903 /* "glProgramLocalParameter4dvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1903] /* "glProgramLocalParameter4dvARB" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMLOCALPARAMETER4FARBPROC
epoxy_glProgramLocalParameter4fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1904 /* "glProgramLocalParameter4fARB" */,
        1904 /* "glProgramLocalParameter4fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1904] /* "glProgramLocalParameter4fARB" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMLOCALPARAMETER4FVARBPROC
epoxy_glProgramLocalParameter4fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1905 /* "glProgramLocalParameter4fvARB" */,
        1905 /* "glProgramLocalParameter4fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1905] /* "glProgramLocalParameter4fvARB" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMLOCALPARAMETERI4INVPROC
epoxy_glProgramLocalParameterI4iNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1906 /* glProgramLocalParameterI4iNV */);
}

static PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
epoxy_glProgramLocalParameterI4ivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1907 /* glProgramLocalParameterI4ivNV */);
}

static PFNGLPROGRAMLOCALPARAMETERI4UINVPROC
epoxy_glProgramLocalParameterI4uiNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1908 /* glProgramLocalParameterI4uiNV */);
}

static PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
epoxy_glProgramLocalParameterI4uivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1909 /* glProgramLocalParameterI4uivNV */);
}

static PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
epoxy_glProgramLocalParameters4fvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_gpu_program_parameters, 1910 /* glProgramLocalParameters4fvEXT */);
}

static PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
epoxy_glProgramLocalParametersI4ivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1911 /* glProgramLocalParametersI4ivNV */);
}

static PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
epoxy_glProgramLocalParametersI4uivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program4, 1912 /* glProgramLocalParametersI4uivNV */);
}

static PFNGLPROGRAMNAMEDPARAMETER4DNVPROC
epoxy_glProgramNamedParameter4dNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_fragment_program, 1913 /* glProgramNamedParameter4dNV */);
}

static PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
epoxy_glProgramNamedParameter4dvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_fragment_program, 1914 /* glProgramNamedParameter4dvNV */);
}

static PFNGLPROGRAMNAMEDPARAMETER4FNVPROC
epoxy_glProgramNamedParameter4fNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_fragment_program, 1915 /* glProgramNamedParameter4fNV */);
}

static PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
epoxy_glProgramNamedParameter4fvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_fragment_program, 1916 /* glProgramNamedParameter4fvNV */);
}

static PFNGLPROGRAMPARAMETER4DNVPROC
epoxy_glProgramParameter4dNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 1917 /* glProgramParameter4dNV */);
}

static PFNGLPROGRAMPARAMETER4DVNVPROC
epoxy_glProgramParameter4dvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 1918 /* glProgramParameter4dvNV */);
}

static PFNGLPROGRAMPARAMETER4FNVPROC
epoxy_glProgramParameter4fNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 1919 /* glProgramParameter4fNV */);
}

static PFNGLPROGRAMPARAMETER4FVNVPROC
epoxy_glProgramParameter4fvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 1920 /* glProgramParameter4fvNV */);
}

static PFNGLPROGRAMPARAMETERIPROC
epoxy_glProgramParameteri_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_get_program_binary,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_geometry_shader4,
        GL_extension_GL_EXT_geometry_shader4,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1921 /* "glProgramParameteri" */,
        1921 /* "glProgramParameteri" */,
        1921 /* "glProgramParameteri" */,
        1922 /* "glProgramParameteriARB" */,
        1923 /* "glProgramParameteriEXT" */,
        1923 /* "glProgramParameteriEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1921] /* "glProgramParameteri" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMPARAMETERIARBPROC
epoxy_glProgramParameteriARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_geometry_shader4,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_get_program_binary,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_geometry_shader4,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1922 /* "glProgramParameteriARB" */,
        1921 /* "glProgramParameteri" */,
        1921 /* "glProgramParameteri" */,
        1921 /* "glProgramParameteri" */,
        1923 /* "glProgramParameteriEXT" */,
        1923 /* "glProgramParameteriEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1922] /* "glProgramParameteriARB" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMPARAMETERIEXTPROC
epoxy_glProgramParameteriEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_geometry_shader4,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_get_program_binary,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_geometry_shader4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1923 /* "glProgramParameteriEXT" */,
        1923 /* "glProgramParameteriEXT" */,
        1921 /* "glProgramParameteri" */,
        1921 /* "glProgramParameteri" */,
        1921 /* "glProgramParameteri" */,
        1922 /* "glProgramParameteriARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1923] /* "glProgramParameteriEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMPARAMETERS4DVNVPROC
epoxy_glProgramParameters4dvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 1924 /* glProgramParameters4dvNV */);
}

static PFNGLPROGRAMPARAMETERS4FVNVPROC
epoxy_glProgramParameters4fvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 1925 /* glProgramParameters4fvNV */);
}

static PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC
epoxy_glProgramPathFragmentInputGenNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 1926 /* glProgramPathFragmentInputGenNV */);
}

static PFNGLPROGRAMSTRINGARBPROC
epoxy_glProgramStringARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_fragment_program,
        GL_extension_GL_ARB_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1927 /* "glProgramStringARB" */,
        1927 /* "glProgramStringARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1927] /* "glProgramStringARB" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC
epoxy_glProgramSubroutineParametersuivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_gpu_program5, 1928 /* glProgramSubroutineParametersuivNV */);
}

static PFNGLPROGRAMUNIFORM1DPROC
epoxy_glProgramUniform1d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1929 /* "glProgramUniform1d" */,
        1929 /* "glProgramUniform1d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1929] /* "glProgramUniform1d" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1DEXTPROC
epoxy_glProgramUniform1dEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1930 /* glProgramUniform1dEXT */);
}

static PFNGLPROGRAMUNIFORM1DVPROC
epoxy_glProgramUniform1dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1931 /* "glProgramUniform1dv" */,
        1931 /* "glProgramUniform1dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1931] /* "glProgramUniform1dv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1DVEXTPROC
epoxy_glProgramUniform1dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1932 /* glProgramUniform1dvEXT */);
}

static PFNGLPROGRAMUNIFORM1FPROC
epoxy_glProgramUniform1f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1933 /* "glProgramUniform1f" */,
        1933 /* "glProgramUniform1f" */,
        1933 /* "glProgramUniform1f" */,
        1934 /* "glProgramUniform1fEXT" */,
        1934 /* "glProgramUniform1fEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1933] /* "glProgramUniform1f" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1FEXTPROC
epoxy_glProgramUniform1fEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1934 /* "glProgramUniform1fEXT" */,
        1934 /* "glProgramUniform1fEXT" */,
        1933 /* "glProgramUniform1f" */,
        1933 /* "glProgramUniform1f" */,
        1933 /* "glProgramUniform1f" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1934] /* "glProgramUniform1fEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1FVPROC
epoxy_glProgramUniform1fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1935 /* "glProgramUniform1fv" */,
        1935 /* "glProgramUniform1fv" */,
        1935 /* "glProgramUniform1fv" */,
        1936 /* "glProgramUniform1fvEXT" */,
        1936 /* "glProgramUniform1fvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1935] /* "glProgramUniform1fv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1FVEXTPROC
epoxy_glProgramUniform1fvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1936 /* "glProgramUniform1fvEXT" */,
        1936 /* "glProgramUniform1fvEXT" */,
        1935 /* "glProgramUniform1fv" */,
        1935 /* "glProgramUniform1fv" */,
        1935 /* "glProgramUniform1fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1936] /* "glProgramUniform1fvEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1IPROC
epoxy_glProgramUniform1i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1937 /* "glProgramUniform1i" */,
        1937 /* "glProgramUniform1i" */,
        1937 /* "glProgramUniform1i" */,
        1942 /* "glProgramUniform1iEXT" */,
        1942 /* "glProgramUniform1iEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1937] /* "glProgramUniform1i" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1I64ARBPROC
epoxy_glProgramUniform1i64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1938 /* glProgramUniform1i64ARB */);
}

static PFNGLPROGRAMUNIFORM1I64NVPROC
epoxy_glProgramUniform1i64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1939 /* "glProgramUniform1i64NV" */,
        1939 /* "glProgramUniform1i64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1939] /* "glProgramUniform1i64NV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1I64VARBPROC
epoxy_glProgramUniform1i64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1940 /* glProgramUniform1i64vARB */);
}

static PFNGLPROGRAMUNIFORM1I64VNVPROC
epoxy_glProgramUniform1i64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1941 /* "glProgramUniform1i64vNV" */,
        1941 /* "glProgramUniform1i64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1941] /* "glProgramUniform1i64vNV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1IEXTPROC
epoxy_glProgramUniform1iEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1942 /* "glProgramUniform1iEXT" */,
        1942 /* "glProgramUniform1iEXT" */,
        1937 /* "glProgramUniform1i" */,
        1937 /* "glProgramUniform1i" */,
        1937 /* "glProgramUniform1i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1942] /* "glProgramUniform1iEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1IVPROC
epoxy_glProgramUniform1iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1943 /* "glProgramUniform1iv" */,
        1943 /* "glProgramUniform1iv" */,
        1943 /* "glProgramUniform1iv" */,
        1944 /* "glProgramUniform1ivEXT" */,
        1944 /* "glProgramUniform1ivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1943] /* "glProgramUniform1iv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1IVEXTPROC
epoxy_glProgramUniform1ivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1944 /* "glProgramUniform1ivEXT" */,
        1944 /* "glProgramUniform1ivEXT" */,
        1943 /* "glProgramUniform1iv" */,
        1943 /* "glProgramUniform1iv" */,
        1943 /* "glProgramUniform1iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1944] /* "glProgramUniform1ivEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1UIPROC
epoxy_glProgramUniform1ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1945 /* "glProgramUniform1ui" */,
        1945 /* "glProgramUniform1ui" */,
        1945 /* "glProgramUniform1ui" */,
        1950 /* "glProgramUniform1uiEXT" */,
        1950 /* "glProgramUniform1uiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1945] /* "glProgramUniform1ui" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1UI64ARBPROC
epoxy_glProgramUniform1ui64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1946 /* glProgramUniform1ui64ARB */);
}

static PFNGLPROGRAMUNIFORM1UI64NVPROC
epoxy_glProgramUniform1ui64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1947 /* "glProgramUniform1ui64NV" */,
        1947 /* "glProgramUniform1ui64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1947] /* "glProgramUniform1ui64NV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1UI64VARBPROC
epoxy_glProgramUniform1ui64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1948 /* glProgramUniform1ui64vARB */);
}

static PFNGLPROGRAMUNIFORM1UI64VNVPROC
epoxy_glProgramUniform1ui64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1949 /* "glProgramUniform1ui64vNV" */,
        1949 /* "glProgramUniform1ui64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1949] /* "glProgramUniform1ui64vNV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1UIEXTPROC
epoxy_glProgramUniform1uiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1950 /* "glProgramUniform1uiEXT" */,
        1950 /* "glProgramUniform1uiEXT" */,
        1945 /* "glProgramUniform1ui" */,
        1945 /* "glProgramUniform1ui" */,
        1945 /* "glProgramUniform1ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1950] /* "glProgramUniform1uiEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1UIVPROC
epoxy_glProgramUniform1uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1951 /* "glProgramUniform1uiv" */,
        1951 /* "glProgramUniform1uiv" */,
        1951 /* "glProgramUniform1uiv" */,
        1952 /* "glProgramUniform1uivEXT" */,
        1952 /* "glProgramUniform1uivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1951] /* "glProgramUniform1uiv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM1UIVEXTPROC
epoxy_glProgramUniform1uivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1952 /* "glProgramUniform1uivEXT" */,
        1952 /* "glProgramUniform1uivEXT" */,
        1951 /* "glProgramUniform1uiv" */,
        1951 /* "glProgramUniform1uiv" */,
        1951 /* "glProgramUniform1uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1952] /* "glProgramUniform1uivEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2DPROC
epoxy_glProgramUniform2d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1953 /* "glProgramUniform2d" */,
        1953 /* "glProgramUniform2d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1953] /* "glProgramUniform2d" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2DEXTPROC
epoxy_glProgramUniform2dEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1954 /* glProgramUniform2dEXT */);
}

static PFNGLPROGRAMUNIFORM2DVPROC
epoxy_glProgramUniform2dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1955 /* "glProgramUniform2dv" */,
        1955 /* "glProgramUniform2dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1955] /* "glProgramUniform2dv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2DVEXTPROC
epoxy_glProgramUniform2dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1956 /* glProgramUniform2dvEXT */);
}

static PFNGLPROGRAMUNIFORM2FPROC
epoxy_glProgramUniform2f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1957 /* "glProgramUniform2f" */,
        1957 /* "glProgramUniform2f" */,
        1957 /* "glProgramUniform2f" */,
        1958 /* "glProgramUniform2fEXT" */,
        1958 /* "glProgramUniform2fEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1957] /* "glProgramUniform2f" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2FEXTPROC
epoxy_glProgramUniform2fEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1958 /* "glProgramUniform2fEXT" */,
        1958 /* "glProgramUniform2fEXT" */,
        1957 /* "glProgramUniform2f" */,
        1957 /* "glProgramUniform2f" */,
        1957 /* "glProgramUniform2f" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1958] /* "glProgramUniform2fEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2FVPROC
epoxy_glProgramUniform2fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1959 /* "glProgramUniform2fv" */,
        1959 /* "glProgramUniform2fv" */,
        1959 /* "glProgramUniform2fv" */,
        1960 /* "glProgramUniform2fvEXT" */,
        1960 /* "glProgramUniform2fvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1959] /* "glProgramUniform2fv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2FVEXTPROC
epoxy_glProgramUniform2fvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1960 /* "glProgramUniform2fvEXT" */,
        1960 /* "glProgramUniform2fvEXT" */,
        1959 /* "glProgramUniform2fv" */,
        1959 /* "glProgramUniform2fv" */,
        1959 /* "glProgramUniform2fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1960] /* "glProgramUniform2fvEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2IPROC
epoxy_glProgramUniform2i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1961 /* "glProgramUniform2i" */,
        1961 /* "glProgramUniform2i" */,
        1961 /* "glProgramUniform2i" */,
        1966 /* "glProgramUniform2iEXT" */,
        1966 /* "glProgramUniform2iEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1961] /* "glProgramUniform2i" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2I64ARBPROC
epoxy_glProgramUniform2i64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1962 /* glProgramUniform2i64ARB */);
}

static PFNGLPROGRAMUNIFORM2I64NVPROC
epoxy_glProgramUniform2i64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1963 /* "glProgramUniform2i64NV" */,
        1963 /* "glProgramUniform2i64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1963] /* "glProgramUniform2i64NV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2I64VARBPROC
epoxy_glProgramUniform2i64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1964 /* glProgramUniform2i64vARB */);
}

static PFNGLPROGRAMUNIFORM2I64VNVPROC
epoxy_glProgramUniform2i64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1965 /* "glProgramUniform2i64vNV" */,
        1965 /* "glProgramUniform2i64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1965] /* "glProgramUniform2i64vNV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2IEXTPROC
epoxy_glProgramUniform2iEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1966 /* "glProgramUniform2iEXT" */,
        1966 /* "glProgramUniform2iEXT" */,
        1961 /* "glProgramUniform2i" */,
        1961 /* "glProgramUniform2i" */,
        1961 /* "glProgramUniform2i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1966] /* "glProgramUniform2iEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2IVPROC
epoxy_glProgramUniform2iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1967 /* "glProgramUniform2iv" */,
        1967 /* "glProgramUniform2iv" */,
        1967 /* "glProgramUniform2iv" */,
        1968 /* "glProgramUniform2ivEXT" */,
        1968 /* "glProgramUniform2ivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1967] /* "glProgramUniform2iv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2IVEXTPROC
epoxy_glProgramUniform2ivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1968 /* "glProgramUniform2ivEXT" */,
        1968 /* "glProgramUniform2ivEXT" */,
        1967 /* "glProgramUniform2iv" */,
        1967 /* "glProgramUniform2iv" */,
        1967 /* "glProgramUniform2iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1968] /* "glProgramUniform2ivEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2UIPROC
epoxy_glProgramUniform2ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1969 /* "glProgramUniform2ui" */,
        1969 /* "glProgramUniform2ui" */,
        1969 /* "glProgramUniform2ui" */,
        1974 /* "glProgramUniform2uiEXT" */,
        1974 /* "glProgramUniform2uiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1969] /* "glProgramUniform2ui" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2UI64ARBPROC
epoxy_glProgramUniform2ui64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1970 /* glProgramUniform2ui64ARB */);
}

static PFNGLPROGRAMUNIFORM2UI64NVPROC
epoxy_glProgramUniform2ui64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1971 /* "glProgramUniform2ui64NV" */,
        1971 /* "glProgramUniform2ui64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1971] /* "glProgramUniform2ui64NV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2UI64VARBPROC
epoxy_glProgramUniform2ui64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1972 /* glProgramUniform2ui64vARB */);
}

static PFNGLPROGRAMUNIFORM2UI64VNVPROC
epoxy_glProgramUniform2ui64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1973 /* "glProgramUniform2ui64vNV" */,
        1973 /* "glProgramUniform2ui64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1973] /* "glProgramUniform2ui64vNV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2UIEXTPROC
epoxy_glProgramUniform2uiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1974 /* "glProgramUniform2uiEXT" */,
        1974 /* "glProgramUniform2uiEXT" */,
        1969 /* "glProgramUniform2ui" */,
        1969 /* "glProgramUniform2ui" */,
        1969 /* "glProgramUniform2ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1974] /* "glProgramUniform2uiEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2UIVPROC
epoxy_glProgramUniform2uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1975 /* "glProgramUniform2uiv" */,
        1975 /* "glProgramUniform2uiv" */,
        1975 /* "glProgramUniform2uiv" */,
        1976 /* "glProgramUniform2uivEXT" */,
        1976 /* "glProgramUniform2uivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1975] /* "glProgramUniform2uiv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM2UIVEXTPROC
epoxy_glProgramUniform2uivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1976 /* "glProgramUniform2uivEXT" */,
        1976 /* "glProgramUniform2uivEXT" */,
        1975 /* "glProgramUniform2uiv" */,
        1975 /* "glProgramUniform2uiv" */,
        1975 /* "glProgramUniform2uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1976] /* "glProgramUniform2uivEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3DPROC
epoxy_glProgramUniform3d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1977 /* "glProgramUniform3d" */,
        1977 /* "glProgramUniform3d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1977] /* "glProgramUniform3d" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3DEXTPROC
epoxy_glProgramUniform3dEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1978 /* glProgramUniform3dEXT */);
}

static PFNGLPROGRAMUNIFORM3DVPROC
epoxy_glProgramUniform3dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1979 /* "glProgramUniform3dv" */,
        1979 /* "glProgramUniform3dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1979] /* "glProgramUniform3dv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3DVEXTPROC
epoxy_glProgramUniform3dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 1980 /* glProgramUniform3dvEXT */);
}

static PFNGLPROGRAMUNIFORM3FPROC
epoxy_glProgramUniform3f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1981 /* "glProgramUniform3f" */,
        1981 /* "glProgramUniform3f" */,
        1981 /* "glProgramUniform3f" */,
        1982 /* "glProgramUniform3fEXT" */,
        1982 /* "glProgramUniform3fEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1981] /* "glProgramUniform3f" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3FEXTPROC
epoxy_glProgramUniform3fEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1982 /* "glProgramUniform3fEXT" */,
        1982 /* "glProgramUniform3fEXT" */,
        1981 /* "glProgramUniform3f" */,
        1981 /* "glProgramUniform3f" */,
        1981 /* "glProgramUniform3f" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1982] /* "glProgramUniform3fEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3FVPROC
epoxy_glProgramUniform3fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1983 /* "glProgramUniform3fv" */,
        1983 /* "glProgramUniform3fv" */,
        1983 /* "glProgramUniform3fv" */,
        1984 /* "glProgramUniform3fvEXT" */,
        1984 /* "glProgramUniform3fvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1983] /* "glProgramUniform3fv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3FVEXTPROC
epoxy_glProgramUniform3fvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1984 /* "glProgramUniform3fvEXT" */,
        1984 /* "glProgramUniform3fvEXT" */,
        1983 /* "glProgramUniform3fv" */,
        1983 /* "glProgramUniform3fv" */,
        1983 /* "glProgramUniform3fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1984] /* "glProgramUniform3fvEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3IPROC
epoxy_glProgramUniform3i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1985 /* "glProgramUniform3i" */,
        1985 /* "glProgramUniform3i" */,
        1985 /* "glProgramUniform3i" */,
        1990 /* "glProgramUniform3iEXT" */,
        1990 /* "glProgramUniform3iEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1985] /* "glProgramUniform3i" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3I64ARBPROC
epoxy_glProgramUniform3i64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1986 /* glProgramUniform3i64ARB */);
}

static PFNGLPROGRAMUNIFORM3I64NVPROC
epoxy_glProgramUniform3i64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1987 /* "glProgramUniform3i64NV" */,
        1987 /* "glProgramUniform3i64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1987] /* "glProgramUniform3i64NV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3I64VARBPROC
epoxy_glProgramUniform3i64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1988 /* glProgramUniform3i64vARB */);
}

static PFNGLPROGRAMUNIFORM3I64VNVPROC
epoxy_glProgramUniform3i64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1989 /* "glProgramUniform3i64vNV" */,
        1989 /* "glProgramUniform3i64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1989] /* "glProgramUniform3i64vNV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3IEXTPROC
epoxy_glProgramUniform3iEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1990 /* "glProgramUniform3iEXT" */,
        1990 /* "glProgramUniform3iEXT" */,
        1985 /* "glProgramUniform3i" */,
        1985 /* "glProgramUniform3i" */,
        1985 /* "glProgramUniform3i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1990] /* "glProgramUniform3iEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3IVPROC
epoxy_glProgramUniform3iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1991 /* "glProgramUniform3iv" */,
        1991 /* "glProgramUniform3iv" */,
        1991 /* "glProgramUniform3iv" */,
        1992 /* "glProgramUniform3ivEXT" */,
        1992 /* "glProgramUniform3ivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1991] /* "glProgramUniform3iv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3IVEXTPROC
epoxy_glProgramUniform3ivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1992 /* "glProgramUniform3ivEXT" */,
        1992 /* "glProgramUniform3ivEXT" */,
        1991 /* "glProgramUniform3iv" */,
        1991 /* "glProgramUniform3iv" */,
        1991 /* "glProgramUniform3iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1992] /* "glProgramUniform3ivEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3UIPROC
epoxy_glProgramUniform3ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1993 /* "glProgramUniform3ui" */,
        1993 /* "glProgramUniform3ui" */,
        1993 /* "glProgramUniform3ui" */,
        1998 /* "glProgramUniform3uiEXT" */,
        1998 /* "glProgramUniform3uiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1993] /* "glProgramUniform3ui" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3UI64ARBPROC
epoxy_glProgramUniform3ui64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1994 /* glProgramUniform3ui64ARB */);
}

static PFNGLPROGRAMUNIFORM3UI64NVPROC
epoxy_glProgramUniform3ui64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1995 /* "glProgramUniform3ui64NV" */,
        1995 /* "glProgramUniform3ui64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1995] /* "glProgramUniform3ui64NV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3UI64VARBPROC
epoxy_glProgramUniform3ui64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 1996 /* glProgramUniform3ui64vARB */);
}

static PFNGLPROGRAMUNIFORM3UI64VNVPROC
epoxy_glProgramUniform3ui64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1997 /* "glProgramUniform3ui64vNV" */,
        1997 /* "glProgramUniform3ui64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1997] /* "glProgramUniform3ui64vNV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3UIEXTPROC
epoxy_glProgramUniform3uiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1998 /* "glProgramUniform3uiEXT" */,
        1998 /* "glProgramUniform3uiEXT" */,
        1993 /* "glProgramUniform3ui" */,
        1993 /* "glProgramUniform3ui" */,
        1993 /* "glProgramUniform3ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1998] /* "glProgramUniform3uiEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3UIVPROC
epoxy_glProgramUniform3uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        1999 /* "glProgramUniform3uiv" */,
        1999 /* "glProgramUniform3uiv" */,
        1999 /* "glProgramUniform3uiv" */,
        2000 /* "glProgramUniform3uivEXT" */,
        2000 /* "glProgramUniform3uivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[1999] /* "glProgramUniform3uiv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM3UIVEXTPROC
epoxy_glProgramUniform3uivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2000 /* "glProgramUniform3uivEXT" */,
        2000 /* "glProgramUniform3uivEXT" */,
        1999 /* "glProgramUniform3uiv" */,
        1999 /* "glProgramUniform3uiv" */,
        1999 /* "glProgramUniform3uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2000] /* "glProgramUniform3uivEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4DPROC
epoxy_glProgramUniform4d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2001 /* "glProgramUniform4d" */,
        2001 /* "glProgramUniform4d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2001] /* "glProgramUniform4d" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4DEXTPROC
epoxy_glProgramUniform4dEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2002 /* glProgramUniform4dEXT */);
}

static PFNGLPROGRAMUNIFORM4DVPROC
epoxy_glProgramUniform4dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2003 /* "glProgramUniform4dv" */,
        2003 /* "glProgramUniform4dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2003] /* "glProgramUniform4dv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4DVEXTPROC
epoxy_glProgramUniform4dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2004 /* glProgramUniform4dvEXT */);
}

static PFNGLPROGRAMUNIFORM4FPROC
epoxy_glProgramUniform4f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2005 /* "glProgramUniform4f" */,
        2005 /* "glProgramUniform4f" */,
        2005 /* "glProgramUniform4f" */,
        2006 /* "glProgramUniform4fEXT" */,
        2006 /* "glProgramUniform4fEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2005] /* "glProgramUniform4f" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4FEXTPROC
epoxy_glProgramUniform4fEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2006 /* "glProgramUniform4fEXT" */,
        2006 /* "glProgramUniform4fEXT" */,
        2005 /* "glProgramUniform4f" */,
        2005 /* "glProgramUniform4f" */,
        2005 /* "glProgramUniform4f" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2006] /* "glProgramUniform4fEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4FVPROC
epoxy_glProgramUniform4fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2007 /* "glProgramUniform4fv" */,
        2007 /* "glProgramUniform4fv" */,
        2007 /* "glProgramUniform4fv" */,
        2008 /* "glProgramUniform4fvEXT" */,
        2008 /* "glProgramUniform4fvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2007] /* "glProgramUniform4fv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4FVEXTPROC
epoxy_glProgramUniform4fvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2008 /* "glProgramUniform4fvEXT" */,
        2008 /* "glProgramUniform4fvEXT" */,
        2007 /* "glProgramUniform4fv" */,
        2007 /* "glProgramUniform4fv" */,
        2007 /* "glProgramUniform4fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2008] /* "glProgramUniform4fvEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4IPROC
epoxy_glProgramUniform4i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2009 /* "glProgramUniform4i" */,
        2009 /* "glProgramUniform4i" */,
        2009 /* "glProgramUniform4i" */,
        2014 /* "glProgramUniform4iEXT" */,
        2014 /* "glProgramUniform4iEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2009] /* "glProgramUniform4i" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4I64ARBPROC
epoxy_glProgramUniform4i64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2010 /* glProgramUniform4i64ARB */);
}

static PFNGLPROGRAMUNIFORM4I64NVPROC
epoxy_glProgramUniform4i64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2011 /* "glProgramUniform4i64NV" */,
        2011 /* "glProgramUniform4i64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2011] /* "glProgramUniform4i64NV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4I64VARBPROC
epoxy_glProgramUniform4i64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2012 /* glProgramUniform4i64vARB */);
}

static PFNGLPROGRAMUNIFORM4I64VNVPROC
epoxy_glProgramUniform4i64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2013 /* "glProgramUniform4i64vNV" */,
        2013 /* "glProgramUniform4i64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2013] /* "glProgramUniform4i64vNV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4IEXTPROC
epoxy_glProgramUniform4iEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2014 /* "glProgramUniform4iEXT" */,
        2014 /* "glProgramUniform4iEXT" */,
        2009 /* "glProgramUniform4i" */,
        2009 /* "glProgramUniform4i" */,
        2009 /* "glProgramUniform4i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2014] /* "glProgramUniform4iEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4IVPROC
epoxy_glProgramUniform4iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2015 /* "glProgramUniform4iv" */,
        2015 /* "glProgramUniform4iv" */,
        2015 /* "glProgramUniform4iv" */,
        2016 /* "glProgramUniform4ivEXT" */,
        2016 /* "glProgramUniform4ivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2015] /* "glProgramUniform4iv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4IVEXTPROC
epoxy_glProgramUniform4ivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2016 /* "glProgramUniform4ivEXT" */,
        2016 /* "glProgramUniform4ivEXT" */,
        2015 /* "glProgramUniform4iv" */,
        2015 /* "glProgramUniform4iv" */,
        2015 /* "glProgramUniform4iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2016] /* "glProgramUniform4ivEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4UIPROC
epoxy_glProgramUniform4ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2017 /* "glProgramUniform4ui" */,
        2017 /* "glProgramUniform4ui" */,
        2017 /* "glProgramUniform4ui" */,
        2022 /* "glProgramUniform4uiEXT" */,
        2022 /* "glProgramUniform4uiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2017] /* "glProgramUniform4ui" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4UI64ARBPROC
epoxy_glProgramUniform4ui64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2018 /* glProgramUniform4ui64ARB */);
}

static PFNGLPROGRAMUNIFORM4UI64NVPROC
epoxy_glProgramUniform4ui64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2019 /* "glProgramUniform4ui64NV" */,
        2019 /* "glProgramUniform4ui64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2019] /* "glProgramUniform4ui64NV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4UI64VARBPROC
epoxy_glProgramUniform4ui64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2020 /* glProgramUniform4ui64vARB */);
}

static PFNGLPROGRAMUNIFORM4UI64VNVPROC
epoxy_glProgramUniform4ui64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2021 /* "glProgramUniform4ui64vNV" */,
        2021 /* "glProgramUniform4ui64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2021] /* "glProgramUniform4ui64vNV" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4UIEXTPROC
epoxy_glProgramUniform4uiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2022 /* "glProgramUniform4uiEXT" */,
        2022 /* "glProgramUniform4uiEXT" */,
        2017 /* "glProgramUniform4ui" */,
        2017 /* "glProgramUniform4ui" */,
        2017 /* "glProgramUniform4ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2022] /* "glProgramUniform4uiEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4UIVPROC
epoxy_glProgramUniform4uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2023 /* "glProgramUniform4uiv" */,
        2023 /* "glProgramUniform4uiv" */,
        2023 /* "glProgramUniform4uiv" */,
        2024 /* "glProgramUniform4uivEXT" */,
        2024 /* "glProgramUniform4uivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2023] /* "glProgramUniform4uiv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORM4UIVEXTPROC
epoxy_glProgramUniform4uivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2024 /* "glProgramUniform4uivEXT" */,
        2024 /* "glProgramUniform4uivEXT" */,
        2023 /* "glProgramUniform4uiv" */,
        2023 /* "glProgramUniform4uiv" */,
        2023 /* "glProgramUniform4uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2024] /* "glProgramUniform4uivEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC
epoxy_glProgramUniformHandleui64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 2025 /* glProgramUniformHandleui64ARB */);
}

static PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC
epoxy_glProgramUniformHandleui64NV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_texture, 2026 /* glProgramUniformHandleui64NV */);
}

static PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC
epoxy_glProgramUniformHandleui64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 2027 /* glProgramUniformHandleui64vARB */);
}

static PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC
epoxy_glProgramUniformHandleui64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_texture, 2028 /* glProgramUniformHandleui64vNV */);
}

static PFNGLPROGRAMUNIFORMMATRIX2DVPROC
epoxy_glProgramUniformMatrix2dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2029 /* "glProgramUniformMatrix2dv" */,
        2029 /* "glProgramUniformMatrix2dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2029] /* "glProgramUniformMatrix2dv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC
epoxy_glProgramUniformMatrix2dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2030 /* glProgramUniformMatrix2dvEXT */);
}

static PFNGLPROGRAMUNIFORMMATRIX2FVPROC
epoxy_glProgramUniformMatrix2fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2031 /* "glProgramUniformMatrix2fv" */,
        2031 /* "glProgramUniformMatrix2fv" */,
        2031 /* "glProgramUniformMatrix2fv" */,
        2032 /* "glProgramUniformMatrix2fvEXT" */,
        2032 /* "glProgramUniformMatrix2fvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2031] /* "glProgramUniformMatrix2fv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
epoxy_glProgramUniformMatrix2fvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2032 /* "glProgramUniformMatrix2fvEXT" */,
        2032 /* "glProgramUniformMatrix2fvEXT" */,
        2031 /* "glProgramUniformMatrix2fv" */,
        2031 /* "glProgramUniformMatrix2fv" */,
        2031 /* "glProgramUniformMatrix2fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2032] /* "glProgramUniformMatrix2fvEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
epoxy_glProgramUniformMatrix2x3dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2033 /* "glProgramUniformMatrix2x3dv" */,
        2033 /* "glProgramUniformMatrix2x3dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2033] /* "glProgramUniformMatrix2x3dv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC
epoxy_glProgramUniformMatrix2x3dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2034 /* glProgramUniformMatrix2x3dvEXT */);
}

static PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
epoxy_glProgramUniformMatrix2x3fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2035 /* "glProgramUniformMatrix2x3fv" */,
        2035 /* "glProgramUniformMatrix2x3fv" */,
        2035 /* "glProgramUniformMatrix2x3fv" */,
        2036 /* "glProgramUniformMatrix2x3fvEXT" */,
        2036 /* "glProgramUniformMatrix2x3fvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2035] /* "glProgramUniformMatrix2x3fv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
epoxy_glProgramUniformMatrix2x3fvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2036 /* "glProgramUniformMatrix2x3fvEXT" */,
        2036 /* "glProgramUniformMatrix2x3fvEXT" */,
        2035 /* "glProgramUniformMatrix2x3fv" */,
        2035 /* "glProgramUniformMatrix2x3fv" */,
        2035 /* "glProgramUniformMatrix2x3fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2036] /* "glProgramUniformMatrix2x3fvEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
epoxy_glProgramUniformMatrix2x4dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2037 /* "glProgramUniformMatrix2x4dv" */,
        2037 /* "glProgramUniformMatrix2x4dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2037] /* "glProgramUniformMatrix2x4dv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC
epoxy_glProgramUniformMatrix2x4dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2038 /* glProgramUniformMatrix2x4dvEXT */);
}

static PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
epoxy_glProgramUniformMatrix2x4fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2039 /* "glProgramUniformMatrix2x4fv" */,
        2039 /* "glProgramUniformMatrix2x4fv" */,
        2039 /* "glProgramUniformMatrix2x4fv" */,
        2040 /* "glProgramUniformMatrix2x4fvEXT" */,
        2040 /* "glProgramUniformMatrix2x4fvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2039] /* "glProgramUniformMatrix2x4fv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
epoxy_glProgramUniformMatrix2x4fvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2040 /* "glProgramUniformMatrix2x4fvEXT" */,
        2040 /* "glProgramUniformMatrix2x4fvEXT" */,
        2039 /* "glProgramUniformMatrix2x4fv" */,
        2039 /* "glProgramUniformMatrix2x4fv" */,
        2039 /* "glProgramUniformMatrix2x4fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2040] /* "glProgramUniformMatrix2x4fvEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX3DVPROC
epoxy_glProgramUniformMatrix3dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2041 /* "glProgramUniformMatrix3dv" */,
        2041 /* "glProgramUniformMatrix3dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2041] /* "glProgramUniformMatrix3dv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC
epoxy_glProgramUniformMatrix3dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2042 /* glProgramUniformMatrix3dvEXT */);
}

static PFNGLPROGRAMUNIFORMMATRIX3FVPROC
epoxy_glProgramUniformMatrix3fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2043 /* "glProgramUniformMatrix3fv" */,
        2043 /* "glProgramUniformMatrix3fv" */,
        2043 /* "glProgramUniformMatrix3fv" */,
        2044 /* "glProgramUniformMatrix3fvEXT" */,
        2044 /* "glProgramUniformMatrix3fvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2043] /* "glProgramUniformMatrix3fv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
epoxy_glProgramUniformMatrix3fvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2044 /* "glProgramUniformMatrix3fvEXT" */,
        2044 /* "glProgramUniformMatrix3fvEXT" */,
        2043 /* "glProgramUniformMatrix3fv" */,
        2043 /* "glProgramUniformMatrix3fv" */,
        2043 /* "glProgramUniformMatrix3fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2044] /* "glProgramUniformMatrix3fvEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
epoxy_glProgramUniformMatrix3x2dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2045 /* "glProgramUniformMatrix3x2dv" */,
        2045 /* "glProgramUniformMatrix3x2dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2045] /* "glProgramUniformMatrix3x2dv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC
epoxy_glProgramUniformMatrix3x2dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2046 /* glProgramUniformMatrix3x2dvEXT */);
}

static PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
epoxy_glProgramUniformMatrix3x2fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2047 /* "glProgramUniformMatrix3x2fv" */,
        2047 /* "glProgramUniformMatrix3x2fv" */,
        2047 /* "glProgramUniformMatrix3x2fv" */,
        2048 /* "glProgramUniformMatrix3x2fvEXT" */,
        2048 /* "glProgramUniformMatrix3x2fvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2047] /* "glProgramUniformMatrix3x2fv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
epoxy_glProgramUniformMatrix3x2fvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2048 /* "glProgramUniformMatrix3x2fvEXT" */,
        2048 /* "glProgramUniformMatrix3x2fvEXT" */,
        2047 /* "glProgramUniformMatrix3x2fv" */,
        2047 /* "glProgramUniformMatrix3x2fv" */,
        2047 /* "glProgramUniformMatrix3x2fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2048] /* "glProgramUniformMatrix3x2fvEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
epoxy_glProgramUniformMatrix3x4dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2049 /* "glProgramUniformMatrix3x4dv" */,
        2049 /* "glProgramUniformMatrix3x4dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2049] /* "glProgramUniformMatrix3x4dv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC
epoxy_glProgramUniformMatrix3x4dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2050 /* glProgramUniformMatrix3x4dvEXT */);
}

static PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
epoxy_glProgramUniformMatrix3x4fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2051 /* "glProgramUniformMatrix3x4fv" */,
        2051 /* "glProgramUniformMatrix3x4fv" */,
        2051 /* "glProgramUniformMatrix3x4fv" */,
        2052 /* "glProgramUniformMatrix3x4fvEXT" */,
        2052 /* "glProgramUniformMatrix3x4fvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2051] /* "glProgramUniformMatrix3x4fv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
epoxy_glProgramUniformMatrix3x4fvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2052 /* "glProgramUniformMatrix3x4fvEXT" */,
        2052 /* "glProgramUniformMatrix3x4fvEXT" */,
        2051 /* "glProgramUniformMatrix3x4fv" */,
        2051 /* "glProgramUniformMatrix3x4fv" */,
        2051 /* "glProgramUniformMatrix3x4fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2052] /* "glProgramUniformMatrix3x4fvEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX4DVPROC
epoxy_glProgramUniformMatrix4dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2053 /* "glProgramUniformMatrix4dv" */,
        2053 /* "glProgramUniformMatrix4dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2053] /* "glProgramUniformMatrix4dv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC
epoxy_glProgramUniformMatrix4dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2054 /* glProgramUniformMatrix4dvEXT */);
}

static PFNGLPROGRAMUNIFORMMATRIX4FVPROC
epoxy_glProgramUniformMatrix4fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2055 /* "glProgramUniformMatrix4fv" */,
        2055 /* "glProgramUniformMatrix4fv" */,
        2055 /* "glProgramUniformMatrix4fv" */,
        2056 /* "glProgramUniformMatrix4fvEXT" */,
        2056 /* "glProgramUniformMatrix4fvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2055] /* "glProgramUniformMatrix4fv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
epoxy_glProgramUniformMatrix4fvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2056 /* "glProgramUniformMatrix4fvEXT" */,
        2056 /* "glProgramUniformMatrix4fvEXT" */,
        2055 /* "glProgramUniformMatrix4fv" */,
        2055 /* "glProgramUniformMatrix4fv" */,
        2055 /* "glProgramUniformMatrix4fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2056] /* "glProgramUniformMatrix4fvEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
epoxy_glProgramUniformMatrix4x2dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2057 /* "glProgramUniformMatrix4x2dv" */,
        2057 /* "glProgramUniformMatrix4x2dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2057] /* "glProgramUniformMatrix4x2dv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC
epoxy_glProgramUniformMatrix4x2dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2058 /* glProgramUniformMatrix4x2dvEXT */);
}

static PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
epoxy_glProgramUniformMatrix4x2fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2059 /* "glProgramUniformMatrix4x2fv" */,
        2059 /* "glProgramUniformMatrix4x2fv" */,
        2059 /* "glProgramUniformMatrix4x2fv" */,
        2060 /* "glProgramUniformMatrix4x2fvEXT" */,
        2060 /* "glProgramUniformMatrix4x2fvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2059] /* "glProgramUniformMatrix4x2fv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
epoxy_glProgramUniformMatrix4x2fvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2060 /* "glProgramUniformMatrix4x2fvEXT" */,
        2060 /* "glProgramUniformMatrix4x2fvEXT" */,
        2059 /* "glProgramUniformMatrix4x2fv" */,
        2059 /* "glProgramUniformMatrix4x2fv" */,
        2059 /* "glProgramUniformMatrix4x2fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2060] /* "glProgramUniformMatrix4x2fvEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
epoxy_glProgramUniformMatrix4x3dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2061 /* "glProgramUniformMatrix4x3dv" */,
        2061 /* "glProgramUniformMatrix4x3dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2061] /* "glProgramUniformMatrix4x3dv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC
epoxy_glProgramUniformMatrix4x3dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2062 /* glProgramUniformMatrix4x3dvEXT */);
}

static PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
epoxy_glProgramUniformMatrix4x3fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2063 /* "glProgramUniformMatrix4x3fv" */,
        2063 /* "glProgramUniformMatrix4x3fv" */,
        2063 /* "glProgramUniformMatrix4x3fv" */,
        2064 /* "glProgramUniformMatrix4x3fvEXT" */,
        2064 /* "glProgramUniformMatrix4x3fvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2063] /* "glProgramUniformMatrix4x3fv" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
epoxy_glProgramUniformMatrix4x3fvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_separate_shader_objects,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2064 /* "glProgramUniformMatrix4x3fvEXT" */,
        2064 /* "glProgramUniformMatrix4x3fvEXT" */,
        2063 /* "glProgramUniformMatrix4x3fv" */,
        2063 /* "glProgramUniformMatrix4x3fv" */,
        2063 /* "glProgramUniformMatrix4x3fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2064] /* "glProgramUniformMatrix4x3fvEXT" */,
                                providers, entrypoints);
}

static PFNGLPROGRAMUNIFORMUI64NVPROC
epoxy_glProgramUniformui64NV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_shader_buffer_load, 2065 /* glProgramUniformui64NV */);
}

static PFNGLPROGRAMUNIFORMUI64VNVPROC
epoxy_glProgramUniformui64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_shader_buffer_load, 2066 /* glProgramUniformui64vNV */);
}

static PFNGLPROGRAMVERTEXLIMITNVPROC
epoxy_glProgramVertexLimitNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_geometry_program4, 2067 /* glProgramVertexLimitNV */);
}

static PFNGLPROVOKINGVERTEXPROC
epoxy_glProvokingVertex_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_provoking_vertex,
        GL_extension_GL_EXT_provoking_vertex,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2068 /* "glProvokingVertex" */,
        2068 /* "glProvokingVertex" */,
        2069 /* "glProvokingVertexEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2068] /* "glProvokingVertex" */,
                                providers, entrypoints);
}

static PFNGLPROVOKINGVERTEXEXTPROC
epoxy_glProvokingVertexEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_provoking_vertex,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_provoking_vertex,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2069 /* "glProvokingVertexEXT" */,
        2068 /* "glProvokingVertex" */,
        2068 /* "glProvokingVertex" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2069] /* "glProvokingVertexEXT" */,
                                providers, entrypoints);
}

static PFNGLPUSHATTRIBPROC
epoxy_glPushAttrib_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2070 /* glPushAttrib */);
}

static PFNGLPUSHCLIENTATTRIBPROC
epoxy_glPushClientAttrib_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_1, 2071 /* glPushClientAttrib */);
}

static PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC
epoxy_glPushClientAttribDefaultEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2072 /* glPushClientAttribDefaultEXT */);
}

static PFNGLPUSHDEBUGGROUPPROC
epoxy_glPushDebugGroup_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        GL_extension_GL_KHR_debug,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2073 /* "glPushDebugGroup" */,
        2073 /* "glPushDebugGroup" */,
        2073 /* "glPushDebugGroup" */,
        2074 /* "glPushDebugGroupKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2073] /* "glPushDebugGroup" */,
                                providers, entrypoints);
}

static PFNGLPUSHDEBUGGROUPKHRPROC
epoxy_glPushDebugGroupKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_debug,
        Desktop_OpenGL_4_3,
        GL_extension_GL_KHR_debug,
        OpenGL_ES_3_2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2074 /* "glPushDebugGroupKHR" */,
        2073 /* "glPushDebugGroup" */,
        2073 /* "glPushDebugGroup" */,
        2073 /* "glPushDebugGroup" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2074] /* "glPushDebugGroupKHR" */,
                                providers, entrypoints);
}

static PFNGLPUSHGROUPMARKEREXTPROC
epoxy_glPushGroupMarkerEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_debug_marker, 2075 /* glPushGroupMarkerEXT */);
}

static PFNGLPUSHMATRIXPROC
epoxy_glPushMatrix_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2076 /* "glPushMatrix" */,
        2076 /* "glPushMatrix" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2076] /* "glPushMatrix" */,
                                providers, entrypoints);
}

static PFNGLPUSHNAMEPROC
epoxy_glPushName_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2077 /* glPushName */);
}

static PFNGLQUERYCOUNTERPROC
epoxy_glQueryCounter_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_timer_query,
        GL_extension_GL_EXT_disjoint_timer_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2078 /* "glQueryCounter" */,
        2078 /* "glQueryCounter" */,
        2079 /* "glQueryCounterEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2078] /* "glQueryCounter" */,
                                providers, entrypoints);
}

static PFNGLQUERYCOUNTEREXTPROC
epoxy_glQueryCounterEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_disjoint_timer_query,
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_timer_query,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2079 /* "glQueryCounterEXT" */,
        2078 /* "glQueryCounter" */,
        2078 /* "glQueryCounter" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2079] /* "glQueryCounterEXT" */,
                                providers, entrypoints);
}

static PFNGLQUERYMATRIXXOESPROC
epoxy_glQueryMatrixxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_query_matrix, 2080 /* glQueryMatrixxOES */);
}

static PFNGLQUERYOBJECTPARAMETERUIAMDPROC
epoxy_glQueryObjectParameteruiAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_occlusion_query_event, 2081 /* glQueryObjectParameteruiAMD */);
}

static PFNGLRASTERPOS2DPROC
epoxy_glRasterPos2d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2082 /* glRasterPos2d */);
}

static PFNGLRASTERPOS2DVPROC
epoxy_glRasterPos2dv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2083 /* glRasterPos2dv */);
}

static PFNGLRASTERPOS2FPROC
epoxy_glRasterPos2f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2084 /* glRasterPos2f */);
}

static PFNGLRASTERPOS2FVPROC
epoxy_glRasterPos2fv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2085 /* glRasterPos2fv */);
}

static PFNGLRASTERPOS2IPROC
epoxy_glRasterPos2i_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2086 /* glRasterPos2i */);
}

static PFNGLRASTERPOS2IVPROC
epoxy_glRasterPos2iv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2087 /* glRasterPos2iv */);
}

static PFNGLRASTERPOS2SPROC
epoxy_glRasterPos2s_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2088 /* glRasterPos2s */);
}

static PFNGLRASTERPOS2SVPROC
epoxy_glRasterPos2sv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2089 /* glRasterPos2sv */);
}

static PFNGLRASTERPOS2XOESPROC
epoxy_glRasterPos2xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2090 /* glRasterPos2xOES */);
}

static PFNGLRASTERPOS2XVOESPROC
epoxy_glRasterPos2xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2091 /* glRasterPos2xvOES */);
}

static PFNGLRASTERPOS3DPROC
epoxy_glRasterPos3d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2092 /* glRasterPos3d */);
}

static PFNGLRASTERPOS3DVPROC
epoxy_glRasterPos3dv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2093 /* glRasterPos3dv */);
}

static PFNGLRASTERPOS3FPROC
epoxy_glRasterPos3f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2094 /* glRasterPos3f */);
}

static PFNGLRASTERPOS3FVPROC
epoxy_glRasterPos3fv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2095 /* glRasterPos3fv */);
}

static PFNGLRASTERPOS3IPROC
epoxy_glRasterPos3i_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2096 /* glRasterPos3i */);
}

static PFNGLRASTERPOS3IVPROC
epoxy_glRasterPos3iv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2097 /* glRasterPos3iv */);
}

static PFNGLRASTERPOS3SPROC
epoxy_glRasterPos3s_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2098 /* glRasterPos3s */);
}

static PFNGLRASTERPOS3SVPROC
epoxy_glRasterPos3sv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2099 /* glRasterPos3sv */);
}

static PFNGLRASTERPOS3XOESPROC
epoxy_glRasterPos3xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2100 /* glRasterPos3xOES */);
}

static PFNGLRASTERPOS3XVOESPROC
epoxy_glRasterPos3xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2101 /* glRasterPos3xvOES */);
}

static PFNGLRASTERPOS4DPROC
epoxy_glRasterPos4d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2102 /* glRasterPos4d */);
}

static PFNGLRASTERPOS4DVPROC
epoxy_glRasterPos4dv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2103 /* glRasterPos4dv */);
}

static PFNGLRASTERPOS4FPROC
epoxy_glRasterPos4f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2104 /* glRasterPos4f */);
}

static PFNGLRASTERPOS4FVPROC
epoxy_glRasterPos4fv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2105 /* glRasterPos4fv */);
}

static PFNGLRASTERPOS4IPROC
epoxy_glRasterPos4i_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2106 /* glRasterPos4i */);
}

static PFNGLRASTERPOS4IVPROC
epoxy_glRasterPos4iv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2107 /* glRasterPos4iv */);
}

static PFNGLRASTERPOS4SPROC
epoxy_glRasterPos4s_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2108 /* glRasterPos4s */);
}

static PFNGLRASTERPOS4SVPROC
epoxy_glRasterPos4sv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2109 /* glRasterPos4sv */);
}

static PFNGLRASTERPOS4XOESPROC
epoxy_glRasterPos4xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2110 /* glRasterPos4xOES */);
}

static PFNGLRASTERPOS4XVOESPROC
epoxy_glRasterPos4xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2111 /* glRasterPos4xvOES */);
}

static PFNGLRASTERSAMPLESEXTPROC
epoxy_glRasterSamplesEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_raster_multisample,
        GL_extension_GL_EXT_texture_filter_minmax,
        GL_extension_GL_NV_framebuffer_mixed_samples,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2112 /* "glRasterSamplesEXT" */,
        2112 /* "glRasterSamplesEXT" */,
        2112 /* "glRasterSamplesEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2112] /* "glRasterSamplesEXT" */,
                                providers, entrypoints);
}

static PFNGLREADBUFFERPROC
epoxy_glReadBuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2113 /* "glReadBuffer" */,
        2113 /* "glReadBuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2113] /* "glReadBuffer" */,
                                providers, entrypoints);
}

static PFNGLREADBUFFERINDEXEDEXTPROC
epoxy_glReadBufferIndexedEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_multiview_draw_buffers, 2114 /* glReadBufferIndexedEXT */);
}

static PFNGLREADBUFFERNVPROC
epoxy_glReadBufferNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_read_buffer, 2115 /* glReadBufferNV */);
}

static PFNGLREADINSTRUMENTSSGIXPROC
epoxy_glReadInstrumentsSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_instruments, 2116 /* glReadInstrumentsSGIX */);
}

static PFNGLREADPIXELSPROC
epoxy_glReadPixels_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2117 /* "glReadPixels" */,
        2117 /* "glReadPixels" */,
        2117 /* "glReadPixels" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2117] /* "glReadPixels" */,
                                providers, entrypoints);
}

static PFNGLREADNPIXELSPROC
epoxy_glReadnPixels_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_KHR_robustness,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_robustness,
        GL_extension_GL_EXT_robustness,
        GL_extension_GL_KHR_robustness,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2118 /* "glReadnPixels" */,
        2118 /* "glReadnPixels" */,
        2118 /* "glReadnPixels" */,
        2119 /* "glReadnPixelsARB" */,
        2120 /* "glReadnPixelsEXT" */,
        2121 /* "glReadnPixelsKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2118] /* "glReadnPixels" */,
                                providers, entrypoints);
}

static PFNGLREADNPIXELSARBPROC
epoxy_glReadnPixelsARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_robustness,
        Desktop_OpenGL_4_5,
        GL_extension_GL_KHR_robustness,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_robustness,
        GL_extension_GL_KHR_robustness,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2119 /* "glReadnPixelsARB" */,
        2118 /* "glReadnPixels" */,
        2118 /* "glReadnPixels" */,
        2118 /* "glReadnPixels" */,
        2120 /* "glReadnPixelsEXT" */,
        2121 /* "glReadnPixelsKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2119] /* "glReadnPixelsARB" */,
                                providers, entrypoints);
}

static PFNGLREADNPIXELSEXTPROC
epoxy_glReadnPixelsEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_robustness,
        Desktop_OpenGL_4_5,
        GL_extension_GL_KHR_robustness,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_robustness,
        GL_extension_GL_KHR_robustness,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2120 /* "glReadnPixelsEXT" */,
        2118 /* "glReadnPixels" */,
        2118 /* "glReadnPixels" */,
        2118 /* "glReadnPixels" */,
        2119 /* "glReadnPixelsARB" */,
        2121 /* "glReadnPixelsKHR" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2120] /* "glReadnPixelsEXT" */,
                                providers, entrypoints);
}

static PFNGLREADNPIXELSKHRPROC
epoxy_glReadnPixelsKHR_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_KHR_robustness,
        Desktop_OpenGL_4_5,
        GL_extension_GL_KHR_robustness,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_robustness,
        GL_extension_GL_EXT_robustness,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2121 /* "glReadnPixelsKHR" */,
        2118 /* "glReadnPixels" */,
        2118 /* "glReadnPixels" */,
        2118 /* "glReadnPixels" */,
        2119 /* "glReadnPixelsARB" */,
        2120 /* "glReadnPixelsEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2121] /* "glReadnPixelsKHR" */,
                                providers, entrypoints);
}

static PFNGLRECTDPROC
epoxy_glRectd_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2122 /* glRectd */);
}

static PFNGLRECTDVPROC
epoxy_glRectdv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2123 /* glRectdv */);
}

static PFNGLRECTFPROC
epoxy_glRectf_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2124 /* glRectf */);
}

static PFNGLRECTFVPROC
epoxy_glRectfv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2125 /* glRectfv */);
}

static PFNGLRECTIPROC
epoxy_glRecti_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2126 /* glRecti */);
}

static PFNGLRECTIVPROC
epoxy_glRectiv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2127 /* glRectiv */);
}

static PFNGLRECTSPROC
epoxy_glRects_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2128 /* glRects */);
}

static PFNGLRECTSVPROC
epoxy_glRectsv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2129 /* glRectsv */);
}

static PFNGLRECTXOESPROC
epoxy_glRectxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2130 /* glRectxOES */);
}

static PFNGLRECTXVOESPROC
epoxy_glRectxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2131 /* glRectxvOES */);
}

static PFNGLREFERENCEPLANESGIXPROC
epoxy_glReferencePlaneSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_reference_plane, 2132 /* glReferencePlaneSGIX */);
}

static PFNGLRELEASESHADERCOMPILERPROC
epoxy_glReleaseShaderCompiler_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_ES2_compatibility,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2133 /* "glReleaseShaderCompiler" */,
        2133 /* "glReleaseShaderCompiler" */,
        2133 /* "glReleaseShaderCompiler" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2133] /* "glReleaseShaderCompiler" */,
                                providers, entrypoints);
}

static PFNGLRENDERMODEPROC
epoxy_glRenderMode_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2134 /* glRenderMode */);
}

static PFNGLRENDERBUFFERSTORAGEPROC
epoxy_glRenderbufferStorage_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_framebuffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2135 /* "glRenderbufferStorage" */,
        2135 /* "glRenderbufferStorage" */,
        2135 /* "glRenderbufferStorage" */,
        2136 /* "glRenderbufferStorageEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2135] /* "glRenderbufferStorage" */,
                                providers, entrypoints);
}

static PFNGLRENDERBUFFERSTORAGEEXTPROC
epoxy_glRenderbufferStorageEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_object,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2136 /* "glRenderbufferStorageEXT" */,
        2135 /* "glRenderbufferStorage" */,
        2135 /* "glRenderbufferStorage" */,
        2135 /* "glRenderbufferStorage" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2136] /* "glRenderbufferStorageEXT" */,
                                providers, entrypoints);
}

static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
epoxy_glRenderbufferStorageMultisample_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_framebuffer_multisample,
        GL_extension_GL_EXT_multisampled_render_to_texture,
        GL_extension_GL_NV_framebuffer_multisample,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2137 /* "glRenderbufferStorageMultisample" */,
        2137 /* "glRenderbufferStorageMultisample" */,
        2137 /* "glRenderbufferStorageMultisample" */,
        2141 /* "glRenderbufferStorageMultisampleEXT" */,
        2141 /* "glRenderbufferStorageMultisampleEXT" */,
        2143 /* "glRenderbufferStorageMultisampleNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2137] /* "glRenderbufferStorageMultisample" */,
                                providers, entrypoints);
}

static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC
epoxy_glRenderbufferStorageMultisampleANGLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ANGLE_framebuffer_multisample, 2138 /* glRenderbufferStorageMultisampleANGLE */);
}

static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC
epoxy_glRenderbufferStorageMultisampleAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_framebuffer_multisample, 2139 /* glRenderbufferStorageMultisampleAPPLE */);
}

static PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
epoxy_glRenderbufferStorageMultisampleCoverageNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_framebuffer_multisample_coverage, 2140 /* glRenderbufferStorageMultisampleCoverageNV */);
}

static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
epoxy_glRenderbufferStorageMultisampleEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_framebuffer_multisample,
        GL_extension_GL_EXT_multisampled_render_to_texture,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_framebuffer_multisample,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2141 /* "glRenderbufferStorageMultisampleEXT" */,
        2141 /* "glRenderbufferStorageMultisampleEXT" */,
        2137 /* "glRenderbufferStorageMultisample" */,
        2137 /* "glRenderbufferStorageMultisample" */,
        2137 /* "glRenderbufferStorageMultisample" */,
        2143 /* "glRenderbufferStorageMultisampleNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2141] /* "glRenderbufferStorageMultisampleEXT" */,
                                providers, entrypoints);
}

static PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC
epoxy_glRenderbufferStorageMultisampleIMG_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IMG_multisampled_render_to_texture, 2142 /* glRenderbufferStorageMultisampleIMG */);
}

static PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC
epoxy_glRenderbufferStorageMultisampleNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_framebuffer_multisample,
        Desktop_OpenGL_3_0,
        GL_extension_GL_ARB_framebuffer_object,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_framebuffer_multisample,
        GL_extension_GL_EXT_multisampled_render_to_texture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2143 /* "glRenderbufferStorageMultisampleNV" */,
        2137 /* "glRenderbufferStorageMultisample" */,
        2137 /* "glRenderbufferStorageMultisample" */,
        2137 /* "glRenderbufferStorageMultisample" */,
        2141 /* "glRenderbufferStorageMultisampleEXT" */,
        2141 /* "glRenderbufferStorageMultisampleEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2143] /* "glRenderbufferStorageMultisampleNV" */,
                                providers, entrypoints);
}

static PFNGLRENDERBUFFERSTORAGEOESPROC
epoxy_glRenderbufferStorageOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_framebuffer_object, 2144 /* glRenderbufferStorageOES */);
}

static PFNGLREPLACEMENTCODEPOINTERSUNPROC
epoxy_glReplacementCodePointerSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_triangle_list, 2145 /* glReplacementCodePointerSUN */);
}

static PFNGLREPLACEMENTCODEUBSUNPROC
epoxy_glReplacementCodeubSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_triangle_list, 2146 /* glReplacementCodeubSUN */);
}

static PFNGLREPLACEMENTCODEUBVSUNPROC
epoxy_glReplacementCodeubvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_triangle_list, 2147 /* glReplacementCodeubvSUN */);
}

static PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
epoxy_glReplacementCodeuiColor3fVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2148 /* glReplacementCodeuiColor3fVertex3fSUN */);
}

static PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
epoxy_glReplacementCodeuiColor3fVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2149 /* glReplacementCodeuiColor3fVertex3fvSUN */);
}

static PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
epoxy_glReplacementCodeuiColor4fNormal3fVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2150 /* glReplacementCodeuiColor4fNormal3fVertex3fSUN */);
}

static PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
epoxy_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2151 /* glReplacementCodeuiColor4fNormal3fVertex3fvSUN */);
}

static PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
epoxy_glReplacementCodeuiColor4ubVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2152 /* glReplacementCodeuiColor4ubVertex3fSUN */);
}

static PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
epoxy_glReplacementCodeuiColor4ubVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2153 /* glReplacementCodeuiColor4ubVertex3fvSUN */);
}

static PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
epoxy_glReplacementCodeuiNormal3fVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2154 /* glReplacementCodeuiNormal3fVertex3fSUN */);
}

static PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
epoxy_glReplacementCodeuiNormal3fVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2155 /* glReplacementCodeuiNormal3fVertex3fvSUN */);
}

static PFNGLREPLACEMENTCODEUISUNPROC
epoxy_glReplacementCodeuiSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_triangle_list, 2156 /* glReplacementCodeuiSUN */);
}

static PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
epoxy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2157 /* glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN */);
}

static PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
epoxy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2158 /* glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN */);
}

static PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
epoxy_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2159 /* glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN */);
}

static PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
epoxy_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2160 /* glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN */);
}

static PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
epoxy_glReplacementCodeuiTexCoord2fVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2161 /* glReplacementCodeuiTexCoord2fVertex3fSUN */);
}

static PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
epoxy_glReplacementCodeuiTexCoord2fVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2162 /* glReplacementCodeuiTexCoord2fVertex3fvSUN */);
}

static PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
epoxy_glReplacementCodeuiVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2163 /* glReplacementCodeuiVertex3fSUN */);
}

static PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
epoxy_glReplacementCodeuiVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2164 /* glReplacementCodeuiVertex3fvSUN */);
}

static PFNGLREPLACEMENTCODEUIVSUNPROC
epoxy_glReplacementCodeuivSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_triangle_list, 2165 /* glReplacementCodeuivSUN */);
}

static PFNGLREPLACEMENTCODEUSSUNPROC
epoxy_glReplacementCodeusSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_triangle_list, 2166 /* glReplacementCodeusSUN */);
}

static PFNGLREPLACEMENTCODEUSVSUNPROC
epoxy_glReplacementCodeusvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_triangle_list, 2167 /* glReplacementCodeusvSUN */);
}

static PFNGLREQUESTRESIDENTPROGRAMSNVPROC
epoxy_glRequestResidentProgramsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 2168 /* glRequestResidentProgramsNV */);
}

static PFNGLRESETHISTOGRAMPROC
epoxy_glResetHistogram_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_histogram,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2169 /* "glResetHistogram" */,
        2170 /* "glResetHistogramEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2169] /* "glResetHistogram" */,
                                providers, entrypoints);
}

static PFNGLRESETHISTOGRAMEXTPROC
epoxy_glResetHistogramEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_histogram,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2170 /* "glResetHistogramEXT" */,
        2169 /* "glResetHistogram" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2170] /* "glResetHistogramEXT" */,
                                providers, entrypoints);
}

static PFNGLRESETMINMAXPROC
epoxy_glResetMinmax_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_histogram,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2171 /* "glResetMinmax" */,
        2172 /* "glResetMinmaxEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2171] /* "glResetMinmax" */,
                                providers, entrypoints);
}

static PFNGLRESETMINMAXEXTPROC
epoxy_glResetMinmaxEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_histogram,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2172 /* "glResetMinmaxEXT" */,
        2171 /* "glResetMinmax" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2172] /* "glResetMinmaxEXT" */,
                                providers, entrypoints);
}

static PFNGLRESIZEBUFFERSMESAPROC
epoxy_glResizeBuffersMESA_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_MESA_resize_buffers, 2173 /* glResizeBuffersMESA */);
}

static PFNGLRESOLVEDEPTHVALUESNVPROC
epoxy_glResolveDepthValuesNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_sample_locations, 2174 /* glResolveDepthValuesNV */);
}

static PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC
epoxy_glResolveMultisampleFramebufferAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_framebuffer_multisample, 2175 /* glResolveMultisampleFramebufferAPPLE */);
}

static PFNGLRESUMETRANSFORMFEEDBACKPROC
epoxy_glResumeTransformFeedback_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback2,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_transform_feedback2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2176 /* "glResumeTransformFeedback" */,
        2176 /* "glResumeTransformFeedback" */,
        2176 /* "glResumeTransformFeedback" */,
        2177 /* "glResumeTransformFeedbackNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2176] /* "glResumeTransformFeedback" */,
                                providers, entrypoints);
}

static PFNGLRESUMETRANSFORMFEEDBACKNVPROC
epoxy_glResumeTransformFeedbackNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_transform_feedback2,
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_transform_feedback2,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2177 /* "glResumeTransformFeedbackNV" */,
        2176 /* "glResumeTransformFeedback" */,
        2176 /* "glResumeTransformFeedback" */,
        2176 /* "glResumeTransformFeedback" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2177] /* "glResumeTransformFeedbackNV" */,
                                providers, entrypoints);
}

static PFNGLROTATEDPROC
epoxy_glRotated_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2178 /* glRotated */);
}

static PFNGLROTATEFPROC
epoxy_glRotatef_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2179 /* "glRotatef" */,
        2179 /* "glRotatef" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2179] /* "glRotatef" */,
                                providers, entrypoints);
}

static PFNGLROTATEXPROC
epoxy_glRotatex_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 2180 /* glRotatex */);
}

static PFNGLROTATEXOESPROC
epoxy_glRotatexOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2181 /* glRotatexOES */);
}

static PFNGLSAMPLECOVERAGEPROC
epoxy_glSampleCoverage_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_3,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_multisample,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2182 /* "glSampleCoverage" */,
        2182 /* "glSampleCoverage" */,
        2182 /* "glSampleCoverage" */,
        2183 /* "glSampleCoverageARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2182] /* "glSampleCoverage" */,
                                providers, entrypoints);
}

static PFNGLSAMPLECOVERAGEARBPROC
epoxy_glSampleCoverageARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_multisample,
        Desktop_OpenGL_1_3,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2183 /* "glSampleCoverageARB" */,
        2182 /* "glSampleCoverage" */,
        2182 /* "glSampleCoverage" */,
        2182 /* "glSampleCoverage" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2183] /* "glSampleCoverageARB" */,
                                providers, entrypoints);
}

static PFNGLSAMPLECOVERAGEXPROC
epoxy_glSampleCoveragex_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 2184 /* glSampleCoveragex */);
}

static PFNGLSAMPLECOVERAGEXOESPROC
epoxy_glSampleCoveragexOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2185 /* glSampleCoveragexOES */);
}

static PFNGLSAMPLEMAPATIPROC
epoxy_glSampleMapATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_fragment_shader, 2186 /* glSampleMapATI */);
}

static PFNGLSAMPLEMASKEXTPROC
epoxy_glSampleMaskEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_multisample,
        GL_extension_GL_SGIS_multisample,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2187 /* "glSampleMaskEXT" */,
        2189 /* "glSampleMaskSGIS" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2187] /* "glSampleMaskEXT" */,
                                providers, entrypoints);
}

static PFNGLSAMPLEMASKINDEXEDNVPROC
epoxy_glSampleMaskIndexedNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_explicit_multisample, 2188 /* glSampleMaskIndexedNV */);
}

static PFNGLSAMPLEMASKSGISPROC
epoxy_glSampleMaskSGIS_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_SGIS_multisample,
        GL_extension_GL_EXT_multisample,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2189 /* "glSampleMaskSGIS" */,
        2187 /* "glSampleMaskEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2189] /* "glSampleMaskSGIS" */,
                                providers, entrypoints);
}

static PFNGLSAMPLEMASKIPROC
epoxy_glSampleMaski_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_texture_multisample,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2190 /* "glSampleMaski" */,
        2190 /* "glSampleMaski" */,
        2190 /* "glSampleMaski" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2190] /* "glSampleMaski" */,
                                providers, entrypoints);
}

static PFNGLSAMPLEPATTERNEXTPROC
epoxy_glSamplePatternEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_multisample,
        GL_extension_GL_SGIS_multisample,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2191 /* "glSamplePatternEXT" */,
        2192 /* "glSamplePatternSGIS" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2191] /* "glSamplePatternEXT" */,
                                providers, entrypoints);
}

static PFNGLSAMPLEPATTERNSGISPROC
epoxy_glSamplePatternSGIS_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_SGIS_multisample,
        GL_extension_GL_EXT_multisample,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2192 /* "glSamplePatternSGIS" */,
        2191 /* "glSamplePatternEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2192] /* "glSamplePatternSGIS" */,
                                providers, entrypoints);
}

static PFNGLSAMPLERPARAMETERIIVPROC
epoxy_glSamplerParameterIiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2193 /* "glSamplerParameterIiv" */,
        2193 /* "glSamplerParameterIiv" */,
        2193 /* "glSamplerParameterIiv" */,
        2194 /* "glSamplerParameterIivEXT" */,
        2195 /* "glSamplerParameterIivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2193] /* "glSamplerParameterIiv" */,
                                providers, entrypoints);
}

static PFNGLSAMPLERPARAMETERIIVEXTPROC
epoxy_glSamplerParameterIivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_border_clamp,
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2194 /* "glSamplerParameterIivEXT" */,
        2193 /* "glSamplerParameterIiv" */,
        2193 /* "glSamplerParameterIiv" */,
        2193 /* "glSamplerParameterIiv" */,
        2195 /* "glSamplerParameterIivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2194] /* "glSamplerParameterIivEXT" */,
                                providers, entrypoints);
}

static PFNGLSAMPLERPARAMETERIIVOESPROC
epoxy_glSamplerParameterIivOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_border_clamp,
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2195 /* "glSamplerParameterIivOES" */,
        2193 /* "glSamplerParameterIiv" */,
        2193 /* "glSamplerParameterIiv" */,
        2193 /* "glSamplerParameterIiv" */,
        2194 /* "glSamplerParameterIivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2195] /* "glSamplerParameterIivOES" */,
                                providers, entrypoints);
}

static PFNGLSAMPLERPARAMETERIUIVPROC
epoxy_glSamplerParameterIuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2196 /* "glSamplerParameterIuiv" */,
        2196 /* "glSamplerParameterIuiv" */,
        2196 /* "glSamplerParameterIuiv" */,
        2197 /* "glSamplerParameterIuivEXT" */,
        2198 /* "glSamplerParameterIuivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2196] /* "glSamplerParameterIuiv" */,
                                providers, entrypoints);
}

static PFNGLSAMPLERPARAMETERIUIVEXTPROC
epoxy_glSamplerParameterIuivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_border_clamp,
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2197 /* "glSamplerParameterIuivEXT" */,
        2196 /* "glSamplerParameterIuiv" */,
        2196 /* "glSamplerParameterIuiv" */,
        2196 /* "glSamplerParameterIuiv" */,
        2198 /* "glSamplerParameterIuivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2197] /* "glSamplerParameterIuivEXT" */,
                                providers, entrypoints);
}

static PFNGLSAMPLERPARAMETERIUIVOESPROC
epoxy_glSamplerParameterIuivOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_border_clamp,
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2198 /* "glSamplerParameterIuivOES" */,
        2196 /* "glSamplerParameterIuiv" */,
        2196 /* "glSamplerParameterIuiv" */,
        2196 /* "glSamplerParameterIuiv" */,
        2197 /* "glSamplerParameterIuivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2198] /* "glSamplerParameterIuivOES" */,
                                providers, entrypoints);
}

static PFNGLSAMPLERPARAMETERFPROC
epoxy_glSamplerParameterf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2199 /* "glSamplerParameterf" */,
        2199 /* "glSamplerParameterf" */,
        2199 /* "glSamplerParameterf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2199] /* "glSamplerParameterf" */,
                                providers, entrypoints);
}

static PFNGLSAMPLERPARAMETERFVPROC
epoxy_glSamplerParameterfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2200 /* "glSamplerParameterfv" */,
        2200 /* "glSamplerParameterfv" */,
        2200 /* "glSamplerParameterfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2200] /* "glSamplerParameterfv" */,
                                providers, entrypoints);
}

static PFNGLSAMPLERPARAMETERIPROC
epoxy_glSamplerParameteri_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2201 /* "glSamplerParameteri" */,
        2201 /* "glSamplerParameteri" */,
        2201 /* "glSamplerParameteri" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2201] /* "glSamplerParameteri" */,
                                providers, entrypoints);
}

static PFNGLSAMPLERPARAMETERIVPROC
epoxy_glSamplerParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_sampler_objects,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2202 /* "glSamplerParameteriv" */,
        2202 /* "glSamplerParameteriv" */,
        2202 /* "glSamplerParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2202] /* "glSamplerParameteriv" */,
                                providers, entrypoints);
}

static PFNGLSCALEDPROC
epoxy_glScaled_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2203 /* glScaled */);
}

static PFNGLSCALEFPROC
epoxy_glScalef_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2204 /* "glScalef" */,
        2204 /* "glScalef" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2204] /* "glScalef" */,
                                providers, entrypoints);
}

static PFNGLSCALEXPROC
epoxy_glScalex_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 2205 /* glScalex */);
}

static PFNGLSCALEXOESPROC
epoxy_glScalexOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2206 /* glScalexOES */);
}

static PFNGLSCISSORPROC
epoxy_glScissor_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2207 /* "glScissor" */,
        2207 /* "glScissor" */,
        2207 /* "glScissor" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2207] /* "glScissor" */,
                                providers, entrypoints);
}

static PFNGLSCISSORARRAYVPROC
epoxy_glScissorArrayv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        GL_extension_GL_NV_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2208 /* "glScissorArrayv" */,
        2208 /* "glScissorArrayv" */,
        2209 /* "glScissorArrayvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2208] /* "glScissorArrayv" */,
                                providers, entrypoints);
}

static PFNGLSCISSORARRAYVNVPROC
epoxy_glScissorArrayvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_viewport_array,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2209 /* "glScissorArrayvNV" */,
        2208 /* "glScissorArrayv" */,
        2208 /* "glScissorArrayv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2209] /* "glScissorArrayvNV" */,
                                providers, entrypoints);
}

static PFNGLSCISSORINDEXEDPROC
epoxy_glScissorIndexed_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        GL_extension_GL_NV_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2210 /* "glScissorIndexed" */,
        2210 /* "glScissorIndexed" */,
        2211 /* "glScissorIndexedNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2210] /* "glScissorIndexed" */,
                                providers, entrypoints);
}

static PFNGLSCISSORINDEXEDNVPROC
epoxy_glScissorIndexedNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_viewport_array,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2211 /* "glScissorIndexedNV" */,
        2210 /* "glScissorIndexed" */,
        2210 /* "glScissorIndexed" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2211] /* "glScissorIndexedNV" */,
                                providers, entrypoints);
}

static PFNGLSCISSORINDEXEDVPROC
epoxy_glScissorIndexedv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        GL_extension_GL_NV_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2212 /* "glScissorIndexedv" */,
        2212 /* "glScissorIndexedv" */,
        2213 /* "glScissorIndexedvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2212] /* "glScissorIndexedv" */,
                                providers, entrypoints);
}

static PFNGLSCISSORINDEXEDVNVPROC
epoxy_glScissorIndexedvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_viewport_array,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2213 /* "glScissorIndexedvNV" */,
        2212 /* "glScissorIndexedv" */,
        2212 /* "glScissorIndexedv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2213] /* "glScissorIndexedvNV" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3BPROC
epoxy_glSecondaryColor3b_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2214 /* "glSecondaryColor3b" */,
        2215 /* "glSecondaryColor3bEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2214] /* "glSecondaryColor3b" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3BEXTPROC
epoxy_glSecondaryColor3bEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2215 /* "glSecondaryColor3bEXT" */,
        2214 /* "glSecondaryColor3b" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2215] /* "glSecondaryColor3bEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3BVPROC
epoxy_glSecondaryColor3bv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2216 /* "glSecondaryColor3bv" */,
        2217 /* "glSecondaryColor3bvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2216] /* "glSecondaryColor3bv" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3BVEXTPROC
epoxy_glSecondaryColor3bvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2217 /* "glSecondaryColor3bvEXT" */,
        2216 /* "glSecondaryColor3bv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2217] /* "glSecondaryColor3bvEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3DPROC
epoxy_glSecondaryColor3d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2218 /* "glSecondaryColor3d" */,
        2219 /* "glSecondaryColor3dEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2218] /* "glSecondaryColor3d" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3DEXTPROC
epoxy_glSecondaryColor3dEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2219 /* "glSecondaryColor3dEXT" */,
        2218 /* "glSecondaryColor3d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2219] /* "glSecondaryColor3dEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3DVPROC
epoxy_glSecondaryColor3dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2220 /* "glSecondaryColor3dv" */,
        2221 /* "glSecondaryColor3dvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2220] /* "glSecondaryColor3dv" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3DVEXTPROC
epoxy_glSecondaryColor3dvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2221 /* "glSecondaryColor3dvEXT" */,
        2220 /* "glSecondaryColor3dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2221] /* "glSecondaryColor3dvEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3FPROC
epoxy_glSecondaryColor3f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2222 /* "glSecondaryColor3f" */,
        2223 /* "glSecondaryColor3fEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2222] /* "glSecondaryColor3f" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3FEXTPROC
epoxy_glSecondaryColor3fEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2223 /* "glSecondaryColor3fEXT" */,
        2222 /* "glSecondaryColor3f" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2223] /* "glSecondaryColor3fEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3FVPROC
epoxy_glSecondaryColor3fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2224 /* "glSecondaryColor3fv" */,
        2225 /* "glSecondaryColor3fvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2224] /* "glSecondaryColor3fv" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3FVEXTPROC
epoxy_glSecondaryColor3fvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2225 /* "glSecondaryColor3fvEXT" */,
        2224 /* "glSecondaryColor3fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2225] /* "glSecondaryColor3fvEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3HNVPROC
epoxy_glSecondaryColor3hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2226 /* glSecondaryColor3hNV */);
}

static PFNGLSECONDARYCOLOR3HVNVPROC
epoxy_glSecondaryColor3hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2227 /* glSecondaryColor3hvNV */);
}

static PFNGLSECONDARYCOLOR3IPROC
epoxy_glSecondaryColor3i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2228 /* "glSecondaryColor3i" */,
        2229 /* "glSecondaryColor3iEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2228] /* "glSecondaryColor3i" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3IEXTPROC
epoxy_glSecondaryColor3iEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2229 /* "glSecondaryColor3iEXT" */,
        2228 /* "glSecondaryColor3i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2229] /* "glSecondaryColor3iEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3IVPROC
epoxy_glSecondaryColor3iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2230 /* "glSecondaryColor3iv" */,
        2231 /* "glSecondaryColor3ivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2230] /* "glSecondaryColor3iv" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3IVEXTPROC
epoxy_glSecondaryColor3ivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2231 /* "glSecondaryColor3ivEXT" */,
        2230 /* "glSecondaryColor3iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2231] /* "glSecondaryColor3ivEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3SPROC
epoxy_glSecondaryColor3s_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2232 /* "glSecondaryColor3s" */,
        2233 /* "glSecondaryColor3sEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2232] /* "glSecondaryColor3s" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3SEXTPROC
epoxy_glSecondaryColor3sEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2233 /* "glSecondaryColor3sEXT" */,
        2232 /* "glSecondaryColor3s" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2233] /* "glSecondaryColor3sEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3SVPROC
epoxy_glSecondaryColor3sv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2234 /* "glSecondaryColor3sv" */,
        2235 /* "glSecondaryColor3svEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2234] /* "glSecondaryColor3sv" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3SVEXTPROC
epoxy_glSecondaryColor3svEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2235 /* "glSecondaryColor3svEXT" */,
        2234 /* "glSecondaryColor3sv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2235] /* "glSecondaryColor3svEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3UBPROC
epoxy_glSecondaryColor3ub_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2236 /* "glSecondaryColor3ub" */,
        2237 /* "glSecondaryColor3ubEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2236] /* "glSecondaryColor3ub" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3UBEXTPROC
epoxy_glSecondaryColor3ubEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2237 /* "glSecondaryColor3ubEXT" */,
        2236 /* "glSecondaryColor3ub" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2237] /* "glSecondaryColor3ubEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3UBVPROC
epoxy_glSecondaryColor3ubv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2238 /* "glSecondaryColor3ubv" */,
        2239 /* "glSecondaryColor3ubvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2238] /* "glSecondaryColor3ubv" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3UBVEXTPROC
epoxy_glSecondaryColor3ubvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2239 /* "glSecondaryColor3ubvEXT" */,
        2238 /* "glSecondaryColor3ubv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2239] /* "glSecondaryColor3ubvEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3UIPROC
epoxy_glSecondaryColor3ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2240 /* "glSecondaryColor3ui" */,
        2241 /* "glSecondaryColor3uiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2240] /* "glSecondaryColor3ui" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3UIEXTPROC
epoxy_glSecondaryColor3uiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2241 /* "glSecondaryColor3uiEXT" */,
        2240 /* "glSecondaryColor3ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2241] /* "glSecondaryColor3uiEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3UIVPROC
epoxy_glSecondaryColor3uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2242 /* "glSecondaryColor3uiv" */,
        2243 /* "glSecondaryColor3uivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2242] /* "glSecondaryColor3uiv" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3UIVEXTPROC
epoxy_glSecondaryColor3uivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2243 /* "glSecondaryColor3uivEXT" */,
        2242 /* "glSecondaryColor3uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2243] /* "glSecondaryColor3uivEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3USPROC
epoxy_glSecondaryColor3us_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2244 /* "glSecondaryColor3us" */,
        2245 /* "glSecondaryColor3usEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2244] /* "glSecondaryColor3us" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3USEXTPROC
epoxy_glSecondaryColor3usEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2245 /* "glSecondaryColor3usEXT" */,
        2244 /* "glSecondaryColor3us" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2245] /* "glSecondaryColor3usEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3USVPROC
epoxy_glSecondaryColor3usv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2246 /* "glSecondaryColor3usv" */,
        2247 /* "glSecondaryColor3usvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2246] /* "glSecondaryColor3usv" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLOR3USVEXTPROC
epoxy_glSecondaryColor3usvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2247 /* "glSecondaryColor3usvEXT" */,
        2246 /* "glSecondaryColor3usv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2247] /* "glSecondaryColor3usvEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLORFORMATNVPROC
epoxy_glSecondaryColorFormatNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_buffer_unified_memory, 2248 /* glSecondaryColorFormatNV */);
}

static PFNGLSECONDARYCOLORP3UIPROC
epoxy_glSecondaryColorP3ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2249 /* "glSecondaryColorP3ui" */,
        2249 /* "glSecondaryColorP3ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2249] /* "glSecondaryColorP3ui" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLORP3UIVPROC
epoxy_glSecondaryColorP3uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2250 /* "glSecondaryColorP3uiv" */,
        2250 /* "glSecondaryColorP3uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2250] /* "glSecondaryColorP3uiv" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLORPOINTERPROC
epoxy_glSecondaryColorPointer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_EXT_secondary_color,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2251 /* "glSecondaryColorPointer" */,
        2252 /* "glSecondaryColorPointerEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2251] /* "glSecondaryColorPointer" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLORPOINTEREXTPROC
epoxy_glSecondaryColorPointerEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_secondary_color,
        Desktop_OpenGL_1_4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2252 /* "glSecondaryColorPointerEXT" */,
        2251 /* "glSecondaryColorPointer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2252] /* "glSecondaryColorPointerEXT" */,
                                providers, entrypoints);
}

static PFNGLSECONDARYCOLORPOINTERLISTIBMPROC
epoxy_glSecondaryColorPointerListIBM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IBM_vertex_array_lists, 2253 /* glSecondaryColorPointerListIBM */);
}

static PFNGLSELECTBUFFERPROC
epoxy_glSelectBuffer_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2254 /* glSelectBuffer */);
}

static PFNGLSELECTPERFMONITORCOUNTERSAMDPROC
epoxy_glSelectPerfMonitorCountersAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_performance_monitor, 2255 /* glSelectPerfMonitorCountersAMD */);
}

static PFNGLSEPARABLEFILTER2DPROC
epoxy_glSeparableFilter2D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_imaging,
        GL_extension_GL_EXT_convolution,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2256 /* "glSeparableFilter2D" */,
        2257 /* "glSeparableFilter2DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2256] /* "glSeparableFilter2D" */,
                                providers, entrypoints);
}

static PFNGLSEPARABLEFILTER2DEXTPROC
epoxy_glSeparableFilter2DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_convolution,
        GL_extension_GL_ARB_imaging,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2257 /* "glSeparableFilter2DEXT" */,
        2256 /* "glSeparableFilter2D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2257] /* "glSeparableFilter2DEXT" */,
                                providers, entrypoints);
}

static PFNGLSETFENCEAPPLEPROC
epoxy_glSetFenceAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_fence, 2258 /* glSetFenceAPPLE */);
}

static PFNGLSETFENCENVPROC
epoxy_glSetFenceNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_fence, 2259 /* glSetFenceNV */);
}

static PFNGLSETFRAGMENTSHADERCONSTANTATIPROC
epoxy_glSetFragmentShaderConstantATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_fragment_shader, 2260 /* glSetFragmentShaderConstantATI */);
}

static PFNGLSETINVARIANTEXTPROC
epoxy_glSetInvariantEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 2261 /* glSetInvariantEXT */);
}

static PFNGLSETLOCALCONSTANTEXTPROC
epoxy_glSetLocalConstantEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 2262 /* glSetLocalConstantEXT */);
}

static PFNGLSETMULTISAMPLEFVAMDPROC
epoxy_glSetMultisamplefvAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_sample_positions, 2263 /* glSetMultisamplefvAMD */);
}

static PFNGLSHADEMODELPROC
epoxy_glShadeModel_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2264 /* "glShadeModel" */,
        2264 /* "glShadeModel" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2264] /* "glShadeModel" */,
                                providers, entrypoints);
}

static PFNGLSHADERBINARYPROC
epoxy_glShaderBinary_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_ES2_compatibility,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2265 /* "glShaderBinary" */,
        2265 /* "glShaderBinary" */,
        2265 /* "glShaderBinary" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2265] /* "glShaderBinary" */,
                                providers, entrypoints);
}

static PFNGLSHADEROP1EXTPROC
epoxy_glShaderOp1EXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 2266 /* glShaderOp1EXT */);
}

static PFNGLSHADEROP2EXTPROC
epoxy_glShaderOp2EXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 2267 /* glShaderOp2EXT */);
}

static PFNGLSHADEROP3EXTPROC
epoxy_glShaderOp3EXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 2268 /* glShaderOp3EXT */);
}

static PFNGLSHADERSOURCEPROC
epoxy_glShaderSource_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2269 /* "glShaderSource" */,
        2269 /* "glShaderSource" */,
        2270 /* "glShaderSourceARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2269] /* "glShaderSource" */,
                                providers, entrypoints);
}

static PFNGLSHADERSOURCEARBPROC
epoxy_glShaderSourceARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2270 /* "glShaderSourceARB" */,
        2269 /* "glShaderSource" */,
        2269 /* "glShaderSource" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2270] /* "glShaderSourceARB" */,
                                providers, entrypoints);
}

static PFNGLSHADERSTORAGEBLOCKBINDINGPROC
epoxy_glShaderStorageBlockBinding_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_shader_storage_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2271 /* "glShaderStorageBlockBinding" */,
        2271 /* "glShaderStorageBlockBinding" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2271] /* "glShaderStorageBlockBinding" */,
                                providers, entrypoints);
}

static PFNGLSHARPENTEXFUNCSGISPROC
epoxy_glSharpenTexFuncSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_sharpen_texture, 2272 /* glSharpenTexFuncSGIS */);
}

static PFNGLSPRITEPARAMETERFSGIXPROC
epoxy_glSpriteParameterfSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_sprite, 2273 /* glSpriteParameterfSGIX */);
}

static PFNGLSPRITEPARAMETERFVSGIXPROC
epoxy_glSpriteParameterfvSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_sprite, 2274 /* glSpriteParameterfvSGIX */);
}

static PFNGLSPRITEPARAMETERISGIXPROC
epoxy_glSpriteParameteriSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_sprite, 2275 /* glSpriteParameteriSGIX */);
}

static PFNGLSPRITEPARAMETERIVSGIXPROC
epoxy_glSpriteParameterivSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_sprite, 2276 /* glSpriteParameterivSGIX */);
}

static PFNGLSTARTINSTRUMENTSSGIXPROC
epoxy_glStartInstrumentsSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_instruments, 2277 /* glStartInstrumentsSGIX */);
}

static PFNGLSTARTTILINGQCOMPROC
epoxy_glStartTilingQCOM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_QCOM_tiled_rendering, 2278 /* glStartTilingQCOM */);
}

static PFNGLSTATECAPTURENVPROC
epoxy_glStateCaptureNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_command_list, 2279 /* glStateCaptureNV */);
}

static PFNGLSTENCILCLEARTAGEXTPROC
epoxy_glStencilClearTagEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_stencil_clear_tag, 2280 /* glStencilClearTagEXT */);
}

static PFNGLSTENCILFILLPATHINSTANCEDNVPROC
epoxy_glStencilFillPathInstancedNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 2281 /* glStencilFillPathInstancedNV */);
}

static PFNGLSTENCILFILLPATHNVPROC
epoxy_glStencilFillPathNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 2282 /* glStencilFillPathNV */);
}

static PFNGLSTENCILFUNCPROC
epoxy_glStencilFunc_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2283 /* "glStencilFunc" */,
        2283 /* "glStencilFunc" */,
        2283 /* "glStencilFunc" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2283] /* "glStencilFunc" */,
                                providers, entrypoints);
}

static PFNGLSTENCILFUNCSEPARATEPROC
epoxy_glStencilFuncSeparate_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2284 /* "glStencilFuncSeparate" */,
        2284 /* "glStencilFuncSeparate" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2284] /* "glStencilFuncSeparate" */,
                                providers, entrypoints);
}

static PFNGLSTENCILFUNCSEPARATEATIPROC
epoxy_glStencilFuncSeparateATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_separate_stencil, 2285 /* glStencilFuncSeparateATI */);
}

static PFNGLSTENCILMASKPROC
epoxy_glStencilMask_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2286 /* "glStencilMask" */,
        2286 /* "glStencilMask" */,
        2286 /* "glStencilMask" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2286] /* "glStencilMask" */,
                                providers, entrypoints);
}

static PFNGLSTENCILMASKSEPARATEPROC
epoxy_glStencilMaskSeparate_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2287 /* "glStencilMaskSeparate" */,
        2287 /* "glStencilMaskSeparate" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2287] /* "glStencilMaskSeparate" */,
                                providers, entrypoints);
}

static PFNGLSTENCILOPPROC
epoxy_glStencilOp_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2288 /* "glStencilOp" */,
        2288 /* "glStencilOp" */,
        2288 /* "glStencilOp" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2288] /* "glStencilOp" */,
                                providers, entrypoints);
}

static PFNGLSTENCILOPSEPARATEPROC
epoxy_glStencilOpSeparate_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ATI_separate_stencil,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2289 /* "glStencilOpSeparate" */,
        2289 /* "glStencilOpSeparate" */,
        2290 /* "glStencilOpSeparateATI" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2289] /* "glStencilOpSeparate" */,
                                providers, entrypoints);
}

static PFNGLSTENCILOPSEPARATEATIPROC
epoxy_glStencilOpSeparateATI_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ATI_separate_stencil,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2290 /* "glStencilOpSeparateATI" */,
        2289 /* "glStencilOpSeparate" */,
        2289 /* "glStencilOpSeparate" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2290] /* "glStencilOpSeparateATI" */,
                                providers, entrypoints);
}

static PFNGLSTENCILOPVALUEAMDPROC
epoxy_glStencilOpValueAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_stencil_operation_extended, 2291 /* glStencilOpValueAMD */);
}

static PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
epoxy_glStencilStrokePathInstancedNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 2292 /* glStencilStrokePathInstancedNV */);
}

static PFNGLSTENCILSTROKEPATHNVPROC
epoxy_glStencilStrokePathNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 2293 /* glStencilStrokePathNV */);
}

static PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC
epoxy_glStencilThenCoverFillPathInstancedNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 2294 /* glStencilThenCoverFillPathInstancedNV */);
}

static PFNGLSTENCILTHENCOVERFILLPATHNVPROC
epoxy_glStencilThenCoverFillPathNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 2295 /* glStencilThenCoverFillPathNV */);
}

static PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC
epoxy_glStencilThenCoverStrokePathInstancedNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 2296 /* glStencilThenCoverStrokePathInstancedNV */);
}

static PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC
epoxy_glStencilThenCoverStrokePathNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 2297 /* glStencilThenCoverStrokePathNV */);
}

static PFNGLSTOPINSTRUMENTSSGIXPROC
epoxy_glStopInstrumentsSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_instruments, 2298 /* glStopInstrumentsSGIX */);
}

static PFNGLSTRINGMARKERGREMEDYPROC
epoxy_glStringMarkerGREMEDY_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_GREMEDY_string_marker, 2299 /* glStringMarkerGREMEDY */);
}

static PFNGLSUBPIXELPRECISIONBIASNVPROC
epoxy_glSubpixelPrecisionBiasNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_conservative_raster, 2300 /* glSubpixelPrecisionBiasNV */);
}

static PFNGLSWIZZLEEXTPROC
epoxy_glSwizzleEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 2301 /* glSwizzleEXT */);
}

static PFNGLSYNCTEXTUREINTELPROC
epoxy_glSyncTextureINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_map_texture, 2302 /* glSyncTextureINTEL */);
}

static PFNGLTAGSAMPLEBUFFERSGIXPROC
epoxy_glTagSampleBufferSGIX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIX_tag_sample_buffer, 2303 /* glTagSampleBufferSGIX */);
}

static PFNGLTANGENT3BEXTPROC
epoxy_glTangent3bEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 2304 /* glTangent3bEXT */);
}

static PFNGLTANGENT3BVEXTPROC
epoxy_glTangent3bvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 2305 /* glTangent3bvEXT */);
}

static PFNGLTANGENT3DEXTPROC
epoxy_glTangent3dEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 2306 /* glTangent3dEXT */);
}

static PFNGLTANGENT3DVEXTPROC
epoxy_glTangent3dvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 2307 /* glTangent3dvEXT */);
}

static PFNGLTANGENT3FEXTPROC
epoxy_glTangent3fEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 2308 /* glTangent3fEXT */);
}

static PFNGLTANGENT3FVEXTPROC
epoxy_glTangent3fvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 2309 /* glTangent3fvEXT */);
}

static PFNGLTANGENT3IEXTPROC
epoxy_glTangent3iEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 2310 /* glTangent3iEXT */);
}

static PFNGLTANGENT3IVEXTPROC
epoxy_glTangent3ivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 2311 /* glTangent3ivEXT */);
}

static PFNGLTANGENT3SEXTPROC
epoxy_glTangent3sEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 2312 /* glTangent3sEXT */);
}

static PFNGLTANGENT3SVEXTPROC
epoxy_glTangent3svEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 2313 /* glTangent3svEXT */);
}

static PFNGLTANGENTPOINTEREXTPROC
epoxy_glTangentPointerEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_coordinate_frame, 2314 /* glTangentPointerEXT */);
}

static PFNGLTBUFFERMASK3DFXPROC
epoxy_glTbufferMask3DFX_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_3DFX_tbuffer, 2315 /* glTbufferMask3DFX */);
}

static PFNGLTESSELLATIONFACTORAMDPROC
epoxy_glTessellationFactorAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_vertex_shader_tessellator, 2316 /* glTessellationFactorAMD */);
}

static PFNGLTESSELLATIONMODEAMDPROC
epoxy_glTessellationModeAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_vertex_shader_tessellator, 2317 /* glTessellationModeAMD */);
}

static PFNGLTESTFENCEAPPLEPROC
epoxy_glTestFenceAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_fence, 2318 /* glTestFenceAPPLE */);
}

static PFNGLTESTFENCENVPROC
epoxy_glTestFenceNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_fence, 2319 /* glTestFenceNV */);
}

static PFNGLTESTOBJECTAPPLEPROC
epoxy_glTestObjectAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_fence, 2320 /* glTestObjectAPPLE */);
}

static PFNGLTEXBUFFERPROC
epoxy_glTexBuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_1,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_texture_buffer_object,
        GL_extension_GL_EXT_texture_buffer,
        GL_extension_GL_EXT_texture_buffer_object,
        GL_extension_GL_OES_texture_buffer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2321 /* "glTexBuffer" */,
        2321 /* "glTexBuffer" */,
        2322 /* "glTexBufferARB" */,
        2323 /* "glTexBufferEXT" */,
        2323 /* "glTexBufferEXT" */,
        2324 /* "glTexBufferOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2321] /* "glTexBuffer" */,
                                providers, entrypoints);
}

static PFNGLTEXBUFFERARBPROC
epoxy_glTexBufferARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_texture_buffer_object,
        Desktop_OpenGL_3_1,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_buffer,
        GL_extension_GL_EXT_texture_buffer_object,
        GL_extension_GL_OES_texture_buffer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2322 /* "glTexBufferARB" */,
        2321 /* "glTexBuffer" */,
        2321 /* "glTexBuffer" */,
        2323 /* "glTexBufferEXT" */,
        2323 /* "glTexBufferEXT" */,
        2324 /* "glTexBufferOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2322] /* "glTexBufferARB" */,
                                providers, entrypoints);
}

static PFNGLTEXBUFFEREXTPROC
epoxy_glTexBufferEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_buffer,
        GL_extension_GL_EXT_texture_buffer_object,
        Desktop_OpenGL_3_1,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_texture_buffer_object,
        GL_extension_GL_OES_texture_buffer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2323 /* "glTexBufferEXT" */,
        2323 /* "glTexBufferEXT" */,
        2321 /* "glTexBuffer" */,
        2321 /* "glTexBuffer" */,
        2322 /* "glTexBufferARB" */,
        2324 /* "glTexBufferOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2323] /* "glTexBufferEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXBUFFEROESPROC
epoxy_glTexBufferOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_buffer,
        Desktop_OpenGL_3_1,
        OpenGL_ES_3_2,
        GL_extension_GL_ARB_texture_buffer_object,
        GL_extension_GL_EXT_texture_buffer,
        GL_extension_GL_EXT_texture_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2324 /* "glTexBufferOES" */,
        2321 /* "glTexBuffer" */,
        2321 /* "glTexBuffer" */,
        2322 /* "glTexBufferARB" */,
        2323 /* "glTexBufferEXT" */,
        2323 /* "glTexBufferEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2324] /* "glTexBufferOES" */,
                                providers, entrypoints);
}

static PFNGLTEXBUFFERRANGEPROC
epoxy_glTexBufferRange_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_texture_buffer_range,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_buffer,
        GL_extension_GL_OES_texture_buffer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2325 /* "glTexBufferRange" */,
        2325 /* "glTexBufferRange" */,
        2325 /* "glTexBufferRange" */,
        2326 /* "glTexBufferRangeEXT" */,
        2327 /* "glTexBufferRangeOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2325] /* "glTexBufferRange" */,
                                providers, entrypoints);
}

static PFNGLTEXBUFFERRANGEEXTPROC
epoxy_glTexBufferRangeEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_buffer,
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_texture_buffer_range,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_texture_buffer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2326 /* "glTexBufferRangeEXT" */,
        2325 /* "glTexBufferRange" */,
        2325 /* "glTexBufferRange" */,
        2325 /* "glTexBufferRange" */,
        2327 /* "glTexBufferRangeOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2326] /* "glTexBufferRangeEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXBUFFERRANGEOESPROC
epoxy_glTexBufferRangeOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_buffer,
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_texture_buffer_range,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_buffer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2327 /* "glTexBufferRangeOES" */,
        2325 /* "glTexBufferRange" */,
        2325 /* "glTexBufferRange" */,
        2325 /* "glTexBufferRange" */,
        2326 /* "glTexBufferRangeEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2327] /* "glTexBufferRangeOES" */,
                                providers, entrypoints);
}

static PFNGLTEXBUMPPARAMETERFVATIPROC
epoxy_glTexBumpParameterfvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_envmap_bumpmap, 2328 /* glTexBumpParameterfvATI */);
}

static PFNGLTEXBUMPPARAMETERIVATIPROC
epoxy_glTexBumpParameterivATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_envmap_bumpmap, 2329 /* glTexBumpParameterivATI */);
}

static PFNGLTEXCOORD1BOESPROC
epoxy_glTexCoord1bOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 2330 /* glTexCoord1bOES */);
}

static PFNGLTEXCOORD1BVOESPROC
epoxy_glTexCoord1bvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 2331 /* glTexCoord1bvOES */);
}

static PFNGLTEXCOORD1DPROC
epoxy_glTexCoord1d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2332 /* glTexCoord1d */);
}

static PFNGLTEXCOORD1DVPROC
epoxy_glTexCoord1dv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2333 /* glTexCoord1dv */);
}

static PFNGLTEXCOORD1FPROC
epoxy_glTexCoord1f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2334 /* glTexCoord1f */);
}

static PFNGLTEXCOORD1FVPROC
epoxy_glTexCoord1fv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2335 /* glTexCoord1fv */);
}

static PFNGLTEXCOORD1HNVPROC
epoxy_glTexCoord1hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2336 /* glTexCoord1hNV */);
}

static PFNGLTEXCOORD1HVNVPROC
epoxy_glTexCoord1hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2337 /* glTexCoord1hvNV */);
}

static PFNGLTEXCOORD1IPROC
epoxy_glTexCoord1i_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2338 /* glTexCoord1i */);
}

static PFNGLTEXCOORD1IVPROC
epoxy_glTexCoord1iv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2339 /* glTexCoord1iv */);
}

static PFNGLTEXCOORD1SPROC
epoxy_glTexCoord1s_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2340 /* glTexCoord1s */);
}

static PFNGLTEXCOORD1SVPROC
epoxy_glTexCoord1sv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2341 /* glTexCoord1sv */);
}

static PFNGLTEXCOORD1XOESPROC
epoxy_glTexCoord1xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2342 /* glTexCoord1xOES */);
}

static PFNGLTEXCOORD1XVOESPROC
epoxy_glTexCoord1xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2343 /* glTexCoord1xvOES */);
}

static PFNGLTEXCOORD2BOESPROC
epoxy_glTexCoord2bOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 2344 /* glTexCoord2bOES */);
}

static PFNGLTEXCOORD2BVOESPROC
epoxy_glTexCoord2bvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 2345 /* glTexCoord2bvOES */);
}

static PFNGLTEXCOORD2DPROC
epoxy_glTexCoord2d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2346 /* glTexCoord2d */);
}

static PFNGLTEXCOORD2DVPROC
epoxy_glTexCoord2dv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2347 /* glTexCoord2dv */);
}

static PFNGLTEXCOORD2FPROC
epoxy_glTexCoord2f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2348 /* glTexCoord2f */);
}

static PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
epoxy_glTexCoord2fColor3fVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2349 /* glTexCoord2fColor3fVertex3fSUN */);
}

static PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
epoxy_glTexCoord2fColor3fVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2350 /* glTexCoord2fColor3fVertex3fvSUN */);
}

static PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
epoxy_glTexCoord2fColor4fNormal3fVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2351 /* glTexCoord2fColor4fNormal3fVertex3fSUN */);
}

static PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
epoxy_glTexCoord2fColor4fNormal3fVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2352 /* glTexCoord2fColor4fNormal3fVertex3fvSUN */);
}

static PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
epoxy_glTexCoord2fColor4ubVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2353 /* glTexCoord2fColor4ubVertex3fSUN */);
}

static PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
epoxy_glTexCoord2fColor4ubVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2354 /* glTexCoord2fColor4ubVertex3fvSUN */);
}

static PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
epoxy_glTexCoord2fNormal3fVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2355 /* glTexCoord2fNormal3fVertex3fSUN */);
}

static PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
epoxy_glTexCoord2fNormal3fVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2356 /* glTexCoord2fNormal3fVertex3fvSUN */);
}

static PFNGLTEXCOORD2FVERTEX3FSUNPROC
epoxy_glTexCoord2fVertex3fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2357 /* glTexCoord2fVertex3fSUN */);
}

static PFNGLTEXCOORD2FVERTEX3FVSUNPROC
epoxy_glTexCoord2fVertex3fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2358 /* glTexCoord2fVertex3fvSUN */);
}

static PFNGLTEXCOORD2FVPROC
epoxy_glTexCoord2fv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2359 /* glTexCoord2fv */);
}

static PFNGLTEXCOORD2HNVPROC
epoxy_glTexCoord2hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2360 /* glTexCoord2hNV */);
}

static PFNGLTEXCOORD2HVNVPROC
epoxy_glTexCoord2hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2361 /* glTexCoord2hvNV */);
}

static PFNGLTEXCOORD2IPROC
epoxy_glTexCoord2i_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2362 /* glTexCoord2i */);
}

static PFNGLTEXCOORD2IVPROC
epoxy_glTexCoord2iv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2363 /* glTexCoord2iv */);
}

static PFNGLTEXCOORD2SPROC
epoxy_glTexCoord2s_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2364 /* glTexCoord2s */);
}

static PFNGLTEXCOORD2SVPROC
epoxy_glTexCoord2sv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2365 /* glTexCoord2sv */);
}

static PFNGLTEXCOORD2XOESPROC
epoxy_glTexCoord2xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2366 /* glTexCoord2xOES */);
}

static PFNGLTEXCOORD2XVOESPROC
epoxy_glTexCoord2xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2367 /* glTexCoord2xvOES */);
}

static PFNGLTEXCOORD3BOESPROC
epoxy_glTexCoord3bOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 2368 /* glTexCoord3bOES */);
}

static PFNGLTEXCOORD3BVOESPROC
epoxy_glTexCoord3bvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 2369 /* glTexCoord3bvOES */);
}

static PFNGLTEXCOORD3DPROC
epoxy_glTexCoord3d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2370 /* glTexCoord3d */);
}

static PFNGLTEXCOORD3DVPROC
epoxy_glTexCoord3dv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2371 /* glTexCoord3dv */);
}

static PFNGLTEXCOORD3FPROC
epoxy_glTexCoord3f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2372 /* glTexCoord3f */);
}

static PFNGLTEXCOORD3FVPROC
epoxy_glTexCoord3fv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2373 /* glTexCoord3fv */);
}

static PFNGLTEXCOORD3HNVPROC
epoxy_glTexCoord3hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2374 /* glTexCoord3hNV */);
}

static PFNGLTEXCOORD3HVNVPROC
epoxy_glTexCoord3hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2375 /* glTexCoord3hvNV */);
}

static PFNGLTEXCOORD3IPROC
epoxy_glTexCoord3i_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2376 /* glTexCoord3i */);
}

static PFNGLTEXCOORD3IVPROC
epoxy_glTexCoord3iv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2377 /* glTexCoord3iv */);
}

static PFNGLTEXCOORD3SPROC
epoxy_glTexCoord3s_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2378 /* glTexCoord3s */);
}

static PFNGLTEXCOORD3SVPROC
epoxy_glTexCoord3sv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2379 /* glTexCoord3sv */);
}

static PFNGLTEXCOORD3XOESPROC
epoxy_glTexCoord3xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2380 /* glTexCoord3xOES */);
}

static PFNGLTEXCOORD3XVOESPROC
epoxy_glTexCoord3xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2381 /* glTexCoord3xvOES */);
}

static PFNGLTEXCOORD4BOESPROC
epoxy_glTexCoord4bOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 2382 /* glTexCoord4bOES */);
}

static PFNGLTEXCOORD4BVOESPROC
epoxy_glTexCoord4bvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 2383 /* glTexCoord4bvOES */);
}

static PFNGLTEXCOORD4DPROC
epoxy_glTexCoord4d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2384 /* glTexCoord4d */);
}

static PFNGLTEXCOORD4DVPROC
epoxy_glTexCoord4dv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2385 /* glTexCoord4dv */);
}

static PFNGLTEXCOORD4FPROC
epoxy_glTexCoord4f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2386 /* glTexCoord4f */);
}

static PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
epoxy_glTexCoord4fColor4fNormal3fVertex4fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2387 /* glTexCoord4fColor4fNormal3fVertex4fSUN */);
}

static PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
epoxy_glTexCoord4fColor4fNormal3fVertex4fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2388 /* glTexCoord4fColor4fNormal3fVertex4fvSUN */);
}

static PFNGLTEXCOORD4FVERTEX4FSUNPROC
epoxy_glTexCoord4fVertex4fSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2389 /* glTexCoord4fVertex4fSUN */);
}

static PFNGLTEXCOORD4FVERTEX4FVSUNPROC
epoxy_glTexCoord4fVertex4fvSUN_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SUN_vertex, 2390 /* glTexCoord4fVertex4fvSUN */);
}

static PFNGLTEXCOORD4FVPROC
epoxy_glTexCoord4fv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2391 /* glTexCoord4fv */);
}

static PFNGLTEXCOORD4HNVPROC
epoxy_glTexCoord4hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2392 /* glTexCoord4hNV */);
}

static PFNGLTEXCOORD4HVNVPROC
epoxy_glTexCoord4hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2393 /* glTexCoord4hvNV */);
}

static PFNGLTEXCOORD4IPROC
epoxy_glTexCoord4i_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2394 /* glTexCoord4i */);
}

static PFNGLTEXCOORD4IVPROC
epoxy_glTexCoord4iv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2395 /* glTexCoord4iv */);
}

static PFNGLTEXCOORD4SPROC
epoxy_glTexCoord4s_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2396 /* glTexCoord4s */);
}

static PFNGLTEXCOORD4SVPROC
epoxy_glTexCoord4sv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2397 /* glTexCoord4sv */);
}

static PFNGLTEXCOORD4XOESPROC
epoxy_glTexCoord4xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2398 /* glTexCoord4xOES */);
}

static PFNGLTEXCOORD4XVOESPROC
epoxy_glTexCoord4xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2399 /* glTexCoord4xvOES */);
}

static PFNGLTEXCOORDFORMATNVPROC
epoxy_glTexCoordFormatNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_buffer_unified_memory, 2400 /* glTexCoordFormatNV */);
}

static PFNGLTEXCOORDP1UIPROC
epoxy_glTexCoordP1ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2401 /* "glTexCoordP1ui" */,
        2401 /* "glTexCoordP1ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2401] /* "glTexCoordP1ui" */,
                                providers, entrypoints);
}

static PFNGLTEXCOORDP1UIVPROC
epoxy_glTexCoordP1uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2402 /* "glTexCoordP1uiv" */,
        2402 /* "glTexCoordP1uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2402] /* "glTexCoordP1uiv" */,
                                providers, entrypoints);
}

static PFNGLTEXCOORDP2UIPROC
epoxy_glTexCoordP2ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2403 /* "glTexCoordP2ui" */,
        2403 /* "glTexCoordP2ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2403] /* "glTexCoordP2ui" */,
                                providers, entrypoints);
}

static PFNGLTEXCOORDP2UIVPROC
epoxy_glTexCoordP2uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2404 /* "glTexCoordP2uiv" */,
        2404 /* "glTexCoordP2uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2404] /* "glTexCoordP2uiv" */,
                                providers, entrypoints);
}

static PFNGLTEXCOORDP3UIPROC
epoxy_glTexCoordP3ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2405 /* "glTexCoordP3ui" */,
        2405 /* "glTexCoordP3ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2405] /* "glTexCoordP3ui" */,
                                providers, entrypoints);
}

static PFNGLTEXCOORDP3UIVPROC
epoxy_glTexCoordP3uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2406 /* "glTexCoordP3uiv" */,
        2406 /* "glTexCoordP3uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2406] /* "glTexCoordP3uiv" */,
                                providers, entrypoints);
}

static PFNGLTEXCOORDP4UIPROC
epoxy_glTexCoordP4ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2407 /* "glTexCoordP4ui" */,
        2407 /* "glTexCoordP4ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2407] /* "glTexCoordP4ui" */,
                                providers, entrypoints);
}

static PFNGLTEXCOORDP4UIVPROC
epoxy_glTexCoordP4uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2408 /* "glTexCoordP4uiv" */,
        2408 /* "glTexCoordP4uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2408] /* "glTexCoordP4uiv" */,
                                providers, entrypoints);
}

static PFNGLTEXCOORDPOINTERPROC
epoxy_glTexCoordPointer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2409 /* "glTexCoordPointer" */,
        2409 /* "glTexCoordPointer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2409] /* "glTexCoordPointer" */,
                                providers, entrypoints);
}

static PFNGLTEXCOORDPOINTEREXTPROC
epoxy_glTexCoordPointerEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_array, 2410 /* glTexCoordPointerEXT */);
}

static PFNGLTEXCOORDPOINTERLISTIBMPROC
epoxy_glTexCoordPointerListIBM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IBM_vertex_array_lists, 2411 /* glTexCoordPointerListIBM */);
}

static PFNGLTEXCOORDPOINTERVINTELPROC
epoxy_glTexCoordPointervINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_parallel_arrays, 2412 /* glTexCoordPointervINTEL */);
}

static PFNGLTEXENVFPROC
epoxy_glTexEnvf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2413 /* "glTexEnvf" */,
        2413 /* "glTexEnvf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2413] /* "glTexEnvf" */,
                                providers, entrypoints);
}

static PFNGLTEXENVFVPROC
epoxy_glTexEnvfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2414 /* "glTexEnvfv" */,
        2414 /* "glTexEnvfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2414] /* "glTexEnvfv" */,
                                providers, entrypoints);
}

static PFNGLTEXENVIPROC
epoxy_glTexEnvi_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2415 /* "glTexEnvi" */,
        2415 /* "glTexEnvi" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2415] /* "glTexEnvi" */,
                                providers, entrypoints);
}

static PFNGLTEXENVIVPROC
epoxy_glTexEnviv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2416 /* "glTexEnviv" */,
        2416 /* "glTexEnviv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2416] /* "glTexEnviv" */,
                                providers, entrypoints);
}

static PFNGLTEXENVXPROC
epoxy_glTexEnvx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 2417 /* glTexEnvx */);
}

static PFNGLTEXENVXOESPROC
epoxy_glTexEnvxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2418 /* glTexEnvxOES */);
}

static PFNGLTEXENVXVPROC
epoxy_glTexEnvxv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 2419 /* glTexEnvxv */);
}

static PFNGLTEXENVXVOESPROC
epoxy_glTexEnvxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2420 /* glTexEnvxvOES */);
}

static PFNGLTEXFILTERFUNCSGISPROC
epoxy_glTexFilterFuncSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_texture_filter4, 2421 /* glTexFilterFuncSGIS */);
}

static PFNGLTEXGENDPROC
epoxy_glTexGend_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2422 /* glTexGend */);
}

static PFNGLTEXGENDVPROC
epoxy_glTexGendv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2423 /* glTexGendv */);
}

static PFNGLTEXGENFPROC
epoxy_glTexGenf_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2424 /* glTexGenf */);
}

static PFNGLTEXGENFOESPROC
epoxy_glTexGenfOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_texture_cube_map, 2425 /* glTexGenfOES */);
}

static PFNGLTEXGENFVPROC
epoxy_glTexGenfv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2426 /* glTexGenfv */);
}

static PFNGLTEXGENFVOESPROC
epoxy_glTexGenfvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_texture_cube_map, 2427 /* glTexGenfvOES */);
}

static PFNGLTEXGENIPROC
epoxy_glTexGeni_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2428 /* glTexGeni */);
}

static PFNGLTEXGENIOESPROC
epoxy_glTexGeniOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_texture_cube_map, 2429 /* glTexGeniOES */);
}

static PFNGLTEXGENIVPROC
epoxy_glTexGeniv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2430 /* glTexGeniv */);
}

static PFNGLTEXGENIVOESPROC
epoxy_glTexGenivOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_texture_cube_map, 2431 /* glTexGenivOES */);
}

static PFNGLTEXGENXOESPROC
epoxy_glTexGenxOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_fixed_point,
        GL_extension_GL_OES_texture_cube_map,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2432 /* "glTexGenxOES" */,
        2432 /* "glTexGenxOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2432] /* "glTexGenxOES" */,
                                providers, entrypoints);
}

static PFNGLTEXGENXVOESPROC
epoxy_glTexGenxvOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_fixed_point,
        GL_extension_GL_OES_texture_cube_map,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2433 /* "glTexGenxvOES" */,
        2433 /* "glTexGenxvOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2433] /* "glTexGenxvOES" */,
                                providers, entrypoints);
}

static PFNGLTEXIMAGE1DPROC
epoxy_glTexImage1D_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2434 /* glTexImage1D */);
}

static PFNGLTEXIMAGE2DPROC
epoxy_glTexImage2D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2435 /* "glTexImage2D" */,
        2435 /* "glTexImage2D" */,
        2435 /* "glTexImage2D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2435] /* "glTexImage2D" */,
                                providers, entrypoints);
}

static PFNGLTEXIMAGE2DMULTISAMPLEPROC
epoxy_glTexImage2DMultisample_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_texture_multisample,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2436 /* "glTexImage2DMultisample" */,
        2436 /* "glTexImage2DMultisample" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2436] /* "glTexImage2DMultisample" */,
                                providers, entrypoints);
}

static PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC
epoxy_glTexImage2DMultisampleCoverageNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_texture_multisample, 2437 /* glTexImage2DMultisampleCoverageNV */);
}

static PFNGLTEXIMAGE3DPROC
epoxy_glTexImage3D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_2,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_texture3D,
        GL_extension_GL_OES_texture_3D,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2438 /* "glTexImage3D" */,
        2438 /* "glTexImage3D" */,
        2439 /* "glTexImage3DEXT" */,
        2442 /* "glTexImage3DOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2438] /* "glTexImage3D" */,
                                providers, entrypoints);
}

static PFNGLTEXIMAGE3DEXTPROC
epoxy_glTexImage3DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture3D,
        Desktop_OpenGL_1_2,
        OpenGL_ES_3_0,
        GL_extension_GL_OES_texture_3D,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2439 /* "glTexImage3DEXT" */,
        2438 /* "glTexImage3D" */,
        2438 /* "glTexImage3D" */,
        2442 /* "glTexImage3DOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2439] /* "glTexImage3DEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXIMAGE3DMULTISAMPLEPROC
epoxy_glTexImage3DMultisample_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_texture_multisample,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2440 /* "glTexImage3DMultisample" */,
        2440 /* "glTexImage3DMultisample" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2440] /* "glTexImage3DMultisample" */,
                                providers, entrypoints);
}

static PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC
epoxy_glTexImage3DMultisampleCoverageNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_texture_multisample, 2441 /* glTexImage3DMultisampleCoverageNV */);
}

static PFNGLTEXIMAGE3DOESPROC
epoxy_glTexImage3DOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_3D,
        Desktop_OpenGL_1_2,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_texture3D,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2442 /* "glTexImage3DOES" */,
        2438 /* "glTexImage3D" */,
        2438 /* "glTexImage3D" */,
        2439 /* "glTexImage3DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2442] /* "glTexImage3DOES" */,
                                providers, entrypoints);
}

static PFNGLTEXIMAGE4DSGISPROC
epoxy_glTexImage4DSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_texture4D, 2443 /* glTexImage4DSGIS */);
}

static PFNGLTEXPAGECOMMITMENTARBPROC
epoxy_glTexPageCommitmentARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_sparse_texture,
        GL_extension_GL_EXT_sparse_texture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2444 /* "glTexPageCommitmentARB" */,
        2445 /* "glTexPageCommitmentEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2444] /* "glTexPageCommitmentARB" */,
                                providers, entrypoints);
}

static PFNGLTEXPAGECOMMITMENTEXTPROC
epoxy_glTexPageCommitmentEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_sparse_texture,
        GL_extension_GL_ARB_sparse_texture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2445 /* "glTexPageCommitmentEXT" */,
        2444 /* "glTexPageCommitmentARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2445] /* "glTexPageCommitmentEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXPARAMETERIIVPROC
epoxy_glTexParameterIiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_EXT_texture_integer,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2446 /* "glTexParameterIiv" */,
        2446 /* "glTexParameterIiv" */,
        2447 /* "glTexParameterIivEXT" */,
        2447 /* "glTexParameterIivEXT" */,
        2448 /* "glTexParameterIivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2446] /* "glTexParameterIiv" */,
                                providers, entrypoints);
}

static PFNGLTEXPARAMETERIIVEXTPROC
epoxy_glTexParameterIivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_EXT_texture_integer,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2447 /* "glTexParameterIivEXT" */,
        2447 /* "glTexParameterIivEXT" */,
        2446 /* "glTexParameterIiv" */,
        2446 /* "glTexParameterIiv" */,
        2448 /* "glTexParameterIivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2447] /* "glTexParameterIivEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXPARAMETERIIVOESPROC
epoxy_glTexParameterIivOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_border_clamp,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_EXT_texture_integer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2448 /* "glTexParameterIivOES" */,
        2446 /* "glTexParameterIiv" */,
        2446 /* "glTexParameterIiv" */,
        2447 /* "glTexParameterIivEXT" */,
        2447 /* "glTexParameterIivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2448] /* "glTexParameterIivOES" */,
                                providers, entrypoints);
}

static PFNGLTEXPARAMETERIUIVPROC
epoxy_glTexParameterIuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_EXT_texture_integer,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2449 /* "glTexParameterIuiv" */,
        2449 /* "glTexParameterIuiv" */,
        2450 /* "glTexParameterIuivEXT" */,
        2450 /* "glTexParameterIuivEXT" */,
        2451 /* "glTexParameterIuivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2449] /* "glTexParameterIuiv" */,
                                providers, entrypoints);
}

static PFNGLTEXPARAMETERIUIVEXTPROC
epoxy_glTexParameterIuivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_EXT_texture_integer,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_texture_border_clamp,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2450 /* "glTexParameterIuivEXT" */,
        2450 /* "glTexParameterIuivEXT" */,
        2449 /* "glTexParameterIuiv" */,
        2449 /* "glTexParameterIuiv" */,
        2451 /* "glTexParameterIuivOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2450] /* "glTexParameterIuivEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXPARAMETERIUIVOESPROC
epoxy_glTexParameterIuivOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_border_clamp,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_2,
        GL_extension_GL_EXT_texture_border_clamp,
        GL_extension_GL_EXT_texture_integer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2451 /* "glTexParameterIuivOES" */,
        2449 /* "glTexParameterIuiv" */,
        2449 /* "glTexParameterIuiv" */,
        2450 /* "glTexParameterIuivEXT" */,
        2450 /* "glTexParameterIuivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2451] /* "glTexParameterIuivOES" */,
                                providers, entrypoints);
}

static PFNGLTEXPARAMETERFPROC
epoxy_glTexParameterf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2452 /* "glTexParameterf" */,
        2452 /* "glTexParameterf" */,
        2452 /* "glTexParameterf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2452] /* "glTexParameterf" */,
                                providers, entrypoints);
}

static PFNGLTEXPARAMETERFVPROC
epoxy_glTexParameterfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2453 /* "glTexParameterfv" */,
        2453 /* "glTexParameterfv" */,
        2453 /* "glTexParameterfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2453] /* "glTexParameterfv" */,
                                providers, entrypoints);
}

static PFNGLTEXPARAMETERIPROC
epoxy_glTexParameteri_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2454 /* "glTexParameteri" */,
        2454 /* "glTexParameteri" */,
        2454 /* "glTexParameteri" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2454] /* "glTexParameteri" */,
                                providers, entrypoints);
}

static PFNGLTEXPARAMETERIVPROC
epoxy_glTexParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2455 /* "glTexParameteriv" */,
        2455 /* "glTexParameteriv" */,
        2455 /* "glTexParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2455] /* "glTexParameteriv" */,
                                providers, entrypoints);
}

static PFNGLTEXPARAMETERXPROC
epoxy_glTexParameterx_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 2456 /* glTexParameterx */);
}

static PFNGLTEXPARAMETERXOESPROC
epoxy_glTexParameterxOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2457 /* glTexParameterxOES */);
}

static PFNGLTEXPARAMETERXVPROC
epoxy_glTexParameterxv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 2458 /* glTexParameterxv */);
}

static PFNGLTEXPARAMETERXVOESPROC
epoxy_glTexParameterxvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2459 /* glTexParameterxvOES */);
}

static PFNGLTEXRENDERBUFFERNVPROC
epoxy_glTexRenderbufferNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_explicit_multisample, 2460 /* glTexRenderbufferNV */);
}

static PFNGLTEXSTORAGE1DPROC
epoxy_glTexStorage1D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_texture_storage,
        GL_extension_GL_EXT_texture_storage,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2461 /* "glTexStorage1D" */,
        2461 /* "glTexStorage1D" */,
        2462 /* "glTexStorage1DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2461] /* "glTexStorage1D" */,
                                providers, entrypoints);
}

static PFNGLTEXSTORAGE1DEXTPROC
epoxy_glTexStorage1DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_storage,
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_texture_storage,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2462 /* "glTexStorage1DEXT" */,
        2461 /* "glTexStorage1D" */,
        2461 /* "glTexStorage1D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2462] /* "glTexStorage1DEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXSTORAGE2DPROC
epoxy_glTexStorage2D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_texture_storage,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_texture_storage,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2463 /* "glTexStorage2D" */,
        2463 /* "glTexStorage2D" */,
        2463 /* "glTexStorage2D" */,
        2464 /* "glTexStorage2DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2463] /* "glTexStorage2D" */,
                                providers, entrypoints);
}

static PFNGLTEXSTORAGE2DEXTPROC
epoxy_glTexStorage2DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_storage,
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_texture_storage,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2464 /* "glTexStorage2DEXT" */,
        2463 /* "glTexStorage2D" */,
        2463 /* "glTexStorage2D" */,
        2463 /* "glTexStorage2D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2464] /* "glTexStorage2DEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXSTORAGE2DMULTISAMPLEPROC
epoxy_glTexStorage2DMultisample_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_texture_storage_multisample,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2465 /* "glTexStorage2DMultisample" */,
        2465 /* "glTexStorage2DMultisample" */,
        2465 /* "glTexStorage2DMultisample" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2465] /* "glTexStorage2DMultisample" */,
                                providers, entrypoints);
}

static PFNGLTEXSTORAGE3DPROC
epoxy_glTexStorage3D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_texture_storage,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_texture_storage,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2466 /* "glTexStorage3D" */,
        2466 /* "glTexStorage3D" */,
        2466 /* "glTexStorage3D" */,
        2467 /* "glTexStorage3DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2466] /* "glTexStorage3D" */,
                                providers, entrypoints);
}

static PFNGLTEXSTORAGE3DEXTPROC
epoxy_glTexStorage3DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_storage,
        Desktop_OpenGL_4_2,
        GL_extension_GL_ARB_texture_storage,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2467 /* "glTexStorage3DEXT" */,
        2466 /* "glTexStorage3D" */,
        2466 /* "glTexStorage3D" */,
        2466 /* "glTexStorage3D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2467] /* "glTexStorage3DEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXSTORAGE3DMULTISAMPLEPROC
epoxy_glTexStorage3DMultisample_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_texture_storage_multisample,
        OpenGL_ES_3_2,
        GL_extension_GL_OES_texture_storage_multisample_2d_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2468 /* "glTexStorage3DMultisample" */,
        2468 /* "glTexStorage3DMultisample" */,
        2468 /* "glTexStorage3DMultisample" */,
        2469 /* "glTexStorage3DMultisampleOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2468] /* "glTexStorage3DMultisample" */,
                                providers, entrypoints);
}

static PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC
epoxy_glTexStorage3DMultisampleOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_storage_multisample_2d_array,
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_texture_storage_multisample,
        OpenGL_ES_3_2,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2469 /* "glTexStorage3DMultisampleOES" */,
        2468 /* "glTexStorage3DMultisample" */,
        2468 /* "glTexStorage3DMultisample" */,
        2468 /* "glTexStorage3DMultisample" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2469] /* "glTexStorage3DMultisampleOES" */,
                                providers, entrypoints);
}

static PFNGLTEXSTORAGESPARSEAMDPROC
epoxy_glTexStorageSparseAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_sparse_texture, 2470 /* glTexStorageSparseAMD */);
}

static PFNGLTEXSUBIMAGE1DPROC
epoxy_glTexSubImage1D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        GL_extension_GL_EXT_subtexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2471 /* "glTexSubImage1D" */,
        2472 /* "glTexSubImage1DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2471] /* "glTexSubImage1D" */,
                                providers, entrypoints);
}

static PFNGLTEXSUBIMAGE1DEXTPROC
epoxy_glTexSubImage1DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_subtexture,
        Desktop_OpenGL_1_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2472 /* "glTexSubImage1DEXT" */,
        2471 /* "glTexSubImage1D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2472] /* "glTexSubImage1DEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXSUBIMAGE2DPROC
epoxy_glTexSubImage2D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        GL_extension_GL_EXT_subtexture,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2473 /* "glTexSubImage2D" */,
        2473 /* "glTexSubImage2D" */,
        2473 /* "glTexSubImage2D" */,
        2474 /* "glTexSubImage2DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2473] /* "glTexSubImage2D" */,
                                providers, entrypoints);
}

static PFNGLTEXSUBIMAGE2DEXTPROC
epoxy_glTexSubImage2DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_subtexture,
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2474 /* "glTexSubImage2DEXT" */,
        2473 /* "glTexSubImage2D" */,
        2473 /* "glTexSubImage2D" */,
        2473 /* "glTexSubImage2D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2474] /* "glTexSubImage2DEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXSUBIMAGE3DPROC
epoxy_glTexSubImage3D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_2,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_texture3D,
        GL_extension_GL_OES_texture_3D,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2475 /* "glTexSubImage3D" */,
        2475 /* "glTexSubImage3D" */,
        2476 /* "glTexSubImage3DEXT" */,
        2477 /* "glTexSubImage3DOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2475] /* "glTexSubImage3D" */,
                                providers, entrypoints);
}

static PFNGLTEXSUBIMAGE3DEXTPROC
epoxy_glTexSubImage3DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture3D,
        Desktop_OpenGL_1_2,
        OpenGL_ES_3_0,
        GL_extension_GL_OES_texture_3D,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2476 /* "glTexSubImage3DEXT" */,
        2475 /* "glTexSubImage3D" */,
        2475 /* "glTexSubImage3D" */,
        2477 /* "glTexSubImage3DOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2476] /* "glTexSubImage3DEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXSUBIMAGE3DOESPROC
epoxy_glTexSubImage3DOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_3D,
        Desktop_OpenGL_1_2,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_texture3D,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2477 /* "glTexSubImage3DOES" */,
        2475 /* "glTexSubImage3D" */,
        2475 /* "glTexSubImage3D" */,
        2476 /* "glTexSubImage3DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2477] /* "glTexSubImage3DOES" */,
                                providers, entrypoints);
}

static PFNGLTEXSUBIMAGE4DSGISPROC
epoxy_glTexSubImage4DSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_texture4D, 2478 /* glTexSubImage4DSGIS */);
}

static PFNGLTEXTUREBARRIERPROC
epoxy_glTextureBarrier_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_texture_barrier,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2479 /* "glTextureBarrier" */,
        2479 /* "glTextureBarrier" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2479] /* "glTextureBarrier" */,
                                providers, entrypoints);
}

static PFNGLTEXTUREBARRIERNVPROC
epoxy_glTextureBarrierNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_texture_barrier, 2480 /* glTextureBarrierNV */);
}

static PFNGLTEXTUREBUFFERPROC
epoxy_glTextureBuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2481 /* "glTextureBuffer" */,
        2481 /* "glTextureBuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2481] /* "glTextureBuffer" */,
                                providers, entrypoints);
}

static PFNGLTEXTUREBUFFEREXTPROC
epoxy_glTextureBufferEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2482 /* glTextureBufferEXT */);
}

static PFNGLTEXTUREBUFFERRANGEPROC
epoxy_glTextureBufferRange_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2483 /* "glTextureBufferRange" */,
        2483 /* "glTextureBufferRange" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2483] /* "glTextureBufferRange" */,
                                providers, entrypoints);
}

static PFNGLTEXTUREBUFFERRANGEEXTPROC
epoxy_glTextureBufferRangeEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2484 /* glTextureBufferRangeEXT */);
}

static PFNGLTEXTURECOLORMASKSGISPROC
epoxy_glTextureColorMaskSGIS_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_SGIS_texture_color_mask, 2485 /* glTextureColorMaskSGIS */);
}

static PFNGLTEXTUREIMAGE1DEXTPROC
epoxy_glTextureImage1DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2486 /* glTextureImage1DEXT */);
}

static PFNGLTEXTUREIMAGE2DEXTPROC
epoxy_glTextureImage2DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2487 /* glTextureImage2DEXT */);
}

static PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC
epoxy_glTextureImage2DMultisampleCoverageNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_texture_multisample, 2488 /* glTextureImage2DMultisampleCoverageNV */);
}

static PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC
epoxy_glTextureImage2DMultisampleNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_texture_multisample, 2489 /* glTextureImage2DMultisampleNV */);
}

static PFNGLTEXTUREIMAGE3DEXTPROC
epoxy_glTextureImage3DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2490 /* glTextureImage3DEXT */);
}

static PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC
epoxy_glTextureImage3DMultisampleCoverageNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_texture_multisample, 2491 /* glTextureImage3DMultisampleCoverageNV */);
}

static PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC
epoxy_glTextureImage3DMultisampleNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_texture_multisample, 2492 /* glTextureImage3DMultisampleNV */);
}

static PFNGLTEXTURELIGHTEXTPROC
epoxy_glTextureLightEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_light_texture, 2493 /* glTextureLightEXT */);
}

static PFNGLTEXTUREMATERIALEXTPROC
epoxy_glTextureMaterialEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_light_texture, 2494 /* glTextureMaterialEXT */);
}

static PFNGLTEXTURENORMALEXTPROC
epoxy_glTextureNormalEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_texture_perturb_normal, 2495 /* glTextureNormalEXT */);
}

static PFNGLTEXTUREPAGECOMMITMENTEXTPROC
epoxy_glTexturePageCommitmentEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2496 /* glTexturePageCommitmentEXT */);
}

static PFNGLTEXTUREPARAMETERIIVPROC
epoxy_glTextureParameterIiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2497 /* "glTextureParameterIiv" */,
        2497 /* "glTextureParameterIiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2497] /* "glTextureParameterIiv" */,
                                providers, entrypoints);
}

static PFNGLTEXTUREPARAMETERIIVEXTPROC
epoxy_glTextureParameterIivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2498 /* glTextureParameterIivEXT */);
}

static PFNGLTEXTUREPARAMETERIUIVPROC
epoxy_glTextureParameterIuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2499 /* "glTextureParameterIuiv" */,
        2499 /* "glTextureParameterIuiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2499] /* "glTextureParameterIuiv" */,
                                providers, entrypoints);
}

static PFNGLTEXTUREPARAMETERIUIVEXTPROC
epoxy_glTextureParameterIuivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2500 /* glTextureParameterIuivEXT */);
}

static PFNGLTEXTUREPARAMETERFPROC
epoxy_glTextureParameterf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2501 /* "glTextureParameterf" */,
        2501 /* "glTextureParameterf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2501] /* "glTextureParameterf" */,
                                providers, entrypoints);
}

static PFNGLTEXTUREPARAMETERFEXTPROC
epoxy_glTextureParameterfEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2502 /* glTextureParameterfEXT */);
}

static PFNGLTEXTUREPARAMETERFVPROC
epoxy_glTextureParameterfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2503 /* "glTextureParameterfv" */,
        2503 /* "glTextureParameterfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2503] /* "glTextureParameterfv" */,
                                providers, entrypoints);
}

static PFNGLTEXTUREPARAMETERFVEXTPROC
epoxy_glTextureParameterfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2504 /* glTextureParameterfvEXT */);
}

static PFNGLTEXTUREPARAMETERIPROC
epoxy_glTextureParameteri_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2505 /* "glTextureParameteri" */,
        2505 /* "glTextureParameteri" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2505] /* "glTextureParameteri" */,
                                providers, entrypoints);
}

static PFNGLTEXTUREPARAMETERIEXTPROC
epoxy_glTextureParameteriEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2506 /* glTextureParameteriEXT */);
}

static PFNGLTEXTUREPARAMETERIVPROC
epoxy_glTextureParameteriv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2507 /* "glTextureParameteriv" */,
        2507 /* "glTextureParameteriv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2507] /* "glTextureParameteriv" */,
                                providers, entrypoints);
}

static PFNGLTEXTUREPARAMETERIVEXTPROC
epoxy_glTextureParameterivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2508 /* glTextureParameterivEXT */);
}

static PFNGLTEXTURERANGEAPPLEPROC
epoxy_glTextureRangeAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_texture_range, 2509 /* glTextureRangeAPPLE */);
}

static PFNGLTEXTURERENDERBUFFEREXTPROC
epoxy_glTextureRenderbufferEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2510 /* glTextureRenderbufferEXT */);
}

static PFNGLTEXTURESTORAGE1DPROC
epoxy_glTextureStorage1D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2511 /* "glTextureStorage1D" */,
        2511 /* "glTextureStorage1D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2511] /* "glTextureStorage1D" */,
                                providers, entrypoints);
}

static PFNGLTEXTURESTORAGE1DEXTPROC
epoxy_glTextureStorage1DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_texture_storage,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2512 /* "glTextureStorage1DEXT" */,
        2512 /* "glTextureStorage1DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2512] /* "glTextureStorage1DEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXTURESTORAGE2DPROC
epoxy_glTextureStorage2D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2513 /* "glTextureStorage2D" */,
        2513 /* "glTextureStorage2D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2513] /* "glTextureStorage2D" */,
                                providers, entrypoints);
}

static PFNGLTEXTURESTORAGE2DEXTPROC
epoxy_glTextureStorage2DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_texture_storage,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2514 /* "glTextureStorage2DEXT" */,
        2514 /* "glTextureStorage2DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2514] /* "glTextureStorage2DEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC
epoxy_glTextureStorage2DMultisample_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2515 /* "glTextureStorage2DMultisample" */,
        2515 /* "glTextureStorage2DMultisample" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2515] /* "glTextureStorage2DMultisample" */,
                                providers, entrypoints);
}

static PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
epoxy_glTextureStorage2DMultisampleEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2516 /* glTextureStorage2DMultisampleEXT */);
}

static PFNGLTEXTURESTORAGE3DPROC
epoxy_glTextureStorage3D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2517 /* "glTextureStorage3D" */,
        2517 /* "glTextureStorage3D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2517] /* "glTextureStorage3D" */,
                                providers, entrypoints);
}

static PFNGLTEXTURESTORAGE3DEXTPROC
epoxy_glTextureStorage3DEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_direct_state_access,
        GL_extension_GL_EXT_texture_storage,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2518 /* "glTextureStorage3DEXT" */,
        2518 /* "glTextureStorage3DEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2518] /* "glTextureStorage3DEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC
epoxy_glTextureStorage3DMultisample_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2519 /* "glTextureStorage3DMultisample" */,
        2519 /* "glTextureStorage3DMultisample" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2519] /* "glTextureStorage3DMultisample" */,
                                providers, entrypoints);
}

static PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
epoxy_glTextureStorage3DMultisampleEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2520 /* glTextureStorage3DMultisampleEXT */);
}

static PFNGLTEXTURESTORAGESPARSEAMDPROC
epoxy_glTextureStorageSparseAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_sparse_texture, 2521 /* glTextureStorageSparseAMD */);
}

static PFNGLTEXTURESUBIMAGE1DPROC
epoxy_glTextureSubImage1D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2522 /* "glTextureSubImage1D" */,
        2522 /* "glTextureSubImage1D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2522] /* "glTextureSubImage1D" */,
                                providers, entrypoints);
}

static PFNGLTEXTURESUBIMAGE1DEXTPROC
epoxy_glTextureSubImage1DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2523 /* glTextureSubImage1DEXT */);
}

static PFNGLTEXTURESUBIMAGE2DPROC
epoxy_glTextureSubImage2D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2524 /* "glTextureSubImage2D" */,
        2524 /* "glTextureSubImage2D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2524] /* "glTextureSubImage2D" */,
                                providers, entrypoints);
}

static PFNGLTEXTURESUBIMAGE2DEXTPROC
epoxy_glTextureSubImage2DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2525 /* glTextureSubImage2DEXT */);
}

static PFNGLTEXTURESUBIMAGE3DPROC
epoxy_glTextureSubImage3D_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2526 /* "glTextureSubImage3D" */,
        2526 /* "glTextureSubImage3D" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2526] /* "glTextureSubImage3D" */,
                                providers, entrypoints);
}

static PFNGLTEXTURESUBIMAGE3DEXTPROC
epoxy_glTextureSubImage3DEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2527 /* glTextureSubImage3DEXT */);
}

static PFNGLTEXTUREVIEWPROC
epoxy_glTextureView_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_texture_view,
        GL_extension_GL_EXT_texture_view,
        GL_extension_GL_OES_texture_view,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2528 /* "glTextureView" */,
        2528 /* "glTextureView" */,
        2529 /* "glTextureViewEXT" */,
        2530 /* "glTextureViewOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2528] /* "glTextureView" */,
                                providers, entrypoints);
}

static PFNGLTEXTUREVIEWEXTPROC
epoxy_glTextureViewEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_texture_view,
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_texture_view,
        GL_extension_GL_OES_texture_view,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2529 /* "glTextureViewEXT" */,
        2528 /* "glTextureView" */,
        2528 /* "glTextureView" */,
        2530 /* "glTextureViewOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2529] /* "glTextureViewEXT" */,
                                providers, entrypoints);
}

static PFNGLTEXTUREVIEWOESPROC
epoxy_glTextureViewOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_texture_view,
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_texture_view,
        GL_extension_GL_EXT_texture_view,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2530 /* "glTextureViewOES" */,
        2528 /* "glTextureView" */,
        2528 /* "glTextureView" */,
        2529 /* "glTextureViewEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2530] /* "glTextureViewOES" */,
                                providers, entrypoints);
}

static PFNGLTRACKMATRIXNVPROC
epoxy_glTrackMatrixNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 2531 /* glTrackMatrixNV */);
}

static PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
epoxy_glTransformFeedbackAttribsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_transform_feedback, 2532 /* glTransformFeedbackAttribsNV */);
}

static PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC
epoxy_glTransformFeedbackBufferBase_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2533 /* "glTransformFeedbackBufferBase" */,
        2533 /* "glTransformFeedbackBufferBase" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2533] /* "glTransformFeedbackBufferBase" */,
                                providers, entrypoints);
}

static PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC
epoxy_glTransformFeedbackBufferRange_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2534 /* "glTransformFeedbackBufferRange" */,
        2534 /* "glTransformFeedbackBufferRange" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2534] /* "glTransformFeedbackBufferRange" */,
                                providers, entrypoints);
}

static PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC
epoxy_glTransformFeedbackStreamAttribsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_transform_feedback, 2535 /* glTransformFeedbackStreamAttribsNV */);
}

static PFNGLTRANSFORMFEEDBACKVARYINGSPROC
epoxy_glTransformFeedbackVaryings_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_transform_feedback,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2536 /* "glTransformFeedbackVaryings" */,
        2536 /* "glTransformFeedbackVaryings" */,
        2537 /* "glTransformFeedbackVaryingsEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2536] /* "glTransformFeedbackVaryings" */,
                                providers, entrypoints);
}

static PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
epoxy_glTransformFeedbackVaryingsEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_transform_feedback,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2537 /* "glTransformFeedbackVaryingsEXT" */,
        2536 /* "glTransformFeedbackVaryings" */,
        2536 /* "glTransformFeedbackVaryings" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2537] /* "glTransformFeedbackVaryingsEXT" */,
                                providers, entrypoints);
}

static PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
epoxy_glTransformFeedbackVaryingsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_transform_feedback, 2538 /* glTransformFeedbackVaryingsNV */);
}

static PFNGLTRANSFORMPATHNVPROC
epoxy_glTransformPathNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 2539 /* glTransformPathNV */);
}

static PFNGLTRANSLATEDPROC
epoxy_glTranslated_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2540 /* glTranslated */);
}

static PFNGLTRANSLATEFPROC
epoxy_glTranslatef_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2541 /* "glTranslatef" */,
        2541 /* "glTranslatef" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2541] /* "glTranslatef" */,
                                providers, entrypoints);
}

static PFNGLTRANSLATEXPROC
epoxy_glTranslatex_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, OpenGL_ES_1_0, 2542 /* glTranslatex */);
}

static PFNGLTRANSLATEXOESPROC
epoxy_glTranslatexOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2543 /* glTranslatexOES */);
}

static PFNGLUNIFORM1DPROC
epoxy_glUniform1d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2544 /* "glUniform1d" */,
        2544 /* "glUniform1d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2544] /* "glUniform1d" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1DVPROC
epoxy_glUniform1dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2545 /* "glUniform1dv" */,
        2545 /* "glUniform1dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2545] /* "glUniform1dv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1FPROC
epoxy_glUniform1f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2546 /* "glUniform1f" */,
        2546 /* "glUniform1f" */,
        2547 /* "glUniform1fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2546] /* "glUniform1f" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1FARBPROC
epoxy_glUniform1fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2547 /* "glUniform1fARB" */,
        2546 /* "glUniform1f" */,
        2546 /* "glUniform1f" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2547] /* "glUniform1fARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1FVPROC
epoxy_glUniform1fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2548 /* "glUniform1fv" */,
        2548 /* "glUniform1fv" */,
        2549 /* "glUniform1fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2548] /* "glUniform1fv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1FVARBPROC
epoxy_glUniform1fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2549 /* "glUniform1fvARB" */,
        2548 /* "glUniform1fv" */,
        2548 /* "glUniform1fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2549] /* "glUniform1fvARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1IPROC
epoxy_glUniform1i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2550 /* "glUniform1i" */,
        2550 /* "glUniform1i" */,
        2555 /* "glUniform1iARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2550] /* "glUniform1i" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1I64ARBPROC
epoxy_glUniform1i64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2551 /* glUniform1i64ARB */);
}

static PFNGLUNIFORM1I64NVPROC
epoxy_glUniform1i64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2552 /* "glUniform1i64NV" */,
        2552 /* "glUniform1i64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2552] /* "glUniform1i64NV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1I64VARBPROC
epoxy_glUniform1i64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2553 /* glUniform1i64vARB */);
}

static PFNGLUNIFORM1I64VNVPROC
epoxy_glUniform1i64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2554 /* "glUniform1i64vNV" */,
        2554 /* "glUniform1i64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2554] /* "glUniform1i64vNV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1IARBPROC
epoxy_glUniform1iARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2555 /* "glUniform1iARB" */,
        2550 /* "glUniform1i" */,
        2550 /* "glUniform1i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2555] /* "glUniform1iARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1IVPROC
epoxy_glUniform1iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2556 /* "glUniform1iv" */,
        2556 /* "glUniform1iv" */,
        2557 /* "glUniform1ivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2556] /* "glUniform1iv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1IVARBPROC
epoxy_glUniform1ivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2557 /* "glUniform1ivARB" */,
        2556 /* "glUniform1iv" */,
        2556 /* "glUniform1iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2557] /* "glUniform1ivARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1UIPROC
epoxy_glUniform1ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_gpu_shader4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2558 /* "glUniform1ui" */,
        2558 /* "glUniform1ui" */,
        2563 /* "glUniform1uiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2558] /* "glUniform1ui" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1UI64ARBPROC
epoxy_glUniform1ui64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2559 /* glUniform1ui64ARB */);
}

static PFNGLUNIFORM1UI64NVPROC
epoxy_glUniform1ui64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2560 /* "glUniform1ui64NV" */,
        2560 /* "glUniform1ui64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2560] /* "glUniform1ui64NV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1UI64VARBPROC
epoxy_glUniform1ui64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2561 /* glUniform1ui64vARB */);
}

static PFNGLUNIFORM1UI64VNVPROC
epoxy_glUniform1ui64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2562 /* "glUniform1ui64vNV" */,
        2562 /* "glUniform1ui64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2562] /* "glUniform1ui64vNV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1UIEXTPROC
epoxy_glUniform1uiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_gpu_shader4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2563 /* "glUniform1uiEXT" */,
        2558 /* "glUniform1ui" */,
        2558 /* "glUniform1ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2563] /* "glUniform1uiEXT" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1UIVPROC
epoxy_glUniform1uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_gpu_shader4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2564 /* "glUniform1uiv" */,
        2564 /* "glUniform1uiv" */,
        2565 /* "glUniform1uivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2564] /* "glUniform1uiv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM1UIVEXTPROC
epoxy_glUniform1uivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_gpu_shader4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2565 /* "glUniform1uivEXT" */,
        2564 /* "glUniform1uiv" */,
        2564 /* "glUniform1uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2565] /* "glUniform1uivEXT" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2DPROC
epoxy_glUniform2d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2566 /* "glUniform2d" */,
        2566 /* "glUniform2d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2566] /* "glUniform2d" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2DVPROC
epoxy_glUniform2dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2567 /* "glUniform2dv" */,
        2567 /* "glUniform2dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2567] /* "glUniform2dv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2FPROC
epoxy_glUniform2f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2568 /* "glUniform2f" */,
        2568 /* "glUniform2f" */,
        2569 /* "glUniform2fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2568] /* "glUniform2f" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2FARBPROC
epoxy_glUniform2fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2569 /* "glUniform2fARB" */,
        2568 /* "glUniform2f" */,
        2568 /* "glUniform2f" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2569] /* "glUniform2fARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2FVPROC
epoxy_glUniform2fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2570 /* "glUniform2fv" */,
        2570 /* "glUniform2fv" */,
        2571 /* "glUniform2fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2570] /* "glUniform2fv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2FVARBPROC
epoxy_glUniform2fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2571 /* "glUniform2fvARB" */,
        2570 /* "glUniform2fv" */,
        2570 /* "glUniform2fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2571] /* "glUniform2fvARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2IPROC
epoxy_glUniform2i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2572 /* "glUniform2i" */,
        2572 /* "glUniform2i" */,
        2577 /* "glUniform2iARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2572] /* "glUniform2i" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2I64ARBPROC
epoxy_glUniform2i64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2573 /* glUniform2i64ARB */);
}

static PFNGLUNIFORM2I64NVPROC
epoxy_glUniform2i64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2574 /* "glUniform2i64NV" */,
        2574 /* "glUniform2i64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2574] /* "glUniform2i64NV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2I64VARBPROC
epoxy_glUniform2i64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2575 /* glUniform2i64vARB */);
}

static PFNGLUNIFORM2I64VNVPROC
epoxy_glUniform2i64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2576 /* "glUniform2i64vNV" */,
        2576 /* "glUniform2i64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2576] /* "glUniform2i64vNV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2IARBPROC
epoxy_glUniform2iARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2577 /* "glUniform2iARB" */,
        2572 /* "glUniform2i" */,
        2572 /* "glUniform2i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2577] /* "glUniform2iARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2IVPROC
epoxy_glUniform2iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2578 /* "glUniform2iv" */,
        2578 /* "glUniform2iv" */,
        2579 /* "glUniform2ivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2578] /* "glUniform2iv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2IVARBPROC
epoxy_glUniform2ivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2579 /* "glUniform2ivARB" */,
        2578 /* "glUniform2iv" */,
        2578 /* "glUniform2iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2579] /* "glUniform2ivARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2UIPROC
epoxy_glUniform2ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_gpu_shader4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2580 /* "glUniform2ui" */,
        2580 /* "glUniform2ui" */,
        2585 /* "glUniform2uiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2580] /* "glUniform2ui" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2UI64ARBPROC
epoxy_glUniform2ui64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2581 /* glUniform2ui64ARB */);
}

static PFNGLUNIFORM2UI64NVPROC
epoxy_glUniform2ui64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2582 /* "glUniform2ui64NV" */,
        2582 /* "glUniform2ui64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2582] /* "glUniform2ui64NV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2UI64VARBPROC
epoxy_glUniform2ui64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2583 /* glUniform2ui64vARB */);
}

static PFNGLUNIFORM2UI64VNVPROC
epoxy_glUniform2ui64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2584 /* "glUniform2ui64vNV" */,
        2584 /* "glUniform2ui64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2584] /* "glUniform2ui64vNV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2UIEXTPROC
epoxy_glUniform2uiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_gpu_shader4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2585 /* "glUniform2uiEXT" */,
        2580 /* "glUniform2ui" */,
        2580 /* "glUniform2ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2585] /* "glUniform2uiEXT" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2UIVPROC
epoxy_glUniform2uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_gpu_shader4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2586 /* "glUniform2uiv" */,
        2586 /* "glUniform2uiv" */,
        2587 /* "glUniform2uivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2586] /* "glUniform2uiv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM2UIVEXTPROC
epoxy_glUniform2uivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_gpu_shader4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2587 /* "glUniform2uivEXT" */,
        2586 /* "glUniform2uiv" */,
        2586 /* "glUniform2uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2587] /* "glUniform2uivEXT" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3DPROC
epoxy_glUniform3d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2588 /* "glUniform3d" */,
        2588 /* "glUniform3d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2588] /* "glUniform3d" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3DVPROC
epoxy_glUniform3dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2589 /* "glUniform3dv" */,
        2589 /* "glUniform3dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2589] /* "glUniform3dv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3FPROC
epoxy_glUniform3f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2590 /* "glUniform3f" */,
        2590 /* "glUniform3f" */,
        2591 /* "glUniform3fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2590] /* "glUniform3f" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3FARBPROC
epoxy_glUniform3fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2591 /* "glUniform3fARB" */,
        2590 /* "glUniform3f" */,
        2590 /* "glUniform3f" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2591] /* "glUniform3fARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3FVPROC
epoxy_glUniform3fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2592 /* "glUniform3fv" */,
        2592 /* "glUniform3fv" */,
        2593 /* "glUniform3fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2592] /* "glUniform3fv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3FVARBPROC
epoxy_glUniform3fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2593 /* "glUniform3fvARB" */,
        2592 /* "glUniform3fv" */,
        2592 /* "glUniform3fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2593] /* "glUniform3fvARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3IPROC
epoxy_glUniform3i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2594 /* "glUniform3i" */,
        2594 /* "glUniform3i" */,
        2599 /* "glUniform3iARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2594] /* "glUniform3i" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3I64ARBPROC
epoxy_glUniform3i64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2595 /* glUniform3i64ARB */);
}

static PFNGLUNIFORM3I64NVPROC
epoxy_glUniform3i64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2596 /* "glUniform3i64NV" */,
        2596 /* "glUniform3i64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2596] /* "glUniform3i64NV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3I64VARBPROC
epoxy_glUniform3i64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2597 /* glUniform3i64vARB */);
}

static PFNGLUNIFORM3I64VNVPROC
epoxy_glUniform3i64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2598 /* "glUniform3i64vNV" */,
        2598 /* "glUniform3i64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2598] /* "glUniform3i64vNV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3IARBPROC
epoxy_glUniform3iARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2599 /* "glUniform3iARB" */,
        2594 /* "glUniform3i" */,
        2594 /* "glUniform3i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2599] /* "glUniform3iARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3IVPROC
epoxy_glUniform3iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2600 /* "glUniform3iv" */,
        2600 /* "glUniform3iv" */,
        2601 /* "glUniform3ivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2600] /* "glUniform3iv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3IVARBPROC
epoxy_glUniform3ivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2601 /* "glUniform3ivARB" */,
        2600 /* "glUniform3iv" */,
        2600 /* "glUniform3iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2601] /* "glUniform3ivARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3UIPROC
epoxy_glUniform3ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_gpu_shader4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2602 /* "glUniform3ui" */,
        2602 /* "glUniform3ui" */,
        2607 /* "glUniform3uiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2602] /* "glUniform3ui" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3UI64ARBPROC
epoxy_glUniform3ui64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2603 /* glUniform3ui64ARB */);
}

static PFNGLUNIFORM3UI64NVPROC
epoxy_glUniform3ui64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2604 /* "glUniform3ui64NV" */,
        2604 /* "glUniform3ui64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2604] /* "glUniform3ui64NV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3UI64VARBPROC
epoxy_glUniform3ui64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2605 /* glUniform3ui64vARB */);
}

static PFNGLUNIFORM3UI64VNVPROC
epoxy_glUniform3ui64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2606 /* "glUniform3ui64vNV" */,
        2606 /* "glUniform3ui64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2606] /* "glUniform3ui64vNV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3UIEXTPROC
epoxy_glUniform3uiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_gpu_shader4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2607 /* "glUniform3uiEXT" */,
        2602 /* "glUniform3ui" */,
        2602 /* "glUniform3ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2607] /* "glUniform3uiEXT" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3UIVPROC
epoxy_glUniform3uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_gpu_shader4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2608 /* "glUniform3uiv" */,
        2608 /* "glUniform3uiv" */,
        2609 /* "glUniform3uivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2608] /* "glUniform3uiv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM3UIVEXTPROC
epoxy_glUniform3uivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_gpu_shader4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2609 /* "glUniform3uivEXT" */,
        2608 /* "glUniform3uiv" */,
        2608 /* "glUniform3uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2609] /* "glUniform3uivEXT" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4DPROC
epoxy_glUniform4d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2610 /* "glUniform4d" */,
        2610 /* "glUniform4d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2610] /* "glUniform4d" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4DVPROC
epoxy_glUniform4dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2611 /* "glUniform4dv" */,
        2611 /* "glUniform4dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2611] /* "glUniform4dv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4FPROC
epoxy_glUniform4f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2612 /* "glUniform4f" */,
        2612 /* "glUniform4f" */,
        2613 /* "glUniform4fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2612] /* "glUniform4f" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4FARBPROC
epoxy_glUniform4fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2613 /* "glUniform4fARB" */,
        2612 /* "glUniform4f" */,
        2612 /* "glUniform4f" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2613] /* "glUniform4fARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4FVPROC
epoxy_glUniform4fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2614 /* "glUniform4fv" */,
        2614 /* "glUniform4fv" */,
        2615 /* "glUniform4fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2614] /* "glUniform4fv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4FVARBPROC
epoxy_glUniform4fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2615 /* "glUniform4fvARB" */,
        2614 /* "glUniform4fv" */,
        2614 /* "glUniform4fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2615] /* "glUniform4fvARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4IPROC
epoxy_glUniform4i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2616 /* "glUniform4i" */,
        2616 /* "glUniform4i" */,
        2621 /* "glUniform4iARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2616] /* "glUniform4i" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4I64ARBPROC
epoxy_glUniform4i64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2617 /* glUniform4i64ARB */);
}

static PFNGLUNIFORM4I64NVPROC
epoxy_glUniform4i64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2618 /* "glUniform4i64NV" */,
        2618 /* "glUniform4i64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2618] /* "glUniform4i64NV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4I64VARBPROC
epoxy_glUniform4i64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2619 /* glUniform4i64vARB */);
}

static PFNGLUNIFORM4I64VNVPROC
epoxy_glUniform4i64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2620 /* "glUniform4i64vNV" */,
        2620 /* "glUniform4i64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2620] /* "glUniform4i64vNV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4IARBPROC
epoxy_glUniform4iARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2621 /* "glUniform4iARB" */,
        2616 /* "glUniform4i" */,
        2616 /* "glUniform4i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2621] /* "glUniform4iARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4IVPROC
epoxy_glUniform4iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2622 /* "glUniform4iv" */,
        2622 /* "glUniform4iv" */,
        2623 /* "glUniform4ivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2622] /* "glUniform4iv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4IVARBPROC
epoxy_glUniform4ivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2623 /* "glUniform4ivARB" */,
        2622 /* "glUniform4iv" */,
        2622 /* "glUniform4iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2623] /* "glUniform4ivARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4UIPROC
epoxy_glUniform4ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_gpu_shader4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2624 /* "glUniform4ui" */,
        2624 /* "glUniform4ui" */,
        2629 /* "glUniform4uiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2624] /* "glUniform4ui" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4UI64ARBPROC
epoxy_glUniform4ui64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2625 /* glUniform4ui64ARB */);
}

static PFNGLUNIFORM4UI64NVPROC
epoxy_glUniform4ui64NV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2626 /* "glUniform4ui64NV" */,
        2626 /* "glUniform4ui64NV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2626] /* "glUniform4ui64NV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4UI64VARBPROC
epoxy_glUniform4ui64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_gpu_shader_int64, 2627 /* glUniform4ui64vARB */);
}

static PFNGLUNIFORM4UI64VNVPROC
epoxy_glUniform4ui64vNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_AMD_gpu_shader_int64,
        GL_extension_GL_NV_gpu_shader5,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2628 /* "glUniform4ui64vNV" */,
        2628 /* "glUniform4ui64vNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2628] /* "glUniform4ui64vNV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4UIEXTPROC
epoxy_glUniform4uiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_gpu_shader4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2629 /* "glUniform4uiEXT" */,
        2624 /* "glUniform4ui" */,
        2624 /* "glUniform4ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2629] /* "glUniform4uiEXT" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4UIVPROC
epoxy_glUniform4uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_EXT_gpu_shader4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2630 /* "glUniform4uiv" */,
        2630 /* "glUniform4uiv" */,
        2631 /* "glUniform4uivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2630] /* "glUniform4uiv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORM4UIVEXTPROC
epoxy_glUniform4uivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_gpu_shader4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2631 /* "glUniform4uivEXT" */,
        2630 /* "glUniform4uiv" */,
        2630 /* "glUniform4uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2631] /* "glUniform4uivEXT" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMBLOCKBINDINGPROC
epoxy_glUniformBlockBinding_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_1,
        GL_extension_GL_ARB_uniform_buffer_object,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2632 /* "glUniformBlockBinding" */,
        2632 /* "glUniformBlockBinding" */,
        2632 /* "glUniformBlockBinding" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2632] /* "glUniformBlockBinding" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMBUFFEREXTPROC
epoxy_glUniformBufferEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_bindable_uniform, 2633 /* glUniformBufferEXT */);
}

static PFNGLUNIFORMHANDLEUI64ARBPROC
epoxy_glUniformHandleui64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 2634 /* glUniformHandleui64ARB */);
}

static PFNGLUNIFORMHANDLEUI64NVPROC
epoxy_glUniformHandleui64NV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_texture, 2635 /* glUniformHandleui64NV */);
}

static PFNGLUNIFORMHANDLEUI64VARBPROC
epoxy_glUniformHandleui64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 2636 /* glUniformHandleui64vARB */);
}

static PFNGLUNIFORMHANDLEUI64VNVPROC
epoxy_glUniformHandleui64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_bindless_texture, 2637 /* glUniformHandleui64vNV */);
}

static PFNGLUNIFORMMATRIX2DVPROC
epoxy_glUniformMatrix2dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2638 /* "glUniformMatrix2dv" */,
        2638 /* "glUniformMatrix2dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2638] /* "glUniformMatrix2dv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX2FVPROC
epoxy_glUniformMatrix2fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2639 /* "glUniformMatrix2fv" */,
        2639 /* "glUniformMatrix2fv" */,
        2640 /* "glUniformMatrix2fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2639] /* "glUniformMatrix2fv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX2FVARBPROC
epoxy_glUniformMatrix2fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2640 /* "glUniformMatrix2fvARB" */,
        2639 /* "glUniformMatrix2fv" */,
        2639 /* "glUniformMatrix2fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2640] /* "glUniformMatrix2fvARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX2X3DVPROC
epoxy_glUniformMatrix2x3dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2641 /* "glUniformMatrix2x3dv" */,
        2641 /* "glUniformMatrix2x3dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2641] /* "glUniformMatrix2x3dv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX2X3FVPROC
epoxy_glUniformMatrix2x3fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_1,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_non_square_matrices,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2642 /* "glUniformMatrix2x3fv" */,
        2642 /* "glUniformMatrix2x3fv" */,
        2643 /* "glUniformMatrix2x3fvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2642] /* "glUniformMatrix2x3fv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX2X3FVNVPROC
epoxy_glUniformMatrix2x3fvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_non_square_matrices,
        Desktop_OpenGL_2_1,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2643 /* "glUniformMatrix2x3fvNV" */,
        2642 /* "glUniformMatrix2x3fv" */,
        2642 /* "glUniformMatrix2x3fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2643] /* "glUniformMatrix2x3fvNV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX2X4DVPROC
epoxy_glUniformMatrix2x4dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2644 /* "glUniformMatrix2x4dv" */,
        2644 /* "glUniformMatrix2x4dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2644] /* "glUniformMatrix2x4dv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX2X4FVPROC
epoxy_glUniformMatrix2x4fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_1,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_non_square_matrices,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2645 /* "glUniformMatrix2x4fv" */,
        2645 /* "glUniformMatrix2x4fv" */,
        2646 /* "glUniformMatrix2x4fvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2645] /* "glUniformMatrix2x4fv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX2X4FVNVPROC
epoxy_glUniformMatrix2x4fvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_non_square_matrices,
        Desktop_OpenGL_2_1,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2646 /* "glUniformMatrix2x4fvNV" */,
        2645 /* "glUniformMatrix2x4fv" */,
        2645 /* "glUniformMatrix2x4fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2646] /* "glUniformMatrix2x4fvNV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX3DVPROC
epoxy_glUniformMatrix3dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2647 /* "glUniformMatrix3dv" */,
        2647 /* "glUniformMatrix3dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2647] /* "glUniformMatrix3dv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX3FVPROC
epoxy_glUniformMatrix3fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2648 /* "glUniformMatrix3fv" */,
        2648 /* "glUniformMatrix3fv" */,
        2649 /* "glUniformMatrix3fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2648] /* "glUniformMatrix3fv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX3FVARBPROC
epoxy_glUniformMatrix3fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2649 /* "glUniformMatrix3fvARB" */,
        2648 /* "glUniformMatrix3fv" */,
        2648 /* "glUniformMatrix3fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2649] /* "glUniformMatrix3fvARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX3X2DVPROC
epoxy_glUniformMatrix3x2dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2650 /* "glUniformMatrix3x2dv" */,
        2650 /* "glUniformMatrix3x2dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2650] /* "glUniformMatrix3x2dv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX3X2FVPROC
epoxy_glUniformMatrix3x2fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_1,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_non_square_matrices,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2651 /* "glUniformMatrix3x2fv" */,
        2651 /* "glUniformMatrix3x2fv" */,
        2652 /* "glUniformMatrix3x2fvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2651] /* "glUniformMatrix3x2fv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX3X2FVNVPROC
epoxy_glUniformMatrix3x2fvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_non_square_matrices,
        Desktop_OpenGL_2_1,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2652 /* "glUniformMatrix3x2fvNV" */,
        2651 /* "glUniformMatrix3x2fv" */,
        2651 /* "glUniformMatrix3x2fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2652] /* "glUniformMatrix3x2fvNV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX3X4DVPROC
epoxy_glUniformMatrix3x4dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2653 /* "glUniformMatrix3x4dv" */,
        2653 /* "glUniformMatrix3x4dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2653] /* "glUniformMatrix3x4dv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX3X4FVPROC
epoxy_glUniformMatrix3x4fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_1,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_non_square_matrices,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2654 /* "glUniformMatrix3x4fv" */,
        2654 /* "glUniformMatrix3x4fv" */,
        2655 /* "glUniformMatrix3x4fvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2654] /* "glUniformMatrix3x4fv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX3X4FVNVPROC
epoxy_glUniformMatrix3x4fvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_non_square_matrices,
        Desktop_OpenGL_2_1,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2655 /* "glUniformMatrix3x4fvNV" */,
        2654 /* "glUniformMatrix3x4fv" */,
        2654 /* "glUniformMatrix3x4fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2655] /* "glUniformMatrix3x4fvNV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX4DVPROC
epoxy_glUniformMatrix4dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2656 /* "glUniformMatrix4dv" */,
        2656 /* "glUniformMatrix4dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2656] /* "glUniformMatrix4dv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX4FVPROC
epoxy_glUniformMatrix4fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2657 /* "glUniformMatrix4fv" */,
        2657 /* "glUniformMatrix4fv" */,
        2658 /* "glUniformMatrix4fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2657] /* "glUniformMatrix4fv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX4FVARBPROC
epoxy_glUniformMatrix4fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2658 /* "glUniformMatrix4fvARB" */,
        2657 /* "glUniformMatrix4fv" */,
        2657 /* "glUniformMatrix4fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2658] /* "glUniformMatrix4fvARB" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX4X2DVPROC
epoxy_glUniformMatrix4x2dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2659 /* "glUniformMatrix4x2dv" */,
        2659 /* "glUniformMatrix4x2dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2659] /* "glUniformMatrix4x2dv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX4X2FVPROC
epoxy_glUniformMatrix4x2fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_1,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_non_square_matrices,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2660 /* "glUniformMatrix4x2fv" */,
        2660 /* "glUniformMatrix4x2fv" */,
        2661 /* "glUniformMatrix4x2fvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2660] /* "glUniformMatrix4x2fv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX4X2FVNVPROC
epoxy_glUniformMatrix4x2fvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_non_square_matrices,
        Desktop_OpenGL_2_1,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2661 /* "glUniformMatrix4x2fvNV" */,
        2660 /* "glUniformMatrix4x2fv" */,
        2660 /* "glUniformMatrix4x2fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2661] /* "glUniformMatrix4x2fvNV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX4X3DVPROC
epoxy_glUniformMatrix4x3dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_gpu_shader_fp64,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2662 /* "glUniformMatrix4x3dv" */,
        2662 /* "glUniformMatrix4x3dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2662] /* "glUniformMatrix4x3dv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX4X3FVPROC
epoxy_glUniformMatrix4x3fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_1,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_non_square_matrices,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2663 /* "glUniformMatrix4x3fv" */,
        2663 /* "glUniformMatrix4x3fv" */,
        2664 /* "glUniformMatrix4x3fvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2663] /* "glUniformMatrix4x3fv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMMATRIX4X3FVNVPROC
epoxy_glUniformMatrix4x3fvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_non_square_matrices,
        Desktop_OpenGL_2_1,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2664 /* "glUniformMatrix4x3fvNV" */,
        2663 /* "glUniformMatrix4x3fv" */,
        2663 /* "glUniformMatrix4x3fv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2664] /* "glUniformMatrix4x3fvNV" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMSUBROUTINESUIVPROC
epoxy_glUniformSubroutinesuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_0,
        GL_extension_GL_ARB_shader_subroutine,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2665 /* "glUniformSubroutinesuiv" */,
        2665 /* "glUniformSubroutinesuiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2665] /* "glUniformSubroutinesuiv" */,
                                providers, entrypoints);
}

static PFNGLUNIFORMUI64NVPROC
epoxy_glUniformui64NV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_shader_buffer_load, 2666 /* glUniformui64NV */);
}

static PFNGLUNIFORMUI64VNVPROC
epoxy_glUniformui64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_shader_buffer_load, 2667 /* glUniformui64vNV */);
}

static PFNGLUNLOCKARRAYSEXTPROC
epoxy_glUnlockArraysEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_compiled_vertex_array, 2668 /* glUnlockArraysEXT */);
}

static PFNGLUNMAPBUFFERPROC
epoxy_glUnmapBuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_vertex_buffer_object,
        GL_extension_GL_OES_mapbuffer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2669 /* "glUnmapBuffer" */,
        2669 /* "glUnmapBuffer" */,
        2670 /* "glUnmapBufferARB" */,
        2671 /* "glUnmapBufferOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2669] /* "glUnmapBuffer" */,
                                providers, entrypoints);
}

static PFNGLUNMAPBUFFERARBPROC
epoxy_glUnmapBufferARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_buffer_object,
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        GL_extension_GL_OES_mapbuffer,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2670 /* "glUnmapBufferARB" */,
        2669 /* "glUnmapBuffer" */,
        2669 /* "glUnmapBuffer" */,
        2671 /* "glUnmapBufferOES" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2670] /* "glUnmapBufferARB" */,
                                providers, entrypoints);
}

static PFNGLUNMAPBUFFEROESPROC
epoxy_glUnmapBufferOES_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_OES_mapbuffer,
        Desktop_OpenGL_1_5,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_vertex_buffer_object,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2671 /* "glUnmapBufferOES" */,
        2669 /* "glUnmapBuffer" */,
        2669 /* "glUnmapBuffer" */,
        2670 /* "glUnmapBufferARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2671] /* "glUnmapBufferOES" */,
                                providers, entrypoints);
}

static PFNGLUNMAPNAMEDBUFFERPROC
epoxy_glUnmapNamedBuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2672 /* "glUnmapNamedBuffer" */,
        2672 /* "glUnmapNamedBuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2672] /* "glUnmapNamedBuffer" */,
                                providers, entrypoints);
}

static PFNGLUNMAPNAMEDBUFFEREXTPROC
epoxy_glUnmapNamedBufferEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2673 /* glUnmapNamedBufferEXT */);
}

static PFNGLUNMAPOBJECTBUFFERATIPROC
epoxy_glUnmapObjectBufferATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_map_object_buffer, 2674 /* glUnmapObjectBufferATI */);
}

static PFNGLUNMAPTEXTURE2DINTELPROC
epoxy_glUnmapTexture2DINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_map_texture, 2675 /* glUnmapTexture2DINTEL */);
}

static PFNGLUPDATEOBJECTBUFFERATIPROC
epoxy_glUpdateObjectBufferATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_array_object, 2676 /* glUpdateObjectBufferATI */);
}

static PFNGLUSEPROGRAMPROC
epoxy_glUseProgram_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2677 /* "glUseProgram" */,
        2677 /* "glUseProgram" */,
        2678 /* "glUseProgramObjectARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2677] /* "glUseProgram" */,
                                providers, entrypoints);
}

static PFNGLUSEPROGRAMOBJECTARBPROC
epoxy_glUseProgramObjectARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2678 /* "glUseProgramObjectARB" */,
        2677 /* "glUseProgram" */,
        2677 /* "glUseProgram" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2678] /* "glUseProgramObjectARB" */,
                                providers, entrypoints);
}

static PFNGLUSEPROGRAMSTAGESPROC
epoxy_glUseProgramStages_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2679 /* "glUseProgramStages" */,
        2679 /* "glUseProgramStages" */,
        2679 /* "glUseProgramStages" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2679] /* "glUseProgramStages" */,
                                providers, entrypoints);
}

static PFNGLUSEPROGRAMSTAGESEXTPROC
epoxy_glUseProgramStagesEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_separate_shader_objects, 2680 /* glUseProgramStagesEXT */);
}

static PFNGLUSESHADERPROGRAMEXTPROC
epoxy_glUseShaderProgramEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_separate_shader_objects, 2681 /* glUseShaderProgramEXT */);
}

static PFNGLVDPAUFININVPROC
epoxy_glVDPAUFiniNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vdpau_interop, 2682 /* glVDPAUFiniNV */);
}

static PFNGLVDPAUGETSURFACEIVNVPROC
epoxy_glVDPAUGetSurfaceivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vdpau_interop, 2683 /* glVDPAUGetSurfaceivNV */);
}

static PFNGLVDPAUINITNVPROC
epoxy_glVDPAUInitNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vdpau_interop, 2684 /* glVDPAUInitNV */);
}

static PFNGLVDPAUISSURFACENVPROC
epoxy_glVDPAUIsSurfaceNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vdpau_interop, 2685 /* glVDPAUIsSurfaceNV */);
}

static PFNGLVDPAUMAPSURFACESNVPROC
epoxy_glVDPAUMapSurfacesNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vdpau_interop, 2686 /* glVDPAUMapSurfacesNV */);
}

static PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC
epoxy_glVDPAURegisterOutputSurfaceNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vdpau_interop, 2687 /* glVDPAURegisterOutputSurfaceNV */);
}

static PFNGLVDPAUREGISTERVIDEOSURFACENVPROC
epoxy_glVDPAURegisterVideoSurfaceNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vdpau_interop, 2688 /* glVDPAURegisterVideoSurfaceNV */);
}

static PFNGLVDPAUSURFACEACCESSNVPROC
epoxy_glVDPAUSurfaceAccessNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vdpau_interop, 2689 /* glVDPAUSurfaceAccessNV */);
}

static PFNGLVDPAUUNMAPSURFACESNVPROC
epoxy_glVDPAUUnmapSurfacesNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vdpau_interop, 2690 /* glVDPAUUnmapSurfacesNV */);
}

static PFNGLVDPAUUNREGISTERSURFACENVPROC
epoxy_glVDPAUUnregisterSurfaceNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vdpau_interop, 2691 /* glVDPAUUnregisterSurfaceNV */);
}

static PFNGLVALIDATEPROGRAMPROC
epoxy_glValidateProgram_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_shader_objects,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2692 /* "glValidateProgram" */,
        2692 /* "glValidateProgram" */,
        2693 /* "glValidateProgramARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2692] /* "glValidateProgram" */,
                                providers, entrypoints);
}

static PFNGLVALIDATEPROGRAMARBPROC
epoxy_glValidateProgramARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_shader_objects,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2693 /* "glValidateProgramARB" */,
        2692 /* "glValidateProgram" */,
        2692 /* "glValidateProgram" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2693] /* "glValidateProgramARB" */,
                                providers, entrypoints);
}

static PFNGLVALIDATEPROGRAMPIPELINEPROC
epoxy_glValidateProgramPipeline_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_separate_shader_objects,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2694 /* "glValidateProgramPipeline" */,
        2694 /* "glValidateProgramPipeline" */,
        2694 /* "glValidateProgramPipeline" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2694] /* "glValidateProgramPipeline" */,
                                providers, entrypoints);
}

static PFNGLVALIDATEPROGRAMPIPELINEEXTPROC
epoxy_glValidateProgramPipelineEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_separate_shader_objects, 2695 /* glValidateProgramPipelineEXT */);
}

static PFNGLVARIANTARRAYOBJECTATIPROC
epoxy_glVariantArrayObjectATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_array_object, 2696 /* glVariantArrayObjectATI */);
}

static PFNGLVARIANTPOINTEREXTPROC
epoxy_glVariantPointerEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 2697 /* glVariantPointerEXT */);
}

static PFNGLVARIANTBVEXTPROC
epoxy_glVariantbvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 2698 /* glVariantbvEXT */);
}

static PFNGLVARIANTDVEXTPROC
epoxy_glVariantdvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 2699 /* glVariantdvEXT */);
}

static PFNGLVARIANTFVEXTPROC
epoxy_glVariantfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 2700 /* glVariantfvEXT */);
}

static PFNGLVARIANTIVEXTPROC
epoxy_glVariantivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 2701 /* glVariantivEXT */);
}

static PFNGLVARIANTSVEXTPROC
epoxy_glVariantsvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 2702 /* glVariantsvEXT */);
}

static PFNGLVARIANTUBVEXTPROC
epoxy_glVariantubvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 2703 /* glVariantubvEXT */);
}

static PFNGLVARIANTUIVEXTPROC
epoxy_glVariantuivEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 2704 /* glVariantuivEXT */);
}

static PFNGLVARIANTUSVEXTPROC
epoxy_glVariantusvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 2705 /* glVariantusvEXT */);
}

static PFNGLVERTEX2BOESPROC
epoxy_glVertex2bOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 2706 /* glVertex2bOES */);
}

static PFNGLVERTEX2BVOESPROC
epoxy_glVertex2bvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 2707 /* glVertex2bvOES */);
}

static PFNGLVERTEX2DPROC
epoxy_glVertex2d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2708 /* glVertex2d */);
}

static PFNGLVERTEX2DVPROC
epoxy_glVertex2dv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2709 /* glVertex2dv */);
}

static PFNGLVERTEX2FPROC
epoxy_glVertex2f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2710 /* glVertex2f */);
}

static PFNGLVERTEX2FVPROC
epoxy_glVertex2fv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2711 /* glVertex2fv */);
}

static PFNGLVERTEX2HNVPROC
epoxy_glVertex2hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2712 /* glVertex2hNV */);
}

static PFNGLVERTEX2HVNVPROC
epoxy_glVertex2hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2713 /* glVertex2hvNV */);
}

static PFNGLVERTEX2IPROC
epoxy_glVertex2i_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2714 /* glVertex2i */);
}

static PFNGLVERTEX2IVPROC
epoxy_glVertex2iv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2715 /* glVertex2iv */);
}

static PFNGLVERTEX2SPROC
epoxy_glVertex2s_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2716 /* glVertex2s */);
}

static PFNGLVERTEX2SVPROC
epoxy_glVertex2sv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2717 /* glVertex2sv */);
}

static PFNGLVERTEX2XOESPROC
epoxy_glVertex2xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2718 /* glVertex2xOES */);
}

static PFNGLVERTEX2XVOESPROC
epoxy_glVertex2xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2719 /* glVertex2xvOES */);
}

static PFNGLVERTEX3BOESPROC
epoxy_glVertex3bOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 2720 /* glVertex3bOES */);
}

static PFNGLVERTEX3BVOESPROC
epoxy_glVertex3bvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 2721 /* glVertex3bvOES */);
}

static PFNGLVERTEX3DPROC
epoxy_glVertex3d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2722 /* glVertex3d */);
}

static PFNGLVERTEX3DVPROC
epoxy_glVertex3dv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2723 /* glVertex3dv */);
}

static PFNGLVERTEX3FPROC
epoxy_glVertex3f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2724 /* glVertex3f */);
}

static PFNGLVERTEX3FVPROC
epoxy_glVertex3fv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2725 /* glVertex3fv */);
}

static PFNGLVERTEX3HNVPROC
epoxy_glVertex3hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2726 /* glVertex3hNV */);
}

static PFNGLVERTEX3HVNVPROC
epoxy_glVertex3hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2727 /* glVertex3hvNV */);
}

static PFNGLVERTEX3IPROC
epoxy_glVertex3i_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2728 /* glVertex3i */);
}

static PFNGLVERTEX3IVPROC
epoxy_glVertex3iv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2729 /* glVertex3iv */);
}

static PFNGLVERTEX3SPROC
epoxy_glVertex3s_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2730 /* glVertex3s */);
}

static PFNGLVERTEX3SVPROC
epoxy_glVertex3sv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2731 /* glVertex3sv */);
}

static PFNGLVERTEX3XOESPROC
epoxy_glVertex3xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2732 /* glVertex3xOES */);
}

static PFNGLVERTEX3XVOESPROC
epoxy_glVertex3xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2733 /* glVertex3xvOES */);
}

static PFNGLVERTEX4BOESPROC
epoxy_glVertex4bOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 2734 /* glVertex4bOES */);
}

static PFNGLVERTEX4BVOESPROC
epoxy_glVertex4bvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_byte_coordinates, 2735 /* glVertex4bvOES */);
}

static PFNGLVERTEX4DPROC
epoxy_glVertex4d_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2736 /* glVertex4d */);
}

static PFNGLVERTEX4DVPROC
epoxy_glVertex4dv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2737 /* glVertex4dv */);
}

static PFNGLVERTEX4FPROC
epoxy_glVertex4f_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2738 /* glVertex4f */);
}

static PFNGLVERTEX4FVPROC
epoxy_glVertex4fv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2739 /* glVertex4fv */);
}

static PFNGLVERTEX4HNVPROC
epoxy_glVertex4hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2740 /* glVertex4hNV */);
}

static PFNGLVERTEX4HVNVPROC
epoxy_glVertex4hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2741 /* glVertex4hvNV */);
}

static PFNGLVERTEX4IPROC
epoxy_glVertex4i_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2742 /* glVertex4i */);
}

static PFNGLVERTEX4IVPROC
epoxy_glVertex4iv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2743 /* glVertex4iv */);
}

static PFNGLVERTEX4SPROC
epoxy_glVertex4s_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2744 /* glVertex4s */);
}

static PFNGLVERTEX4SVPROC
epoxy_glVertex4sv_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, Desktop_OpenGL_1_0, 2745 /* glVertex4sv */);
}

static PFNGLVERTEX4XOESPROC
epoxy_glVertex4xOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2746 /* glVertex4xOES */);
}

static PFNGLVERTEX4XVOESPROC
epoxy_glVertex4xvOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_fixed_point, 2747 /* glVertex4xvOES */);
}

static PFNGLVERTEXARRAYATTRIBBINDINGPROC
epoxy_glVertexArrayAttribBinding_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2748 /* "glVertexArrayAttribBinding" */,
        2748 /* "glVertexArrayAttribBinding" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2748] /* "glVertexArrayAttribBinding" */,
                                providers, entrypoints);
}

static PFNGLVERTEXARRAYATTRIBFORMATPROC
epoxy_glVertexArrayAttribFormat_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2749 /* "glVertexArrayAttribFormat" */,
        2749 /* "glVertexArrayAttribFormat" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2749] /* "glVertexArrayAttribFormat" */,
                                providers, entrypoints);
}

static PFNGLVERTEXARRAYATTRIBIFORMATPROC
epoxy_glVertexArrayAttribIFormat_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2750 /* "glVertexArrayAttribIFormat" */,
        2750 /* "glVertexArrayAttribIFormat" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2750] /* "glVertexArrayAttribIFormat" */,
                                providers, entrypoints);
}

static PFNGLVERTEXARRAYATTRIBLFORMATPROC
epoxy_glVertexArrayAttribLFormat_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2751 /* "glVertexArrayAttribLFormat" */,
        2751 /* "glVertexArrayAttribLFormat" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2751] /* "glVertexArrayAttribLFormat" */,
                                providers, entrypoints);
}

static PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC
epoxy_glVertexArrayBindVertexBufferEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2752 /* glVertexArrayBindVertexBufferEXT */);
}

static PFNGLVERTEXARRAYBINDINGDIVISORPROC
epoxy_glVertexArrayBindingDivisor_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2753 /* "glVertexArrayBindingDivisor" */,
        2753 /* "glVertexArrayBindingDivisor" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2753] /* "glVertexArrayBindingDivisor" */,
                                providers, entrypoints);
}

static PFNGLVERTEXARRAYCOLOROFFSETEXTPROC
epoxy_glVertexArrayColorOffsetEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2754 /* glVertexArrayColorOffsetEXT */);
}

static PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC
epoxy_glVertexArrayEdgeFlagOffsetEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2755 /* glVertexArrayEdgeFlagOffsetEXT */);
}

static PFNGLVERTEXARRAYELEMENTBUFFERPROC
epoxy_glVertexArrayElementBuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2756 /* "glVertexArrayElementBuffer" */,
        2756 /* "glVertexArrayElementBuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2756] /* "glVertexArrayElementBuffer" */,
                                providers, entrypoints);
}

static PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC
epoxy_glVertexArrayFogCoordOffsetEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2757 /* glVertexArrayFogCoordOffsetEXT */);
}

static PFNGLVERTEXARRAYINDEXOFFSETEXTPROC
epoxy_glVertexArrayIndexOffsetEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2758 /* glVertexArrayIndexOffsetEXT */);
}

static PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC
epoxy_glVertexArrayMultiTexCoordOffsetEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2759 /* glVertexArrayMultiTexCoordOffsetEXT */);
}

static PFNGLVERTEXARRAYNORMALOFFSETEXTPROC
epoxy_glVertexArrayNormalOffsetEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2760 /* glVertexArrayNormalOffsetEXT */);
}

static PFNGLVERTEXARRAYPARAMETERIAPPLEPROC
epoxy_glVertexArrayParameteriAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_vertex_array_range, 2761 /* glVertexArrayParameteriAPPLE */);
}

static PFNGLVERTEXARRAYRANGEAPPLEPROC
epoxy_glVertexArrayRangeAPPLE_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_APPLE_vertex_array_range, 2762 /* glVertexArrayRangeAPPLE */);
}

static PFNGLVERTEXARRAYRANGENVPROC
epoxy_glVertexArrayRangeNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_array_range, 2763 /* glVertexArrayRangeNV */);
}

static PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC
epoxy_glVertexArraySecondaryColorOffsetEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2764 /* glVertexArraySecondaryColorOffsetEXT */);
}

static PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC
epoxy_glVertexArrayTexCoordOffsetEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2765 /* glVertexArrayTexCoordOffsetEXT */);
}

static PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC
epoxy_glVertexArrayVertexAttribBindingEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2766 /* glVertexArrayVertexAttribBindingEXT */);
}

static PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC
epoxy_glVertexArrayVertexAttribDivisorEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2767 /* glVertexArrayVertexAttribDivisorEXT */);
}

static PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC
epoxy_glVertexArrayVertexAttribFormatEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2768 /* glVertexArrayVertexAttribFormatEXT */);
}

static PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC
epoxy_glVertexArrayVertexAttribIFormatEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2769 /* glVertexArrayVertexAttribIFormatEXT */);
}

static PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC
epoxy_glVertexArrayVertexAttribIOffsetEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2770 /* glVertexArrayVertexAttribIOffsetEXT */);
}

static PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC
epoxy_glVertexArrayVertexAttribLFormatEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2771 /* glVertexArrayVertexAttribLFormatEXT */);
}

static PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC
epoxy_glVertexArrayVertexAttribLOffsetEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2772 /* glVertexArrayVertexAttribLOffsetEXT */);
}

static PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC
epoxy_glVertexArrayVertexAttribOffsetEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2773 /* glVertexArrayVertexAttribOffsetEXT */);
}

static PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC
epoxy_glVertexArrayVertexBindingDivisorEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2774 /* glVertexArrayVertexBindingDivisorEXT */);
}

static PFNGLVERTEXARRAYVERTEXBUFFERPROC
epoxy_glVertexArrayVertexBuffer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2775 /* "glVertexArrayVertexBuffer" */,
        2775 /* "glVertexArrayVertexBuffer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2775] /* "glVertexArrayVertexBuffer" */,
                                providers, entrypoints);
}

static PFNGLVERTEXARRAYVERTEXBUFFERSPROC
epoxy_glVertexArrayVertexBuffers_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_5,
        GL_extension_GL_ARB_direct_state_access,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2776 /* "glVertexArrayVertexBuffers" */,
        2776 /* "glVertexArrayVertexBuffers" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2776] /* "glVertexArrayVertexBuffers" */,
                                providers, entrypoints);
}

static PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC
epoxy_glVertexArrayVertexOffsetEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_direct_state_access, 2777 /* glVertexArrayVertexOffsetEXT */);
}

static PFNGLVERTEXATTRIB1DPROC
epoxy_glVertexAttrib1d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2778 /* "glVertexAttrib1d" */,
        2779 /* "glVertexAttrib1dARB" */,
        2779 /* "glVertexAttrib1dARB" */,
        2780 /* "glVertexAttrib1dNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2778] /* "glVertexAttrib1d" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1DARBPROC
epoxy_glVertexAttrib1dARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2779 /* "glVertexAttrib1dARB" */,
        2779 /* "glVertexAttrib1dARB" */,
        2778 /* "glVertexAttrib1d" */,
        2780 /* "glVertexAttrib1dNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2779] /* "glVertexAttrib1dARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1DNVPROC
epoxy_glVertexAttrib1dNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2780 /* "glVertexAttrib1dNV" */,
        2778 /* "glVertexAttrib1d" */,
        2779 /* "glVertexAttrib1dARB" */,
        2779 /* "glVertexAttrib1dARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2780] /* "glVertexAttrib1dNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1DVPROC
epoxy_glVertexAttrib1dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2781 /* "glVertexAttrib1dv" */,
        2782 /* "glVertexAttrib1dvARB" */,
        2782 /* "glVertexAttrib1dvARB" */,
        2783 /* "glVertexAttrib1dvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2781] /* "glVertexAttrib1dv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1DVARBPROC
epoxy_glVertexAttrib1dvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2782 /* "glVertexAttrib1dvARB" */,
        2782 /* "glVertexAttrib1dvARB" */,
        2781 /* "glVertexAttrib1dv" */,
        2783 /* "glVertexAttrib1dvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2782] /* "glVertexAttrib1dvARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1DVNVPROC
epoxy_glVertexAttrib1dvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2783 /* "glVertexAttrib1dvNV" */,
        2781 /* "glVertexAttrib1dv" */,
        2782 /* "glVertexAttrib1dvARB" */,
        2782 /* "glVertexAttrib1dvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2783] /* "glVertexAttrib1dvNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1FPROC
epoxy_glVertexAttrib1f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2784 /* "glVertexAttrib1f" */,
        2784 /* "glVertexAttrib1f" */,
        2785 /* "glVertexAttrib1fARB" */,
        2785 /* "glVertexAttrib1fARB" */,
        2786 /* "glVertexAttrib1fNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2784] /* "glVertexAttrib1f" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1FARBPROC
epoxy_glVertexAttrib1fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2785 /* "glVertexAttrib1fARB" */,
        2785 /* "glVertexAttrib1fARB" */,
        2784 /* "glVertexAttrib1f" */,
        2784 /* "glVertexAttrib1f" */,
        2786 /* "glVertexAttrib1fNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2785] /* "glVertexAttrib1fARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1FNVPROC
epoxy_glVertexAttrib1fNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2786 /* "glVertexAttrib1fNV" */,
        2784 /* "glVertexAttrib1f" */,
        2784 /* "glVertexAttrib1f" */,
        2785 /* "glVertexAttrib1fARB" */,
        2785 /* "glVertexAttrib1fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2786] /* "glVertexAttrib1fNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1FVPROC
epoxy_glVertexAttrib1fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2787 /* "glVertexAttrib1fv" */,
        2787 /* "glVertexAttrib1fv" */,
        2788 /* "glVertexAttrib1fvARB" */,
        2788 /* "glVertexAttrib1fvARB" */,
        2789 /* "glVertexAttrib1fvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2787] /* "glVertexAttrib1fv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1FVARBPROC
epoxy_glVertexAttrib1fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2788 /* "glVertexAttrib1fvARB" */,
        2788 /* "glVertexAttrib1fvARB" */,
        2787 /* "glVertexAttrib1fv" */,
        2787 /* "glVertexAttrib1fv" */,
        2789 /* "glVertexAttrib1fvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2788] /* "glVertexAttrib1fvARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1FVNVPROC
epoxy_glVertexAttrib1fvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2789 /* "glVertexAttrib1fvNV" */,
        2787 /* "glVertexAttrib1fv" */,
        2787 /* "glVertexAttrib1fv" */,
        2788 /* "glVertexAttrib1fvARB" */,
        2788 /* "glVertexAttrib1fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2789] /* "glVertexAttrib1fvNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1HNVPROC
epoxy_glVertexAttrib1hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2790 /* glVertexAttrib1hNV */);
}

static PFNGLVERTEXATTRIB1HVNVPROC
epoxy_glVertexAttrib1hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2791 /* glVertexAttrib1hvNV */);
}

static PFNGLVERTEXATTRIB1SPROC
epoxy_glVertexAttrib1s_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2792 /* "glVertexAttrib1s" */,
        2793 /* "glVertexAttrib1sARB" */,
        2793 /* "glVertexAttrib1sARB" */,
        2794 /* "glVertexAttrib1sNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2792] /* "glVertexAttrib1s" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1SARBPROC
epoxy_glVertexAttrib1sARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2793 /* "glVertexAttrib1sARB" */,
        2793 /* "glVertexAttrib1sARB" */,
        2792 /* "glVertexAttrib1s" */,
        2794 /* "glVertexAttrib1sNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2793] /* "glVertexAttrib1sARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1SNVPROC
epoxy_glVertexAttrib1sNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2794 /* "glVertexAttrib1sNV" */,
        2792 /* "glVertexAttrib1s" */,
        2793 /* "glVertexAttrib1sARB" */,
        2793 /* "glVertexAttrib1sARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2794] /* "glVertexAttrib1sNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1SVPROC
epoxy_glVertexAttrib1sv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2795 /* "glVertexAttrib1sv" */,
        2796 /* "glVertexAttrib1svARB" */,
        2796 /* "glVertexAttrib1svARB" */,
        2797 /* "glVertexAttrib1svNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2795] /* "glVertexAttrib1sv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1SVARBPROC
epoxy_glVertexAttrib1svARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2796 /* "glVertexAttrib1svARB" */,
        2796 /* "glVertexAttrib1svARB" */,
        2795 /* "glVertexAttrib1sv" */,
        2797 /* "glVertexAttrib1svNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2796] /* "glVertexAttrib1svARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB1SVNVPROC
epoxy_glVertexAttrib1svNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2797 /* "glVertexAttrib1svNV" */,
        2795 /* "glVertexAttrib1sv" */,
        2796 /* "glVertexAttrib1svARB" */,
        2796 /* "glVertexAttrib1svARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2797] /* "glVertexAttrib1svNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2DPROC
epoxy_glVertexAttrib2d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2798 /* "glVertexAttrib2d" */,
        2799 /* "glVertexAttrib2dARB" */,
        2799 /* "glVertexAttrib2dARB" */,
        2800 /* "glVertexAttrib2dNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2798] /* "glVertexAttrib2d" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2DARBPROC
epoxy_glVertexAttrib2dARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2799 /* "glVertexAttrib2dARB" */,
        2799 /* "glVertexAttrib2dARB" */,
        2798 /* "glVertexAttrib2d" */,
        2800 /* "glVertexAttrib2dNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2799] /* "glVertexAttrib2dARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2DNVPROC
epoxy_glVertexAttrib2dNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2800 /* "glVertexAttrib2dNV" */,
        2798 /* "glVertexAttrib2d" */,
        2799 /* "glVertexAttrib2dARB" */,
        2799 /* "glVertexAttrib2dARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2800] /* "glVertexAttrib2dNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2DVPROC
epoxy_glVertexAttrib2dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2801 /* "glVertexAttrib2dv" */,
        2802 /* "glVertexAttrib2dvARB" */,
        2802 /* "glVertexAttrib2dvARB" */,
        2803 /* "glVertexAttrib2dvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2801] /* "glVertexAttrib2dv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2DVARBPROC
epoxy_glVertexAttrib2dvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2802 /* "glVertexAttrib2dvARB" */,
        2802 /* "glVertexAttrib2dvARB" */,
        2801 /* "glVertexAttrib2dv" */,
        2803 /* "glVertexAttrib2dvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2802] /* "glVertexAttrib2dvARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2DVNVPROC
epoxy_glVertexAttrib2dvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2803 /* "glVertexAttrib2dvNV" */,
        2801 /* "glVertexAttrib2dv" */,
        2802 /* "glVertexAttrib2dvARB" */,
        2802 /* "glVertexAttrib2dvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2803] /* "glVertexAttrib2dvNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2FPROC
epoxy_glVertexAttrib2f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2804 /* "glVertexAttrib2f" */,
        2804 /* "glVertexAttrib2f" */,
        2805 /* "glVertexAttrib2fARB" */,
        2805 /* "glVertexAttrib2fARB" */,
        2806 /* "glVertexAttrib2fNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2804] /* "glVertexAttrib2f" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2FARBPROC
epoxy_glVertexAttrib2fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2805 /* "glVertexAttrib2fARB" */,
        2805 /* "glVertexAttrib2fARB" */,
        2804 /* "glVertexAttrib2f" */,
        2804 /* "glVertexAttrib2f" */,
        2806 /* "glVertexAttrib2fNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2805] /* "glVertexAttrib2fARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2FNVPROC
epoxy_glVertexAttrib2fNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2806 /* "glVertexAttrib2fNV" */,
        2804 /* "glVertexAttrib2f" */,
        2804 /* "glVertexAttrib2f" */,
        2805 /* "glVertexAttrib2fARB" */,
        2805 /* "glVertexAttrib2fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2806] /* "glVertexAttrib2fNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2FVPROC
epoxy_glVertexAttrib2fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2807 /* "glVertexAttrib2fv" */,
        2807 /* "glVertexAttrib2fv" */,
        2808 /* "glVertexAttrib2fvARB" */,
        2808 /* "glVertexAttrib2fvARB" */,
        2809 /* "glVertexAttrib2fvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2807] /* "glVertexAttrib2fv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2FVARBPROC
epoxy_glVertexAttrib2fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2808 /* "glVertexAttrib2fvARB" */,
        2808 /* "glVertexAttrib2fvARB" */,
        2807 /* "glVertexAttrib2fv" */,
        2807 /* "glVertexAttrib2fv" */,
        2809 /* "glVertexAttrib2fvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2808] /* "glVertexAttrib2fvARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2FVNVPROC
epoxy_glVertexAttrib2fvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2809 /* "glVertexAttrib2fvNV" */,
        2807 /* "glVertexAttrib2fv" */,
        2807 /* "glVertexAttrib2fv" */,
        2808 /* "glVertexAttrib2fvARB" */,
        2808 /* "glVertexAttrib2fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2809] /* "glVertexAttrib2fvNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2HNVPROC
epoxy_glVertexAttrib2hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2810 /* glVertexAttrib2hNV */);
}

static PFNGLVERTEXATTRIB2HVNVPROC
epoxy_glVertexAttrib2hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2811 /* glVertexAttrib2hvNV */);
}

static PFNGLVERTEXATTRIB2SPROC
epoxy_glVertexAttrib2s_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2812 /* "glVertexAttrib2s" */,
        2813 /* "glVertexAttrib2sARB" */,
        2813 /* "glVertexAttrib2sARB" */,
        2814 /* "glVertexAttrib2sNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2812] /* "glVertexAttrib2s" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2SARBPROC
epoxy_glVertexAttrib2sARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2813 /* "glVertexAttrib2sARB" */,
        2813 /* "glVertexAttrib2sARB" */,
        2812 /* "glVertexAttrib2s" */,
        2814 /* "glVertexAttrib2sNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2813] /* "glVertexAttrib2sARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2SNVPROC
epoxy_glVertexAttrib2sNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2814 /* "glVertexAttrib2sNV" */,
        2812 /* "glVertexAttrib2s" */,
        2813 /* "glVertexAttrib2sARB" */,
        2813 /* "glVertexAttrib2sARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2814] /* "glVertexAttrib2sNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2SVPROC
epoxy_glVertexAttrib2sv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2815 /* "glVertexAttrib2sv" */,
        2816 /* "glVertexAttrib2svARB" */,
        2816 /* "glVertexAttrib2svARB" */,
        2817 /* "glVertexAttrib2svNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2815] /* "glVertexAttrib2sv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2SVARBPROC
epoxy_glVertexAttrib2svARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2816 /* "glVertexAttrib2svARB" */,
        2816 /* "glVertexAttrib2svARB" */,
        2815 /* "glVertexAttrib2sv" */,
        2817 /* "glVertexAttrib2svNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2816] /* "glVertexAttrib2svARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB2SVNVPROC
epoxy_glVertexAttrib2svNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2817 /* "glVertexAttrib2svNV" */,
        2815 /* "glVertexAttrib2sv" */,
        2816 /* "glVertexAttrib2svARB" */,
        2816 /* "glVertexAttrib2svARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2817] /* "glVertexAttrib2svNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3DPROC
epoxy_glVertexAttrib3d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2818 /* "glVertexAttrib3d" */,
        2819 /* "glVertexAttrib3dARB" */,
        2819 /* "glVertexAttrib3dARB" */,
        2820 /* "glVertexAttrib3dNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2818] /* "glVertexAttrib3d" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3DARBPROC
epoxy_glVertexAttrib3dARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2819 /* "glVertexAttrib3dARB" */,
        2819 /* "glVertexAttrib3dARB" */,
        2818 /* "glVertexAttrib3d" */,
        2820 /* "glVertexAttrib3dNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2819] /* "glVertexAttrib3dARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3DNVPROC
epoxy_glVertexAttrib3dNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2820 /* "glVertexAttrib3dNV" */,
        2818 /* "glVertexAttrib3d" */,
        2819 /* "glVertexAttrib3dARB" */,
        2819 /* "glVertexAttrib3dARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2820] /* "glVertexAttrib3dNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3DVPROC
epoxy_glVertexAttrib3dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2821 /* "glVertexAttrib3dv" */,
        2822 /* "glVertexAttrib3dvARB" */,
        2822 /* "glVertexAttrib3dvARB" */,
        2823 /* "glVertexAttrib3dvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2821] /* "glVertexAttrib3dv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3DVARBPROC
epoxy_glVertexAttrib3dvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2822 /* "glVertexAttrib3dvARB" */,
        2822 /* "glVertexAttrib3dvARB" */,
        2821 /* "glVertexAttrib3dv" */,
        2823 /* "glVertexAttrib3dvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2822] /* "glVertexAttrib3dvARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3DVNVPROC
epoxy_glVertexAttrib3dvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2823 /* "glVertexAttrib3dvNV" */,
        2821 /* "glVertexAttrib3dv" */,
        2822 /* "glVertexAttrib3dvARB" */,
        2822 /* "glVertexAttrib3dvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2823] /* "glVertexAttrib3dvNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3FPROC
epoxy_glVertexAttrib3f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2824 /* "glVertexAttrib3f" */,
        2824 /* "glVertexAttrib3f" */,
        2825 /* "glVertexAttrib3fARB" */,
        2825 /* "glVertexAttrib3fARB" */,
        2826 /* "glVertexAttrib3fNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2824] /* "glVertexAttrib3f" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3FARBPROC
epoxy_glVertexAttrib3fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2825 /* "glVertexAttrib3fARB" */,
        2825 /* "glVertexAttrib3fARB" */,
        2824 /* "glVertexAttrib3f" */,
        2824 /* "glVertexAttrib3f" */,
        2826 /* "glVertexAttrib3fNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2825] /* "glVertexAttrib3fARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3FNVPROC
epoxy_glVertexAttrib3fNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2826 /* "glVertexAttrib3fNV" */,
        2824 /* "glVertexAttrib3f" */,
        2824 /* "glVertexAttrib3f" */,
        2825 /* "glVertexAttrib3fARB" */,
        2825 /* "glVertexAttrib3fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2826] /* "glVertexAttrib3fNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3FVPROC
epoxy_glVertexAttrib3fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2827 /* "glVertexAttrib3fv" */,
        2827 /* "glVertexAttrib3fv" */,
        2828 /* "glVertexAttrib3fvARB" */,
        2828 /* "glVertexAttrib3fvARB" */,
        2829 /* "glVertexAttrib3fvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2827] /* "glVertexAttrib3fv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3FVARBPROC
epoxy_glVertexAttrib3fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2828 /* "glVertexAttrib3fvARB" */,
        2828 /* "glVertexAttrib3fvARB" */,
        2827 /* "glVertexAttrib3fv" */,
        2827 /* "glVertexAttrib3fv" */,
        2829 /* "glVertexAttrib3fvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2828] /* "glVertexAttrib3fvARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3FVNVPROC
epoxy_glVertexAttrib3fvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2829 /* "glVertexAttrib3fvNV" */,
        2827 /* "glVertexAttrib3fv" */,
        2827 /* "glVertexAttrib3fv" */,
        2828 /* "glVertexAttrib3fvARB" */,
        2828 /* "glVertexAttrib3fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2829] /* "glVertexAttrib3fvNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3HNVPROC
epoxy_glVertexAttrib3hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2830 /* glVertexAttrib3hNV */);
}

static PFNGLVERTEXATTRIB3HVNVPROC
epoxy_glVertexAttrib3hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2831 /* glVertexAttrib3hvNV */);
}

static PFNGLVERTEXATTRIB3SPROC
epoxy_glVertexAttrib3s_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2832 /* "glVertexAttrib3s" */,
        2833 /* "glVertexAttrib3sARB" */,
        2833 /* "glVertexAttrib3sARB" */,
        2834 /* "glVertexAttrib3sNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2832] /* "glVertexAttrib3s" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3SARBPROC
epoxy_glVertexAttrib3sARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2833 /* "glVertexAttrib3sARB" */,
        2833 /* "glVertexAttrib3sARB" */,
        2832 /* "glVertexAttrib3s" */,
        2834 /* "glVertexAttrib3sNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2833] /* "glVertexAttrib3sARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3SNVPROC
epoxy_glVertexAttrib3sNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2834 /* "glVertexAttrib3sNV" */,
        2832 /* "glVertexAttrib3s" */,
        2833 /* "glVertexAttrib3sARB" */,
        2833 /* "glVertexAttrib3sARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2834] /* "glVertexAttrib3sNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3SVPROC
epoxy_glVertexAttrib3sv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2835 /* "glVertexAttrib3sv" */,
        2836 /* "glVertexAttrib3svARB" */,
        2836 /* "glVertexAttrib3svARB" */,
        2837 /* "glVertexAttrib3svNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2835] /* "glVertexAttrib3sv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3SVARBPROC
epoxy_glVertexAttrib3svARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2836 /* "glVertexAttrib3svARB" */,
        2836 /* "glVertexAttrib3svARB" */,
        2835 /* "glVertexAttrib3sv" */,
        2837 /* "glVertexAttrib3svNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2836] /* "glVertexAttrib3svARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB3SVNVPROC
epoxy_glVertexAttrib3svNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2837 /* "glVertexAttrib3svNV" */,
        2835 /* "glVertexAttrib3sv" */,
        2836 /* "glVertexAttrib3svARB" */,
        2836 /* "glVertexAttrib3svARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2837] /* "glVertexAttrib3svNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4NBVPROC
epoxy_glVertexAttrib4Nbv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2838 /* "glVertexAttrib4Nbv" */,
        2839 /* "glVertexAttrib4NbvARB" */,
        2839 /* "glVertexAttrib4NbvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2838] /* "glVertexAttrib4Nbv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4NBVARBPROC
epoxy_glVertexAttrib4NbvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2839 /* "glVertexAttrib4NbvARB" */,
        2839 /* "glVertexAttrib4NbvARB" */,
        2838 /* "glVertexAttrib4Nbv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2839] /* "glVertexAttrib4NbvARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4NIVPROC
epoxy_glVertexAttrib4Niv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2840 /* "glVertexAttrib4Niv" */,
        2841 /* "glVertexAttrib4NivARB" */,
        2841 /* "glVertexAttrib4NivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2840] /* "glVertexAttrib4Niv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4NIVARBPROC
epoxy_glVertexAttrib4NivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2841 /* "glVertexAttrib4NivARB" */,
        2841 /* "glVertexAttrib4NivARB" */,
        2840 /* "glVertexAttrib4Niv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2841] /* "glVertexAttrib4NivARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4NSVPROC
epoxy_glVertexAttrib4Nsv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2842 /* "glVertexAttrib4Nsv" */,
        2843 /* "glVertexAttrib4NsvARB" */,
        2843 /* "glVertexAttrib4NsvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2842] /* "glVertexAttrib4Nsv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4NSVARBPROC
epoxy_glVertexAttrib4NsvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2843 /* "glVertexAttrib4NsvARB" */,
        2843 /* "glVertexAttrib4NsvARB" */,
        2842 /* "glVertexAttrib4Nsv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2843] /* "glVertexAttrib4NsvARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4NUBPROC
epoxy_glVertexAttrib4Nub_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2844 /* "glVertexAttrib4Nub" */,
        2845 /* "glVertexAttrib4NubARB" */,
        2845 /* "glVertexAttrib4NubARB" */,
        2876 /* "glVertexAttrib4ubNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2844] /* "glVertexAttrib4Nub" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4NUBARBPROC
epoxy_glVertexAttrib4NubARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2845 /* "glVertexAttrib4NubARB" */,
        2845 /* "glVertexAttrib4NubARB" */,
        2844 /* "glVertexAttrib4Nub" */,
        2876 /* "glVertexAttrib4ubNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2845] /* "glVertexAttrib4NubARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4NUBVPROC
epoxy_glVertexAttrib4Nubv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2846 /* "glVertexAttrib4Nubv" */,
        2847 /* "glVertexAttrib4NubvARB" */,
        2847 /* "glVertexAttrib4NubvARB" */,
        2879 /* "glVertexAttrib4ubvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2846] /* "glVertexAttrib4Nubv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4NUBVARBPROC
epoxy_glVertexAttrib4NubvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2847 /* "glVertexAttrib4NubvARB" */,
        2847 /* "glVertexAttrib4NubvARB" */,
        2846 /* "glVertexAttrib4Nubv" */,
        2879 /* "glVertexAttrib4ubvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2847] /* "glVertexAttrib4NubvARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4NUIVPROC
epoxy_glVertexAttrib4Nuiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2848 /* "glVertexAttrib4Nuiv" */,
        2849 /* "glVertexAttrib4NuivARB" */,
        2849 /* "glVertexAttrib4NuivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2848] /* "glVertexAttrib4Nuiv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4NUIVARBPROC
epoxy_glVertexAttrib4NuivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2849 /* "glVertexAttrib4NuivARB" */,
        2849 /* "glVertexAttrib4NuivARB" */,
        2848 /* "glVertexAttrib4Nuiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2849] /* "glVertexAttrib4NuivARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4NUSVPROC
epoxy_glVertexAttrib4Nusv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2850 /* "glVertexAttrib4Nusv" */,
        2851 /* "glVertexAttrib4NusvARB" */,
        2851 /* "glVertexAttrib4NusvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2850] /* "glVertexAttrib4Nusv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4NUSVARBPROC
epoxy_glVertexAttrib4NusvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2851 /* "glVertexAttrib4NusvARB" */,
        2851 /* "glVertexAttrib4NusvARB" */,
        2850 /* "glVertexAttrib4Nusv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2851] /* "glVertexAttrib4NusvARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4BVPROC
epoxy_glVertexAttrib4bv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2852 /* "glVertexAttrib4bv" */,
        2853 /* "glVertexAttrib4bvARB" */,
        2853 /* "glVertexAttrib4bvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2852] /* "glVertexAttrib4bv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4BVARBPROC
epoxy_glVertexAttrib4bvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2853 /* "glVertexAttrib4bvARB" */,
        2853 /* "glVertexAttrib4bvARB" */,
        2852 /* "glVertexAttrib4bv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2853] /* "glVertexAttrib4bvARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4DPROC
epoxy_glVertexAttrib4d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2854 /* "glVertexAttrib4d" */,
        2855 /* "glVertexAttrib4dARB" */,
        2855 /* "glVertexAttrib4dARB" */,
        2856 /* "glVertexAttrib4dNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2854] /* "glVertexAttrib4d" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4DARBPROC
epoxy_glVertexAttrib4dARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2855 /* "glVertexAttrib4dARB" */,
        2855 /* "glVertexAttrib4dARB" */,
        2854 /* "glVertexAttrib4d" */,
        2856 /* "glVertexAttrib4dNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2855] /* "glVertexAttrib4dARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4DNVPROC
epoxy_glVertexAttrib4dNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2856 /* "glVertexAttrib4dNV" */,
        2854 /* "glVertexAttrib4d" */,
        2855 /* "glVertexAttrib4dARB" */,
        2855 /* "glVertexAttrib4dARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2856] /* "glVertexAttrib4dNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4DVPROC
epoxy_glVertexAttrib4dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2857 /* "glVertexAttrib4dv" */,
        2858 /* "glVertexAttrib4dvARB" */,
        2858 /* "glVertexAttrib4dvARB" */,
        2859 /* "glVertexAttrib4dvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2857] /* "glVertexAttrib4dv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4DVARBPROC
epoxy_glVertexAttrib4dvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2858 /* "glVertexAttrib4dvARB" */,
        2858 /* "glVertexAttrib4dvARB" */,
        2857 /* "glVertexAttrib4dv" */,
        2859 /* "glVertexAttrib4dvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2858] /* "glVertexAttrib4dvARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4DVNVPROC
epoxy_glVertexAttrib4dvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2859 /* "glVertexAttrib4dvNV" */,
        2857 /* "glVertexAttrib4dv" */,
        2858 /* "glVertexAttrib4dvARB" */,
        2858 /* "glVertexAttrib4dvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2859] /* "glVertexAttrib4dvNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4FPROC
epoxy_glVertexAttrib4f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2860 /* "glVertexAttrib4f" */,
        2860 /* "glVertexAttrib4f" */,
        2861 /* "glVertexAttrib4fARB" */,
        2861 /* "glVertexAttrib4fARB" */,
        2862 /* "glVertexAttrib4fNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2860] /* "glVertexAttrib4f" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4FARBPROC
epoxy_glVertexAttrib4fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2861 /* "glVertexAttrib4fARB" */,
        2861 /* "glVertexAttrib4fARB" */,
        2860 /* "glVertexAttrib4f" */,
        2860 /* "glVertexAttrib4f" */,
        2862 /* "glVertexAttrib4fNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2861] /* "glVertexAttrib4fARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4FNVPROC
epoxy_glVertexAttrib4fNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2862 /* "glVertexAttrib4fNV" */,
        2860 /* "glVertexAttrib4f" */,
        2860 /* "glVertexAttrib4f" */,
        2861 /* "glVertexAttrib4fARB" */,
        2861 /* "glVertexAttrib4fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2862] /* "glVertexAttrib4fNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4FVPROC
epoxy_glVertexAttrib4fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2863 /* "glVertexAttrib4fv" */,
        2863 /* "glVertexAttrib4fv" */,
        2864 /* "glVertexAttrib4fvARB" */,
        2864 /* "glVertexAttrib4fvARB" */,
        2865 /* "glVertexAttrib4fvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2863] /* "glVertexAttrib4fv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4FVARBPROC
epoxy_glVertexAttrib4fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2864 /* "glVertexAttrib4fvARB" */,
        2864 /* "glVertexAttrib4fvARB" */,
        2863 /* "glVertexAttrib4fv" */,
        2863 /* "glVertexAttrib4fv" */,
        2865 /* "glVertexAttrib4fvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2864] /* "glVertexAttrib4fvARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4FVNVPROC
epoxy_glVertexAttrib4fvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2865 /* "glVertexAttrib4fvNV" */,
        2863 /* "glVertexAttrib4fv" */,
        2863 /* "glVertexAttrib4fv" */,
        2864 /* "glVertexAttrib4fvARB" */,
        2864 /* "glVertexAttrib4fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2865] /* "glVertexAttrib4fvNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4HNVPROC
epoxy_glVertexAttrib4hNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2866 /* glVertexAttrib4hNV */);
}

static PFNGLVERTEXATTRIB4HVNVPROC
epoxy_glVertexAttrib4hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2867 /* glVertexAttrib4hvNV */);
}

static PFNGLVERTEXATTRIB4IVPROC
epoxy_glVertexAttrib4iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2868 /* "glVertexAttrib4iv" */,
        2869 /* "glVertexAttrib4ivARB" */,
        2869 /* "glVertexAttrib4ivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2868] /* "glVertexAttrib4iv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4IVARBPROC
epoxy_glVertexAttrib4ivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2869 /* "glVertexAttrib4ivARB" */,
        2869 /* "glVertexAttrib4ivARB" */,
        2868 /* "glVertexAttrib4iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2869] /* "glVertexAttrib4ivARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4SPROC
epoxy_glVertexAttrib4s_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2870 /* "glVertexAttrib4s" */,
        2871 /* "glVertexAttrib4sARB" */,
        2871 /* "glVertexAttrib4sARB" */,
        2872 /* "glVertexAttrib4sNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2870] /* "glVertexAttrib4s" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4SARBPROC
epoxy_glVertexAttrib4sARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2871 /* "glVertexAttrib4sARB" */,
        2871 /* "glVertexAttrib4sARB" */,
        2870 /* "glVertexAttrib4s" */,
        2872 /* "glVertexAttrib4sNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2871] /* "glVertexAttrib4sARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4SNVPROC
epoxy_glVertexAttrib4sNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2872 /* "glVertexAttrib4sNV" */,
        2870 /* "glVertexAttrib4s" */,
        2871 /* "glVertexAttrib4sARB" */,
        2871 /* "glVertexAttrib4sARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2872] /* "glVertexAttrib4sNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4SVPROC
epoxy_glVertexAttrib4sv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2873 /* "glVertexAttrib4sv" */,
        2874 /* "glVertexAttrib4svARB" */,
        2874 /* "glVertexAttrib4svARB" */,
        2875 /* "glVertexAttrib4svNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2873] /* "glVertexAttrib4sv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4SVARBPROC
epoxy_glVertexAttrib4svARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        GL_extension_GL_NV_vertex_program,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2874 /* "glVertexAttrib4svARB" */,
        2874 /* "glVertexAttrib4svARB" */,
        2873 /* "glVertexAttrib4sv" */,
        2875 /* "glVertexAttrib4svNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2874] /* "glVertexAttrib4svARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4SVNVPROC
epoxy_glVertexAttrib4svNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2875 /* "glVertexAttrib4svNV" */,
        2873 /* "glVertexAttrib4sv" */,
        2874 /* "glVertexAttrib4svARB" */,
        2874 /* "glVertexAttrib4svARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2875] /* "glVertexAttrib4svNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4UBNVPROC
epoxy_glVertexAttrib4ubNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2876 /* "glVertexAttrib4ubNV" */,
        2844 /* "glVertexAttrib4Nub" */,
        2845 /* "glVertexAttrib4NubARB" */,
        2845 /* "glVertexAttrib4NubARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2876] /* "glVertexAttrib4ubNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4UBVPROC
epoxy_glVertexAttrib4ubv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2877 /* "glVertexAttrib4ubv" */,
        2878 /* "glVertexAttrib4ubvARB" */,
        2878 /* "glVertexAttrib4ubvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2877] /* "glVertexAttrib4ubv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4UBVARBPROC
epoxy_glVertexAttrib4ubvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2878 /* "glVertexAttrib4ubvARB" */,
        2878 /* "glVertexAttrib4ubvARB" */,
        2877 /* "glVertexAttrib4ubv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2878] /* "glVertexAttrib4ubvARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4UBVNVPROC
epoxy_glVertexAttrib4ubvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program,
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2879 /* "glVertexAttrib4ubvNV" */,
        2846 /* "glVertexAttrib4Nubv" */,
        2847 /* "glVertexAttrib4NubvARB" */,
        2847 /* "glVertexAttrib4NubvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2879] /* "glVertexAttrib4ubvNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4UIVPROC
epoxy_glVertexAttrib4uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2880 /* "glVertexAttrib4uiv" */,
        2881 /* "glVertexAttrib4uivARB" */,
        2881 /* "glVertexAttrib4uivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2880] /* "glVertexAttrib4uiv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4UIVARBPROC
epoxy_glVertexAttrib4uivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2881 /* "glVertexAttrib4uivARB" */,
        2881 /* "glVertexAttrib4uivARB" */,
        2880 /* "glVertexAttrib4uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2881] /* "glVertexAttrib4uivARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4USVPROC
epoxy_glVertexAttrib4usv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2882 /* "glVertexAttrib4usv" */,
        2883 /* "glVertexAttrib4usvARB" */,
        2883 /* "glVertexAttrib4usvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2882] /* "glVertexAttrib4usv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIB4USVARBPROC
epoxy_glVertexAttrib4usvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2883 /* "glVertexAttrib4usvARB" */,
        2883 /* "glVertexAttrib4usvARB" */,
        2882 /* "glVertexAttrib4usv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2883] /* "glVertexAttrib4usvARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBARRAYOBJECTATIPROC
epoxy_glVertexAttribArrayObjectATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_attrib_array_object, 2884 /* glVertexAttribArrayObjectATI */);
}

static PFNGLVERTEXATTRIBBINDINGPROC
epoxy_glVertexAttribBinding_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_vertex_attrib_binding,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2885 /* "glVertexAttribBinding" */,
        2885 /* "glVertexAttribBinding" */,
        2885 /* "glVertexAttribBinding" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2885] /* "glVertexAttribBinding" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBDIVISORPROC
epoxy_glVertexAttribDivisor_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        OpenGL_ES_3_0,
        GL_extension_GL_ANGLE_instanced_arrays,
        GL_extension_GL_ARB_instanced_arrays,
        GL_extension_GL_EXT_instanced_arrays,
        GL_extension_GL_NV_instanced_arrays,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2886 /* "glVertexAttribDivisor" */,
        2886 /* "glVertexAttribDivisor" */,
        2887 /* "glVertexAttribDivisorANGLE" */,
        2888 /* "glVertexAttribDivisorARB" */,
        2889 /* "glVertexAttribDivisorEXT" */,
        2890 /* "glVertexAttribDivisorNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2886] /* "glVertexAttribDivisor" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBDIVISORANGLEPROC
epoxy_glVertexAttribDivisorANGLE_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ANGLE_instanced_arrays,
        Desktop_OpenGL_3_3,
        OpenGL_ES_3_0,
        GL_extension_GL_ARB_instanced_arrays,
        GL_extension_GL_EXT_instanced_arrays,
        GL_extension_GL_NV_instanced_arrays,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2887 /* "glVertexAttribDivisorANGLE" */,
        2886 /* "glVertexAttribDivisor" */,
        2886 /* "glVertexAttribDivisor" */,
        2888 /* "glVertexAttribDivisorARB" */,
        2889 /* "glVertexAttribDivisorEXT" */,
        2890 /* "glVertexAttribDivisorNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2887] /* "glVertexAttribDivisorANGLE" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBDIVISORARBPROC
epoxy_glVertexAttribDivisorARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_instanced_arrays,
        Desktop_OpenGL_3_3,
        OpenGL_ES_3_0,
        GL_extension_GL_ANGLE_instanced_arrays,
        GL_extension_GL_EXT_instanced_arrays,
        GL_extension_GL_NV_instanced_arrays,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2888 /* "glVertexAttribDivisorARB" */,
        2886 /* "glVertexAttribDivisor" */,
        2886 /* "glVertexAttribDivisor" */,
        2887 /* "glVertexAttribDivisorANGLE" */,
        2889 /* "glVertexAttribDivisorEXT" */,
        2890 /* "glVertexAttribDivisorNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2888] /* "glVertexAttribDivisorARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBDIVISOREXTPROC
epoxy_glVertexAttribDivisorEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_instanced_arrays,
        Desktop_OpenGL_3_3,
        OpenGL_ES_3_0,
        GL_extension_GL_ANGLE_instanced_arrays,
        GL_extension_GL_ARB_instanced_arrays,
        GL_extension_GL_NV_instanced_arrays,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2889 /* "glVertexAttribDivisorEXT" */,
        2886 /* "glVertexAttribDivisor" */,
        2886 /* "glVertexAttribDivisor" */,
        2887 /* "glVertexAttribDivisorANGLE" */,
        2888 /* "glVertexAttribDivisorARB" */,
        2890 /* "glVertexAttribDivisorNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2889] /* "glVertexAttribDivisorEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBDIVISORNVPROC
epoxy_glVertexAttribDivisorNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_instanced_arrays,
        Desktop_OpenGL_3_3,
        OpenGL_ES_3_0,
        GL_extension_GL_ANGLE_instanced_arrays,
        GL_extension_GL_ARB_instanced_arrays,
        GL_extension_GL_EXT_instanced_arrays,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2890 /* "glVertexAttribDivisorNV" */,
        2886 /* "glVertexAttribDivisor" */,
        2886 /* "glVertexAttribDivisor" */,
        2887 /* "glVertexAttribDivisorANGLE" */,
        2888 /* "glVertexAttribDivisorARB" */,
        2889 /* "glVertexAttribDivisorEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2890] /* "glVertexAttribDivisorNV" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBFORMATPROC
epoxy_glVertexAttribFormat_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_vertex_attrib_binding,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2891 /* "glVertexAttribFormat" */,
        2891 /* "glVertexAttribFormat" */,
        2891 /* "glVertexAttribFormat" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2891] /* "glVertexAttribFormat" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBFORMATNVPROC
epoxy_glVertexAttribFormatNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_buffer_unified_memory, 2892 /* glVertexAttribFormatNV */);
}

static PFNGLVERTEXATTRIBI1IPROC
epoxy_glVertexAttribI1i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2893 /* "glVertexAttribI1i" */,
        2894 /* "glVertexAttribI1iEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2893] /* "glVertexAttribI1i" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI1IEXTPROC
epoxy_glVertexAttribI1iEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2894 /* "glVertexAttribI1iEXT" */,
        2893 /* "glVertexAttribI1i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2894] /* "glVertexAttribI1iEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI1IVPROC
epoxy_glVertexAttribI1iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2895 /* "glVertexAttribI1iv" */,
        2896 /* "glVertexAttribI1ivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2895] /* "glVertexAttribI1iv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI1IVEXTPROC
epoxy_glVertexAttribI1ivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2896 /* "glVertexAttribI1ivEXT" */,
        2895 /* "glVertexAttribI1iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2896] /* "glVertexAttribI1ivEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI1UIPROC
epoxy_glVertexAttribI1ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2897 /* "glVertexAttribI1ui" */,
        2898 /* "glVertexAttribI1uiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2897] /* "glVertexAttribI1ui" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI1UIEXTPROC
epoxy_glVertexAttribI1uiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2898 /* "glVertexAttribI1uiEXT" */,
        2897 /* "glVertexAttribI1ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2898] /* "glVertexAttribI1uiEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI1UIVPROC
epoxy_glVertexAttribI1uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2899 /* "glVertexAttribI1uiv" */,
        2900 /* "glVertexAttribI1uivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2899] /* "glVertexAttribI1uiv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI1UIVEXTPROC
epoxy_glVertexAttribI1uivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2900 /* "glVertexAttribI1uivEXT" */,
        2899 /* "glVertexAttribI1uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2900] /* "glVertexAttribI1uivEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI2IPROC
epoxy_glVertexAttribI2i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2901 /* "glVertexAttribI2i" */,
        2902 /* "glVertexAttribI2iEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2901] /* "glVertexAttribI2i" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI2IEXTPROC
epoxy_glVertexAttribI2iEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2902 /* "glVertexAttribI2iEXT" */,
        2901 /* "glVertexAttribI2i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2902] /* "glVertexAttribI2iEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI2IVPROC
epoxy_glVertexAttribI2iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2903 /* "glVertexAttribI2iv" */,
        2904 /* "glVertexAttribI2ivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2903] /* "glVertexAttribI2iv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI2IVEXTPROC
epoxy_glVertexAttribI2ivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2904 /* "glVertexAttribI2ivEXT" */,
        2903 /* "glVertexAttribI2iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2904] /* "glVertexAttribI2ivEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI2UIPROC
epoxy_glVertexAttribI2ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2905 /* "glVertexAttribI2ui" */,
        2906 /* "glVertexAttribI2uiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2905] /* "glVertexAttribI2ui" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI2UIEXTPROC
epoxy_glVertexAttribI2uiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2906 /* "glVertexAttribI2uiEXT" */,
        2905 /* "glVertexAttribI2ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2906] /* "glVertexAttribI2uiEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI2UIVPROC
epoxy_glVertexAttribI2uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2907 /* "glVertexAttribI2uiv" */,
        2908 /* "glVertexAttribI2uivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2907] /* "glVertexAttribI2uiv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI2UIVEXTPROC
epoxy_glVertexAttribI2uivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2908 /* "glVertexAttribI2uivEXT" */,
        2907 /* "glVertexAttribI2uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2908] /* "glVertexAttribI2uivEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI3IPROC
epoxy_glVertexAttribI3i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2909 /* "glVertexAttribI3i" */,
        2910 /* "glVertexAttribI3iEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2909] /* "glVertexAttribI3i" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI3IEXTPROC
epoxy_glVertexAttribI3iEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2910 /* "glVertexAttribI3iEXT" */,
        2909 /* "glVertexAttribI3i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2910] /* "glVertexAttribI3iEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI3IVPROC
epoxy_glVertexAttribI3iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2911 /* "glVertexAttribI3iv" */,
        2912 /* "glVertexAttribI3ivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2911] /* "glVertexAttribI3iv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI3IVEXTPROC
epoxy_glVertexAttribI3ivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2912 /* "glVertexAttribI3ivEXT" */,
        2911 /* "glVertexAttribI3iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2912] /* "glVertexAttribI3ivEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI3UIPROC
epoxy_glVertexAttribI3ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2913 /* "glVertexAttribI3ui" */,
        2914 /* "glVertexAttribI3uiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2913] /* "glVertexAttribI3ui" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI3UIEXTPROC
epoxy_glVertexAttribI3uiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2914 /* "glVertexAttribI3uiEXT" */,
        2913 /* "glVertexAttribI3ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2914] /* "glVertexAttribI3uiEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI3UIVPROC
epoxy_glVertexAttribI3uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2915 /* "glVertexAttribI3uiv" */,
        2916 /* "glVertexAttribI3uivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2915] /* "glVertexAttribI3uiv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI3UIVEXTPROC
epoxy_glVertexAttribI3uivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2916 /* "glVertexAttribI3uivEXT" */,
        2915 /* "glVertexAttribI3uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2916] /* "glVertexAttribI3uivEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4BVPROC
epoxy_glVertexAttribI4bv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2917 /* "glVertexAttribI4bv" */,
        2918 /* "glVertexAttribI4bvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2917] /* "glVertexAttribI4bv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4BVEXTPROC
epoxy_glVertexAttribI4bvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2918 /* "glVertexAttribI4bvEXT" */,
        2917 /* "glVertexAttribI4bv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2918] /* "glVertexAttribI4bvEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4IPROC
epoxy_glVertexAttribI4i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2919 /* "glVertexAttribI4i" */,
        2919 /* "glVertexAttribI4i" */,
        2920 /* "glVertexAttribI4iEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2919] /* "glVertexAttribI4i" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4IEXTPROC
epoxy_glVertexAttribI4iEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2920 /* "glVertexAttribI4iEXT" */,
        2919 /* "glVertexAttribI4i" */,
        2919 /* "glVertexAttribI4i" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2920] /* "glVertexAttribI4iEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4IVPROC
epoxy_glVertexAttribI4iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2921 /* "glVertexAttribI4iv" */,
        2921 /* "glVertexAttribI4iv" */,
        2922 /* "glVertexAttribI4ivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2921] /* "glVertexAttribI4iv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4IVEXTPROC
epoxy_glVertexAttribI4ivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2922 /* "glVertexAttribI4ivEXT" */,
        2921 /* "glVertexAttribI4iv" */,
        2921 /* "glVertexAttribI4iv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2922] /* "glVertexAttribI4ivEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4SVPROC
epoxy_glVertexAttribI4sv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2923 /* "glVertexAttribI4sv" */,
        2924 /* "glVertexAttribI4svEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2923] /* "glVertexAttribI4sv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4SVEXTPROC
epoxy_glVertexAttribI4svEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2924 /* "glVertexAttribI4svEXT" */,
        2923 /* "glVertexAttribI4sv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2924] /* "glVertexAttribI4svEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4UBVPROC
epoxy_glVertexAttribI4ubv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2925 /* "glVertexAttribI4ubv" */,
        2926 /* "glVertexAttribI4ubvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2925] /* "glVertexAttribI4ubv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4UBVEXTPROC
epoxy_glVertexAttribI4ubvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2926 /* "glVertexAttribI4ubvEXT" */,
        2925 /* "glVertexAttribI4ubv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2926] /* "glVertexAttribI4ubvEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4UIPROC
epoxy_glVertexAttribI4ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2927 /* "glVertexAttribI4ui" */,
        2927 /* "glVertexAttribI4ui" */,
        2928 /* "glVertexAttribI4uiEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2927] /* "glVertexAttribI4ui" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4UIEXTPROC
epoxy_glVertexAttribI4uiEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2928 /* "glVertexAttribI4uiEXT" */,
        2927 /* "glVertexAttribI4ui" */,
        2927 /* "glVertexAttribI4ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2928] /* "glVertexAttribI4uiEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4UIVPROC
epoxy_glVertexAttribI4uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2929 /* "glVertexAttribI4uiv" */,
        2929 /* "glVertexAttribI4uiv" */,
        2930 /* "glVertexAttribI4uivEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2929] /* "glVertexAttribI4uiv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4UIVEXTPROC
epoxy_glVertexAttribI4uivEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2930 /* "glVertexAttribI4uivEXT" */,
        2929 /* "glVertexAttribI4uiv" */,
        2929 /* "glVertexAttribI4uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2930] /* "glVertexAttribI4uivEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4USVPROC
epoxy_glVertexAttribI4usv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2931 /* "glVertexAttribI4usv" */,
        2932 /* "glVertexAttribI4usvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2931] /* "glVertexAttribI4usv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBI4USVEXTPROC
epoxy_glVertexAttribI4usvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2932 /* "glVertexAttribI4usvEXT" */,
        2931 /* "glVertexAttribI4usv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2932] /* "glVertexAttribI4usvEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBIFORMATPROC
epoxy_glVertexAttribIFormat_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_vertex_attrib_binding,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2933 /* "glVertexAttribIFormat" */,
        2933 /* "glVertexAttribIFormat" */,
        2933 /* "glVertexAttribIFormat" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2933] /* "glVertexAttribIFormat" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBIFORMATNVPROC
epoxy_glVertexAttribIFormatNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_buffer_unified_memory, 2934 /* glVertexAttribIFormatNV */);
}

static PFNGLVERTEXATTRIBIPOINTERPROC
epoxy_glVertexAttribIPointer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        GL_extension_GL_NV_vertex_program4,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2935 /* "glVertexAttribIPointer" */,
        2935 /* "glVertexAttribIPointer" */,
        2936 /* "glVertexAttribIPointerEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2935] /* "glVertexAttribIPointer" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBIPOINTEREXTPROC
epoxy_glVertexAttribIPointerEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_vertex_program4,
        Desktop_OpenGL_3_0,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2936 /* "glVertexAttribIPointerEXT" */,
        2935 /* "glVertexAttribIPointer" */,
        2935 /* "glVertexAttribIPointer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2936] /* "glVertexAttribIPointerEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL1DPROC
epoxy_glVertexAttribL1d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        GL_extension_GL_EXT_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2937 /* "glVertexAttribL1d" */,
        2937 /* "glVertexAttribL1d" */,
        2938 /* "glVertexAttribL1dEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2937] /* "glVertexAttribL1d" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL1DEXTPROC
epoxy_glVertexAttribL1dEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_vertex_attrib_64bit,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2938 /* "glVertexAttribL1dEXT" */,
        2937 /* "glVertexAttribL1d" */,
        2937 /* "glVertexAttribL1d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2938] /* "glVertexAttribL1dEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL1DVPROC
epoxy_glVertexAttribL1dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        GL_extension_GL_EXT_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2939 /* "glVertexAttribL1dv" */,
        2939 /* "glVertexAttribL1dv" */,
        2940 /* "glVertexAttribL1dvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2939] /* "glVertexAttribL1dv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL1DVEXTPROC
epoxy_glVertexAttribL1dvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_vertex_attrib_64bit,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2940 /* "glVertexAttribL1dvEXT" */,
        2939 /* "glVertexAttribL1dv" */,
        2939 /* "glVertexAttribL1dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2940] /* "glVertexAttribL1dvEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL1I64NVPROC
epoxy_glVertexAttribL1i64NV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2941 /* glVertexAttribL1i64NV */);
}

static PFNGLVERTEXATTRIBL1I64VNVPROC
epoxy_glVertexAttribL1i64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2942 /* glVertexAttribL1i64vNV */);
}

static PFNGLVERTEXATTRIBL1UI64ARBPROC
epoxy_glVertexAttribL1ui64ARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 2943 /* glVertexAttribL1ui64ARB */);
}

static PFNGLVERTEXATTRIBL1UI64NVPROC
epoxy_glVertexAttribL1ui64NV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2944 /* glVertexAttribL1ui64NV */);
}

static PFNGLVERTEXATTRIBL1UI64VARBPROC
epoxy_glVertexAttribL1ui64vARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_bindless_texture, 2945 /* glVertexAttribL1ui64vARB */);
}

static PFNGLVERTEXATTRIBL1UI64VNVPROC
epoxy_glVertexAttribL1ui64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2946 /* glVertexAttribL1ui64vNV */);
}

static PFNGLVERTEXATTRIBL2DPROC
epoxy_glVertexAttribL2d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        GL_extension_GL_EXT_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2947 /* "glVertexAttribL2d" */,
        2947 /* "glVertexAttribL2d" */,
        2948 /* "glVertexAttribL2dEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2947] /* "glVertexAttribL2d" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL2DEXTPROC
epoxy_glVertexAttribL2dEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_vertex_attrib_64bit,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2948 /* "glVertexAttribL2dEXT" */,
        2947 /* "glVertexAttribL2d" */,
        2947 /* "glVertexAttribL2d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2948] /* "glVertexAttribL2dEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL2DVPROC
epoxy_glVertexAttribL2dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        GL_extension_GL_EXT_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2949 /* "glVertexAttribL2dv" */,
        2949 /* "glVertexAttribL2dv" */,
        2950 /* "glVertexAttribL2dvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2949] /* "glVertexAttribL2dv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL2DVEXTPROC
epoxy_glVertexAttribL2dvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_vertex_attrib_64bit,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2950 /* "glVertexAttribL2dvEXT" */,
        2949 /* "glVertexAttribL2dv" */,
        2949 /* "glVertexAttribL2dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2950] /* "glVertexAttribL2dvEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL2I64NVPROC
epoxy_glVertexAttribL2i64NV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2951 /* glVertexAttribL2i64NV */);
}

static PFNGLVERTEXATTRIBL2I64VNVPROC
epoxy_glVertexAttribL2i64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2952 /* glVertexAttribL2i64vNV */);
}

static PFNGLVERTEXATTRIBL2UI64NVPROC
epoxy_glVertexAttribL2ui64NV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2953 /* glVertexAttribL2ui64NV */);
}

static PFNGLVERTEXATTRIBL2UI64VNVPROC
epoxy_glVertexAttribL2ui64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2954 /* glVertexAttribL2ui64vNV */);
}

static PFNGLVERTEXATTRIBL3DPROC
epoxy_glVertexAttribL3d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        GL_extension_GL_EXT_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2955 /* "glVertexAttribL3d" */,
        2955 /* "glVertexAttribL3d" */,
        2956 /* "glVertexAttribL3dEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2955] /* "glVertexAttribL3d" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL3DEXTPROC
epoxy_glVertexAttribL3dEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_vertex_attrib_64bit,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2956 /* "glVertexAttribL3dEXT" */,
        2955 /* "glVertexAttribL3d" */,
        2955 /* "glVertexAttribL3d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2956] /* "glVertexAttribL3dEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL3DVPROC
epoxy_glVertexAttribL3dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        GL_extension_GL_EXT_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2957 /* "glVertexAttribL3dv" */,
        2957 /* "glVertexAttribL3dv" */,
        2958 /* "glVertexAttribL3dvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2957] /* "glVertexAttribL3dv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL3DVEXTPROC
epoxy_glVertexAttribL3dvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_vertex_attrib_64bit,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2958 /* "glVertexAttribL3dvEXT" */,
        2957 /* "glVertexAttribL3dv" */,
        2957 /* "glVertexAttribL3dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2958] /* "glVertexAttribL3dvEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL3I64NVPROC
epoxy_glVertexAttribL3i64NV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2959 /* glVertexAttribL3i64NV */);
}

static PFNGLVERTEXATTRIBL3I64VNVPROC
epoxy_glVertexAttribL3i64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2960 /* glVertexAttribL3i64vNV */);
}

static PFNGLVERTEXATTRIBL3UI64NVPROC
epoxy_glVertexAttribL3ui64NV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2961 /* glVertexAttribL3ui64NV */);
}

static PFNGLVERTEXATTRIBL3UI64VNVPROC
epoxy_glVertexAttribL3ui64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2962 /* glVertexAttribL3ui64vNV */);
}

static PFNGLVERTEXATTRIBL4DPROC
epoxy_glVertexAttribL4d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        GL_extension_GL_EXT_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2963 /* "glVertexAttribL4d" */,
        2963 /* "glVertexAttribL4d" */,
        2964 /* "glVertexAttribL4dEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2963] /* "glVertexAttribL4d" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL4DEXTPROC
epoxy_glVertexAttribL4dEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_vertex_attrib_64bit,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2964 /* "glVertexAttribL4dEXT" */,
        2963 /* "glVertexAttribL4d" */,
        2963 /* "glVertexAttribL4d" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2964] /* "glVertexAttribL4dEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL4DVPROC
epoxy_glVertexAttribL4dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        GL_extension_GL_EXT_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2965 /* "glVertexAttribL4dv" */,
        2965 /* "glVertexAttribL4dv" */,
        2966 /* "glVertexAttribL4dvEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2965] /* "glVertexAttribL4dv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL4DVEXTPROC
epoxy_glVertexAttribL4dvEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_vertex_attrib_64bit,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2966 /* "glVertexAttribL4dvEXT" */,
        2965 /* "glVertexAttribL4dv" */,
        2965 /* "glVertexAttribL4dv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2966] /* "glVertexAttribL4dvEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBL4I64NVPROC
epoxy_glVertexAttribL4i64NV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2967 /* glVertexAttribL4i64NV */);
}

static PFNGLVERTEXATTRIBL4I64VNVPROC
epoxy_glVertexAttribL4i64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2968 /* glVertexAttribL4i64vNV */);
}

static PFNGLVERTEXATTRIBL4UI64NVPROC
epoxy_glVertexAttribL4ui64NV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2969 /* glVertexAttribL4ui64NV */);
}

static PFNGLVERTEXATTRIBL4UI64VNVPROC
epoxy_glVertexAttribL4ui64vNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2970 /* glVertexAttribL4ui64vNV */);
}

static PFNGLVERTEXATTRIBLFORMATPROC
epoxy_glVertexAttribLFormat_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_vertex_attrib_binding,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2971 /* "glVertexAttribLFormat" */,
        2971 /* "glVertexAttribLFormat" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2971] /* "glVertexAttribLFormat" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBLFORMATNVPROC
epoxy_glVertexAttribLFormatNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_attrib_integer_64bit, 2972 /* glVertexAttribLFormatNV */);
}

static PFNGLVERTEXATTRIBLPOINTERPROC
epoxy_glVertexAttribLPointer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        GL_extension_GL_EXT_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2973 /* "glVertexAttribLPointer" */,
        2973 /* "glVertexAttribLPointer" */,
        2974 /* "glVertexAttribLPointerEXT" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2973] /* "glVertexAttribLPointer" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBLPOINTEREXTPROC
epoxy_glVertexAttribLPointerEXT_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_EXT_vertex_attrib_64bit,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_vertex_attrib_64bit,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2974 /* "glVertexAttribLPointerEXT" */,
        2973 /* "glVertexAttribLPointer" */,
        2973 /* "glVertexAttribLPointer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2974] /* "glVertexAttribLPointerEXT" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBP1UIPROC
epoxy_glVertexAttribP1ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2975 /* "glVertexAttribP1ui" */,
        2975 /* "glVertexAttribP1ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2975] /* "glVertexAttribP1ui" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBP1UIVPROC
epoxy_glVertexAttribP1uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2976 /* "glVertexAttribP1uiv" */,
        2976 /* "glVertexAttribP1uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2976] /* "glVertexAttribP1uiv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBP2UIPROC
epoxy_glVertexAttribP2ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2977 /* "glVertexAttribP2ui" */,
        2977 /* "glVertexAttribP2ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2977] /* "glVertexAttribP2ui" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBP2UIVPROC
epoxy_glVertexAttribP2uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2978 /* "glVertexAttribP2uiv" */,
        2978 /* "glVertexAttribP2uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2978] /* "glVertexAttribP2uiv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBP3UIPROC
epoxy_glVertexAttribP3ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2979 /* "glVertexAttribP3ui" */,
        2979 /* "glVertexAttribP3ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2979] /* "glVertexAttribP3ui" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBP3UIVPROC
epoxy_glVertexAttribP3uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2980 /* "glVertexAttribP3uiv" */,
        2980 /* "glVertexAttribP3uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2980] /* "glVertexAttribP3uiv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBP4UIPROC
epoxy_glVertexAttribP4ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2981 /* "glVertexAttribP4ui" */,
        2981 /* "glVertexAttribP4ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2981] /* "glVertexAttribP4ui" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBP4UIVPROC
epoxy_glVertexAttribP4uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2982 /* "glVertexAttribP4uiv" */,
        2982 /* "glVertexAttribP4uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2982] /* "glVertexAttribP4uiv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBPARAMETERIAMDPROC
epoxy_glVertexAttribParameteriAMD_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_AMD_interleaved_elements, 2983 /* glVertexAttribParameteriAMD */);
}

static PFNGLVERTEXATTRIBPOINTERPROC
epoxy_glVertexAttribPointer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2984 /* "glVertexAttribPointer" */,
        2984 /* "glVertexAttribPointer" */,
        2985 /* "glVertexAttribPointerARB" */,
        2985 /* "glVertexAttribPointerARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2984] /* "glVertexAttribPointer" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBPOINTERARBPROC
epoxy_glVertexAttribPointerARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_vertex_program,
        GL_extension_GL_ARB_vertex_shader,
        Desktop_OpenGL_2_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        2985 /* "glVertexAttribPointerARB" */,
        2985 /* "glVertexAttribPointerARB" */,
        2984 /* "glVertexAttribPointer" */,
        2984 /* "glVertexAttribPointer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[2985] /* "glVertexAttribPointerARB" */,
                                providers, entrypoints);
}

static PFNGLVERTEXATTRIBPOINTERNVPROC
epoxy_glVertexAttribPointerNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 2986 /* glVertexAttribPointerNV */);
}

static PFNGLVERTEXATTRIBS1DVNVPROC
epoxy_glVertexAttribs1dvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 2987 /* glVertexAttribs1dvNV */);
}

static PFNGLVERTEXATTRIBS1FVNVPROC
epoxy_glVertexAttribs1fvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 2988 /* glVertexAttribs1fvNV */);
}

static PFNGLVERTEXATTRIBS1HVNVPROC
epoxy_glVertexAttribs1hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2989 /* glVertexAttribs1hvNV */);
}

static PFNGLVERTEXATTRIBS1SVNVPROC
epoxy_glVertexAttribs1svNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 2990 /* glVertexAttribs1svNV */);
}

static PFNGLVERTEXATTRIBS2DVNVPROC
epoxy_glVertexAttribs2dvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 2991 /* glVertexAttribs2dvNV */);
}

static PFNGLVERTEXATTRIBS2FVNVPROC
epoxy_glVertexAttribs2fvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 2992 /* glVertexAttribs2fvNV */);
}

static PFNGLVERTEXATTRIBS2HVNVPROC
epoxy_glVertexAttribs2hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2993 /* glVertexAttribs2hvNV */);
}

static PFNGLVERTEXATTRIBS2SVNVPROC
epoxy_glVertexAttribs2svNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 2994 /* glVertexAttribs2svNV */);
}

static PFNGLVERTEXATTRIBS3DVNVPROC
epoxy_glVertexAttribs3dvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 2995 /* glVertexAttribs3dvNV */);
}

static PFNGLVERTEXATTRIBS3FVNVPROC
epoxy_glVertexAttribs3fvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 2996 /* glVertexAttribs3fvNV */);
}

static PFNGLVERTEXATTRIBS3HVNVPROC
epoxy_glVertexAttribs3hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 2997 /* glVertexAttribs3hvNV */);
}

static PFNGLVERTEXATTRIBS3SVNVPROC
epoxy_glVertexAttribs3svNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 2998 /* glVertexAttribs3svNV */);
}

static PFNGLVERTEXATTRIBS4DVNVPROC
epoxy_glVertexAttribs4dvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 2999 /* glVertexAttribs4dvNV */);
}

static PFNGLVERTEXATTRIBS4FVNVPROC
epoxy_glVertexAttribs4fvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 3000 /* glVertexAttribs4fvNV */);
}

static PFNGLVERTEXATTRIBS4HVNVPROC
epoxy_glVertexAttribs4hvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 3001 /* glVertexAttribs4hvNV */);
}

static PFNGLVERTEXATTRIBS4SVNVPROC
epoxy_glVertexAttribs4svNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 3002 /* glVertexAttribs4svNV */);
}

static PFNGLVERTEXATTRIBS4UBVNVPROC
epoxy_glVertexAttribs4ubvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_program, 3003 /* glVertexAttribs4ubvNV */);
}

static PFNGLVERTEXBINDINGDIVISORPROC
epoxy_glVertexBindingDivisor_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_3,
        GL_extension_GL_ARB_vertex_attrib_binding,
        OpenGL_ES_3_1,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3004 /* "glVertexBindingDivisor" */,
        3004 /* "glVertexBindingDivisor" */,
        3004 /* "glVertexBindingDivisor" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3004] /* "glVertexBindingDivisor" */,
                                providers, entrypoints);
}

static PFNGLVERTEXBLENDARBPROC
epoxy_glVertexBlendARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_vertex_blend, 3005 /* glVertexBlendARB */);
}

static PFNGLVERTEXBLENDENVFATIPROC
epoxy_glVertexBlendEnvfATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3006 /* glVertexBlendEnvfATI */);
}

static PFNGLVERTEXBLENDENVIATIPROC
epoxy_glVertexBlendEnviATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3007 /* glVertexBlendEnviATI */);
}

static PFNGLVERTEXFORMATNVPROC
epoxy_glVertexFormatNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_vertex_buffer_unified_memory, 3008 /* glVertexFormatNV */);
}

static PFNGLVERTEXP2UIPROC
epoxy_glVertexP2ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3009 /* "glVertexP2ui" */,
        3009 /* "glVertexP2ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3009] /* "glVertexP2ui" */,
                                providers, entrypoints);
}

static PFNGLVERTEXP2UIVPROC
epoxy_glVertexP2uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3010 /* "glVertexP2uiv" */,
        3010 /* "glVertexP2uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3010] /* "glVertexP2uiv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXP3UIPROC
epoxy_glVertexP3ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3011 /* "glVertexP3ui" */,
        3011 /* "glVertexP3ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3011] /* "glVertexP3ui" */,
                                providers, entrypoints);
}

static PFNGLVERTEXP3UIVPROC
epoxy_glVertexP3uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3012 /* "glVertexP3uiv" */,
        3012 /* "glVertexP3uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3012] /* "glVertexP3uiv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXP4UIPROC
epoxy_glVertexP4ui_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3013 /* "glVertexP4ui" */,
        3013 /* "glVertexP4ui" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3013] /* "glVertexP4ui" */,
                                providers, entrypoints);
}

static PFNGLVERTEXP4UIVPROC
epoxy_glVertexP4uiv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_3,
        GL_extension_GL_ARB_vertex_type_2_10_10_10_rev,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3014 /* "glVertexP4uiv" */,
        3014 /* "glVertexP4uiv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3014] /* "glVertexP4uiv" */,
                                providers, entrypoints);
}

static PFNGLVERTEXPOINTERPROC
epoxy_glVertexPointer_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_1,
        OpenGL_ES_1_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3015 /* "glVertexPointer" */,
        3015 /* "glVertexPointer" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3015] /* "glVertexPointer" */,
                                providers, entrypoints);
}

static PFNGLVERTEXPOINTEREXTPROC
epoxy_glVertexPointerEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_array, 3016 /* glVertexPointerEXT */);
}

static PFNGLVERTEXPOINTERLISTIBMPROC
epoxy_glVertexPointerListIBM_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_IBM_vertex_array_lists, 3017 /* glVertexPointerListIBM */);
}

static PFNGLVERTEXPOINTERVINTELPROC
epoxy_glVertexPointervINTEL_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_INTEL_parallel_arrays, 3018 /* glVertexPointervINTEL */);
}

static PFNGLVERTEXSTREAM1DATIPROC
epoxy_glVertexStream1dATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3019 /* glVertexStream1dATI */);
}

static PFNGLVERTEXSTREAM1DVATIPROC
epoxy_glVertexStream1dvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3020 /* glVertexStream1dvATI */);
}

static PFNGLVERTEXSTREAM1FATIPROC
epoxy_glVertexStream1fATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3021 /* glVertexStream1fATI */);
}

static PFNGLVERTEXSTREAM1FVATIPROC
epoxy_glVertexStream1fvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3022 /* glVertexStream1fvATI */);
}

static PFNGLVERTEXSTREAM1IATIPROC
epoxy_glVertexStream1iATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3023 /* glVertexStream1iATI */);
}

static PFNGLVERTEXSTREAM1IVATIPROC
epoxy_glVertexStream1ivATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3024 /* glVertexStream1ivATI */);
}

static PFNGLVERTEXSTREAM1SATIPROC
epoxy_glVertexStream1sATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3025 /* glVertexStream1sATI */);
}

static PFNGLVERTEXSTREAM1SVATIPROC
epoxy_glVertexStream1svATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3026 /* glVertexStream1svATI */);
}

static PFNGLVERTEXSTREAM2DATIPROC
epoxy_glVertexStream2dATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3027 /* glVertexStream2dATI */);
}

static PFNGLVERTEXSTREAM2DVATIPROC
epoxy_glVertexStream2dvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3028 /* glVertexStream2dvATI */);
}

static PFNGLVERTEXSTREAM2FATIPROC
epoxy_glVertexStream2fATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3029 /* glVertexStream2fATI */);
}

static PFNGLVERTEXSTREAM2FVATIPROC
epoxy_glVertexStream2fvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3030 /* glVertexStream2fvATI */);
}

static PFNGLVERTEXSTREAM2IATIPROC
epoxy_glVertexStream2iATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3031 /* glVertexStream2iATI */);
}

static PFNGLVERTEXSTREAM2IVATIPROC
epoxy_glVertexStream2ivATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3032 /* glVertexStream2ivATI */);
}

static PFNGLVERTEXSTREAM2SATIPROC
epoxy_glVertexStream2sATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3033 /* glVertexStream2sATI */);
}

static PFNGLVERTEXSTREAM2SVATIPROC
epoxy_glVertexStream2svATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3034 /* glVertexStream2svATI */);
}

static PFNGLVERTEXSTREAM3DATIPROC
epoxy_glVertexStream3dATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3035 /* glVertexStream3dATI */);
}

static PFNGLVERTEXSTREAM3DVATIPROC
epoxy_glVertexStream3dvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3036 /* glVertexStream3dvATI */);
}

static PFNGLVERTEXSTREAM3FATIPROC
epoxy_glVertexStream3fATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3037 /* glVertexStream3fATI */);
}

static PFNGLVERTEXSTREAM3FVATIPROC
epoxy_glVertexStream3fvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3038 /* glVertexStream3fvATI */);
}

static PFNGLVERTEXSTREAM3IATIPROC
epoxy_glVertexStream3iATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3039 /* glVertexStream3iATI */);
}

static PFNGLVERTEXSTREAM3IVATIPROC
epoxy_glVertexStream3ivATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3040 /* glVertexStream3ivATI */);
}

static PFNGLVERTEXSTREAM3SATIPROC
epoxy_glVertexStream3sATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3041 /* glVertexStream3sATI */);
}

static PFNGLVERTEXSTREAM3SVATIPROC
epoxy_glVertexStream3svATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3042 /* glVertexStream3svATI */);
}

static PFNGLVERTEXSTREAM4DATIPROC
epoxy_glVertexStream4dATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3043 /* glVertexStream4dATI */);
}

static PFNGLVERTEXSTREAM4DVATIPROC
epoxy_glVertexStream4dvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3044 /* glVertexStream4dvATI */);
}

static PFNGLVERTEXSTREAM4FATIPROC
epoxy_glVertexStream4fATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3045 /* glVertexStream4fATI */);
}

static PFNGLVERTEXSTREAM4FVATIPROC
epoxy_glVertexStream4fvATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3046 /* glVertexStream4fvATI */);
}

static PFNGLVERTEXSTREAM4IATIPROC
epoxy_glVertexStream4iATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3047 /* glVertexStream4iATI */);
}

static PFNGLVERTEXSTREAM4IVATIPROC
epoxy_glVertexStream4ivATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3048 /* glVertexStream4ivATI */);
}

static PFNGLVERTEXSTREAM4SATIPROC
epoxy_glVertexStream4sATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3049 /* glVertexStream4sATI */);
}

static PFNGLVERTEXSTREAM4SVATIPROC
epoxy_glVertexStream4svATI_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ATI_vertex_streams, 3050 /* glVertexStream4svATI */);
}

static PFNGLVERTEXWEIGHTPOINTEREXTPROC
epoxy_glVertexWeightPointerEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_weighting, 3051 /* glVertexWeightPointerEXT */);
}

static PFNGLVERTEXWEIGHTFEXTPROC
epoxy_glVertexWeightfEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_weighting, 3052 /* glVertexWeightfEXT */);
}

static PFNGLVERTEXWEIGHTFVEXTPROC
epoxy_glVertexWeightfvEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_weighting, 3053 /* glVertexWeightfvEXT */);
}

static PFNGLVERTEXWEIGHTHNVPROC
epoxy_glVertexWeighthNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 3054 /* glVertexWeighthNV */);
}

static PFNGLVERTEXWEIGHTHVNVPROC
epoxy_glVertexWeighthvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_half_float, 3055 /* glVertexWeighthvNV */);
}

static PFNGLVIDEOCAPTURENVPROC
epoxy_glVideoCaptureNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_video_capture, 3056 /* glVideoCaptureNV */);
}

static PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
epoxy_glVideoCaptureStreamParameterdvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_video_capture, 3057 /* glVideoCaptureStreamParameterdvNV */);
}

static PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
epoxy_glVideoCaptureStreamParameterfvNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_video_capture, 3058 /* glVideoCaptureStreamParameterfvNV */);
}

static PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
epoxy_glVideoCaptureStreamParameterivNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_video_capture, 3059 /* glVideoCaptureStreamParameterivNV */);
}

static PFNGLVIEWPORTPROC
epoxy_glViewport_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_0,
        OpenGL_ES_1_0,
        OpenGL_ES_2_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3060 /* "glViewport" */,
        3060 /* "glViewport" */,
        3060 /* "glViewport" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3060] /* "glViewport" */,
                                providers, entrypoints);
}

static PFNGLVIEWPORTARRAYVPROC
epoxy_glViewportArrayv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        GL_extension_GL_NV_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3061 /* "glViewportArrayv" */,
        3061 /* "glViewportArrayv" */,
        3062 /* "glViewportArrayvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3061] /* "glViewportArrayv" */,
                                providers, entrypoints);
}

static PFNGLVIEWPORTARRAYVNVPROC
epoxy_glViewportArrayvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_viewport_array,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3062 /* "glViewportArrayvNV" */,
        3061 /* "glViewportArrayv" */,
        3061 /* "glViewportArrayv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3062] /* "glViewportArrayvNV" */,
                                providers, entrypoints);
}

static PFNGLVIEWPORTINDEXEDFPROC
epoxy_glViewportIndexedf_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        GL_extension_GL_NV_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3063 /* "glViewportIndexedf" */,
        3063 /* "glViewportIndexedf" */,
        3064 /* "glViewportIndexedfNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3063] /* "glViewportIndexedf" */,
                                providers, entrypoints);
}

static PFNGLVIEWPORTINDEXEDFNVPROC
epoxy_glViewportIndexedfNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_viewport_array,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3064 /* "glViewportIndexedfNV" */,
        3063 /* "glViewportIndexedf" */,
        3063 /* "glViewportIndexedf" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3064] /* "glViewportIndexedfNV" */,
                                providers, entrypoints);
}

static PFNGLVIEWPORTINDEXEDFVPROC
epoxy_glViewportIndexedfv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        GL_extension_GL_NV_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3065 /* "glViewportIndexedfv" */,
        3065 /* "glViewportIndexedfv" */,
        3066 /* "glViewportIndexedfvNV" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3065] /* "glViewportIndexedfv" */,
                                providers, entrypoints);
}

static PFNGLVIEWPORTINDEXEDFVNVPROC
epoxy_glViewportIndexedfvNV_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_NV_viewport_array,
        Desktop_OpenGL_4_1,
        GL_extension_GL_ARB_viewport_array,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3066 /* "glViewportIndexedfvNV" */,
        3065 /* "glViewportIndexedfv" */,
        3065 /* "glViewportIndexedfv" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3066] /* "glViewportIndexedfvNV" */,
                                providers, entrypoints);
}

static PFNGLVIEWPORTPOSITIONWSCALENVPROC
epoxy_glViewportPositionWScaleNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_clip_space_w_scaling, 3067 /* glViewportPositionWScaleNV */);
}

static PFNGLVIEWPORTSWIZZLENVPROC
epoxy_glViewportSwizzleNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_viewport_swizzle, 3068 /* glViewportSwizzleNV */);
}

static PFNGLWAITSYNCPROC
epoxy_glWaitSync_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_sync,
        OpenGL_ES_3_0,
        GL_extension_GL_APPLE_sync,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3069 /* "glWaitSync" */,
        3069 /* "glWaitSync" */,
        3069 /* "glWaitSync" */,
        3070 /* "glWaitSyncAPPLE" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3069] /* "glWaitSync" */,
                                providers, entrypoints);
}

static PFNGLWAITSYNCAPPLEPROC
epoxy_glWaitSyncAPPLE_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_APPLE_sync,
        Desktop_OpenGL_3_2,
        GL_extension_GL_ARB_sync,
        OpenGL_ES_3_0,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3070 /* "glWaitSyncAPPLE" */,
        3069 /* "glWaitSync" */,
        3069 /* "glWaitSync" */,
        3069 /* "glWaitSync" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3070] /* "glWaitSyncAPPLE" */,
                                providers, entrypoints);
}

static PFNGLWEIGHTPATHSNVPROC
epoxy_glWeightPathsNV_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_NV_path_rendering, 3071 /* glWeightPathsNV */);
}

static PFNGLWEIGHTPOINTERARBPROC
epoxy_glWeightPointerARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_vertex_blend, 3072 /* glWeightPointerARB */);
}

static PFNGLWEIGHTPOINTEROESPROC
epoxy_glWeightPointerOES_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_OES_matrix_palette, 3073 /* glWeightPointerOES */);
}

static PFNGLWEIGHTBVARBPROC
epoxy_glWeightbvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_vertex_blend, 3074 /* glWeightbvARB */);
}

static PFNGLWEIGHTDVARBPROC
epoxy_glWeightdvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_vertex_blend, 3075 /* glWeightdvARB */);
}

static PFNGLWEIGHTFVARBPROC
epoxy_glWeightfvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_vertex_blend, 3076 /* glWeightfvARB */);
}

static PFNGLWEIGHTIVARBPROC
epoxy_glWeightivARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_vertex_blend, 3077 /* glWeightivARB */);
}

static PFNGLWEIGHTSVARBPROC
epoxy_glWeightsvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_vertex_blend, 3078 /* glWeightsvARB */);
}

static PFNGLWEIGHTUBVARBPROC
epoxy_glWeightubvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_vertex_blend, 3079 /* glWeightubvARB */);
}

static PFNGLWEIGHTUIVARBPROC
epoxy_glWeightuivARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_vertex_blend, 3080 /* glWeightuivARB */);
}

static PFNGLWEIGHTUSVARBPROC
epoxy_glWeightusvARB_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_ARB_vertex_blend, 3081 /* glWeightusvARB */);
}

static PFNGLWINDOWPOS2DPROC
epoxy_glWindowPos2d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3082 /* "glWindowPos2d" */,
        3083 /* "glWindowPos2dARB" */,
        3084 /* "glWindowPos2dMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3082] /* "glWindowPos2d" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2DARBPROC
epoxy_glWindowPos2dARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3083 /* "glWindowPos2dARB" */,
        3082 /* "glWindowPos2d" */,
        3084 /* "glWindowPos2dMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3083] /* "glWindowPos2dARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2DMESAPROC
epoxy_glWindowPos2dMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3084 /* "glWindowPos2dMESA" */,
        3082 /* "glWindowPos2d" */,
        3083 /* "glWindowPos2dARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3084] /* "glWindowPos2dMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2DVPROC
epoxy_glWindowPos2dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3085 /* "glWindowPos2dv" */,
        3086 /* "glWindowPos2dvARB" */,
        3087 /* "glWindowPos2dvMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3085] /* "glWindowPos2dv" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2DVARBPROC
epoxy_glWindowPos2dvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3086 /* "glWindowPos2dvARB" */,
        3085 /* "glWindowPos2dv" */,
        3087 /* "glWindowPos2dvMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3086] /* "glWindowPos2dvARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2DVMESAPROC
epoxy_glWindowPos2dvMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3087 /* "glWindowPos2dvMESA" */,
        3085 /* "glWindowPos2dv" */,
        3086 /* "glWindowPos2dvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3087] /* "glWindowPos2dvMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2FPROC
epoxy_glWindowPos2f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3088 /* "glWindowPos2f" */,
        3089 /* "glWindowPos2fARB" */,
        3090 /* "glWindowPos2fMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3088] /* "glWindowPos2f" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2FARBPROC
epoxy_glWindowPos2fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3089 /* "glWindowPos2fARB" */,
        3088 /* "glWindowPos2f" */,
        3090 /* "glWindowPos2fMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3089] /* "glWindowPos2fARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2FMESAPROC
epoxy_glWindowPos2fMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3090 /* "glWindowPos2fMESA" */,
        3088 /* "glWindowPos2f" */,
        3089 /* "glWindowPos2fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3090] /* "glWindowPos2fMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2FVPROC
epoxy_glWindowPos2fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3091 /* "glWindowPos2fv" */,
        3092 /* "glWindowPos2fvARB" */,
        3093 /* "glWindowPos2fvMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3091] /* "glWindowPos2fv" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2FVARBPROC
epoxy_glWindowPos2fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3092 /* "glWindowPos2fvARB" */,
        3091 /* "glWindowPos2fv" */,
        3093 /* "glWindowPos2fvMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3092] /* "glWindowPos2fvARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2FVMESAPROC
epoxy_glWindowPos2fvMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3093 /* "glWindowPos2fvMESA" */,
        3091 /* "glWindowPos2fv" */,
        3092 /* "glWindowPos2fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3093] /* "glWindowPos2fvMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2IPROC
epoxy_glWindowPos2i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3094 /* "glWindowPos2i" */,
        3095 /* "glWindowPos2iARB" */,
        3096 /* "glWindowPos2iMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3094] /* "glWindowPos2i" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2IARBPROC
epoxy_glWindowPos2iARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3095 /* "glWindowPos2iARB" */,
        3094 /* "glWindowPos2i" */,
        3096 /* "glWindowPos2iMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3095] /* "glWindowPos2iARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2IMESAPROC
epoxy_glWindowPos2iMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3096 /* "glWindowPos2iMESA" */,
        3094 /* "glWindowPos2i" */,
        3095 /* "glWindowPos2iARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3096] /* "glWindowPos2iMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2IVPROC
epoxy_glWindowPos2iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3097 /* "glWindowPos2iv" */,
        3098 /* "glWindowPos2ivARB" */,
        3099 /* "glWindowPos2ivMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3097] /* "glWindowPos2iv" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2IVARBPROC
epoxy_glWindowPos2ivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3098 /* "glWindowPos2ivARB" */,
        3097 /* "glWindowPos2iv" */,
        3099 /* "glWindowPos2ivMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3098] /* "glWindowPos2ivARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2IVMESAPROC
epoxy_glWindowPos2ivMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3099 /* "glWindowPos2ivMESA" */,
        3097 /* "glWindowPos2iv" */,
        3098 /* "glWindowPos2ivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3099] /* "glWindowPos2ivMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2SPROC
epoxy_glWindowPos2s_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3100 /* "glWindowPos2s" */,
        3101 /* "glWindowPos2sARB" */,
        3102 /* "glWindowPos2sMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3100] /* "glWindowPos2s" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2SARBPROC
epoxy_glWindowPos2sARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3101 /* "glWindowPos2sARB" */,
        3100 /* "glWindowPos2s" */,
        3102 /* "glWindowPos2sMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3101] /* "glWindowPos2sARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2SMESAPROC
epoxy_glWindowPos2sMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3102 /* "glWindowPos2sMESA" */,
        3100 /* "glWindowPos2s" */,
        3101 /* "glWindowPos2sARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3102] /* "glWindowPos2sMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2SVPROC
epoxy_glWindowPos2sv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3103 /* "glWindowPos2sv" */,
        3104 /* "glWindowPos2svARB" */,
        3105 /* "glWindowPos2svMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3103] /* "glWindowPos2sv" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2SVARBPROC
epoxy_glWindowPos2svARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3104 /* "glWindowPos2svARB" */,
        3103 /* "glWindowPos2sv" */,
        3105 /* "glWindowPos2svMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3104] /* "glWindowPos2svARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS2SVMESAPROC
epoxy_glWindowPos2svMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3105 /* "glWindowPos2svMESA" */,
        3103 /* "glWindowPos2sv" */,
        3104 /* "glWindowPos2svARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3105] /* "glWindowPos2svMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3DPROC
epoxy_glWindowPos3d_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3106 /* "glWindowPos3d" */,
        3107 /* "glWindowPos3dARB" */,
        3108 /* "glWindowPos3dMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3106] /* "glWindowPos3d" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3DARBPROC
epoxy_glWindowPos3dARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3107 /* "glWindowPos3dARB" */,
        3106 /* "glWindowPos3d" */,
        3108 /* "glWindowPos3dMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3107] /* "glWindowPos3dARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3DMESAPROC
epoxy_glWindowPos3dMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3108 /* "glWindowPos3dMESA" */,
        3106 /* "glWindowPos3d" */,
        3107 /* "glWindowPos3dARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3108] /* "glWindowPos3dMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3DVPROC
epoxy_glWindowPos3dv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3109 /* "glWindowPos3dv" */,
        3110 /* "glWindowPos3dvARB" */,
        3111 /* "glWindowPos3dvMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3109] /* "glWindowPos3dv" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3DVARBPROC
epoxy_glWindowPos3dvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3110 /* "glWindowPos3dvARB" */,
        3109 /* "glWindowPos3dv" */,
        3111 /* "glWindowPos3dvMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3110] /* "glWindowPos3dvARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3DVMESAPROC
epoxy_glWindowPos3dvMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3111 /* "glWindowPos3dvMESA" */,
        3109 /* "glWindowPos3dv" */,
        3110 /* "glWindowPos3dvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3111] /* "glWindowPos3dvMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3FPROC
epoxy_glWindowPos3f_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3112 /* "glWindowPos3f" */,
        3113 /* "glWindowPos3fARB" */,
        3114 /* "glWindowPos3fMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3112] /* "glWindowPos3f" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3FARBPROC
epoxy_glWindowPos3fARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3113 /* "glWindowPos3fARB" */,
        3112 /* "glWindowPos3f" */,
        3114 /* "glWindowPos3fMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3113] /* "glWindowPos3fARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3FMESAPROC
epoxy_glWindowPos3fMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3114 /* "glWindowPos3fMESA" */,
        3112 /* "glWindowPos3f" */,
        3113 /* "glWindowPos3fARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3114] /* "glWindowPos3fMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3FVPROC
epoxy_glWindowPos3fv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3115 /* "glWindowPos3fv" */,
        3116 /* "glWindowPos3fvARB" */,
        3117 /* "glWindowPos3fvMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3115] /* "glWindowPos3fv" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3FVARBPROC
epoxy_glWindowPos3fvARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3116 /* "glWindowPos3fvARB" */,
        3115 /* "glWindowPos3fv" */,
        3117 /* "glWindowPos3fvMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3116] /* "glWindowPos3fvARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3FVMESAPROC
epoxy_glWindowPos3fvMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3117 /* "glWindowPos3fvMESA" */,
        3115 /* "glWindowPos3fv" */,
        3116 /* "glWindowPos3fvARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3117] /* "glWindowPos3fvMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3IPROC
epoxy_glWindowPos3i_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3118 /* "glWindowPos3i" */,
        3119 /* "glWindowPos3iARB" */,
        3120 /* "glWindowPos3iMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3118] /* "glWindowPos3i" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3IARBPROC
epoxy_glWindowPos3iARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3119 /* "glWindowPos3iARB" */,
        3118 /* "glWindowPos3i" */,
        3120 /* "glWindowPos3iMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3119] /* "glWindowPos3iARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3IMESAPROC
epoxy_glWindowPos3iMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3120 /* "glWindowPos3iMESA" */,
        3118 /* "glWindowPos3i" */,
        3119 /* "glWindowPos3iARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3120] /* "glWindowPos3iMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3IVPROC
epoxy_glWindowPos3iv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3121 /* "glWindowPos3iv" */,
        3122 /* "glWindowPos3ivARB" */,
        3123 /* "glWindowPos3ivMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3121] /* "glWindowPos3iv" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3IVARBPROC
epoxy_glWindowPos3ivARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3122 /* "glWindowPos3ivARB" */,
        3121 /* "glWindowPos3iv" */,
        3123 /* "glWindowPos3ivMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3122] /* "glWindowPos3ivARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3IVMESAPROC
epoxy_glWindowPos3ivMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3123 /* "glWindowPos3ivMESA" */,
        3121 /* "glWindowPos3iv" */,
        3122 /* "glWindowPos3ivARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3123] /* "glWindowPos3ivMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3SPROC
epoxy_glWindowPos3s_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3124 /* "glWindowPos3s" */,
        3125 /* "glWindowPos3sARB" */,
        3126 /* "glWindowPos3sMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3124] /* "glWindowPos3s" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3SARBPROC
epoxy_glWindowPos3sARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3125 /* "glWindowPos3sARB" */,
        3124 /* "glWindowPos3s" */,
        3126 /* "glWindowPos3sMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3125] /* "glWindowPos3sARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3SMESAPROC
epoxy_glWindowPos3sMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3126 /* "glWindowPos3sMESA" */,
        3124 /* "glWindowPos3s" */,
        3125 /* "glWindowPos3sARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3126] /* "glWindowPos3sMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3SVPROC
epoxy_glWindowPos3sv_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3127 /* "glWindowPos3sv" */,
        3128 /* "glWindowPos3svARB" */,
        3129 /* "glWindowPos3svMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3127] /* "glWindowPos3sv" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3SVARBPROC
epoxy_glWindowPos3svARB_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_ARB_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_MESA_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3128 /* "glWindowPos3svARB" */,
        3127 /* "glWindowPos3sv" */,
        3129 /* "glWindowPos3svMESA" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3128] /* "glWindowPos3svARB" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS3SVMESAPROC
epoxy_glWindowPos3svMESA_resolver(tls_ptr tls)
{
    static const enum gl_provider providers[] = {
        GL_extension_GL_MESA_window_pos,
        Desktop_OpenGL_1_4,
        GL_extension_GL_ARB_window_pos,
        gl_provider_terminator
    };
    static const uint16_t entrypoints[] = {
        3129 /* "glWindowPos3svMESA" */,
        3127 /* "glWindowPos3sv" */,
        3128 /* "glWindowPos3svARB" */,
    };
    return gl_provider_resolver(tls, gl_entrypoint_strings[3129] /* "glWindowPos3svMESA" */,
                                providers, entrypoints);
}

static PFNGLWINDOWPOS4DMESAPROC
epoxy_glWindowPos4dMESA_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_MESA_window_pos, 3130 /* glWindowPos4dMESA */);
}

static PFNGLWINDOWPOS4DVMESAPROC
epoxy_glWindowPos4dvMESA_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_MESA_window_pos, 3131 /* glWindowPos4dvMESA */);
}

static PFNGLWINDOWPOS4FMESAPROC
epoxy_glWindowPos4fMESA_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_MESA_window_pos, 3132 /* glWindowPos4fMESA */);
}

static PFNGLWINDOWPOS4FVMESAPROC
epoxy_glWindowPos4fvMESA_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_MESA_window_pos, 3133 /* glWindowPos4fvMESA */);
}

static PFNGLWINDOWPOS4IMESAPROC
epoxy_glWindowPos4iMESA_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_MESA_window_pos, 3134 /* glWindowPos4iMESA */);
}

static PFNGLWINDOWPOS4IVMESAPROC
epoxy_glWindowPos4ivMESA_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_MESA_window_pos, 3135 /* glWindowPos4ivMESA */);
}

static PFNGLWINDOWPOS4SMESAPROC
epoxy_glWindowPos4sMESA_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_MESA_window_pos, 3136 /* glWindowPos4sMESA */);
}

static PFNGLWINDOWPOS4SVMESAPROC
epoxy_glWindowPos4svMESA_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_MESA_window_pos, 3137 /* glWindowPos4svMESA */);
}

static PFNGLWINDOWRECTANGLESEXTPROC
epoxy_glWindowRectanglesEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_window_rectangles, 3138 /* glWindowRectanglesEXT */);
}

static PFNGLWRITEMASKEXTPROC
epoxy_glWriteMaskEXT_resolver(tls_ptr tls)
{
    return gl_single_resolver(tls, GL_extension_GL_EXT_vertex_shader, 3139 /* glWriteMaskEXT */);
}

GEN_THUNKS(gl, glAccum, (GLenum op, GLfloat value), (op, value))
GEN_THUNKS(gl, glAccumxOES, (GLenum op, GLfixed value), (op, value))
GEN_THUNKS(gl, glActiveProgramEXT, (GLuint program), (program))
GEN_THUNKS(gl, glActiveShaderProgram, (GLuint pipeline, GLuint program), (pipeline, program))
GEN_THUNKS(gl, glActiveShaderProgramEXT, (GLuint pipeline, GLuint program), (pipeline, program))
GEN_THUNKS(gl, glActiveStencilFaceEXT, (GLenum face), (face))
GEN_THUNKS(gl, glActiveTexture, (GLenum texture), (texture))
GEN_THUNKS(gl, glActiveTextureARB, (GLenum texture), (texture))
GEN_THUNKS(gl, glActiveVaryingNV, (GLuint program, const GLchar * name), (program, name))
GEN_THUNKS(gl, glAlphaFragmentOp1ATI, (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod), (op, dst, dstMod, arg1, arg1Rep, arg1Mod))
GEN_THUNKS(gl, glAlphaFragmentOp2ATI, (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod), (op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod))
GEN_THUNKS(gl, glAlphaFragmentOp3ATI, (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod), (op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod))
GEN_THUNKS(gl, glAlphaFunc, (GLenum func, GLfloat ref), (func, ref))
GEN_THUNKS(gl, glAlphaFuncQCOM, (GLenum func, GLclampf ref), (func, ref))
GEN_THUNKS(gl, glAlphaFuncx, (GLenum func, GLfixed ref), (func, ref))
GEN_THUNKS(gl, glAlphaFuncxOES, (GLenum func, GLfixed ref), (func, ref))
GEN_THUNKS(gl, glApplyFramebufferAttachmentCMAAINTEL, (void), ())
GEN_THUNKS(gl, glApplyTextureEXT, (GLenum mode), (mode))
GEN_THUNKS_RET(gl, GLboolean, glAreProgramsResidentNV, (GLsizei n, const GLuint * programs, GLboolean * residences), (n, programs, residences))
GEN_THUNKS_RET(gl, GLboolean, glAreTexturesResident, (GLsizei n, const GLuint * textures, GLboolean * residences), (n, textures, residences))
GEN_THUNKS_RET(gl, GLboolean, glAreTexturesResidentEXT, (GLsizei n, const GLuint * textures, GLboolean * residences), (n, textures, residences))
GEN_THUNKS(gl, glArrayElement, (GLint i), (i))
GEN_THUNKS(gl, glArrayElementEXT, (GLint i), (i))
GEN_THUNKS(gl, glArrayObjectATI, (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset), (array, size, type, stride, buffer, offset))
GEN_THUNKS(gl, glAsyncMarkerSGIX, (GLuint marker), (marker))
GEN_THUNKS(gl, glAttachObjectARB, (GLhandleARB containerObj, GLhandleARB obj), ((uintptr_t)containerObj, (uintptr_t)obj))
GEN_THUNKS(gl, glAttachShader, (GLuint program, GLuint shader), (program, shader))
GEN_THUNKS(gl, glBegin, (GLenum mode), (mode))
GEN_THUNKS(gl, glBeginConditionalRender, (GLuint id, GLenum mode), (id, mode))
GEN_THUNKS(gl, glBeginConditionalRenderNV, (GLuint id, GLenum mode), (id, mode))
GEN_THUNKS(gl, glBeginConditionalRenderNVX, (GLuint id), (id))
GEN_THUNKS(gl, glBeginFragmentShaderATI, (void), ())
GEN_THUNKS(gl, glBeginOcclusionQueryNV, (GLuint id), (id))
GEN_THUNKS(gl, glBeginPerfMonitorAMD, (GLuint monitor), (monitor))
GEN_THUNKS(gl, glBeginPerfQueryINTEL, (GLuint queryHandle), (queryHandle))
GEN_THUNKS(gl, glBeginQuery, (GLenum target, GLuint id), (target, id))
GEN_THUNKS(gl, glBeginQueryARB, (GLenum target, GLuint id), (target, id))
GEN_THUNKS(gl, glBeginQueryEXT, (GLenum target, GLuint id), (target, id))
GEN_THUNKS(gl, glBeginQueryIndexed, (GLenum target, GLuint index, GLuint id), (target, index, id))
GEN_THUNKS(gl, glBeginTransformFeedback, (GLenum primitiveMode), (primitiveMode))
GEN_THUNKS(gl, glBeginTransformFeedbackEXT, (GLenum primitiveMode), (primitiveMode))
GEN_THUNKS(gl, glBeginTransformFeedbackNV, (GLenum primitiveMode), (primitiveMode))
GEN_THUNKS(gl, glBeginVertexShaderEXT, (void), ())
GEN_THUNKS(gl, glBeginVideoCaptureNV, (GLuint video_capture_slot), (video_capture_slot))
GEN_THUNKS(gl, glBindAttribLocation, (GLuint program, GLuint index, const GLchar * name), (program, index, name))
GEN_THUNKS(gl, glBindAttribLocationARB, (GLhandleARB programObj, GLuint index, const GLcharARB * name), ((uintptr_t)programObj, index, name))
GEN_THUNKS(gl, glBindBuffer, (GLenum target, GLuint buffer), (target, buffer))
GEN_THUNKS(gl, glBindBufferARB, (GLenum target, GLuint buffer), (target, buffer))
GEN_THUNKS(gl, glBindBufferBase, (GLenum target, GLuint index, GLuint buffer), (target, index, buffer))
GEN_THUNKS(gl, glBindBufferBaseEXT, (GLenum target, GLuint index, GLuint buffer), (target, index, buffer))
GEN_THUNKS(gl, glBindBufferBaseNV, (GLenum target, GLuint index, GLuint buffer), (target, index, buffer))
GEN_THUNKS(gl, glBindBufferOffsetEXT, (GLenum target, GLuint index, GLuint buffer, GLintptr offset), (target, index, buffer, offset))
GEN_THUNKS(gl, glBindBufferOffsetNV, (GLenum target, GLuint index, GLuint buffer, GLintptr offset), (target, index, buffer, offset))
GEN_THUNKS(gl, glBindBufferRange, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size), (target, index, buffer, offset, size))
GEN_THUNKS(gl, glBindBufferRangeEXT, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size), (target, index, buffer, offset, size))
GEN_THUNKS(gl, glBindBufferRangeNV, (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size), (target, index, buffer, offset, size))
GEN_THUNKS(gl, glBindBuffersBase, (GLenum target, GLuint first, GLsizei count, const GLuint * buffers), (target, first, count, buffers))
GEN_THUNKS(gl, glBindBuffersRange, (GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes), (target, first, count, buffers, offsets, sizes))
GEN_THUNKS(gl, glBindFragDataLocation, (GLuint program, GLuint color, const GLchar * name), (program, color, name))
GEN_THUNKS(gl, glBindFragDataLocationEXT, (GLuint program, GLuint color, const GLchar * name), (program, color, name))
GEN_THUNKS(gl, glBindFragDataLocationIndexed, (GLuint program, GLuint colorNumber, GLuint index, const GLchar * name), (program, colorNumber, index, name))
GEN_THUNKS(gl, glBindFragDataLocationIndexedEXT, (GLuint program, GLuint colorNumber, GLuint index, const GLchar * name), (program, colorNumber, index, name))
GEN_THUNKS(gl, glBindFragmentShaderATI, (GLuint id), (id))
GEN_THUNKS(gl, glBindFramebuffer, (GLenum target, GLuint framebuffer), (target, framebuffer))
GEN_THUNKS(gl, glBindFramebufferEXT, (GLenum target, GLuint framebuffer), (target, framebuffer))
GEN_THUNKS(gl, glBindFramebufferOES, (GLenum target, GLuint framebuffer), (target, framebuffer))
GEN_THUNKS(gl, glBindImageTexture, (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format), (unit, texture, level, layered, layer, access, format))
GEN_THUNKS(gl, glBindImageTextureEXT, (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format), (index, texture, level, layered, layer, access, format))
GEN_THUNKS(gl, glBindImageTextures, (GLuint first, GLsizei count, const GLuint * textures), (first, count, textures))
GEN_THUNKS_RET(gl, GLuint, glBindLightParameterEXT, (GLenum light, GLenum value), (light, value))
GEN_THUNKS_RET(gl, GLuint, glBindMaterialParameterEXT, (GLenum face, GLenum value), (face, value))
GEN_THUNKS(gl, glBindMultiTextureEXT, (GLenum texunit, GLenum target, GLuint texture), (texunit, target, texture))
GEN_THUNKS_RET(gl, GLuint, glBindParameterEXT, (GLenum value), (value))
GEN_THUNKS(gl, glBindProgramARB, (GLenum target, GLuint program), (target, program))
GEN_THUNKS(gl, glBindProgramNV, (GLenum target, GLuint id), (target, id))
GEN_THUNKS(gl, glBindProgramPipeline, (GLuint pipeline), (pipeline))
GEN_THUNKS(gl, glBindProgramPipelineEXT, (GLuint pipeline), (pipeline))
GEN_THUNKS(gl, glBindRenderbuffer, (GLenum target, GLuint renderbuffer), (target, renderbuffer))
GEN_THUNKS(gl, glBindRenderbufferEXT, (GLenum target, GLuint renderbuffer), (target, renderbuffer))
GEN_THUNKS(gl, glBindRenderbufferOES, (GLenum target, GLuint renderbuffer), (target, renderbuffer))
GEN_THUNKS(gl, glBindSampler, (GLuint unit, GLuint sampler), (unit, sampler))
GEN_THUNKS(gl, glBindSamplers, (GLuint first, GLsizei count, const GLuint * samplers), (first, count, samplers))
GEN_THUNKS_RET(gl, GLuint, glBindTexGenParameterEXT, (GLenum unit, GLenum coord, GLenum value), (unit, coord, value))
GEN_THUNKS(gl, glBindTexture, (GLenum target, GLuint texture), (target, texture))
GEN_THUNKS(gl, glBindTextureEXT, (GLenum target, GLuint texture), (target, texture))
GEN_THUNKS(gl, glBindTextureUnit, (GLuint unit, GLuint texture), (unit, texture))
GEN_THUNKS_RET(gl, GLuint, glBindTextureUnitParameterEXT, (GLenum unit, GLenum value), (unit, value))
GEN_THUNKS(gl, glBindTextures, (GLuint first, GLsizei count, const GLuint * textures), (first, count, textures))
GEN_THUNKS(gl, glBindTransformFeedback, (GLenum target, GLuint id), (target, id))
GEN_THUNKS(gl, glBindTransformFeedbackNV, (GLenum target, GLuint id), (target, id))
GEN_THUNKS(gl, glBindVertexArray, (GLuint array), (array))
GEN_THUNKS(gl, glBindVertexArrayAPPLE, (GLuint array), (array))
GEN_THUNKS(gl, glBindVertexArrayOES, (GLuint array), (array))
GEN_THUNKS(gl, glBindVertexBuffer, (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride), (bindingindex, buffer, offset, stride))
GEN_THUNKS(gl, glBindVertexBuffers, (GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides), (first, count, buffers, offsets, strides))
GEN_THUNKS(gl, glBindVertexShaderEXT, (GLuint id), (id))
GEN_THUNKS(gl, glBindVideoCaptureStreamBufferNV, (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset), (video_capture_slot, stream, frame_region, offset))
GEN_THUNKS(gl, glBindVideoCaptureStreamTextureNV, (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture), (video_capture_slot, stream, frame_region, target, texture))
GEN_THUNKS(gl, glBinormal3bEXT, (GLbyte bx, GLbyte by, GLbyte bz), (bx, by, bz))
GEN_THUNKS(gl, glBinormal3bvEXT, (const GLbyte * v), (v))
GEN_THUNKS(gl, glBinormal3dEXT, (GLdouble bx, GLdouble by, GLdouble bz), (bx, by, bz))
GEN_THUNKS(gl, glBinormal3dvEXT, (const GLdouble * v), (v))
GEN_THUNKS(gl, glBinormal3fEXT, (GLfloat bx, GLfloat by, GLfloat bz), (bx, by, bz))
GEN_THUNKS(gl, glBinormal3fvEXT, (const GLfloat * v), (v))
GEN_THUNKS(gl, glBinormal3iEXT, (GLint bx, GLint by, GLint bz), (bx, by, bz))
GEN_THUNKS(gl, glBinormal3ivEXT, (const GLint * v), (v))
GEN_THUNKS(gl, glBinormal3sEXT, (GLshort bx, GLshort by, GLshort bz), (bx, by, bz))
GEN_THUNKS(gl, glBinormal3svEXT, (const GLshort * v), (v))
GEN_THUNKS(gl, glBinormalPointerEXT, (GLenum type, GLsizei stride, const void * pointer), (type, stride, pointer))
GEN_THUNKS(gl, glBitmap, (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap), (width, height, xorig, yorig, xmove, ymove, bitmap))
GEN_THUNKS(gl, glBitmapxOES, (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte * bitmap), (width, height, xorig, yorig, xmove, ymove, bitmap))
GEN_THUNKS(gl, glBlendBarrier, (void), ())
GEN_THUNKS(gl, glBlendBarrierKHR, (void), ())
GEN_THUNKS(gl, glBlendBarrierNV, (void), ())
GEN_THUNKS(gl, glBlendColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glBlendColorEXT, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glBlendColorxOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glBlendEquation, (GLenum mode), (mode))
GEN_THUNKS(gl, glBlendEquationEXT, (GLenum mode), (mode))
GEN_THUNKS(gl, glBlendEquationIndexedAMD, (GLuint buf, GLenum mode), (buf, mode))
GEN_THUNKS(gl, glBlendEquationOES, (GLenum mode), (mode))
GEN_THUNKS(gl, glBlendEquationSeparate, (GLenum modeRGB, GLenum modeAlpha), (modeRGB, modeAlpha))
GEN_THUNKS(gl, glBlendEquationSeparateEXT, (GLenum modeRGB, GLenum modeAlpha), (modeRGB, modeAlpha))
GEN_THUNKS(gl, glBlendEquationSeparateIndexedAMD, (GLuint buf, GLenum modeRGB, GLenum modeAlpha), (buf, modeRGB, modeAlpha))
GEN_THUNKS(gl, glBlendEquationSeparateOES, (GLenum modeRGB, GLenum modeAlpha), (modeRGB, modeAlpha))
GEN_THUNKS(gl, glBlendEquationSeparatei, (GLuint buf, GLenum modeRGB, GLenum modeAlpha), (buf, modeRGB, modeAlpha))
GEN_THUNKS(gl, glBlendEquationSeparateiARB, (GLuint buf, GLenum modeRGB, GLenum modeAlpha), (buf, modeRGB, modeAlpha))
GEN_THUNKS(gl, glBlendEquationSeparateiEXT, (GLuint buf, GLenum modeRGB, GLenum modeAlpha), (buf, modeRGB, modeAlpha))
GEN_THUNKS(gl, glBlendEquationSeparateiOES, (GLuint buf, GLenum modeRGB, GLenum modeAlpha), (buf, modeRGB, modeAlpha))
GEN_THUNKS(gl, glBlendEquationi, (GLuint buf, GLenum mode), (buf, mode))
GEN_THUNKS(gl, glBlendEquationiARB, (GLuint buf, GLenum mode), (buf, mode))
GEN_THUNKS(gl, glBlendEquationiEXT, (GLuint buf, GLenum mode), (buf, mode))
GEN_THUNKS(gl, glBlendEquationiOES, (GLuint buf, GLenum mode), (buf, mode))
GEN_THUNKS(gl, glBlendFunc, (GLenum sfactor, GLenum dfactor), (sfactor, dfactor))
GEN_THUNKS(gl, glBlendFuncIndexedAMD, (GLuint buf, GLenum src, GLenum dst), (buf, src, dst))
GEN_THUNKS(gl, glBlendFuncSeparate, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha), (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha))
GEN_THUNKS(gl, glBlendFuncSeparateEXT, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha), (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha))
GEN_THUNKS(gl, glBlendFuncSeparateINGR, (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha), (sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha))
GEN_THUNKS(gl, glBlendFuncSeparateIndexedAMD, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha), (buf, srcRGB, dstRGB, srcAlpha, dstAlpha))
GEN_THUNKS(gl, glBlendFuncSeparateOES, (GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha), (srcRGB, dstRGB, srcAlpha, dstAlpha))
GEN_THUNKS(gl, glBlendFuncSeparatei, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha), (buf, srcRGB, dstRGB, srcAlpha, dstAlpha))
GEN_THUNKS(gl, glBlendFuncSeparateiARB, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha), (buf, srcRGB, dstRGB, srcAlpha, dstAlpha))
GEN_THUNKS(gl, glBlendFuncSeparateiEXT, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha), (buf, srcRGB, dstRGB, srcAlpha, dstAlpha))
GEN_THUNKS(gl, glBlendFuncSeparateiOES, (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha), (buf, srcRGB, dstRGB, srcAlpha, dstAlpha))
GEN_THUNKS(gl, glBlendFunci, (GLuint buf, GLenum src, GLenum dst), (buf, src, dst))
GEN_THUNKS(gl, glBlendFunciARB, (GLuint buf, GLenum src, GLenum dst), (buf, src, dst))
GEN_THUNKS(gl, glBlendFunciEXT, (GLuint buf, GLenum src, GLenum dst), (buf, src, dst))
GEN_THUNKS(gl, glBlendFunciOES, (GLuint buf, GLenum src, GLenum dst), (buf, src, dst))
GEN_THUNKS(gl, glBlendParameteriNV, (GLenum pname, GLint value), (pname, value))
GEN_THUNKS(gl, glBlitFramebuffer, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter), (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter))
GEN_THUNKS(gl, glBlitFramebufferANGLE, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter), (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter))
GEN_THUNKS(gl, glBlitFramebufferEXT, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter), (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter))
GEN_THUNKS(gl, glBlitFramebufferNV, (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter), (srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter))
GEN_THUNKS(gl, glBlitNamedFramebuffer, (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter), (readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter))
GEN_THUNKS(gl, glBufferAddressRangeNV, (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length), (pname, index, address, length))
GEN_THUNKS(gl, glBufferData, (GLenum target, GLsizeiptr size, const void * data, GLenum usage), (target, size, data, usage))
GEN_THUNKS(gl, glBufferDataARB, (GLenum target, GLsizeiptrARB size, const void * data, GLenum usage), (target, size, data, usage))
GEN_THUNKS(gl, glBufferPageCommitmentARB, (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit), (target, offset, size, commit))
GEN_THUNKS(gl, glBufferParameteriAPPLE, (GLenum target, GLenum pname, GLint param), (target, pname, param))
GEN_THUNKS(gl, glBufferStorage, (GLenum target, GLsizeiptr size, const void * data, GLbitfield flags), (target, size, data, flags))
GEN_THUNKS(gl, glBufferStorageEXT, (GLenum target, GLsizeiptr size, const void * data, GLbitfield flags), (target, size, data, flags))
GEN_THUNKS(gl, glBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, const void * data), (target, offset, size, data))
GEN_THUNKS(gl, glBufferSubDataARB, (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void * data), (target, offset, size, data))
GEN_THUNKS(gl, glCallCommandListNV, (GLuint list), (list))
GEN_THUNKS(gl, glCallList, (GLuint list), (list))
GEN_THUNKS(gl, glCallLists, (GLsizei n, GLenum type, const void * lists), (n, type, lists))
GEN_THUNKS_RET(gl, GLenum, glCheckFramebufferStatus, (GLenum target), (target))
GEN_THUNKS_RET(gl, GLenum, glCheckFramebufferStatusEXT, (GLenum target), (target))
GEN_THUNKS_RET(gl, GLenum, glCheckFramebufferStatusOES, (GLenum target), (target))
GEN_THUNKS_RET(gl, GLenum, glCheckNamedFramebufferStatus, (GLuint framebuffer, GLenum target), (framebuffer, target))
GEN_THUNKS_RET(gl, GLenum, glCheckNamedFramebufferStatusEXT, (GLuint framebuffer, GLenum target), (framebuffer, target))
GEN_THUNKS(gl, glClampColor, (GLenum target, GLenum clamp), (target, clamp))
GEN_THUNKS(gl, glClampColorARB, (GLenum target, GLenum clamp), (target, clamp))
GEN_THUNKS(gl, glClear, (GLbitfield mask), (mask))
GEN_THUNKS(gl, glClearAccum, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glClearAccumxOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glClearBufferData, (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data), (target, internalformat, format, type, data))
GEN_THUNKS(gl, glClearBufferSubData, (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data), (target, internalformat, offset, size, format, type, data))
GEN_THUNKS(gl, glClearBufferfi, (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil), (buffer, drawbuffer, depth, stencil))
GEN_THUNKS(gl, glClearBufferfv, (GLenum buffer, GLint drawbuffer, const GLfloat * value), (buffer, drawbuffer, value))
GEN_THUNKS(gl, glClearBufferiv, (GLenum buffer, GLint drawbuffer, const GLint * value), (buffer, drawbuffer, value))
GEN_THUNKS(gl, glClearBufferuiv, (GLenum buffer, GLint drawbuffer, const GLuint * value), (buffer, drawbuffer, value))
GEN_THUNKS(gl, glClearColor, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glClearColorIiEXT, (GLint red, GLint green, GLint blue, GLint alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glClearColorIuiEXT, (GLuint red, GLuint green, GLuint blue, GLuint alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glClearColorx, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glClearColorxOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glClearDepth, (GLdouble depth), (depth))
GEN_THUNKS(gl, glClearDepthdNV, (GLdouble depth), (depth))
GEN_THUNKS(gl, glClearDepthf, (GLfloat d), (d))
GEN_THUNKS(gl, glClearDepthfOES, (GLclampf depth), (depth))
GEN_THUNKS(gl, glClearDepthx, (GLfixed depth), (depth))
GEN_THUNKS(gl, glClearDepthxOES, (GLfixed depth), (depth))
GEN_THUNKS(gl, glClearIndex, (GLfloat c), (c))
GEN_THUNKS(gl, glClearNamedBufferData, (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data), (buffer, internalformat, format, type, data))
GEN_THUNKS(gl, glClearNamedBufferDataEXT, (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data), (buffer, internalformat, format, type, data))
GEN_THUNKS(gl, glClearNamedBufferSubData, (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data), (buffer, internalformat, offset, size, format, type, data))
GEN_THUNKS(gl, glClearNamedBufferSubDataEXT, (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data), (buffer, internalformat, offset, size, format, type, data))
GEN_THUNKS(gl, glClearNamedFramebufferfi, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil), (framebuffer, buffer, drawbuffer, depth, stencil))
GEN_THUNKS(gl, glClearNamedFramebufferfv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value), (framebuffer, buffer, drawbuffer, value))
GEN_THUNKS(gl, glClearNamedFramebufferiv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value), (framebuffer, buffer, drawbuffer, value))
GEN_THUNKS(gl, glClearNamedFramebufferuiv, (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value), (framebuffer, buffer, drawbuffer, value))
GEN_THUNKS(gl, glClearPixelLocalStorageuiEXT, (GLsizei offset, GLsizei n, const GLuint * values), (offset, n, values))
GEN_THUNKS(gl, glClearStencil, (GLint s), (s))
GEN_THUNKS(gl, glClearTexImage, (GLuint texture, GLint level, GLenum format, GLenum type, const void * data), (texture, level, format, type, data))
GEN_THUNKS(gl, glClearTexSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data), (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data))
GEN_THUNKS(gl, glClientActiveTexture, (GLenum texture), (texture))
GEN_THUNKS(gl, glClientActiveTextureARB, (GLenum texture), (texture))
GEN_THUNKS(gl, glClientActiveVertexStreamATI, (GLenum stream), (stream))
GEN_THUNKS(gl, glClientAttribDefaultEXT, (GLbitfield mask), (mask))
GEN_THUNKS_RET(gl, GLenum, glClientWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout), (sync, flags, timeout))
GEN_THUNKS_RET(gl, GLenum, glClientWaitSyncAPPLE, (GLsync sync, GLbitfield flags, GLuint64 timeout), (sync, flags, timeout))
GEN_THUNKS(gl, glClipControl, (GLenum origin, GLenum depth), (origin, depth))
GEN_THUNKS(gl, glClipPlane, (GLenum plane, const GLdouble * equation), (plane, equation))
GEN_THUNKS(gl, glClipPlanef, (GLenum p, const GLfloat * eqn), (p, eqn))
GEN_THUNKS(gl, glClipPlanefIMG, (GLenum p, const GLfloat * eqn), (p, eqn))
GEN_THUNKS(gl, glClipPlanefOES, (GLenum plane, const GLfloat * equation), (plane, equation))
GEN_THUNKS(gl, glClipPlanex, (GLenum plane, const GLfixed * equation), (plane, equation))
GEN_THUNKS(gl, glClipPlanexIMG, (GLenum p, const GLfixed * eqn), (p, eqn))
GEN_THUNKS(gl, glClipPlanexOES, (GLenum plane, const GLfixed * equation), (plane, equation))
GEN_THUNKS(gl, glColor3b, (GLbyte red, GLbyte green, GLbyte blue), (red, green, blue))
GEN_THUNKS(gl, glColor3bv, (const GLbyte * v), (v))
GEN_THUNKS(gl, glColor3d, (GLdouble red, GLdouble green, GLdouble blue), (red, green, blue))
GEN_THUNKS(gl, glColor3dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glColor3f, (GLfloat red, GLfloat green, GLfloat blue), (red, green, blue))
GEN_THUNKS(gl, glColor3fVertex3fSUN, (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z), (r, g, b, x, y, z))
GEN_THUNKS(gl, glColor3fVertex3fvSUN, (const GLfloat * c, const GLfloat * v), (c, v))
GEN_THUNKS(gl, glColor3fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glColor3hNV, (GLhalfNV red, GLhalfNV green, GLhalfNV blue), (red, green, blue))
GEN_THUNKS(gl, glColor3hvNV, (const GLhalfNV * v), (v))
GEN_THUNKS(gl, glColor3i, (GLint red, GLint green, GLint blue), (red, green, blue))
GEN_THUNKS(gl, glColor3iv, (const GLint * v), (v))
GEN_THUNKS(gl, glColor3s, (GLshort red, GLshort green, GLshort blue), (red, green, blue))
GEN_THUNKS(gl, glColor3sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glColor3ub, (GLubyte red, GLubyte green, GLubyte blue), (red, green, blue))
GEN_THUNKS(gl, glColor3ubv, (const GLubyte * v), (v))
GEN_THUNKS(gl, glColor3ui, (GLuint red, GLuint green, GLuint blue), (red, green, blue))
GEN_THUNKS(gl, glColor3uiv, (const GLuint * v), (v))
GEN_THUNKS(gl, glColor3us, (GLushort red, GLushort green, GLushort blue), (red, green, blue))
GEN_THUNKS(gl, glColor3usv, (const GLushort * v), (v))
GEN_THUNKS(gl, glColor3xOES, (GLfixed red, GLfixed green, GLfixed blue), (red, green, blue))
GEN_THUNKS(gl, glColor3xvOES, (const GLfixed * components), (components))
GEN_THUNKS(gl, glColor4b, (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glColor4bv, (const GLbyte * v), (v))
GEN_THUNKS(gl, glColor4d, (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glColor4dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glColor4f, (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glColor4fNormal3fVertex3fSUN, (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z), (r, g, b, a, nx, ny, nz, x, y, z))
GEN_THUNKS(gl, glColor4fNormal3fVertex3fvSUN, (const GLfloat * c, const GLfloat * n, const GLfloat * v), (c, n, v))
GEN_THUNKS(gl, glColor4fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glColor4hNV, (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glColor4hvNV, (const GLhalfNV * v), (v))
GEN_THUNKS(gl, glColor4i, (GLint red, GLint green, GLint blue, GLint alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glColor4iv, (const GLint * v), (v))
GEN_THUNKS(gl, glColor4s, (GLshort red, GLshort green, GLshort blue, GLshort alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glColor4sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glColor4ub, (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glColor4ubVertex2fSUN, (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y), (r, g, b, a, x, y))
GEN_THUNKS(gl, glColor4ubVertex2fvSUN, (const GLubyte * c, const GLfloat * v), (c, v))
GEN_THUNKS(gl, glColor4ubVertex3fSUN, (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z), (r, g, b, a, x, y, z))
GEN_THUNKS(gl, glColor4ubVertex3fvSUN, (const GLubyte * c, const GLfloat * v), (c, v))
GEN_THUNKS(gl, glColor4ubv, (const GLubyte * v), (v))
GEN_THUNKS(gl, glColor4ui, (GLuint red, GLuint green, GLuint blue, GLuint alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glColor4uiv, (const GLuint * v), (v))
GEN_THUNKS(gl, glColor4us, (GLushort red, GLushort green, GLushort blue, GLushort alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glColor4usv, (const GLushort * v), (v))
GEN_THUNKS(gl, glColor4x, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glColor4xOES, (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glColor4xvOES, (const GLfixed * components), (components))
GEN_THUNKS(gl, glColorFormatNV, (GLint size, GLenum type, GLsizei stride), (size, type, stride))
GEN_THUNKS(gl, glColorFragmentOp1ATI, (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod), (op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod))
GEN_THUNKS(gl, glColorFragmentOp2ATI, (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod), (op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod))
GEN_THUNKS(gl, glColorFragmentOp3ATI, (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod), (op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod))
GEN_THUNKS(gl, glColorMask, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glColorMaskIndexedEXT, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a), (index, r, g, b, a))
GEN_THUNKS(gl, glColorMaski, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a), (index, r, g, b, a))
GEN_THUNKS(gl, glColorMaskiEXT, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a), (index, r, g, b, a))
GEN_THUNKS(gl, glColorMaskiOES, (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a), (index, r, g, b, a))
GEN_THUNKS(gl, glColorMaterial, (GLenum face, GLenum mode), (face, mode))
GEN_THUNKS(gl, glColorP3ui, (GLenum type, GLuint color), (type, color))
GEN_THUNKS(gl, glColorP3uiv, (GLenum type, const GLuint * color), (type, color))
GEN_THUNKS(gl, glColorP4ui, (GLenum type, GLuint color), (type, color))
GEN_THUNKS(gl, glColorP4uiv, (GLenum type, const GLuint * color), (type, color))
GEN_THUNKS(gl, glColorPointer, (GLint size, GLenum type, GLsizei stride, const void * pointer), (size, type, stride, pointer))
GEN_THUNKS(gl, glColorPointerEXT, (GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer), (size, type, stride, count, pointer))
GEN_THUNKS(gl, glColorPointerListIBM, (GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride), (size, type, stride, pointer, ptrstride))
GEN_THUNKS(gl, glColorPointervINTEL, (GLint size, GLenum type, const void ** pointer), (size, type, pointer))
GEN_THUNKS(gl, glColorSubTable, (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data), (target, start, count, format, type, data))
GEN_THUNKS(gl, glColorSubTableEXT, (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void * data), (target, start, count, format, type, data))
GEN_THUNKS(gl, glColorTable, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table), (target, internalformat, width, format, type, table))
GEN_THUNKS(gl, glColorTableEXT, (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void * table), (target, internalFormat, width, format, type, table))
GEN_THUNKS(gl, glColorTableParameterfv, (GLenum target, GLenum pname, const GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glColorTableParameterfvSGI, (GLenum target, GLenum pname, const GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glColorTableParameteriv, (GLenum target, GLenum pname, const GLint * params), (target, pname, params))
GEN_THUNKS(gl, glColorTableParameterivSGI, (GLenum target, GLenum pname, const GLint * params), (target, pname, params))
GEN_THUNKS(gl, glColorTableSGI, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * table), (target, internalformat, width, format, type, table))
GEN_THUNKS(gl, glCombinerInputNV, (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage), (stage, portion, variable, input, mapping, componentUsage))
GEN_THUNKS(gl, glCombinerOutputNV, (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum), (stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum))
GEN_THUNKS(gl, glCombinerParameterfNV, (GLenum pname, GLfloat param), (pname, param))
GEN_THUNKS(gl, glCombinerParameterfvNV, (GLenum pname, const GLfloat * params), (pname, params))
GEN_THUNKS(gl, glCombinerParameteriNV, (GLenum pname, GLint param), (pname, param))
GEN_THUNKS(gl, glCombinerParameterivNV, (GLenum pname, const GLint * params), (pname, params))
GEN_THUNKS(gl, glCombinerStageParameterfvNV, (GLenum stage, GLenum pname, const GLfloat * params), (stage, pname, params))
GEN_THUNKS(gl, glCommandListSegmentsNV, (GLuint list, GLuint segments), (list, segments))
GEN_THUNKS(gl, glCompileCommandListNV, (GLuint list), (list))
GEN_THUNKS(gl, glCompileShader, (GLuint shader), (shader))
GEN_THUNKS(gl, glCompileShaderARB, (GLhandleARB shaderObj), ((uintptr_t)shaderObj))
GEN_THUNKS(gl, glCompileShaderIncludeARB, (GLuint shader, GLsizei count, const GLchar *const* path, const GLint * length), (shader, count, path, length))
GEN_THUNKS(gl, glCompressedMultiTexImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits), (texunit, target, level, internalformat, width, border, imageSize, bits))
GEN_THUNKS(gl, glCompressedMultiTexImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits), (texunit, target, level, internalformat, width, height, border, imageSize, bits))
GEN_THUNKS(gl, glCompressedMultiTexImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits), (texunit, target, level, internalformat, width, height, depth, border, imageSize, bits))
GEN_THUNKS(gl, glCompressedMultiTexSubImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits), (texunit, target, level, xoffset, width, format, imageSize, bits))
GEN_THUNKS(gl, glCompressedMultiTexSubImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits), (texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits))
GEN_THUNKS(gl, glCompressedMultiTexSubImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits), (texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits))
GEN_THUNKS(gl, glCompressedTexImage1D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data), (target, level, internalformat, width, border, imageSize, data))
GEN_THUNKS(gl, glCompressedTexImage1DARB, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * data), (target, level, internalformat, width, border, imageSize, data))
GEN_THUNKS(gl, glCompressedTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data), (target, level, internalformat, width, height, border, imageSize, data))
GEN_THUNKS(gl, glCompressedTexImage2DARB, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * data), (target, level, internalformat, width, height, border, imageSize, data))
GEN_THUNKS(gl, glCompressedTexImage3D, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data), (target, level, internalformat, width, height, depth, border, imageSize, data))
GEN_THUNKS(gl, glCompressedTexImage3DARB, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data), (target, level, internalformat, width, height, depth, border, imageSize, data))
GEN_THUNKS(gl, glCompressedTexImage3DOES, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * data), (target, level, internalformat, width, height, depth, border, imageSize, data))
GEN_THUNKS(gl, glCompressedTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data), (target, level, xoffset, width, format, imageSize, data))
GEN_THUNKS(gl, glCompressedTexSubImage1DARB, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data), (target, level, xoffset, width, format, imageSize, data))
GEN_THUNKS(gl, glCompressedTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data), (target, level, xoffset, yoffset, width, height, format, imageSize, data))
GEN_THUNKS(gl, glCompressedTexSubImage2DARB, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data), (target, level, xoffset, yoffset, width, height, format, imageSize, data))
GEN_THUNKS(gl, glCompressedTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data), (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data))
GEN_THUNKS(gl, glCompressedTexSubImage3DARB, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data), (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data))
GEN_THUNKS(gl, glCompressedTexSubImage3DOES, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data), (target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data))
GEN_THUNKS(gl, glCompressedTextureImage1DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void * bits), (texture, target, level, internalformat, width, border, imageSize, bits))
GEN_THUNKS(gl, glCompressedTextureImage2DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void * bits), (texture, target, level, internalformat, width, height, border, imageSize, bits))
GEN_THUNKS(gl, glCompressedTextureImage3DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void * bits), (texture, target, level, internalformat, width, height, depth, border, imageSize, bits))
GEN_THUNKS(gl, glCompressedTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data), (texture, level, xoffset, width, format, imageSize, data))
GEN_THUNKS(gl, glCompressedTextureSubImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * bits), (texture, target, level, xoffset, width, format, imageSize, bits))
GEN_THUNKS(gl, glCompressedTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data), (texture, level, xoffset, yoffset, width, height, format, imageSize, data))
GEN_THUNKS(gl, glCompressedTextureSubImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * bits), (texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits))
GEN_THUNKS(gl, glCompressedTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data), (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data))
GEN_THUNKS(gl, glCompressedTextureSubImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * bits), (texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits))
GEN_THUNKS(gl, glConservativeRasterParameterfNV, (GLenum pname, GLfloat value), (pname, value))
GEN_THUNKS(gl, glConservativeRasterParameteriNV, (GLenum pname, GLint param), (pname, param))
GEN_THUNKS(gl, glConvolutionFilter1D, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image), (target, internalformat, width, format, type, image))
GEN_THUNKS(gl, glConvolutionFilter1DEXT, (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void * image), (target, internalformat, width, format, type, image))
GEN_THUNKS(gl, glConvolutionFilter2D, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image), (target, internalformat, width, height, format, type, image))
GEN_THUNKS(gl, glConvolutionFilter2DEXT, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * image), (target, internalformat, width, height, format, type, image))
GEN_THUNKS(gl, glConvolutionParameterf, (GLenum target, GLenum pname, GLfloat params), (target, pname, params))
GEN_THUNKS(gl, glConvolutionParameterfEXT, (GLenum target, GLenum pname, GLfloat params), (target, pname, params))
GEN_THUNKS(gl, glConvolutionParameterfv, (GLenum target, GLenum pname, const GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glConvolutionParameterfvEXT, (GLenum target, GLenum pname, const GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glConvolutionParameteri, (GLenum target, GLenum pname, GLint params), (target, pname, params))
GEN_THUNKS(gl, glConvolutionParameteriEXT, (GLenum target, GLenum pname, GLint params), (target, pname, params))
GEN_THUNKS(gl, glConvolutionParameteriv, (GLenum target, GLenum pname, const GLint * params), (target, pname, params))
GEN_THUNKS(gl, glConvolutionParameterivEXT, (GLenum target, GLenum pname, const GLint * params), (target, pname, params))
GEN_THUNKS(gl, glConvolutionParameterxOES, (GLenum target, GLenum pname, GLfixed param), (target, pname, param))
GEN_THUNKS(gl, glConvolutionParameterxvOES, (GLenum target, GLenum pname, const GLfixed * params), (target, pname, params))
GEN_THUNKS(gl, glCopyBufferSubData, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size), (readTarget, writeTarget, readOffset, writeOffset, size))
GEN_THUNKS(gl, glCopyBufferSubDataNV, (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size), (readTarget, writeTarget, readOffset, writeOffset, size))
GEN_THUNKS(gl, glCopyColorSubTable, (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width), (target, start, x, y, width))
GEN_THUNKS(gl, glCopyColorSubTableEXT, (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width), (target, start, x, y, width))
GEN_THUNKS(gl, glCopyColorTable, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width), (target, internalformat, x, y, width))
GEN_THUNKS(gl, glCopyColorTableSGI, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width), (target, internalformat, x, y, width))
GEN_THUNKS(gl, glCopyConvolutionFilter1D, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width), (target, internalformat, x, y, width))
GEN_THUNKS(gl, glCopyConvolutionFilter1DEXT, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width), (target, internalformat, x, y, width))
GEN_THUNKS(gl, glCopyConvolutionFilter2D, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height), (target, internalformat, x, y, width, height))
GEN_THUNKS(gl, glCopyConvolutionFilter2DEXT, (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height), (target, internalformat, x, y, width, height))
GEN_THUNKS(gl, glCopyImageSubData, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth), (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth))
GEN_THUNKS(gl, glCopyImageSubDataEXT, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth), (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth))
GEN_THUNKS(gl, glCopyImageSubDataNV, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth), (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth))
GEN_THUNKS(gl, glCopyImageSubDataOES, (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth), (srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth))
GEN_THUNKS(gl, glCopyMultiTexImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border), (texunit, target, level, internalformat, x, y, width, border))
GEN_THUNKS(gl, glCopyMultiTexImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border), (texunit, target, level, internalformat, x, y, width, height, border))
GEN_THUNKS(gl, glCopyMultiTexSubImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width), (texunit, target, level, xoffset, x, y, width))
GEN_THUNKS(gl, glCopyMultiTexSubImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height), (texunit, target, level, xoffset, yoffset, x, y, width, height))
GEN_THUNKS(gl, glCopyMultiTexSubImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height), (texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height))
GEN_THUNKS(gl, glCopyNamedBufferSubData, (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size), (readBuffer, writeBuffer, readOffset, writeOffset, size))
GEN_THUNKS(gl, glCopyPathNV, (GLuint resultPath, GLuint srcPath), (resultPath, srcPath))
GEN_THUNKS(gl, glCopyPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type), (x, y, width, height, type))
GEN_THUNKS(gl, glCopyTexImage1D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border), (target, level, internalformat, x, y, width, border))
GEN_THUNKS(gl, glCopyTexImage1DEXT, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border), (target, level, internalformat, x, y, width, border))
GEN_THUNKS(gl, glCopyTexImage2D, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border), (target, level, internalformat, x, y, width, height, border))
GEN_THUNKS(gl, glCopyTexImage2DEXT, (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border), (target, level, internalformat, x, y, width, height, border))
GEN_THUNKS(gl, glCopyTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width), (target, level, xoffset, x, y, width))
GEN_THUNKS(gl, glCopyTexSubImage1DEXT, (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width), (target, level, xoffset, x, y, width))
GEN_THUNKS(gl, glCopyTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height), (target, level, xoffset, yoffset, x, y, width, height))
GEN_THUNKS(gl, glCopyTexSubImage2DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height), (target, level, xoffset, yoffset, x, y, width, height))
GEN_THUNKS(gl, glCopyTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height), (target, level, xoffset, yoffset, zoffset, x, y, width, height))
GEN_THUNKS(gl, glCopyTexSubImage3DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height), (target, level, xoffset, yoffset, zoffset, x, y, width, height))
GEN_THUNKS(gl, glCopyTexSubImage3DOES, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height), (target, level, xoffset, yoffset, zoffset, x, y, width, height))
GEN_THUNKS(gl, glCopyTextureImage1DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border), (texture, target, level, internalformat, x, y, width, border))
GEN_THUNKS(gl, glCopyTextureImage2DEXT, (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border), (texture, target, level, internalformat, x, y, width, height, border))
GEN_THUNKS(gl, glCopyTextureLevelsAPPLE, (GLuint destinationTexture, GLuint sourceTexture, GLint sourceBaseLevel, GLsizei sourceLevelCount), (destinationTexture, sourceTexture, sourceBaseLevel, sourceLevelCount))
GEN_THUNKS(gl, glCopyTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width), (texture, level, xoffset, x, y, width))
GEN_THUNKS(gl, glCopyTextureSubImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width), (texture, target, level, xoffset, x, y, width))
GEN_THUNKS(gl, glCopyTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height), (texture, level, xoffset, yoffset, x, y, width, height))
GEN_THUNKS(gl, glCopyTextureSubImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height), (texture, target, level, xoffset, yoffset, x, y, width, height))
GEN_THUNKS(gl, glCopyTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height), (texture, level, xoffset, yoffset, zoffset, x, y, width, height))
GEN_THUNKS(gl, glCopyTextureSubImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height), (texture, target, level, xoffset, yoffset, zoffset, x, y, width, height))
GEN_THUNKS(gl, glCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues), (numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues))
GEN_THUNKS(gl, glCoverFillPathNV, (GLuint path, GLenum coverMode), (path, coverMode))
GEN_THUNKS(gl, glCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat * transformValues), (numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues))
GEN_THUNKS(gl, glCoverStrokePathNV, (GLuint path, GLenum coverMode), (path, coverMode))
GEN_THUNKS(gl, glCoverageMaskNV, (GLboolean mask), (mask))
GEN_THUNKS(gl, glCoverageModulationNV, (GLenum components), (components))
GEN_THUNKS(gl, glCoverageModulationTableNV, (GLsizei n, const GLfloat * v), (n, v))
GEN_THUNKS(gl, glCoverageOperationNV, (GLenum operation), (operation))
GEN_THUNKS(gl, glCreateBuffers, (GLsizei n, GLuint * buffers), (n, buffers))
GEN_THUNKS(gl, glCreateCommandListsNV, (GLsizei n, GLuint * lists), (n, lists))
GEN_THUNKS(gl, glCreateFramebuffers, (GLsizei n, GLuint * framebuffers), (n, framebuffers))
GEN_THUNKS(gl, glCreatePerfQueryINTEL, (GLuint queryId, GLuint * queryHandle), (queryId, queryHandle))
GEN_THUNKS_RET(gl, GLuint, glCreateProgram, (void), ())
GEN_THUNKS_RET(gl, GLhandleARB, glCreateProgramObjectARB, (void), ())
GEN_THUNKS(gl, glCreateProgramPipelines, (GLsizei n, GLuint * pipelines), (n, pipelines))
GEN_THUNKS(gl, glCreateQueries, (GLenum target, GLsizei n, GLuint * ids), (target, n, ids))
GEN_THUNKS(gl, glCreateRenderbuffers, (GLsizei n, GLuint * renderbuffers), (n, renderbuffers))
GEN_THUNKS(gl, glCreateSamplers, (GLsizei n, GLuint * samplers), (n, samplers))
GEN_THUNKS_RET(gl, GLuint, glCreateShader, (GLenum type), (type))
GEN_THUNKS_RET(gl, GLhandleARB, glCreateShaderObjectARB, (GLenum shaderType), (shaderType))
GEN_THUNKS_RET(gl, GLuint, glCreateShaderProgramEXT, (GLenum type, const GLchar * string), (type, string))
GEN_THUNKS_RET(gl, GLuint, glCreateShaderProgramv, (GLenum type, GLsizei count, const GLchar *const* strings), (type, count, strings))
GEN_THUNKS_RET(gl, GLuint, glCreateShaderProgramvEXT, (GLenum type, GLsizei count, const GLchar ** strings), (type, count, strings))
GEN_THUNKS(gl, glCreateStatesNV, (GLsizei n, GLuint * states), (n, states))
GEN_THUNKS_RET(gl, GLsync, glCreateSyncFromCLeventARB, (struct _cl_context * context, struct _cl_event * event, GLbitfield flags), (context, event, flags))
GEN_THUNKS(gl, glCreateTextures, (GLenum target, GLsizei n, GLuint * textures), (target, n, textures))
GEN_THUNKS(gl, glCreateTransformFeedbacks, (GLsizei n, GLuint * ids), (n, ids))
GEN_THUNKS(gl, glCreateVertexArrays, (GLsizei n, GLuint * arrays), (n, arrays))
GEN_THUNKS(gl, glCullFace, (GLenum mode), (mode))
GEN_THUNKS(gl, glCullParameterdvEXT, (GLenum pname, GLdouble * params), (pname, params))
GEN_THUNKS(gl, glCullParameterfvEXT, (GLenum pname, GLfloat * params), (pname, params))
GEN_THUNKS(gl, glCurrentPaletteMatrixARB, (GLint index), (index))
GEN_THUNKS(gl, glCurrentPaletteMatrixOES, (GLuint matrixpaletteindex), (matrixpaletteindex))
GEN_THUNKS(gl, glDebugMessageCallback, (GLDEBUGPROC callback, const void * userParam), (callback, userParam))
GEN_THUNKS(gl, glDebugMessageCallbackAMD, (GLDEBUGPROCAMD callback, void * userParam), (callback, userParam))
GEN_THUNKS(gl, glDebugMessageCallbackARB, (GLDEBUGPROCARB callback, const void * userParam), (callback, userParam))
GEN_THUNKS(gl, glDebugMessageCallbackKHR, (GLDEBUGPROCKHR callback, const void * userParam), (callback, userParam))
GEN_THUNKS(gl, glDebugMessageControl, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled), (source, type, severity, count, ids, enabled))
GEN_THUNKS(gl, glDebugMessageControlARB, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled), (source, type, severity, count, ids, enabled))
GEN_THUNKS(gl, glDebugMessageControlKHR, (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled), (source, type, severity, count, ids, enabled))
GEN_THUNKS(gl, glDebugMessageEnableAMD, (GLenum category, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled), (category, severity, count, ids, enabled))
GEN_THUNKS(gl, glDebugMessageInsert, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf), (source, type, id, severity, length, buf))
GEN_THUNKS(gl, glDebugMessageInsertAMD, (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar * buf), (category, severity, id, length, buf))
GEN_THUNKS(gl, glDebugMessageInsertARB, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf), (source, type, id, severity, length, buf))
GEN_THUNKS(gl, glDebugMessageInsertKHR, (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf), (source, type, id, severity, length, buf))
GEN_THUNKS(gl, glDeformSGIX, (GLbitfield mask), (mask))
GEN_THUNKS(gl, glDeformationMap3dSGIX, (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble * points), (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points))
GEN_THUNKS(gl, glDeformationMap3fSGIX, (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat * points), (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points))
GEN_THUNKS(gl, glDeleteAsyncMarkersSGIX, (GLuint marker, GLsizei range), (marker, range))
GEN_THUNKS(gl, glDeleteBuffers, (GLsizei n, const GLuint * buffers), (n, buffers))
GEN_THUNKS(gl, glDeleteBuffersARB, (GLsizei n, const GLuint * buffers), (n, buffers))
GEN_THUNKS(gl, glDeleteCommandListsNV, (GLsizei n, const GLuint * lists), (n, lists))
GEN_THUNKS(gl, glDeleteFencesAPPLE, (GLsizei n, const GLuint * fences), (n, fences))
GEN_THUNKS(gl, glDeleteFencesNV, (GLsizei n, const GLuint * fences), (n, fences))
GEN_THUNKS(gl, glDeleteFragmentShaderATI, (GLuint id), (id))
GEN_THUNKS(gl, glDeleteFramebuffers, (GLsizei n, const GLuint * framebuffers), (n, framebuffers))
GEN_THUNKS(gl, glDeleteFramebuffersEXT, (GLsizei n, const GLuint * framebuffers), (n, framebuffers))
GEN_THUNKS(gl, glDeleteFramebuffersOES, (GLsizei n, const GLuint * framebuffers), (n, framebuffers))
GEN_THUNKS(gl, glDeleteLists, (GLuint list, GLsizei range), (list, range))
GEN_THUNKS(gl, glDeleteNamedStringARB, (GLint namelen, const GLchar * name), (namelen, name))
GEN_THUNKS(gl, glDeleteNamesAMD, (GLenum identifier, GLuint num, const GLuint * names), (identifier, num, names))
GEN_THUNKS(gl, glDeleteObjectARB, (GLhandleARB obj), ((uintptr_t)obj))
GEN_THUNKS(gl, glDeleteOcclusionQueriesNV, (GLsizei n, const GLuint * ids), (n, ids))
GEN_THUNKS(gl, glDeletePathsNV, (GLuint path, GLsizei range), (path, range))
GEN_THUNKS(gl, glDeletePerfMonitorsAMD, (GLsizei n, GLuint * monitors), (n, monitors))
GEN_THUNKS(gl, glDeletePerfQueryINTEL, (GLuint queryHandle), (queryHandle))
GEN_THUNKS(gl, glDeleteProgram, (GLuint program), (program))
GEN_THUNKS(gl, glDeleteProgramPipelines, (GLsizei n, const GLuint * pipelines), (n, pipelines))
GEN_THUNKS(gl, glDeleteProgramPipelinesEXT, (GLsizei n, const GLuint * pipelines), (n, pipelines))
GEN_THUNKS(gl, glDeleteProgramsARB, (GLsizei n, const GLuint * programs), (n, programs))
GEN_THUNKS(gl, glDeleteProgramsNV, (GLsizei n, const GLuint * programs), (n, programs))
GEN_THUNKS(gl, glDeleteQueries, (GLsizei n, const GLuint * ids), (n, ids))
GEN_THUNKS(gl, glDeleteQueriesARB, (GLsizei n, const GLuint * ids), (n, ids))
GEN_THUNKS(gl, glDeleteQueriesEXT, (GLsizei n, const GLuint * ids), (n, ids))
GEN_THUNKS(gl, glDeleteRenderbuffers, (GLsizei n, const GLuint * renderbuffers), (n, renderbuffers))
GEN_THUNKS(gl, glDeleteRenderbuffersEXT, (GLsizei n, const GLuint * renderbuffers), (n, renderbuffers))
GEN_THUNKS(gl, glDeleteRenderbuffersOES, (GLsizei n, const GLuint * renderbuffers), (n, renderbuffers))
GEN_THUNKS(gl, glDeleteSamplers, (GLsizei count, const GLuint * samplers), (count, samplers))
GEN_THUNKS(gl, glDeleteShader, (GLuint shader), (shader))
GEN_THUNKS(gl, glDeleteStatesNV, (GLsizei n, const GLuint * states), (n, states))
GEN_THUNKS(gl, glDeleteSync, (GLsync sync), (sync))
GEN_THUNKS(gl, glDeleteSyncAPPLE, (GLsync sync), (sync))
GEN_THUNKS(gl, glDeleteTextures, (GLsizei n, const GLuint * textures), (n, textures))
GEN_THUNKS(gl, glDeleteTexturesEXT, (GLsizei n, const GLuint * textures), (n, textures))
GEN_THUNKS(gl, glDeleteTransformFeedbacks, (GLsizei n, const GLuint * ids), (n, ids))
GEN_THUNKS(gl, glDeleteTransformFeedbacksNV, (GLsizei n, const GLuint * ids), (n, ids))
GEN_THUNKS(gl, glDeleteVertexArrays, (GLsizei n, const GLuint * arrays), (n, arrays))
GEN_THUNKS(gl, glDeleteVertexArraysAPPLE, (GLsizei n, const GLuint * arrays), (n, arrays))
GEN_THUNKS(gl, glDeleteVertexArraysOES, (GLsizei n, const GLuint * arrays), (n, arrays))
GEN_THUNKS(gl, glDeleteVertexShaderEXT, (GLuint id), (id))
GEN_THUNKS(gl, glDepthBoundsEXT, (GLclampd zmin, GLclampd zmax), (zmin, zmax))
GEN_THUNKS(gl, glDepthBoundsdNV, (GLdouble zmin, GLdouble zmax), (zmin, zmax))
GEN_THUNKS(gl, glDepthFunc, (GLenum func), (func))
GEN_THUNKS(gl, glDepthMask, (GLboolean flag), (flag))
GEN_THUNKS(gl, glDepthRange, (GLdouble hither, GLdouble yon), (hither, yon))
GEN_THUNKS(gl, glDepthRangeArrayfvNV, (GLuint first, GLsizei count, const GLfloat * v), (first, count, v))
GEN_THUNKS(gl, glDepthRangeArrayv, (GLuint first, GLsizei count, const GLdouble * v), (first, count, v))
GEN_THUNKS(gl, glDepthRangeIndexed, (GLuint index, GLdouble n, GLdouble f), (index, n, f))
GEN_THUNKS(gl, glDepthRangeIndexedfNV, (GLuint index, GLfloat n, GLfloat f), (index, n, f))
GEN_THUNKS(gl, glDepthRangedNV, (GLdouble zNear, GLdouble zFar), (zNear, zFar))
GEN_THUNKS(gl, glDepthRangef, (GLfloat n, GLfloat f), (n, f))
GEN_THUNKS(gl, glDepthRangefOES, (GLclampf n, GLclampf f), (n, f))
GEN_THUNKS(gl, glDepthRangex, (GLfixed n, GLfixed f), (n, f))
GEN_THUNKS(gl, glDepthRangexOES, (GLfixed n, GLfixed f), (n, f))
GEN_THUNKS(gl, glDetachObjectARB, (GLhandleARB containerObj, GLhandleARB attachedObj), ((uintptr_t)containerObj, (uintptr_t)attachedObj))
GEN_THUNKS(gl, glDetachShader, (GLuint program, GLuint shader), (program, shader))
GEN_THUNKS(gl, glDetailTexFuncSGIS, (GLenum target, GLsizei n, const GLfloat * points), (target, n, points))
GEN_THUNKS(gl, glDisable, (GLenum cap), (cap))
GEN_THUNKS(gl, glDisableClientState, (GLenum array), (array))
GEN_THUNKS(gl, glDisableClientStateIndexedEXT, (GLenum array, GLuint index), (array, index))
GEN_THUNKS(gl, glDisableClientStateiEXT, (GLenum array, GLuint index), (array, index))
GEN_THUNKS(gl, glDisableDriverControlQCOM, (GLuint driverControl), (driverControl))
GEN_THUNKS(gl, glDisableIndexedEXT, (GLenum target, GLuint index), (target, index))
GEN_THUNKS(gl, glDisableVariantClientStateEXT, (GLuint id), (id))
GEN_THUNKS(gl, glDisableVertexArrayAttrib, (GLuint vaobj, GLuint index), (vaobj, index))
GEN_THUNKS(gl, glDisableVertexArrayAttribEXT, (GLuint vaobj, GLuint index), (vaobj, index))
GEN_THUNKS(gl, glDisableVertexArrayEXT, (GLuint vaobj, GLenum array), (vaobj, array))
GEN_THUNKS(gl, glDisableVertexAttribAPPLE, (GLuint index, GLenum pname), (index, pname))
GEN_THUNKS(gl, glDisableVertexAttribArray, (GLuint index), (index))
GEN_THUNKS(gl, glDisableVertexAttribArrayARB, (GLuint index), (index))
GEN_THUNKS(gl, glDisablei, (GLenum target, GLuint index), (target, index))
GEN_THUNKS(gl, glDisableiEXT, (GLenum target, GLuint index), (target, index))
GEN_THUNKS(gl, glDisableiNV, (GLenum target, GLuint index), (target, index))
GEN_THUNKS(gl, glDisableiOES, (GLenum target, GLuint index), (target, index))
GEN_THUNKS(gl, glDiscardFramebufferEXT, (GLenum target, GLsizei numAttachments, const GLenum * attachments), (target, numAttachments, attachments))
GEN_THUNKS(gl, glDispatchCompute, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z), (num_groups_x, num_groups_y, num_groups_z))
GEN_THUNKS(gl, glDispatchComputeGroupSizeARB, (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z), (num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z))
GEN_THUNKS(gl, glDispatchComputeIndirect, (GLintptr indirect), (indirect))
GEN_THUNKS(gl, glDrawArrays, (GLenum mode, GLint first, GLsizei count), (mode, first, count))
GEN_THUNKS(gl, glDrawArraysEXT, (GLenum mode, GLint first, GLsizei count), (mode, first, count))
GEN_THUNKS(gl, glDrawArraysIndirect, (GLenum mode, const void * indirect), (mode, indirect))
GEN_THUNKS(gl, glDrawArraysInstanced, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount), (mode, first, count, instancecount))
GEN_THUNKS(gl, glDrawArraysInstancedANGLE, (GLenum mode, GLint first, GLsizei count, GLsizei primcount), (mode, first, count, primcount))
GEN_THUNKS(gl, glDrawArraysInstancedARB, (GLenum mode, GLint first, GLsizei count, GLsizei primcount), (mode, first, count, primcount))
GEN_THUNKS(gl, glDrawArraysInstancedBaseInstance, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance), (mode, first, count, instancecount, baseinstance))
GEN_THUNKS(gl, glDrawArraysInstancedBaseInstanceEXT, (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance), (mode, first, count, instancecount, baseinstance))
GEN_THUNKS(gl, glDrawArraysInstancedEXT, (GLenum mode, GLint start, GLsizei count, GLsizei primcount), (mode, start, count, primcount))
GEN_THUNKS(gl, glDrawArraysInstancedNV, (GLenum mode, GLint first, GLsizei count, GLsizei primcount), (mode, first, count, primcount))
GEN_THUNKS(gl, glDrawBuffer, (GLenum buf), (buf))
GEN_THUNKS(gl, glDrawBuffers, (GLsizei n, const GLenum * bufs), (n, bufs))
GEN_THUNKS(gl, glDrawBuffersARB, (GLsizei n, const GLenum * bufs), (n, bufs))
GEN_THUNKS(gl, glDrawBuffersATI, (GLsizei n, const GLenum * bufs), (n, bufs))
GEN_THUNKS(gl, glDrawBuffersEXT, (GLsizei n, const GLenum * bufs), (n, bufs))
GEN_THUNKS(gl, glDrawBuffersIndexedEXT, (GLint n, const GLenum * location, const GLint * indices), (n, location, indices))
GEN_THUNKS(gl, glDrawBuffersNV, (GLsizei n, const GLenum * bufs), (n, bufs))
GEN_THUNKS(gl, glDrawCommandsAddressNV, (GLenum primitiveMode, const GLuint64 * indirects, const GLsizei * sizes, GLuint count), (primitiveMode, indirects, sizes, count))
GEN_THUNKS(gl, glDrawCommandsNV, (GLenum primitiveMode, GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, GLuint count), (primitiveMode, buffer, indirects, sizes, count))
GEN_THUNKS(gl, glDrawCommandsStatesAddressNV, (const GLuint64 * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count), (indirects, sizes, states, fbos, count))
GEN_THUNKS(gl, glDrawCommandsStatesNV, (GLuint buffer, const GLintptr * indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count), (buffer, indirects, sizes, states, fbos, count))
GEN_THUNKS(gl, glDrawElementArrayAPPLE, (GLenum mode, GLint first, GLsizei count), (mode, first, count))
GEN_THUNKS(gl, glDrawElementArrayATI, (GLenum mode, GLsizei count), (mode, count))
GEN_THUNKS(gl, glDrawElements, (GLenum mode, GLsizei count, GLenum type, const void * indices), (mode, count, type, indices))
GEN_THUNKS(gl, glDrawElementsBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex), (mode, count, type, indices, basevertex))
GEN_THUNKS(gl, glDrawElementsBaseVertexEXT, (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex), (mode, count, type, indices, basevertex))
GEN_THUNKS(gl, glDrawElementsBaseVertexOES, (GLenum mode, GLsizei count, GLenum type, const void * indices, GLint basevertex), (mode, count, type, indices, basevertex))
GEN_THUNKS(gl, glDrawElementsIndirect, (GLenum mode, GLenum type, const void * indirect), (mode, type, indirect))
GEN_THUNKS(gl, glDrawElementsInstanced, (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount), (mode, count, type, indices, instancecount))
GEN_THUNKS(gl, glDrawElementsInstancedANGLE, (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount), (mode, count, type, indices, primcount))
GEN_THUNKS(gl, glDrawElementsInstancedARB, (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount), (mode, count, type, indices, primcount))
GEN_THUNKS(gl, glDrawElementsInstancedBaseInstance, (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance), (mode, count, type, indices, instancecount, baseinstance))
GEN_THUNKS(gl, glDrawElementsInstancedBaseInstanceEXT, (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance), (mode, count, type, indices, instancecount, baseinstance))
GEN_THUNKS(gl, glDrawElementsInstancedBaseVertex, (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex), (mode, count, type, indices, instancecount, basevertex))
GEN_THUNKS(gl, glDrawElementsInstancedBaseVertexBaseInstance, (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance), (mode, count, type, indices, instancecount, basevertex, baseinstance))
GEN_THUNKS(gl, glDrawElementsInstancedBaseVertexBaseInstanceEXT, (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance), (mode, count, type, indices, instancecount, basevertex, baseinstance))
GEN_THUNKS(gl, glDrawElementsInstancedBaseVertexEXT, (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex), (mode, count, type, indices, instancecount, basevertex))
GEN_THUNKS(gl, glDrawElementsInstancedBaseVertexOES, (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex), (mode, count, type, indices, instancecount, basevertex))
GEN_THUNKS(gl, glDrawElementsInstancedEXT, (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount), (mode, count, type, indices, primcount))
GEN_THUNKS(gl, glDrawElementsInstancedNV, (GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei primcount), (mode, count, type, indices, primcount))
GEN_THUNKS(gl, glDrawMeshArraysSUN, (GLenum mode, GLint first, GLsizei count, GLsizei width), (mode, first, count, width))
GEN_THUNKS(gl, glDrawPixels, (GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels), (width, height, format, type, pixels))
GEN_THUNKS(gl, glDrawRangeElementArrayAPPLE, (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count), (mode, start, end, first, count))
GEN_THUNKS(gl, glDrawRangeElementArrayATI, (GLenum mode, GLuint start, GLuint end, GLsizei count), (mode, start, end, count))
GEN_THUNKS(gl, glDrawRangeElements, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices), (mode, start, end, count, type, indices))
GEN_THUNKS(gl, glDrawRangeElementsBaseVertex, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex), (mode, start, end, count, type, indices, basevertex))
GEN_THUNKS(gl, glDrawRangeElementsBaseVertexEXT, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex), (mode, start, end, count, type, indices, basevertex))
GEN_THUNKS(gl, glDrawRangeElementsBaseVertexOES, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices, GLint basevertex), (mode, start, end, count, type, indices, basevertex))
GEN_THUNKS(gl, glDrawRangeElementsEXT, (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void * indices), (mode, start, end, count, type, indices))
GEN_THUNKS(gl, glDrawTexfOES, (GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height), (x, y, z, width, height))
GEN_THUNKS(gl, glDrawTexfvOES, (const GLfloat * coords), (coords))
GEN_THUNKS(gl, glDrawTexiOES, (GLint x, GLint y, GLint z, GLint width, GLint height), (x, y, z, width, height))
GEN_THUNKS(gl, glDrawTexivOES, (const GLint * coords), (coords))
GEN_THUNKS(gl, glDrawTexsOES, (GLshort x, GLshort y, GLshort z, GLshort width, GLshort height), (x, y, z, width, height))
GEN_THUNKS(gl, glDrawTexsvOES, (const GLshort * coords), (coords))
GEN_THUNKS(gl, glDrawTextureNV, (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1), (texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1))
GEN_THUNKS(gl, glDrawTexxOES, (GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height), (x, y, z, width, height))
GEN_THUNKS(gl, glDrawTexxvOES, (const GLfixed * coords), (coords))
GEN_THUNKS(gl, glDrawTransformFeedback, (GLenum mode, GLuint id), (mode, id))
GEN_THUNKS(gl, glDrawTransformFeedbackInstanced, (GLenum mode, GLuint id, GLsizei instancecount), (mode, id, instancecount))
GEN_THUNKS(gl, glDrawTransformFeedbackNV, (GLenum mode, GLuint id), (mode, id))
GEN_THUNKS(gl, glDrawTransformFeedbackStream, (GLenum mode, GLuint id, GLuint stream), (mode, id, stream))
GEN_THUNKS(gl, glDrawTransformFeedbackStreamInstanced, (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount), (mode, id, stream, instancecount))
GEN_THUNKS(gl, glEGLImageTargetRenderbufferStorageOES, (GLenum target, GLeglImageOES image), (target, image))
GEN_THUNKS(gl, glEGLImageTargetTexture2DOES, (GLenum target, GLeglImageOES image), (target, image))
GEN_THUNKS(gl, glEdgeFlag, (GLboolean flag), (flag))
GEN_THUNKS(gl, glEdgeFlagFormatNV, (GLsizei stride), (stride))
GEN_THUNKS(gl, glEdgeFlagPointer, (GLsizei stride, const void * pointer), (stride, pointer))
GEN_THUNKS(gl, glEdgeFlagPointerEXT, (GLsizei stride, GLsizei count, const GLboolean * pointer), (stride, count, pointer))
GEN_THUNKS(gl, glEdgeFlagPointerListIBM, (GLint stride, const GLboolean ** pointer, GLint ptrstride), (stride, pointer, ptrstride))
GEN_THUNKS(gl, glEdgeFlagv, (const GLboolean * flag), (flag))
GEN_THUNKS(gl, glElementPointerAPPLE, (GLenum type, const void * pointer), (type, pointer))
GEN_THUNKS(gl, glElementPointerATI, (GLenum type, const void * pointer), (type, pointer))
GEN_THUNKS(gl, glEnable, (GLenum cap), (cap))
GEN_THUNKS(gl, glEnableClientState, (GLenum array), (array))
GEN_THUNKS(gl, glEnableClientStateIndexedEXT, (GLenum array, GLuint index), (array, index))
GEN_THUNKS(gl, glEnableClientStateiEXT, (GLenum array, GLuint index), (array, index))
GEN_THUNKS(gl, glEnableDriverControlQCOM, (GLuint driverControl), (driverControl))
GEN_THUNKS(gl, glEnableIndexedEXT, (GLenum target, GLuint index), (target, index))
GEN_THUNKS(gl, glEnableVariantClientStateEXT, (GLuint id), (id))
GEN_THUNKS(gl, glEnableVertexArrayAttrib, (GLuint vaobj, GLuint index), (vaobj, index))
GEN_THUNKS(gl, glEnableVertexArrayAttribEXT, (GLuint vaobj, GLuint index), (vaobj, index))
GEN_THUNKS(gl, glEnableVertexArrayEXT, (GLuint vaobj, GLenum array), (vaobj, array))
GEN_THUNKS(gl, glEnableVertexAttribAPPLE, (GLuint index, GLenum pname), (index, pname))
GEN_THUNKS(gl, glEnableVertexAttribArray, (GLuint index), (index))
GEN_THUNKS(gl, glEnableVertexAttribArrayARB, (GLuint index), (index))
GEN_THUNKS(gl, glEnablei, (GLenum target, GLuint index), (target, index))
GEN_THUNKS(gl, glEnableiEXT, (GLenum target, GLuint index), (target, index))
GEN_THUNKS(gl, glEnableiNV, (GLenum target, GLuint index), (target, index))
GEN_THUNKS(gl, glEnableiOES, (GLenum target, GLuint index), (target, index))
GEN_THUNKS(gl, glEnd, (void), ())
GEN_THUNKS(gl, glEndConditionalRender, (void), ())
GEN_THUNKS(gl, glEndConditionalRenderNV, (void), ())
GEN_THUNKS(gl, glEndConditionalRenderNVX, (void), ())
GEN_THUNKS(gl, glEndFragmentShaderATI, (void), ())
GEN_THUNKS(gl, glEndList, (void), ())
GEN_THUNKS(gl, glEndOcclusionQueryNV, (void), ())
GEN_THUNKS(gl, glEndPerfMonitorAMD, (GLuint monitor), (monitor))
GEN_THUNKS(gl, glEndPerfQueryINTEL, (GLuint queryHandle), (queryHandle))
GEN_THUNKS(gl, glEndQuery, (GLenum target), (target))
GEN_THUNKS(gl, glEndQueryARB, (GLenum target), (target))
GEN_THUNKS(gl, glEndQueryEXT, (GLenum target), (target))
GEN_THUNKS(gl, glEndQueryIndexed, (GLenum target, GLuint index), (target, index))
GEN_THUNKS(gl, glEndTilingQCOM, (GLbitfield preserveMask), (preserveMask))
GEN_THUNKS(gl, glEndTransformFeedback, (void), ())
GEN_THUNKS(gl, glEndTransformFeedbackEXT, (void), ())
GEN_THUNKS(gl, glEndTransformFeedbackNV, (void), ())
GEN_THUNKS(gl, glEndVertexShaderEXT, (void), ())
GEN_THUNKS(gl, glEndVideoCaptureNV, (GLuint video_capture_slot), (video_capture_slot))
GEN_THUNKS(gl, glEvalCoord1d, (GLdouble u), (u))
GEN_THUNKS(gl, glEvalCoord1dv, (const GLdouble * u), (u))
GEN_THUNKS(gl, glEvalCoord1f, (GLfloat u), (u))
GEN_THUNKS(gl, glEvalCoord1fv, (const GLfloat * u), (u))
GEN_THUNKS(gl, glEvalCoord1xOES, (GLfixed u), (u))
GEN_THUNKS(gl, glEvalCoord1xvOES, (const GLfixed * coords), (coords))
GEN_THUNKS(gl, glEvalCoord2d, (GLdouble u, GLdouble v), (u, v))
GEN_THUNKS(gl, glEvalCoord2dv, (const GLdouble * u), (u))
GEN_THUNKS(gl, glEvalCoord2f, (GLfloat u, GLfloat v), (u, v))
GEN_THUNKS(gl, glEvalCoord2fv, (const GLfloat * u), (u))
GEN_THUNKS(gl, glEvalCoord2xOES, (GLfixed u, GLfixed v), (u, v))
GEN_THUNKS(gl, glEvalCoord2xvOES, (const GLfixed * coords), (coords))
GEN_THUNKS(gl, glEvalMapsNV, (GLenum target, GLenum mode), (target, mode))
GEN_THUNKS(gl, glEvalMesh1, (GLenum mode, GLint i1, GLint i2), (mode, i1, i2))
GEN_THUNKS(gl, glEvalMesh2, (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2), (mode, i1, i2, j1, j2))
GEN_THUNKS(gl, glEvalPoint1, (GLint i), (i))
GEN_THUNKS(gl, glEvalPoint2, (GLint i, GLint j), (i, j))
GEN_THUNKS(gl, glEvaluateDepthValuesARB, (void), ())
GEN_THUNKS(gl, glExecuteProgramNV, (GLenum target, GLuint id, const GLfloat * params), (target, id, params))
GEN_THUNKS(gl, glExtGetBufferPointervQCOM, (GLenum target, void ** params), (target, params))
GEN_THUNKS(gl, glExtGetBuffersQCOM, (GLuint * buffers, GLint maxBuffers, GLint * numBuffers), (buffers, maxBuffers, numBuffers))
GEN_THUNKS(gl, glExtGetFramebuffersQCOM, (GLuint * framebuffers, GLint maxFramebuffers, GLint * numFramebuffers), (framebuffers, maxFramebuffers, numFramebuffers))
GEN_THUNKS(gl, glExtGetProgramBinarySourceQCOM, (GLuint program, GLenum shadertype, GLchar * source, GLint * length), (program, shadertype, source, length))
GEN_THUNKS(gl, glExtGetProgramsQCOM, (GLuint * programs, GLint maxPrograms, GLint * numPrograms), (programs, maxPrograms, numPrograms))
GEN_THUNKS(gl, glExtGetRenderbuffersQCOM, (GLuint * renderbuffers, GLint maxRenderbuffers, GLint * numRenderbuffers), (renderbuffers, maxRenderbuffers, numRenderbuffers))
GEN_THUNKS(gl, glExtGetShadersQCOM, (GLuint * shaders, GLint maxShaders, GLint * numShaders), (shaders, maxShaders, numShaders))
GEN_THUNKS(gl, glExtGetTexLevelParameterivQCOM, (GLuint texture, GLenum face, GLint level, GLenum pname, GLint * params), (texture, face, level, pname, params))
GEN_THUNKS(gl, glExtGetTexSubImageQCOM, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void * texels), (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, texels))
GEN_THUNKS(gl, glExtGetTexturesQCOM, (GLuint * textures, GLint maxTextures, GLint * numTextures), (textures, maxTextures, numTextures))
GEN_THUNKS_RET(gl, GLboolean, glExtIsProgramBinaryQCOM, (GLuint program), (program))
GEN_THUNKS(gl, glExtTexObjectStateOverrideiQCOM, (GLenum target, GLenum pname, GLint param), (target, pname, param))
GEN_THUNKS(gl, glExtractComponentEXT, (GLuint res, GLuint src, GLuint num), (res, src, num))
GEN_THUNKS(gl, glFeedbackBuffer, (GLsizei size, GLenum type, GLfloat * buffer), (size, type, buffer))
GEN_THUNKS(gl, glFeedbackBufferxOES, (GLsizei n, GLenum type, const GLfixed * buffer), (n, type, buffer))
GEN_THUNKS_RET(gl, GLsync, glFenceSync, (GLenum condition, GLbitfield flags), (condition, flags))
GEN_THUNKS_RET(gl, GLsync, glFenceSyncAPPLE, (GLenum condition, GLbitfield flags), (condition, flags))
GEN_THUNKS(gl, glFinalCombinerInputNV, (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage), (variable, input, mapping, componentUsage))
GEN_THUNKS(gl, glFinish, (void), ())
GEN_THUNKS_RET(gl, GLint, glFinishAsyncSGIX, (GLuint * markerp), (markerp))
GEN_THUNKS(gl, glFinishFenceAPPLE, (GLuint fence), (fence))
GEN_THUNKS(gl, glFinishFenceNV, (GLuint fence), (fence))
GEN_THUNKS(gl, glFinishObjectAPPLE, (GLenum object, GLint name), (object, name))
GEN_THUNKS(gl, glFinishTextureSUNX, (void), ())
GEN_THUNKS(gl, glFlush, (void), ())
GEN_THUNKS(gl, glFlushMappedBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length), (target, offset, length))
GEN_THUNKS(gl, glFlushMappedBufferRangeAPPLE, (GLenum target, GLintptr offset, GLsizeiptr size), (target, offset, size))
GEN_THUNKS(gl, glFlushMappedBufferRangeEXT, (GLenum target, GLintptr offset, GLsizeiptr length), (target, offset, length))
GEN_THUNKS(gl, glFlushMappedNamedBufferRange, (GLuint buffer, GLintptr offset, GLsizeiptr length), (buffer, offset, length))
GEN_THUNKS(gl, glFlushMappedNamedBufferRangeEXT, (GLuint buffer, GLintptr offset, GLsizeiptr length), (buffer, offset, length))
GEN_THUNKS(gl, glFlushPixelDataRangeNV, (GLenum target), (target))
GEN_THUNKS(gl, glFlushRasterSGIX, (void), ())
GEN_THUNKS(gl, glFlushStaticDataIBM, (GLenum target), (target))
GEN_THUNKS(gl, glFlushVertexArrayRangeAPPLE, (GLsizei length, void * pointer), (length, pointer))
GEN_THUNKS(gl, glFlushVertexArrayRangeNV, (void), ())
GEN_THUNKS(gl, glFogCoordFormatNV, (GLenum type, GLsizei stride), (type, stride))
GEN_THUNKS(gl, glFogCoordPointer, (GLenum type, GLsizei stride, const void * pointer), (type, stride, pointer))
GEN_THUNKS(gl, glFogCoordPointerEXT, (GLenum type, GLsizei stride, const void * pointer), (type, stride, pointer))
GEN_THUNKS(gl, glFogCoordPointerListIBM, (GLenum type, GLint stride, const void ** pointer, GLint ptrstride), (type, stride, pointer, ptrstride))
GEN_THUNKS(gl, glFogCoordd, (GLdouble coord), (coord))
GEN_THUNKS(gl, glFogCoorddEXT, (GLdouble coord), (coord))
GEN_THUNKS(gl, glFogCoorddv, (const GLdouble * coord), (coord))
GEN_THUNKS(gl, glFogCoorddvEXT, (const GLdouble * coord), (coord))
GEN_THUNKS(gl, glFogCoordf, (GLfloat coord), (coord))
GEN_THUNKS(gl, glFogCoordfEXT, (GLfloat coord), (coord))
GEN_THUNKS(gl, glFogCoordfv, (const GLfloat * coord), (coord))
GEN_THUNKS(gl, glFogCoordfvEXT, (const GLfloat * coord), (coord))
GEN_THUNKS(gl, glFogCoordhNV, (GLhalfNV fog), (fog))
GEN_THUNKS(gl, glFogCoordhvNV, (const GLhalfNV * fog), (fog))
GEN_THUNKS(gl, glFogFuncSGIS, (GLsizei n, const GLfloat * points), (n, points))
GEN_THUNKS(gl, glFogf, (GLenum pname, GLfloat param), (pname, param))
GEN_THUNKS(gl, glFogfv, (GLenum pname, const GLfloat * params), (pname, params))
GEN_THUNKS(gl, glFogi, (GLenum pname, GLint param), (pname, param))
GEN_THUNKS(gl, glFogiv, (GLenum pname, const GLint * params), (pname, params))
GEN_THUNKS(gl, glFogx, (GLenum pname, GLfixed param), (pname, param))
GEN_THUNKS(gl, glFogxOES, (GLenum pname, GLfixed param), (pname, param))
GEN_THUNKS(gl, glFogxv, (GLenum pname, const GLfixed * param), (pname, param))
GEN_THUNKS(gl, glFogxvOES, (GLenum pname, const GLfixed * param), (pname, param))
GEN_THUNKS(gl, glFragmentColorMaterialSGIX, (GLenum face, GLenum mode), (face, mode))
GEN_THUNKS(gl, glFragmentCoverageColorNV, (GLuint color), (color))
GEN_THUNKS(gl, glFragmentLightModelfSGIX, (GLenum pname, GLfloat param), (pname, param))
GEN_THUNKS(gl, glFragmentLightModelfvSGIX, (GLenum pname, const GLfloat * params), (pname, params))
GEN_THUNKS(gl, glFragmentLightModeliSGIX, (GLenum pname, GLint param), (pname, param))
GEN_THUNKS(gl, glFragmentLightModelivSGIX, (GLenum pname, const GLint * params), (pname, params))
GEN_THUNKS(gl, glFragmentLightfSGIX, (GLenum light, GLenum pname, GLfloat param), (light, pname, param))
GEN_THUNKS(gl, glFragmentLightfvSGIX, (GLenum light, GLenum pname, const GLfloat * params), (light, pname, params))
GEN_THUNKS(gl, glFragmentLightiSGIX, (GLenum light, GLenum pname, GLint param), (light, pname, param))
GEN_THUNKS(gl, glFragmentLightivSGIX, (GLenum light, GLenum pname, const GLint * params), (light, pname, params))
GEN_THUNKS(gl, glFragmentMaterialfSGIX, (GLenum face, GLenum pname, GLfloat param), (face, pname, param))
GEN_THUNKS(gl, glFragmentMaterialfvSGIX, (GLenum face, GLenum pname, const GLfloat * params), (face, pname, params))
GEN_THUNKS(gl, glFragmentMaterialiSGIX, (GLenum face, GLenum pname, GLint param), (face, pname, param))
GEN_THUNKS(gl, glFragmentMaterialivSGIX, (GLenum face, GLenum pname, const GLint * params), (face, pname, params))
GEN_THUNKS(gl, glFrameTerminatorGREMEDY, (void), ())
GEN_THUNKS(gl, glFrameZoomSGIX, (GLint factor), (factor))
GEN_THUNKS(gl, glFramebufferDrawBufferEXT, (GLuint framebuffer, GLenum mode), (framebuffer, mode))
GEN_THUNKS(gl, glFramebufferDrawBuffersEXT, (GLuint framebuffer, GLsizei n, const GLenum * bufs), (framebuffer, n, bufs))
GEN_THUNKS(gl, glFramebufferParameteri, (GLenum target, GLenum pname, GLint param), (target, pname, param))
GEN_THUNKS(gl, glFramebufferPixelLocalStorageSizeEXT, (GLuint target, GLsizei size), (target, size))
GEN_THUNKS(gl, glFramebufferReadBufferEXT, (GLuint framebuffer, GLenum mode), (framebuffer, mode))
GEN_THUNKS(gl, glFramebufferRenderbuffer, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer), (target, attachment, renderbuffertarget, renderbuffer))
GEN_THUNKS(gl, glFramebufferRenderbufferEXT, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer), (target, attachment, renderbuffertarget, renderbuffer))
GEN_THUNKS(gl, glFramebufferRenderbufferOES, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer), (target, attachment, renderbuffertarget, renderbuffer))
GEN_THUNKS(gl, glFramebufferSampleLocationsfvARB, (GLenum target, GLuint start, GLsizei count, const GLfloat * v), (target, start, count, v))
GEN_THUNKS(gl, glFramebufferSampleLocationsfvNV, (GLenum target, GLuint start, GLsizei count, const GLfloat * v), (target, start, count, v))
GEN_THUNKS(gl, glFramebufferTexture, (GLenum target, GLenum attachment, GLuint texture, GLint level), (target, attachment, texture, level))
GEN_THUNKS(gl, glFramebufferTexture1D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level), (target, attachment, textarget, texture, level))
GEN_THUNKS(gl, glFramebufferTexture1DEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level), (target, attachment, textarget, texture, level))
GEN_THUNKS(gl, glFramebufferTexture2D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level), (target, attachment, textarget, texture, level))
GEN_THUNKS(gl, glFramebufferTexture2DDownsampleIMG, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint xscale, GLint yscale), (target, attachment, textarget, texture, level, xscale, yscale))
GEN_THUNKS(gl, glFramebufferTexture2DEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level), (target, attachment, textarget, texture, level))
GEN_THUNKS(gl, glFramebufferTexture2DMultisampleEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples), (target, attachment, textarget, texture, level, samples))
GEN_THUNKS(gl, glFramebufferTexture2DMultisampleIMG, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsizei samples), (target, attachment, textarget, texture, level, samples))
GEN_THUNKS(gl, glFramebufferTexture2DOES, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level), (target, attachment, textarget, texture, level))
GEN_THUNKS(gl, glFramebufferTexture3D, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset), (target, attachment, textarget, texture, level, zoffset))
GEN_THUNKS(gl, glFramebufferTexture3DEXT, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset), (target, attachment, textarget, texture, level, zoffset))
GEN_THUNKS(gl, glFramebufferTexture3DOES, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset), (target, attachment, textarget, texture, level, zoffset))
GEN_THUNKS(gl, glFramebufferTextureARB, (GLenum target, GLenum attachment, GLuint texture, GLint level), (target, attachment, texture, level))
GEN_THUNKS(gl, glFramebufferTextureEXT, (GLenum target, GLenum attachment, GLuint texture, GLint level), (target, attachment, texture, level))
GEN_THUNKS(gl, glFramebufferTextureFaceARB, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face), (target, attachment, texture, level, face))
GEN_THUNKS(gl, glFramebufferTextureFaceEXT, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face), (target, attachment, texture, level, face))
GEN_THUNKS(gl, glFramebufferTextureLayer, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer), (target, attachment, texture, level, layer))
GEN_THUNKS(gl, glFramebufferTextureLayerARB, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer), (target, attachment, texture, level, layer))
GEN_THUNKS(gl, glFramebufferTextureLayerDownsampleIMG, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLint xscale, GLint yscale), (target, attachment, texture, level, layer, xscale, yscale))
GEN_THUNKS(gl, glFramebufferTextureLayerEXT, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer), (target, attachment, texture, level, layer))
GEN_THUNKS(gl, glFramebufferTextureMultisampleMultiviewOVR, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLsizei samples, GLint baseViewIndex, GLsizei numViews), (target, attachment, texture, level, samples, baseViewIndex, numViews))
GEN_THUNKS(gl, glFramebufferTextureMultiviewOVR, (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint baseViewIndex, GLsizei numViews), (target, attachment, texture, level, baseViewIndex, numViews))
GEN_THUNKS(gl, glFramebufferTextureOES, (GLenum target, GLenum attachment, GLuint texture, GLint level), (target, attachment, texture, level))
GEN_THUNKS(gl, glFreeObjectBufferATI, (GLuint buffer), (buffer))
GEN_THUNKS(gl, glFrontFace, (GLenum mode), (mode))
GEN_THUNKS(gl, glFrustum, (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar), (left, right, bottom, top, zNear, zFar))
GEN_THUNKS(gl, glFrustumf, (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f), (l, r, b, t, n, f))
GEN_THUNKS(gl, glFrustumfOES, (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f), (l, r, b, t, n, f))
GEN_THUNKS(gl, glFrustumx, (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f), (l, r, b, t, n, f))
GEN_THUNKS(gl, glFrustumxOES, (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f), (l, r, b, t, n, f))
GEN_THUNKS_RET(gl, GLuint, glGenAsyncMarkersSGIX, (GLsizei range), (range))
GEN_THUNKS(gl, glGenBuffers, (GLsizei n, GLuint * buffers), (n, buffers))
GEN_THUNKS(gl, glGenBuffersARB, (GLsizei n, GLuint * buffers), (n, buffers))
GEN_THUNKS(gl, glGenFencesAPPLE, (GLsizei n, GLuint * fences), (n, fences))
GEN_THUNKS(gl, glGenFencesNV, (GLsizei n, GLuint * fences), (n, fences))
GEN_THUNKS_RET(gl, GLuint, glGenFragmentShadersATI, (GLuint range), (range))
GEN_THUNKS(gl, glGenFramebuffers, (GLsizei n, GLuint * framebuffers), (n, framebuffers))
GEN_THUNKS(gl, glGenFramebuffersEXT, (GLsizei n, GLuint * framebuffers), (n, framebuffers))
GEN_THUNKS(gl, glGenFramebuffersOES, (GLsizei n, GLuint * framebuffers), (n, framebuffers))
GEN_THUNKS_RET(gl, GLuint, glGenLists, (GLsizei range), (range))
GEN_THUNKS(gl, glGenNamesAMD, (GLenum identifier, GLuint num, GLuint * names), (identifier, num, names))
GEN_THUNKS(gl, glGenOcclusionQueriesNV, (GLsizei n, GLuint * ids), (n, ids))
GEN_THUNKS_RET(gl, GLuint, glGenPathsNV, (GLsizei range), (range))
GEN_THUNKS(gl, glGenPerfMonitorsAMD, (GLsizei n, GLuint * monitors), (n, monitors))
GEN_THUNKS(gl, glGenProgramPipelines, (GLsizei n, GLuint * pipelines), (n, pipelines))
GEN_THUNKS(gl, glGenProgramPipelinesEXT, (GLsizei n, GLuint * pipelines), (n, pipelines))
GEN_THUNKS(gl, glGenProgramsARB, (GLsizei n, GLuint * programs), (n, programs))
GEN_THUNKS(gl, glGenProgramsNV, (GLsizei n, GLuint * programs), (n, programs))
GEN_THUNKS(gl, glGenQueries, (GLsizei n, GLuint * ids), (n, ids))
GEN_THUNKS(gl, glGenQueriesARB, (GLsizei n, GLuint * ids), (n, ids))
GEN_THUNKS(gl, glGenQueriesEXT, (GLsizei n, GLuint * ids), (n, ids))
GEN_THUNKS(gl, glGenRenderbuffers, (GLsizei n, GLuint * renderbuffers), (n, renderbuffers))
GEN_THUNKS(gl, glGenRenderbuffersEXT, (GLsizei n, GLuint * renderbuffers), (n, renderbuffers))
GEN_THUNKS(gl, glGenRenderbuffersOES, (GLsizei n, GLuint * renderbuffers), (n, renderbuffers))
GEN_THUNKS(gl, glGenSamplers, (GLsizei count, GLuint * samplers), (count, samplers))
GEN_THUNKS_RET(gl, GLuint, glGenSymbolsEXT, (GLenum datatype, GLenum storagetype, GLenum range, GLuint components), (datatype, storagetype, range, components))
GEN_THUNKS(gl, glGenTextures, (GLsizei n, GLuint * textures), (n, textures))
GEN_THUNKS(gl, glGenTexturesEXT, (GLsizei n, GLuint * textures), (n, textures))
GEN_THUNKS(gl, glGenTransformFeedbacks, (GLsizei n, GLuint * ids), (n, ids))
GEN_THUNKS(gl, glGenTransformFeedbacksNV, (GLsizei n, GLuint * ids), (n, ids))
GEN_THUNKS(gl, glGenVertexArrays, (GLsizei n, GLuint * arrays), (n, arrays))
GEN_THUNKS(gl, glGenVertexArraysAPPLE, (GLsizei n, GLuint * arrays), (n, arrays))
GEN_THUNKS(gl, glGenVertexArraysOES, (GLsizei n, GLuint * arrays), (n, arrays))
GEN_THUNKS_RET(gl, GLuint, glGenVertexShadersEXT, (GLuint range), (range))
GEN_THUNKS(gl, glGenerateMipmap, (GLenum target), (target))
GEN_THUNKS(gl, glGenerateMipmapEXT, (GLenum target), (target))
GEN_THUNKS(gl, glGenerateMipmapOES, (GLenum target), (target))
GEN_THUNKS(gl, glGenerateMultiTexMipmapEXT, (GLenum texunit, GLenum target), (texunit, target))
GEN_THUNKS(gl, glGenerateTextureMipmap, (GLuint texture), (texture))
GEN_THUNKS(gl, glGenerateTextureMipmapEXT, (GLuint texture, GLenum target), (texture, target))
GEN_THUNKS(gl, glGetActiveAtomicCounterBufferiv, (GLuint program, GLuint bufferIndex, GLenum pname, GLint * params), (program, bufferIndex, pname, params))
GEN_THUNKS(gl, glGetActiveAttrib, (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name), (program, index, bufSize, length, size, type, name))
GEN_THUNKS(gl, glGetActiveAttribARB, (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name), ((uintptr_t)programObj, index, maxLength, length, size, type, name))
GEN_THUNKS(gl, glGetActiveSubroutineName, (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name), (program, shadertype, index, bufsize, length, name))
GEN_THUNKS(gl, glGetActiveSubroutineUniformName, (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name), (program, shadertype, index, bufsize, length, name))
GEN_THUNKS(gl, glGetActiveSubroutineUniformiv, (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values), (program, shadertype, index, pname, values))
GEN_THUNKS(gl, glGetActiveUniform, (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name), (program, index, bufSize, length, size, type, name))
GEN_THUNKS(gl, glGetActiveUniformARB, (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name), ((uintptr_t)programObj, index, maxLength, length, size, type, name))
GEN_THUNKS(gl, glGetActiveUniformBlockName, (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformBlockName), (program, uniformBlockIndex, bufSize, length, uniformBlockName))
GEN_THUNKS(gl, glGetActiveUniformBlockiv, (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint * params), (program, uniformBlockIndex, pname, params))
GEN_THUNKS(gl, glGetActiveUniformName, (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei * length, GLchar * uniformName), (program, uniformIndex, bufSize, length, uniformName))
GEN_THUNKS(gl, glGetActiveUniformsiv, (GLuint program, GLsizei uniformCount, const GLuint * uniformIndices, GLenum pname, GLint * params), (program, uniformCount, uniformIndices, pname, params))
GEN_THUNKS(gl, glGetActiveVaryingNV, (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name), (program, index, bufSize, length, size, type, name))
GEN_THUNKS(gl, glGetArrayObjectfvATI, (GLenum array, GLenum pname, GLfloat * params), (array, pname, params))
GEN_THUNKS(gl, glGetArrayObjectivATI, (GLenum array, GLenum pname, GLint * params), (array, pname, params))
GEN_THUNKS(gl, glGetAttachedObjectsARB, (GLhandleARB containerObj, GLsizei maxCount, GLsizei * count, GLhandleARB * obj), ((uintptr_t)containerObj, maxCount, count, obj))
GEN_THUNKS(gl, glGetAttachedShaders, (GLuint program, GLsizei maxCount, GLsizei * count, GLuint * shaders), (program, maxCount, count, shaders))
GEN_THUNKS_RET(gl, GLint, glGetAttribLocation, (GLuint program, const GLchar * name), (program, name))
GEN_THUNKS_RET(gl, GLint, glGetAttribLocationARB, (GLhandleARB programObj, const GLcharARB * name), ((uintptr_t)programObj, name))
GEN_THUNKS(gl, glGetBooleanIndexedvEXT, (GLenum target, GLuint index, GLboolean * data), (target, index, data))
GEN_THUNKS(gl, glGetBooleani_v, (GLenum target, GLuint index, GLboolean * data), (target, index, data))
GEN_THUNKS(gl, glGetBooleanv, (GLenum pname, GLboolean * data), (pname, data))
GEN_THUNKS(gl, glGetBufferParameteri64v, (GLenum target, GLenum pname, GLint64 * params), (target, pname, params))
GEN_THUNKS(gl, glGetBufferParameteriv, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetBufferParameterivARB, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetBufferParameterui64vNV, (GLenum target, GLenum pname, GLuint64EXT * params), (target, pname, params))
GEN_THUNKS(gl, glGetBufferPointerv, (GLenum target, GLenum pname, void ** params), (target, pname, params))
GEN_THUNKS(gl, glGetBufferPointervARB, (GLenum target, GLenum pname, void ** params), (target, pname, params))
GEN_THUNKS(gl, glGetBufferPointervOES, (GLenum target, GLenum pname, void ** params), (target, pname, params))
GEN_THUNKS(gl, glGetBufferSubData, (GLenum target, GLintptr offset, GLsizeiptr size, void * data), (target, offset, size, data))
GEN_THUNKS(gl, glGetBufferSubDataARB, (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data), (target, offset, size, data))
GEN_THUNKS(gl, glGetClipPlane, (GLenum plane, GLdouble * equation), (plane, equation))
GEN_THUNKS(gl, glGetClipPlanef, (GLenum plane, GLfloat * equation), (plane, equation))
GEN_THUNKS(gl, glGetClipPlanefOES, (GLenum plane, GLfloat * equation), (plane, equation))
GEN_THUNKS(gl, glGetClipPlanex, (GLenum plane, GLfixed * equation), (plane, equation))
GEN_THUNKS(gl, glGetClipPlanexOES, (GLenum plane, GLfixed * equation), (plane, equation))
GEN_THUNKS(gl, glGetColorTable, (GLenum target, GLenum format, GLenum type, void * table), (target, format, type, table))
GEN_THUNKS(gl, glGetColorTableEXT, (GLenum target, GLenum format, GLenum type, void * data), (target, format, type, data))
GEN_THUNKS(gl, glGetColorTableParameterfv, (GLenum target, GLenum pname, GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glGetColorTableParameterfvEXT, (GLenum target, GLenum pname, GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glGetColorTableParameterfvSGI, (GLenum target, GLenum pname, GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glGetColorTableParameteriv, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetColorTableParameterivEXT, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetColorTableParameterivSGI, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetColorTableSGI, (GLenum target, GLenum format, GLenum type, void * table), (target, format, type, table))
GEN_THUNKS(gl, glGetCombinerInputParameterfvNV, (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params), (stage, portion, variable, pname, params))
GEN_THUNKS(gl, glGetCombinerInputParameterivNV, (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params), (stage, portion, variable, pname, params))
GEN_THUNKS(gl, glGetCombinerOutputParameterfvNV, (GLenum stage, GLenum portion, GLenum pname, GLfloat * params), (stage, portion, pname, params))
GEN_THUNKS(gl, glGetCombinerOutputParameterivNV, (GLenum stage, GLenum portion, GLenum pname, GLint * params), (stage, portion, pname, params))
GEN_THUNKS(gl, glGetCombinerStageParameterfvNV, (GLenum stage, GLenum pname, GLfloat * params), (stage, pname, params))
GEN_THUNKS_RET(gl, GLuint, glGetCommandHeaderNV, (GLenum tokenID, GLuint size), (tokenID, size))
GEN_THUNKS(gl, glGetCompressedMultiTexImageEXT, (GLenum texunit, GLenum target, GLint lod, void * img), (texunit, target, lod, img))
GEN_THUNKS(gl, glGetCompressedTexImage, (GLenum target, GLint level, void * img), (target, level, img))
GEN_THUNKS(gl, glGetCompressedTexImageARB, (GLenum target, GLint level, void * img), (target, level, img))
GEN_THUNKS(gl, glGetCompressedTextureImage, (GLuint texture, GLint level, GLsizei bufSize, void * pixels), (texture, level, bufSize, pixels))
GEN_THUNKS(gl, glGetCompressedTextureImageEXT, (GLuint texture, GLenum target, GLint lod, void * img), (texture, target, lod, img))
GEN_THUNKS(gl, glGetCompressedTextureSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels), (texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels))
GEN_THUNKS(gl, glGetConvolutionFilter, (GLenum target, GLenum format, GLenum type, void * image), (target, format, type, image))
GEN_THUNKS(gl, glGetConvolutionFilterEXT, (GLenum target, GLenum format, GLenum type, void * image), (target, format, type, image))
GEN_THUNKS(gl, glGetConvolutionParameterfv, (GLenum target, GLenum pname, GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glGetConvolutionParameterfvEXT, (GLenum target, GLenum pname, GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glGetConvolutionParameteriv, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetConvolutionParameterivEXT, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetConvolutionParameterxvOES, (GLenum target, GLenum pname, GLfixed * params), (target, pname, params))
GEN_THUNKS(gl, glGetCoverageModulationTableNV, (GLsizei bufsize, GLfloat * v), (bufsize, v))
GEN_THUNKS_RET(gl, GLuint, glGetDebugMessageLog, (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog), (count, bufSize, sources, types, ids, severities, lengths, messageLog))
GEN_THUNKS_RET(gl, GLuint, glGetDebugMessageLogAMD, (GLuint count, GLsizei bufsize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message), (count, bufsize, categories, severities, ids, lengths, message))
GEN_THUNKS_RET(gl, GLuint, glGetDebugMessageLogARB, (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog), (count, bufSize, sources, types, ids, severities, lengths, messageLog))
GEN_THUNKS_RET(gl, GLuint, glGetDebugMessageLogKHR, (GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog), (count, bufSize, sources, types, ids, severities, lengths, messageLog))
GEN_THUNKS(gl, glGetDetailTexFuncSGIS, (GLenum target, GLfloat * points), (target, points))
GEN_THUNKS(gl, glGetDoubleIndexedvEXT, (GLenum target, GLuint index, GLdouble * data), (target, index, data))
GEN_THUNKS(gl, glGetDoublei_v, (GLenum target, GLuint index, GLdouble * data), (target, index, data))
GEN_THUNKS(gl, glGetDoublei_vEXT, (GLenum pname, GLuint index, GLdouble * params), (pname, index, params))
GEN_THUNKS(gl, glGetDoublev, (GLenum pname, GLdouble * data), (pname, data))
GEN_THUNKS(gl, glGetDriverControlStringQCOM, (GLuint driverControl, GLsizei bufSize, GLsizei * length, GLchar * driverControlString), (driverControl, bufSize, length, driverControlString))
GEN_THUNKS(gl, glGetDriverControlsQCOM, (GLint * num, GLsizei size, GLuint * driverControls), (num, size, driverControls))
GEN_THUNKS_RET(gl, GLenum, glGetError, (void), ())
GEN_THUNKS(gl, glGetFenceivNV, (GLuint fence, GLenum pname, GLint * params), (fence, pname, params))
GEN_THUNKS(gl, glGetFinalCombinerInputParameterfvNV, (GLenum variable, GLenum pname, GLfloat * params), (variable, pname, params))
GEN_THUNKS(gl, glGetFinalCombinerInputParameterivNV, (GLenum variable, GLenum pname, GLint * params), (variable, pname, params))
GEN_THUNKS(gl, glGetFirstPerfQueryIdINTEL, (GLuint * queryId), (queryId))
GEN_THUNKS(gl, glGetFixedv, (GLenum pname, GLfixed * params), (pname, params))
GEN_THUNKS(gl, glGetFixedvOES, (GLenum pname, GLfixed * params), (pname, params))
GEN_THUNKS(gl, glGetFloatIndexedvEXT, (GLenum target, GLuint index, GLfloat * data), (target, index, data))
GEN_THUNKS(gl, glGetFloati_v, (GLenum target, GLuint index, GLfloat * data), (target, index, data))
GEN_THUNKS(gl, glGetFloati_vEXT, (GLenum pname, GLuint index, GLfloat * params), (pname, index, params))
GEN_THUNKS(gl, glGetFloati_vNV, (GLenum target, GLuint index, GLfloat * data), (target, index, data))
GEN_THUNKS(gl, glGetFloatv, (GLenum pname, GLfloat * data), (pname, data))
GEN_THUNKS(gl, glGetFogFuncSGIS, (GLfloat * points), (points))
GEN_THUNKS_RET(gl, GLint, glGetFragDataIndex, (GLuint program, const GLchar * name), (program, name))
GEN_THUNKS_RET(gl, GLint, glGetFragDataIndexEXT, (GLuint program, const GLchar * name), (program, name))
GEN_THUNKS_RET(gl, GLint, glGetFragDataLocation, (GLuint program, const GLchar * name), (program, name))
GEN_THUNKS_RET(gl, GLint, glGetFragDataLocationEXT, (GLuint program, const GLchar * name), (program, name))
GEN_THUNKS(gl, glGetFragmentLightfvSGIX, (GLenum light, GLenum pname, GLfloat * params), (light, pname, params))
GEN_THUNKS(gl, glGetFragmentLightivSGIX, (GLenum light, GLenum pname, GLint * params), (light, pname, params))
GEN_THUNKS(gl, glGetFragmentMaterialfvSGIX, (GLenum face, GLenum pname, GLfloat * params), (face, pname, params))
GEN_THUNKS(gl, glGetFragmentMaterialivSGIX, (GLenum face, GLenum pname, GLint * params), (face, pname, params))
GEN_THUNKS(gl, glGetFramebufferAttachmentParameteriv, (GLenum target, GLenum attachment, GLenum pname, GLint * params), (target, attachment, pname, params))
GEN_THUNKS(gl, glGetFramebufferAttachmentParameterivEXT, (GLenum target, GLenum attachment, GLenum pname, GLint * params), (target, attachment, pname, params))
GEN_THUNKS(gl, glGetFramebufferAttachmentParameterivOES, (GLenum target, GLenum attachment, GLenum pname, GLint * params), (target, attachment, pname, params))
GEN_THUNKS(gl, glGetFramebufferParameteriv, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetFramebufferParameterivEXT, (GLuint framebuffer, GLenum pname, GLint * params), (framebuffer, pname, params))
GEN_THUNKS_RET(gl, GLsizei, glGetFramebufferPixelLocalStorageSizeEXT, (GLuint target), (target))
GEN_THUNKS_RET(gl, GLenum, glGetGraphicsResetStatus, (void), ())
GEN_THUNKS_RET(gl, GLenum, glGetGraphicsResetStatusARB, (void), ())
GEN_THUNKS_RET(gl, GLenum, glGetGraphicsResetStatusEXT, (void), ())
GEN_THUNKS_RET(gl, GLenum, glGetGraphicsResetStatusKHR, (void), ())
GEN_THUNKS_RET(gl, GLhandleARB, glGetHandleARB, (GLenum pname), (pname))
GEN_THUNKS(gl, glGetHistogram, (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values), (target, reset, format, type, values))
GEN_THUNKS(gl, glGetHistogramEXT, (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values), (target, reset, format, type, values))
GEN_THUNKS(gl, glGetHistogramParameterfv, (GLenum target, GLenum pname, GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glGetHistogramParameterfvEXT, (GLenum target, GLenum pname, GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glGetHistogramParameteriv, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetHistogramParameterivEXT, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetHistogramParameterxvOES, (GLenum target, GLenum pname, GLfixed * params), (target, pname, params))
GEN_THUNKS_RET(gl, GLuint64, glGetImageHandleARB, (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format), (texture, level, layered, layer, format))
GEN_THUNKS_RET(gl, GLuint64, glGetImageHandleNV, (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format), (texture, level, layered, layer, format))
GEN_THUNKS(gl, glGetImageTransformParameterfvHP, (GLenum target, GLenum pname, GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glGetImageTransformParameterivHP, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetInfoLogARB, (GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * infoLog), ((uintptr_t)obj, maxLength, length, infoLog))
GEN_THUNKS_RET(gl, GLint, glGetInstrumentsSGIX, (void), ())
GEN_THUNKS(gl, glGetInteger64i_v, (GLenum target, GLuint index, GLint64 * data), (target, index, data))
GEN_THUNKS(gl, glGetInteger64v, (GLenum pname, GLint64 * data), (pname, data))
GEN_THUNKS(gl, glGetInteger64vAPPLE, (GLenum pname, GLint64 * params), (pname, params))
GEN_THUNKS(gl, glGetIntegerIndexedvEXT, (GLenum target, GLuint index, GLint * data), (target, index, data))
GEN_THUNKS(gl, glGetIntegeri_v, (GLenum target, GLuint index, GLint * data), (target, index, data))
GEN_THUNKS(gl, glGetIntegeri_vEXT, (GLenum target, GLuint index, GLint * data), (target, index, data))
GEN_THUNKS(gl, glGetIntegerui64i_vNV, (GLenum value, GLuint index, GLuint64EXT * result), (value, index, result))
GEN_THUNKS(gl, glGetIntegerui64vNV, (GLenum value, GLuint64EXT * result), (value, result))
GEN_THUNKS(gl, glGetIntegerv, (GLenum pname, GLint * data), (pname, data))
GEN_THUNKS(gl, glGetInternalformatSampleivNV, (GLenum target, GLenum internalformat, GLsizei samples, GLenum pname, GLsizei bufSize, GLint * params), (target, internalformat, samples, pname, bufSize, params))
GEN_THUNKS(gl, glGetInternalformati64v, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params), (target, internalformat, pname, bufSize, params))
GEN_THUNKS(gl, glGetInternalformativ, (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params), (target, internalformat, pname, bufSize, params))
GEN_THUNKS(gl, glGetInvariantBooleanvEXT, (GLuint id, GLenum value, GLboolean * data), (id, value, data))
GEN_THUNKS(gl, glGetInvariantFloatvEXT, (GLuint id, GLenum value, GLfloat * data), (id, value, data))
GEN_THUNKS(gl, glGetInvariantIntegervEXT, (GLuint id, GLenum value, GLint * data), (id, value, data))
GEN_THUNKS(gl, glGetLightfv, (GLenum light, GLenum pname, GLfloat * params), (light, pname, params))
GEN_THUNKS(gl, glGetLightiv, (GLenum light, GLenum pname, GLint * params), (light, pname, params))
GEN_THUNKS(gl, glGetLightxOES, (GLenum light, GLenum pname, GLfixed * params), (light, pname, params))
GEN_THUNKS(gl, glGetLightxv, (GLenum light, GLenum pname, GLfixed * params), (light, pname, params))
GEN_THUNKS(gl, glGetLightxvOES, (GLenum light, GLenum pname, GLfixed * params), (light, pname, params))
GEN_THUNKS(gl, glGetListParameterfvSGIX, (GLuint list, GLenum pname, GLfloat * params), (list, pname, params))
GEN_THUNKS(gl, glGetListParameterivSGIX, (GLuint list, GLenum pname, GLint * params), (list, pname, params))
GEN_THUNKS(gl, glGetLocalConstantBooleanvEXT, (GLuint id, GLenum value, GLboolean * data), (id, value, data))
GEN_THUNKS(gl, glGetLocalConstantFloatvEXT, (GLuint id, GLenum value, GLfloat * data), (id, value, data))
GEN_THUNKS(gl, glGetLocalConstantIntegervEXT, (GLuint id, GLenum value, GLint * data), (id, value, data))
GEN_THUNKS(gl, glGetMapAttribParameterfvNV, (GLenum target, GLuint index, GLenum pname, GLfloat * params), (target, index, pname, params))
GEN_THUNKS(gl, glGetMapAttribParameterivNV, (GLenum target, GLuint index, GLenum pname, GLint * params), (target, index, pname, params))
GEN_THUNKS(gl, glGetMapControlPointsNV, (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void * points), (target, index, type, ustride, vstride, packed, points))
GEN_THUNKS(gl, glGetMapParameterfvNV, (GLenum target, GLenum pname, GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glGetMapParameterivNV, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetMapdv, (GLenum target, GLenum query, GLdouble * v), (target, query, v))
GEN_THUNKS(gl, glGetMapfv, (GLenum target, GLenum query, GLfloat * v), (target, query, v))
GEN_THUNKS(gl, glGetMapiv, (GLenum target, GLenum query, GLint * v), (target, query, v))
GEN_THUNKS(gl, glGetMapxvOES, (GLenum target, GLenum query, GLfixed * v), (target, query, v))
GEN_THUNKS(gl, glGetMaterialfv, (GLenum face, GLenum pname, GLfloat * params), (face, pname, params))
GEN_THUNKS(gl, glGetMaterialiv, (GLenum face, GLenum pname, GLint * params), (face, pname, params))
GEN_THUNKS(gl, glGetMaterialxOES, (GLenum face, GLenum pname, GLfixed param), (face, pname, param))
GEN_THUNKS(gl, glGetMaterialxv, (GLenum face, GLenum pname, GLfixed * params), (face, pname, params))
GEN_THUNKS(gl, glGetMaterialxvOES, (GLenum face, GLenum pname, GLfixed * params), (face, pname, params))
GEN_THUNKS(gl, glGetMinmax, (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values), (target, reset, format, type, values))
GEN_THUNKS(gl, glGetMinmaxEXT, (GLenum target, GLboolean reset, GLenum format, GLenum type, void * values), (target, reset, format, type, values))
GEN_THUNKS(gl, glGetMinmaxParameterfv, (GLenum target, GLenum pname, GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glGetMinmaxParameterfvEXT, (GLenum target, GLenum pname, GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glGetMinmaxParameteriv, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetMinmaxParameterivEXT, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetMultiTexEnvfvEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat * params), (texunit, target, pname, params))
GEN_THUNKS(gl, glGetMultiTexEnvivEXT, (GLenum texunit, GLenum target, GLenum pname, GLint * params), (texunit, target, pname, params))
GEN_THUNKS(gl, glGetMultiTexGendvEXT, (GLenum texunit, GLenum coord, GLenum pname, GLdouble * params), (texunit, coord, pname, params))
GEN_THUNKS(gl, glGetMultiTexGenfvEXT, (GLenum texunit, GLenum coord, GLenum pname, GLfloat * params), (texunit, coord, pname, params))
GEN_THUNKS(gl, glGetMultiTexGenivEXT, (GLenum texunit, GLenum coord, GLenum pname, GLint * params), (texunit, coord, pname, params))
GEN_THUNKS(gl, glGetMultiTexImageEXT, (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void * pixels), (texunit, target, level, format, type, pixels))
GEN_THUNKS(gl, glGetMultiTexLevelParameterfvEXT, (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat * params), (texunit, target, level, pname, params))
GEN_THUNKS(gl, glGetMultiTexLevelParameterivEXT, (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint * params), (texunit, target, level, pname, params))
GEN_THUNKS(gl, glGetMultiTexParameterIivEXT, (GLenum texunit, GLenum target, GLenum pname, GLint * params), (texunit, target, pname, params))
GEN_THUNKS(gl, glGetMultiTexParameterIuivEXT, (GLenum texunit, GLenum target, GLenum pname, GLuint * params), (texunit, target, pname, params))
GEN_THUNKS(gl, glGetMultiTexParameterfvEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat * params), (texunit, target, pname, params))
GEN_THUNKS(gl, glGetMultiTexParameterivEXT, (GLenum texunit, GLenum target, GLenum pname, GLint * params), (texunit, target, pname, params))
GEN_THUNKS(gl, glGetMultisamplefv, (GLenum pname, GLuint index, GLfloat * val), (pname, index, val))
GEN_THUNKS(gl, glGetMultisamplefvNV, (GLenum pname, GLuint index, GLfloat * val), (pname, index, val))
GEN_THUNKS(gl, glGetNamedBufferParameteri64v, (GLuint buffer, GLenum pname, GLint64 * params), (buffer, pname, params))
GEN_THUNKS(gl, glGetNamedBufferParameteriv, (GLuint buffer, GLenum pname, GLint * params), (buffer, pname, params))
GEN_THUNKS(gl, glGetNamedBufferParameterivEXT, (GLuint buffer, GLenum pname, GLint * params), (buffer, pname, params))
GEN_THUNKS(gl, glGetNamedBufferParameterui64vNV, (GLuint buffer, GLenum pname, GLuint64EXT * params), (buffer, pname, params))
GEN_THUNKS(gl, glGetNamedBufferPointerv, (GLuint buffer, GLenum pname, void ** params), (buffer, pname, params))
GEN_THUNKS(gl, glGetNamedBufferPointervEXT, (GLuint buffer, GLenum pname, void ** params), (buffer, pname, params))
GEN_THUNKS(gl, glGetNamedBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr size, void * data), (buffer, offset, size, data))
GEN_THUNKS(gl, glGetNamedBufferSubDataEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, void * data), (buffer, offset, size, data))
GEN_THUNKS(gl, glGetNamedFramebufferAttachmentParameteriv, (GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params), (framebuffer, attachment, pname, params))
GEN_THUNKS(gl, glGetNamedFramebufferAttachmentParameterivEXT, (GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params), (framebuffer, attachment, pname, params))
GEN_THUNKS(gl, glGetNamedFramebufferParameteriv, (GLuint framebuffer, GLenum pname, GLint * param), (framebuffer, pname, param))
GEN_THUNKS(gl, glGetNamedFramebufferParameterivEXT, (GLuint framebuffer, GLenum pname, GLint * params), (framebuffer, pname, params))
GEN_THUNKS(gl, glGetNamedProgramLocalParameterIivEXT, (GLuint program, GLenum target, GLuint index, GLint * params), (program, target, index, params))
GEN_THUNKS(gl, glGetNamedProgramLocalParameterIuivEXT, (GLuint program, GLenum target, GLuint index, GLuint * params), (program, target, index, params))
GEN_THUNKS(gl, glGetNamedProgramLocalParameterdvEXT, (GLuint program, GLenum target, GLuint index, GLdouble * params), (program, target, index, params))
GEN_THUNKS(gl, glGetNamedProgramLocalParameterfvEXT, (GLuint program, GLenum target, GLuint index, GLfloat * params), (program, target, index, params))
GEN_THUNKS(gl, glGetNamedProgramStringEXT, (GLuint program, GLenum target, GLenum pname, void * string), (program, target, pname, string))
GEN_THUNKS(gl, glGetNamedProgramivEXT, (GLuint program, GLenum target, GLenum pname, GLint * params), (program, target, pname, params))
GEN_THUNKS(gl, glGetNamedRenderbufferParameteriv, (GLuint renderbuffer, GLenum pname, GLint * params), (renderbuffer, pname, params))
GEN_THUNKS(gl, glGetNamedRenderbufferParameterivEXT, (GLuint renderbuffer, GLenum pname, GLint * params), (renderbuffer, pname, params))
GEN_THUNKS(gl, glGetNamedStringARB, (GLint namelen, const GLchar * name, GLsizei bufSize, GLint * stringlen, GLchar * string), (namelen, name, bufSize, stringlen, string))
GEN_THUNKS(gl, glGetNamedStringivARB, (GLint namelen, const GLchar * name, GLenum pname, GLint * params), (namelen, name, pname, params))
GEN_THUNKS(gl, glGetNextPerfQueryIdINTEL, (GLuint queryId, GLuint * nextQueryId), (queryId, nextQueryId))
GEN_THUNKS(gl, glGetObjectBufferfvATI, (GLuint buffer, GLenum pname, GLfloat * params), (buffer, pname, params))
GEN_THUNKS(gl, glGetObjectBufferivATI, (GLuint buffer, GLenum pname, GLint * params), (buffer, pname, params))
GEN_THUNKS(gl, glGetObjectLabel, (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label), (identifier, name, bufSize, length, label))
GEN_THUNKS(gl, glGetObjectLabelEXT, (GLenum type, GLuint object, GLsizei bufSize, GLsizei * length, GLchar * label), (type, object, bufSize, length, label))
GEN_THUNKS(gl, glGetObjectLabelKHR, (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label), (identifier, name, bufSize, length, label))
GEN_THUNKS(gl, glGetObjectParameterfvARB, (GLhandleARB obj, GLenum pname, GLfloat * params), ((uintptr_t)obj, pname, params))
GEN_THUNKS(gl, glGetObjectParameterivAPPLE, (GLenum objectType, GLuint name, GLenum pname, GLint * params), (objectType, name, pname, params))
GEN_THUNKS(gl, glGetObjectParameterivARB, (GLhandleARB obj, GLenum pname, GLint * params), ((uintptr_t)obj, pname, params))
GEN_THUNKS(gl, glGetObjectPtrLabel, (const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label), (ptr, bufSize, length, label))
GEN_THUNKS(gl, glGetObjectPtrLabelKHR, (const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label), (ptr, bufSize, length, label))
GEN_THUNKS(gl, glGetOcclusionQueryivNV, (GLuint id, GLenum pname, GLint * params), (id, pname, params))
GEN_THUNKS(gl, glGetOcclusionQueryuivNV, (GLuint id, GLenum pname, GLuint * params), (id, pname, params))
GEN_THUNKS(gl, glGetPathColorGenfvNV, (GLenum color, GLenum pname, GLfloat * value), (color, pname, value))
GEN_THUNKS(gl, glGetPathColorGenivNV, (GLenum color, GLenum pname, GLint * value), (color, pname, value))
GEN_THUNKS(gl, glGetPathCommandsNV, (GLuint path, GLubyte * commands), (path, commands))
GEN_THUNKS(gl, glGetPathCoordsNV, (GLuint path, GLfloat * coords), (path, coords))
GEN_THUNKS(gl, glGetPathDashArrayNV, (GLuint path, GLfloat * dashArray), (path, dashArray))
GEN_THUNKS_RET(gl, GLfloat, glGetPathLengthNV, (GLuint path, GLsizei startSegment, GLsizei numSegments), (path, startSegment, numSegments))
GEN_THUNKS(gl, glGetPathMetricRangeNV, (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat * metrics), (metricQueryMask, firstPathName, numPaths, stride, metrics))
GEN_THUNKS(gl, glGetPathMetricsNV, (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLsizei stride, GLfloat * metrics), (metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics))
GEN_THUNKS(gl, glGetPathParameterfvNV, (GLuint path, GLenum pname, GLfloat * value), (path, pname, value))
GEN_THUNKS(gl, glGetPathParameterivNV, (GLuint path, GLenum pname, GLint * value), (path, pname, value))
GEN_THUNKS(gl, glGetPathSpacingNV, (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat * returnedSpacing), (pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing))
GEN_THUNKS(gl, glGetPathTexGenfvNV, (GLenum texCoordSet, GLenum pname, GLfloat * value), (texCoordSet, pname, value))
GEN_THUNKS(gl, glGetPathTexGenivNV, (GLenum texCoordSet, GLenum pname, GLint * value), (texCoordSet, pname, value))
GEN_THUNKS(gl, glGetPerfCounterInfoINTEL, (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar * counterName, GLuint counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue), (queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue))
GEN_THUNKS(gl, glGetPerfMonitorCounterDataAMD, (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint * data, GLint * bytesWritten), (monitor, pname, dataSize, data, bytesWritten))
GEN_THUNKS(gl, glGetPerfMonitorCounterInfoAMD, (GLuint group, GLuint counter, GLenum pname, void * data), (group, counter, pname, data))
GEN_THUNKS(gl, glGetPerfMonitorCounterStringAMD, (GLuint group, GLuint counter, GLsizei bufSize, GLsizei * length, GLchar * counterString), (group, counter, bufSize, length, counterString))
GEN_THUNKS(gl, glGetPerfMonitorCountersAMD, (GLuint group, GLint * numCounters, GLint * maxActiveCounters, GLsizei counterSize, GLuint * counters), (group, numCounters, maxActiveCounters, counterSize, counters))
GEN_THUNKS(gl, glGetPerfMonitorGroupStringAMD, (GLuint group, GLsizei bufSize, GLsizei * length, GLchar * groupString), (group, bufSize, length, groupString))
GEN_THUNKS(gl, glGetPerfMonitorGroupsAMD, (GLint * numGroups, GLsizei groupsSize, GLuint * groups), (numGroups, groupsSize, groups))
GEN_THUNKS(gl, glGetPerfQueryDataINTEL, (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid * data, GLuint * bytesWritten), (queryHandle, flags, dataSize, data, bytesWritten))
GEN_THUNKS(gl, glGetPerfQueryIdByNameINTEL, (GLchar * queryName, GLuint * queryId), (queryName, queryId))
GEN_THUNKS(gl, glGetPerfQueryInfoINTEL, (GLuint queryId, GLuint queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask), (queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask))
GEN_THUNKS(gl, glGetPixelMapfv, (GLenum map, GLfloat * values), (map, values))
GEN_THUNKS(gl, glGetPixelMapuiv, (GLenum map, GLuint * values), (map, values))
GEN_THUNKS(gl, glGetPixelMapusv, (GLenum map, GLushort * values), (map, values))
GEN_THUNKS(gl, glGetPixelMapxv, (GLenum map, GLint size, GLfixed * values), (map, size, values))
GEN_THUNKS(gl, glGetPixelTexGenParameterfvSGIS, (GLenum pname, GLfloat * params), (pname, params))
GEN_THUNKS(gl, glGetPixelTexGenParameterivSGIS, (GLenum pname, GLint * params), (pname, params))
GEN_THUNKS(gl, glGetPixelTransformParameterfvEXT, (GLenum target, GLenum pname, GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glGetPixelTransformParameterivEXT, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetPointerIndexedvEXT, (GLenum target, GLuint index, void ** data), (target, index, data))
GEN_THUNKS(gl, glGetPointeri_vEXT, (GLenum pname, GLuint index, void ** params), (pname, index, params))
GEN_THUNKS(gl, glGetPointerv, (GLenum pname, void ** params), (pname, params))
GEN_THUNKS(gl, glGetPointervEXT, (GLenum pname, void ** params), (pname, params))
GEN_THUNKS(gl, glGetPointervKHR, (GLenum pname, void ** params), (pname, params))
GEN_THUNKS(gl, glGetPolygonStipple, (GLubyte * mask), (mask))
GEN_THUNKS(gl, glGetProgramBinary, (GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary), (program, bufSize, length, binaryFormat, binary))
GEN_THUNKS(gl, glGetProgramBinaryOES, (GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary), (program, bufSize, length, binaryFormat, binary))
GEN_THUNKS(gl, glGetProgramEnvParameterIivNV, (GLenum target, GLuint index, GLint * params), (target, index, params))
GEN_THUNKS(gl, glGetProgramEnvParameterIuivNV, (GLenum target, GLuint index, GLuint * params), (target, index, params))
GEN_THUNKS(gl, glGetProgramEnvParameterdvARB, (GLenum target, GLuint index, GLdouble * params), (target, index, params))
GEN_THUNKS(gl, glGetProgramEnvParameterfvARB, (GLenum target, GLuint index, GLfloat * params), (target, index, params))
GEN_THUNKS(gl, glGetProgramInfoLog, (GLuint program, GLsizei bufSize, GLsizei * length, GLchar * infoLog), (program, bufSize, length, infoLog))
GEN_THUNKS(gl, glGetProgramInterfaceiv, (GLuint program, GLenum programInterface, GLenum pname, GLint * params), (program, programInterface, pname, params))
GEN_THUNKS(gl, glGetProgramLocalParameterIivNV, (GLenum target, GLuint index, GLint * params), (target, index, params))
GEN_THUNKS(gl, glGetProgramLocalParameterIuivNV, (GLenum target, GLuint index, GLuint * params), (target, index, params))
GEN_THUNKS(gl, glGetProgramLocalParameterdvARB, (GLenum target, GLuint index, GLdouble * params), (target, index, params))
GEN_THUNKS(gl, glGetProgramLocalParameterfvARB, (GLenum target, GLuint index, GLfloat * params), (target, index, params))
GEN_THUNKS(gl, glGetProgramNamedParameterdvNV, (GLuint id, GLsizei len, const GLubyte * name, GLdouble * params), (id, len, name, params))
GEN_THUNKS(gl, glGetProgramNamedParameterfvNV, (GLuint id, GLsizei len, const GLubyte * name, GLfloat * params), (id, len, name, params))
GEN_THUNKS(gl, glGetProgramParameterdvNV, (GLenum target, GLuint index, GLenum pname, GLdouble * params), (target, index, pname, params))
GEN_THUNKS(gl, glGetProgramParameterfvNV, (GLenum target, GLuint index, GLenum pname, GLfloat * params), (target, index, pname, params))
GEN_THUNKS(gl, glGetProgramPipelineInfoLog, (GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog), (pipeline, bufSize, length, infoLog))
GEN_THUNKS(gl, glGetProgramPipelineInfoLogEXT, (GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog), (pipeline, bufSize, length, infoLog))
GEN_THUNKS(gl, glGetProgramPipelineiv, (GLuint pipeline, GLenum pname, GLint * params), (pipeline, pname, params))
GEN_THUNKS(gl, glGetProgramPipelineivEXT, (GLuint pipeline, GLenum pname, GLint * params), (pipeline, pname, params))
GEN_THUNKS_RET(gl, GLuint, glGetProgramResourceIndex, (GLuint program, GLenum programInterface, const GLchar * name), (program, programInterface, name))
GEN_THUNKS_RET(gl, GLint, glGetProgramResourceLocation, (GLuint program, GLenum programInterface, const GLchar * name), (program, programInterface, name))
GEN_THUNKS_RET(gl, GLint, glGetProgramResourceLocationIndex, (GLuint program, GLenum programInterface, const GLchar * name), (program, programInterface, name))
GEN_THUNKS_RET(gl, GLint, glGetProgramResourceLocationIndexEXT, (GLuint program, GLenum programInterface, const GLchar * name), (program, programInterface, name))
GEN_THUNKS(gl, glGetProgramResourceName, (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name), (program, programInterface, index, bufSize, length, name))
GEN_THUNKS(gl, glGetProgramResourcefvNV, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLfloat * params), (program, programInterface, index, propCount, props, bufSize, length, params))
GEN_THUNKS(gl, glGetProgramResourceiv, (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params), (program, programInterface, index, propCount, props, bufSize, length, params))
GEN_THUNKS(gl, glGetProgramStageiv, (GLuint program, GLenum shadertype, GLenum pname, GLint * values), (program, shadertype, pname, values))
GEN_THUNKS(gl, glGetProgramStringARB, (GLenum target, GLenum pname, void * string), (target, pname, string))
GEN_THUNKS(gl, glGetProgramStringNV, (GLuint id, GLenum pname, GLubyte * program), (id, pname, program))
GEN_THUNKS(gl, glGetProgramSubroutineParameteruivNV, (GLenum target, GLuint index, GLuint * param), (target, index, param))
GEN_THUNKS(gl, glGetProgramiv, (GLuint program, GLenum pname, GLint * params), (program, pname, params))
GEN_THUNKS(gl, glGetProgramivARB, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetProgramivNV, (GLuint id, GLenum pname, GLint * params), (id, pname, params))
GEN_THUNKS(gl, glGetQueryBufferObjecti64v, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset), (id, buffer, pname, offset))
GEN_THUNKS(gl, glGetQueryBufferObjectiv, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset), (id, buffer, pname, offset))
GEN_THUNKS(gl, glGetQueryBufferObjectui64v, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset), (id, buffer, pname, offset))
GEN_THUNKS(gl, glGetQueryBufferObjectuiv, (GLuint id, GLuint buffer, GLenum pname, GLintptr offset), (id, buffer, pname, offset))
GEN_THUNKS(gl, glGetQueryIndexediv, (GLenum target, GLuint index, GLenum pname, GLint * params), (target, index, pname, params))
GEN_THUNKS(gl, glGetQueryObjecti64v, (GLuint id, GLenum pname, GLint64 * params), (id, pname, params))
GEN_THUNKS(gl, glGetQueryObjecti64vEXT, (GLuint id, GLenum pname, GLint64 * params), (id, pname, params))
GEN_THUNKS(gl, glGetQueryObjectiv, (GLuint id, GLenum pname, GLint * params), (id, pname, params))
GEN_THUNKS(gl, glGetQueryObjectivARB, (GLuint id, GLenum pname, GLint * params), (id, pname, params))
GEN_THUNKS(gl, glGetQueryObjectivEXT, (GLuint id, GLenum pname, GLint * params), (id, pname, params))
GEN_THUNKS(gl, glGetQueryObjectui64v, (GLuint id, GLenum pname, GLuint64 * params), (id, pname, params))
GEN_THUNKS(gl, glGetQueryObjectui64vEXT, (GLuint id, GLenum pname, GLuint64 * params), (id, pname, params))
GEN_THUNKS(gl, glGetQueryObjectuiv, (GLuint id, GLenum pname, GLuint * params), (id, pname, params))
GEN_THUNKS(gl, glGetQueryObjectuivARB, (GLuint id, GLenum pname, GLuint * params), (id, pname, params))
GEN_THUNKS(gl, glGetQueryObjectuivEXT, (GLuint id, GLenum pname, GLuint * params), (id, pname, params))
GEN_THUNKS(gl, glGetQueryiv, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetQueryivARB, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetQueryivEXT, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetRenderbufferParameteriv, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetRenderbufferParameterivEXT, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetRenderbufferParameterivOES, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetSamplerParameterIiv, (GLuint sampler, GLenum pname, GLint * params), (sampler, pname, params))
GEN_THUNKS(gl, glGetSamplerParameterIivEXT, (GLuint sampler, GLenum pname, GLint * params), (sampler, pname, params))
GEN_THUNKS(gl, glGetSamplerParameterIivOES, (GLuint sampler, GLenum pname, GLint * params), (sampler, pname, params))
GEN_THUNKS(gl, glGetSamplerParameterIuiv, (GLuint sampler, GLenum pname, GLuint * params), (sampler, pname, params))
GEN_THUNKS(gl, glGetSamplerParameterIuivEXT, (GLuint sampler, GLenum pname, GLuint * params), (sampler, pname, params))
GEN_THUNKS(gl, glGetSamplerParameterIuivOES, (GLuint sampler, GLenum pname, GLuint * params), (sampler, pname, params))
GEN_THUNKS(gl, glGetSamplerParameterfv, (GLuint sampler, GLenum pname, GLfloat * params), (sampler, pname, params))
GEN_THUNKS(gl, glGetSamplerParameteriv, (GLuint sampler, GLenum pname, GLint * params), (sampler, pname, params))
GEN_THUNKS(gl, glGetSeparableFilter, (GLenum target, GLenum format, GLenum type, void * row, void * column, void * span), (target, format, type, row, column, span))
GEN_THUNKS(gl, glGetSeparableFilterEXT, (GLenum target, GLenum format, GLenum type, void * row, void * column, void * span), (target, format, type, row, column, span))
GEN_THUNKS(gl, glGetShaderInfoLog, (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * infoLog), (shader, bufSize, length, infoLog))
GEN_THUNKS(gl, glGetShaderPrecisionFormat, (GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision), (shadertype, precisiontype, range, precision))
GEN_THUNKS(gl, glGetShaderSource, (GLuint shader, GLsizei bufSize, GLsizei * length, GLchar * source), (shader, bufSize, length, source))
GEN_THUNKS(gl, glGetShaderSourceARB, (GLhandleARB obj, GLsizei maxLength, GLsizei * length, GLcharARB * source), ((uintptr_t)obj, maxLength, length, source))
GEN_THUNKS(gl, glGetShaderiv, (GLuint shader, GLenum pname, GLint * params), (shader, pname, params))
GEN_THUNKS(gl, glGetSharpenTexFuncSGIS, (GLenum target, GLfloat * points), (target, points))
GEN_THUNKS_RET(gl, GLushort, glGetStageIndexNV, (GLenum shadertype), (shadertype))
GEN_THUNKS_RET(gl, const GLubyte *, glGetString, (GLenum name), (name))
GEN_THUNKS_RET(gl, const GLubyte *, glGetStringi, (GLenum name, GLuint index), (name, index))
GEN_THUNKS_RET(gl, GLuint, glGetSubroutineIndex, (GLuint program, GLenum shadertype, const GLchar * name), (program, shadertype, name))
GEN_THUNKS_RET(gl, GLint, glGetSubroutineUniformLocation, (GLuint program, GLenum shadertype, const GLchar * name), (program, shadertype, name))
GEN_THUNKS(gl, glGetSynciv, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values), (sync, pname, bufSize, length, values))
GEN_THUNKS(gl, glGetSyncivAPPLE, (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values), (sync, pname, bufSize, length, values))
GEN_THUNKS(gl, glGetTexBumpParameterfvATI, (GLenum pname, GLfloat * param), (pname, param))
GEN_THUNKS(gl, glGetTexBumpParameterivATI, (GLenum pname, GLint * param), (pname, param))
GEN_THUNKS(gl, glGetTexEnvfv, (GLenum target, GLenum pname, GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glGetTexEnviv, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetTexEnvxv, (GLenum target, GLenum pname, GLfixed * params), (target, pname, params))
GEN_THUNKS(gl, glGetTexEnvxvOES, (GLenum target, GLenum pname, GLfixed * params), (target, pname, params))
GEN_THUNKS(gl, glGetTexFilterFuncSGIS, (GLenum target, GLenum filter, GLfloat * weights), (target, filter, weights))
GEN_THUNKS(gl, glGetTexGendv, (GLenum coord, GLenum pname, GLdouble * params), (coord, pname, params))
GEN_THUNKS(gl, glGetTexGenfv, (GLenum coord, GLenum pname, GLfloat * params), (coord, pname, params))
GEN_THUNKS(gl, glGetTexGenfvOES, (GLenum coord, GLenum pname, GLfloat * params), (coord, pname, params))
GEN_THUNKS(gl, glGetTexGeniv, (GLenum coord, GLenum pname, GLint * params), (coord, pname, params))
GEN_THUNKS(gl, glGetTexGenivOES, (GLenum coord, GLenum pname, GLint * params), (coord, pname, params))
GEN_THUNKS(gl, glGetTexGenxvOES, (GLenum coord, GLenum pname, GLfixed * params), (coord, pname, params))
GEN_THUNKS(gl, glGetTexImage, (GLenum target, GLint level, GLenum format, GLenum type, void * pixels), (target, level, format, type, pixels))
GEN_THUNKS(gl, glGetTexLevelParameterfv, (GLenum target, GLint level, GLenum pname, GLfloat * params), (target, level, pname, params))
GEN_THUNKS(gl, glGetTexLevelParameteriv, (GLenum target, GLint level, GLenum pname, GLint * params), (target, level, pname, params))
GEN_THUNKS(gl, glGetTexLevelParameterxvOES, (GLenum target, GLint level, GLenum pname, GLfixed * params), (target, level, pname, params))
GEN_THUNKS(gl, glGetTexParameterIiv, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetTexParameterIivEXT, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetTexParameterIivOES, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetTexParameterIuiv, (GLenum target, GLenum pname, GLuint * params), (target, pname, params))
GEN_THUNKS(gl, glGetTexParameterIuivEXT, (GLenum target, GLenum pname, GLuint * params), (target, pname, params))
GEN_THUNKS(gl, glGetTexParameterIuivOES, (GLenum target, GLenum pname, GLuint * params), (target, pname, params))
GEN_THUNKS(gl, glGetTexParameterPointervAPPLE, (GLenum target, GLenum pname, void ** params), (target, pname, params))
GEN_THUNKS(gl, glGetTexParameterfv, (GLenum target, GLenum pname, GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glGetTexParameteriv, (GLenum target, GLenum pname, GLint * params), (target, pname, params))
GEN_THUNKS(gl, glGetTexParameterxv, (GLenum target, GLenum pname, GLfixed * params), (target, pname, params))
GEN_THUNKS(gl, glGetTexParameterxvOES, (GLenum target, GLenum pname, GLfixed * params), (target, pname, params))
GEN_THUNKS_RET(gl, GLuint64, glGetTextureHandleARB, (GLuint texture), (texture))
GEN_THUNKS_RET(gl, GLuint64, glGetTextureHandleNV, (GLuint texture), (texture))
GEN_THUNKS(gl, glGetTextureImage, (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels), (texture, level, format, type, bufSize, pixels))
GEN_THUNKS(gl, glGetTextureImageEXT, (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void * pixels), (texture, target, level, format, type, pixels))
GEN_THUNKS(gl, glGetTextureLevelParameterfv, (GLuint texture, GLint level, GLenum pname, GLfloat * params), (texture, level, pname, params))
GEN_THUNKS(gl, glGetTextureLevelParameterfvEXT, (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat * params), (texture, target, level, pname, params))
GEN_THUNKS(gl, glGetTextureLevelParameteriv, (GLuint texture, GLint level, GLenum pname, GLint * params), (texture, level, pname, params))
GEN_THUNKS(gl, glGetTextureLevelParameterivEXT, (GLuint texture, GLenum target, GLint level, GLenum pname, GLint * params), (texture, target, level, pname, params))
GEN_THUNKS(gl, glGetTextureParameterIiv, (GLuint texture, GLenum pname, GLint * params), (texture, pname, params))
GEN_THUNKS(gl, glGetTextureParameterIivEXT, (GLuint texture, GLenum target, GLenum pname, GLint * params), (texture, target, pname, params))
GEN_THUNKS(gl, glGetTextureParameterIuiv, (GLuint texture, GLenum pname, GLuint * params), (texture, pname, params))
GEN_THUNKS(gl, glGetTextureParameterIuivEXT, (GLuint texture, GLenum target, GLenum pname, GLuint * params), (texture, target, pname, params))
GEN_THUNKS(gl, glGetTextureParameterfv, (GLuint texture, GLenum pname, GLfloat * params), (texture, pname, params))
GEN_THUNKS(gl, glGetTextureParameterfvEXT, (GLuint texture, GLenum target, GLenum pname, GLfloat * params), (texture, target, pname, params))
GEN_THUNKS(gl, glGetTextureParameteriv, (GLuint texture, GLenum pname, GLint * params), (texture, pname, params))
GEN_THUNKS(gl, glGetTextureParameterivEXT, (GLuint texture, GLenum target, GLenum pname, GLint * params), (texture, target, pname, params))
GEN_THUNKS_RET(gl, GLuint64, glGetTextureSamplerHandleARB, (GLuint texture, GLuint sampler), (texture, sampler))
GEN_THUNKS_RET(gl, GLuint64, glGetTextureSamplerHandleNV, (GLuint texture, GLuint sampler), (texture, sampler))
GEN_THUNKS(gl, glGetTextureSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels), (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels))
GEN_THUNKS(gl, glGetTrackMatrixivNV, (GLenum target, GLuint address, GLenum pname, GLint * params), (target, address, pname, params))
GEN_THUNKS(gl, glGetTransformFeedbackVarying, (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name), (program, index, bufSize, length, size, type, name))
GEN_THUNKS(gl, glGetTransformFeedbackVaryingEXT, (GLuint program, GLuint index, GLsizei bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name), (program, index, bufSize, length, size, type, name))
GEN_THUNKS(gl, glGetTransformFeedbackVaryingNV, (GLuint program, GLuint index, GLint * location), (program, index, location))
GEN_THUNKS(gl, glGetTransformFeedbacki64_v, (GLuint xfb, GLenum pname, GLuint index, GLint64 * param), (xfb, pname, index, param))
GEN_THUNKS(gl, glGetTransformFeedbacki_v, (GLuint xfb, GLenum pname, GLuint index, GLint * param), (xfb, pname, index, param))
GEN_THUNKS(gl, glGetTransformFeedbackiv, (GLuint xfb, GLenum pname, GLint * param), (xfb, pname, param))
GEN_THUNKS(gl, glGetTranslatedShaderSourceANGLE, (GLuint shader, GLsizei bufsize, GLsizei * length, GLchar * source), (shader, bufsize, length, source))
GEN_THUNKS_RET(gl, GLuint, glGetUniformBlockIndex, (GLuint program, const GLchar * uniformBlockName), (program, uniformBlockName))
GEN_THUNKS_RET(gl, GLint, glGetUniformBufferSizeEXT, (GLuint program, GLint location), (program, location))
GEN_THUNKS(gl, glGetUniformIndices, (GLuint program, GLsizei uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices), (program, uniformCount, uniformNames, uniformIndices))
GEN_THUNKS_RET(gl, GLint, glGetUniformLocation, (GLuint program, const GLchar * name), (program, name))
GEN_THUNKS_RET(gl, GLint, glGetUniformLocationARB, (GLhandleARB programObj, const GLcharARB * name), ((uintptr_t)programObj, name))
GEN_THUNKS_RET(gl, GLintptr, glGetUniformOffsetEXT, (GLuint program, GLint location), (program, location))
GEN_THUNKS(gl, glGetUniformSubroutineuiv, (GLenum shadertype, GLint location, GLuint * params), (shadertype, location, params))
GEN_THUNKS(gl, glGetUniformdv, (GLuint program, GLint location, GLdouble * params), (program, location, params))
GEN_THUNKS(gl, glGetUniformfv, (GLuint program, GLint location, GLfloat * params), (program, location, params))
GEN_THUNKS(gl, glGetUniformfvARB, (GLhandleARB programObj, GLint location, GLfloat * params), ((uintptr_t)programObj, location, params))
GEN_THUNKS(gl, glGetUniformi64vARB, (GLuint program, GLint location, GLint64 * params), (program, location, params))
GEN_THUNKS(gl, glGetUniformi64vNV, (GLuint program, GLint location, GLint64EXT * params), (program, location, params))
GEN_THUNKS(gl, glGetUniformiv, (GLuint program, GLint location, GLint * params), (program, location, params))
GEN_THUNKS(gl, glGetUniformivARB, (GLhandleARB programObj, GLint location, GLint * params), ((uintptr_t)programObj, location, params))
GEN_THUNKS(gl, glGetUniformui64vARB, (GLuint program, GLint location, GLuint64 * params), (program, location, params))
GEN_THUNKS(gl, glGetUniformui64vNV, (GLuint program, GLint location, GLuint64EXT * params), (program, location, params))
GEN_THUNKS(gl, glGetUniformuiv, (GLuint program, GLint location, GLuint * params), (program, location, params))
GEN_THUNKS(gl, glGetUniformuivEXT, (GLuint program, GLint location, GLuint * params), (program, location, params))
GEN_THUNKS(gl, glGetVariantArrayObjectfvATI, (GLuint id, GLenum pname, GLfloat * params), (id, pname, params))
GEN_THUNKS(gl, glGetVariantArrayObjectivATI, (GLuint id, GLenum pname, GLint * params), (id, pname, params))
GEN_THUNKS(gl, glGetVariantBooleanvEXT, (GLuint id, GLenum value, GLboolean * data), (id, value, data))
GEN_THUNKS(gl, glGetVariantFloatvEXT, (GLuint id, GLenum value, GLfloat * data), (id, value, data))
GEN_THUNKS(gl, glGetVariantIntegervEXT, (GLuint id, GLenum value, GLint * data), (id, value, data))
GEN_THUNKS(gl, glGetVariantPointervEXT, (GLuint id, GLenum value, void ** data), (id, value, data))
GEN_THUNKS_RET(gl, GLint, glGetVaryingLocationNV, (GLuint program, const GLchar * name), (program, name))
GEN_THUNKS(gl, glGetVertexArrayIndexed64iv, (GLuint vaobj, GLuint index, GLenum pname, GLint64 * param), (vaobj, index, pname, param))
GEN_THUNKS(gl, glGetVertexArrayIndexediv, (GLuint vaobj, GLuint index, GLenum pname, GLint * param), (vaobj, index, pname, param))
GEN_THUNKS(gl, glGetVertexArrayIntegeri_vEXT, (GLuint vaobj, GLuint index, GLenum pname, GLint * param), (vaobj, index, pname, param))
GEN_THUNKS(gl, glGetVertexArrayIntegervEXT, (GLuint vaobj, GLenum pname, GLint * param), (vaobj, pname, param))
GEN_THUNKS(gl, glGetVertexArrayPointeri_vEXT, (GLuint vaobj, GLuint index, GLenum pname, void ** param), (vaobj, index, pname, param))
GEN_THUNKS(gl, glGetVertexArrayPointervEXT, (GLuint vaobj, GLenum pname, void ** param), (vaobj, pname, param))
GEN_THUNKS(gl, glGetVertexArrayiv, (GLuint vaobj, GLenum pname, GLint * param), (vaobj, pname, param))
GEN_THUNKS(gl, glGetVertexAttribArrayObjectfvATI, (GLuint index, GLenum pname, GLfloat * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribArrayObjectivATI, (GLuint index, GLenum pname, GLint * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribIiv, (GLuint index, GLenum pname, GLint * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribIivEXT, (GLuint index, GLenum pname, GLint * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribIuiv, (GLuint index, GLenum pname, GLuint * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribIuivEXT, (GLuint index, GLenum pname, GLuint * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribLdv, (GLuint index, GLenum pname, GLdouble * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribLdvEXT, (GLuint index, GLenum pname, GLdouble * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribLi64vNV, (GLuint index, GLenum pname, GLint64EXT * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribLui64vARB, (GLuint index, GLenum pname, GLuint64EXT * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribLui64vNV, (GLuint index, GLenum pname, GLuint64EXT * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribPointerv, (GLuint index, GLenum pname, void ** pointer), (index, pname, pointer))
GEN_THUNKS(gl, glGetVertexAttribPointervARB, (GLuint index, GLenum pname, void ** pointer), (index, pname, pointer))
GEN_THUNKS(gl, glGetVertexAttribPointervNV, (GLuint index, GLenum pname, void ** pointer), (index, pname, pointer))
GEN_THUNKS(gl, glGetVertexAttribdv, (GLuint index, GLenum pname, GLdouble * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribdvARB, (GLuint index, GLenum pname, GLdouble * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribdvNV, (GLuint index, GLenum pname, GLdouble * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribfv, (GLuint index, GLenum pname, GLfloat * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribfvARB, (GLuint index, GLenum pname, GLfloat * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribfvNV, (GLuint index, GLenum pname, GLfloat * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribiv, (GLuint index, GLenum pname, GLint * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribivARB, (GLuint index, GLenum pname, GLint * params), (index, pname, params))
GEN_THUNKS(gl, glGetVertexAttribivNV, (GLuint index, GLenum pname, GLint * params), (index, pname, params))
GEN_THUNKS(gl, glGetVideoCaptureStreamdvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble * params), (video_capture_slot, stream, pname, params))
GEN_THUNKS(gl, glGetVideoCaptureStreamfvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat * params), (video_capture_slot, stream, pname, params))
GEN_THUNKS(gl, glGetVideoCaptureStreamivNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint * params), (video_capture_slot, stream, pname, params))
GEN_THUNKS(gl, glGetVideoCaptureivNV, (GLuint video_capture_slot, GLenum pname, GLint * params), (video_capture_slot, pname, params))
GEN_THUNKS(gl, glGetVideoi64vNV, (GLuint video_slot, GLenum pname, GLint64EXT * params), (video_slot, pname, params))
GEN_THUNKS(gl, glGetVideoivNV, (GLuint video_slot, GLenum pname, GLint * params), (video_slot, pname, params))
GEN_THUNKS(gl, glGetVideoui64vNV, (GLuint video_slot, GLenum pname, GLuint64EXT * params), (video_slot, pname, params))
GEN_THUNKS(gl, glGetVideouivNV, (GLuint video_slot, GLenum pname, GLuint * params), (video_slot, pname, params))
GEN_THUNKS(gl, glGetnColorTable, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table), (target, format, type, bufSize, table))
GEN_THUNKS(gl, glGetnColorTableARB, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * table), (target, format, type, bufSize, table))
GEN_THUNKS(gl, glGetnCompressedTexImage, (GLenum target, GLint lod, GLsizei bufSize, void * pixels), (target, lod, bufSize, pixels))
GEN_THUNKS(gl, glGetnCompressedTexImageARB, (GLenum target, GLint lod, GLsizei bufSize, void * img), (target, lod, bufSize, img))
GEN_THUNKS(gl, glGetnConvolutionFilter, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image), (target, format, type, bufSize, image))
GEN_THUNKS(gl, glGetnConvolutionFilterARB, (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void * image), (target, format, type, bufSize, image))
GEN_THUNKS(gl, glGetnHistogram, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values), (target, reset, format, type, bufSize, values))
GEN_THUNKS(gl, glGetnHistogramARB, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values), (target, reset, format, type, bufSize, values))
GEN_THUNKS(gl, glGetnMapdv, (GLenum target, GLenum query, GLsizei bufSize, GLdouble * v), (target, query, bufSize, v))
GEN_THUNKS(gl, glGetnMapdvARB, (GLenum target, GLenum query, GLsizei bufSize, GLdouble * v), (target, query, bufSize, v))
GEN_THUNKS(gl, glGetnMapfv, (GLenum target, GLenum query, GLsizei bufSize, GLfloat * v), (target, query, bufSize, v))
GEN_THUNKS(gl, glGetnMapfvARB, (GLenum target, GLenum query, GLsizei bufSize, GLfloat * v), (target, query, bufSize, v))
GEN_THUNKS(gl, glGetnMapiv, (GLenum target, GLenum query, GLsizei bufSize, GLint * v), (target, query, bufSize, v))
GEN_THUNKS(gl, glGetnMapivARB, (GLenum target, GLenum query, GLsizei bufSize, GLint * v), (target, query, bufSize, v))
GEN_THUNKS(gl, glGetnMinmax, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values), (target, reset, format, type, bufSize, values))
GEN_THUNKS(gl, glGetnMinmaxARB, (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void * values), (target, reset, format, type, bufSize, values))
GEN_THUNKS(gl, glGetnPixelMapfv, (GLenum map, GLsizei bufSize, GLfloat * values), (map, bufSize, values))
GEN_THUNKS(gl, glGetnPixelMapfvARB, (GLenum map, GLsizei bufSize, GLfloat * values), (map, bufSize, values))
GEN_THUNKS(gl, glGetnPixelMapuiv, (GLenum map, GLsizei bufSize, GLuint * values), (map, bufSize, values))
GEN_THUNKS(gl, glGetnPixelMapuivARB, (GLenum map, GLsizei bufSize, GLuint * values), (map, bufSize, values))
GEN_THUNKS(gl, glGetnPixelMapusv, (GLenum map, GLsizei bufSize, GLushort * values), (map, bufSize, values))
GEN_THUNKS(gl, glGetnPixelMapusvARB, (GLenum map, GLsizei bufSize, GLushort * values), (map, bufSize, values))
GEN_THUNKS(gl, glGetnPolygonStipple, (GLsizei bufSize, GLubyte * pattern), (bufSize, pattern))
GEN_THUNKS(gl, glGetnPolygonStippleARB, (GLsizei bufSize, GLubyte * pattern), (bufSize, pattern))
GEN_THUNKS(gl, glGetnSeparableFilter, (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span), (target, format, type, rowBufSize, row, columnBufSize, column, span))
GEN_THUNKS(gl, glGetnSeparableFilterARB, (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void * row, GLsizei columnBufSize, void * column, void * span), (target, format, type, rowBufSize, row, columnBufSize, column, span))
GEN_THUNKS(gl, glGetnTexImage, (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels), (target, level, format, type, bufSize, pixels))
GEN_THUNKS(gl, glGetnTexImageARB, (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * img), (target, level, format, type, bufSize, img))
GEN_THUNKS(gl, glGetnUniformdv, (GLuint program, GLint location, GLsizei bufSize, GLdouble * params), (program, location, bufSize, params))
GEN_THUNKS(gl, glGetnUniformdvARB, (GLuint program, GLint location, GLsizei bufSize, GLdouble * params), (program, location, bufSize, params))
GEN_THUNKS(gl, glGetnUniformfv, (GLuint program, GLint location, GLsizei bufSize, GLfloat * params), (program, location, bufSize, params))
GEN_THUNKS(gl, glGetnUniformfvARB, (GLuint program, GLint location, GLsizei bufSize, GLfloat * params), (program, location, bufSize, params))
GEN_THUNKS(gl, glGetnUniformfvEXT, (GLuint program, GLint location, GLsizei bufSize, GLfloat * params), (program, location, bufSize, params))
GEN_THUNKS(gl, glGetnUniformfvKHR, (GLuint program, GLint location, GLsizei bufSize, GLfloat * params), (program, location, bufSize, params))
GEN_THUNKS(gl, glGetnUniformi64vARB, (GLuint program, GLint location, GLsizei bufSize, GLint64 * params), (program, location, bufSize, params))
GEN_THUNKS(gl, glGetnUniformiv, (GLuint program, GLint location, GLsizei bufSize, GLint * params), (program, location, bufSize, params))
GEN_THUNKS(gl, glGetnUniformivARB, (GLuint program, GLint location, GLsizei bufSize, GLint * params), (program, location, bufSize, params))
GEN_THUNKS(gl, glGetnUniformivEXT, (GLuint program, GLint location, GLsizei bufSize, GLint * params), (program, location, bufSize, params))
GEN_THUNKS(gl, glGetnUniformivKHR, (GLuint program, GLint location, GLsizei bufSize, GLint * params), (program, location, bufSize, params))
GEN_THUNKS(gl, glGetnUniformui64vARB, (GLuint program, GLint location, GLsizei bufSize, GLuint64 * params), (program, location, bufSize, params))
GEN_THUNKS(gl, glGetnUniformuiv, (GLuint program, GLint location, GLsizei bufSize, GLuint * params), (program, location, bufSize, params))
GEN_THUNKS(gl, glGetnUniformuivARB, (GLuint program, GLint location, GLsizei bufSize, GLuint * params), (program, location, bufSize, params))
GEN_THUNKS(gl, glGetnUniformuivKHR, (GLuint program, GLint location, GLsizei bufSize, GLuint * params), (program, location, bufSize, params))
GEN_THUNKS(gl, glGlobalAlphaFactorbSUN, (GLbyte factor), (factor))
GEN_THUNKS(gl, glGlobalAlphaFactordSUN, (GLdouble factor), (factor))
GEN_THUNKS(gl, glGlobalAlphaFactorfSUN, (GLfloat factor), (factor))
GEN_THUNKS(gl, glGlobalAlphaFactoriSUN, (GLint factor), (factor))
GEN_THUNKS(gl, glGlobalAlphaFactorsSUN, (GLshort factor), (factor))
GEN_THUNKS(gl, glGlobalAlphaFactorubSUN, (GLubyte factor), (factor))
GEN_THUNKS(gl, glGlobalAlphaFactoruiSUN, (GLuint factor), (factor))
GEN_THUNKS(gl, glGlobalAlphaFactorusSUN, (GLushort factor), (factor))
GEN_THUNKS(gl, glHint, (GLenum target, GLenum mode), (target, mode))
GEN_THUNKS(gl, glHintPGI, (GLenum target, GLint mode), (target, mode))
GEN_THUNKS(gl, glHistogram, (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink), (target, width, internalformat, sink))
GEN_THUNKS(gl, glHistogramEXT, (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink), (target, width, internalformat, sink))
GEN_THUNKS(gl, glIglooInterfaceSGIX, (GLenum pname, const void * params), (pname, params))
GEN_THUNKS(gl, glImageTransformParameterfHP, (GLenum target, GLenum pname, GLfloat param), (target, pname, param))
GEN_THUNKS(gl, glImageTransformParameterfvHP, (GLenum target, GLenum pname, const GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glImageTransformParameteriHP, (GLenum target, GLenum pname, GLint param), (target, pname, param))
GEN_THUNKS(gl, glImageTransformParameterivHP, (GLenum target, GLenum pname, const GLint * params), (target, pname, params))
GEN_THUNKS_RET(gl, GLsync, glImportSyncEXT, (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags), (external_sync_type, external_sync, flags))
GEN_THUNKS(gl, glIndexFormatNV, (GLenum type, GLsizei stride), (type, stride))
GEN_THUNKS(gl, glIndexFuncEXT, (GLenum func, GLclampf ref), (func, ref))
GEN_THUNKS(gl, glIndexMask, (GLuint mask), (mask))
GEN_THUNKS(gl, glIndexMaterialEXT, (GLenum face, GLenum mode), (face, mode))
GEN_THUNKS(gl, glIndexPointer, (GLenum type, GLsizei stride, const void * pointer), (type, stride, pointer))
GEN_THUNKS(gl, glIndexPointerEXT, (GLenum type, GLsizei stride, GLsizei count, const void * pointer), (type, stride, count, pointer))
GEN_THUNKS(gl, glIndexPointerListIBM, (GLenum type, GLint stride, const void ** pointer, GLint ptrstride), (type, stride, pointer, ptrstride))
GEN_THUNKS(gl, glIndexd, (GLdouble c), (c))
GEN_THUNKS(gl, glIndexdv, (const GLdouble * c), (c))
GEN_THUNKS(gl, glIndexf, (GLfloat c), (c))
GEN_THUNKS(gl, glIndexfv, (const GLfloat * c), (c))
GEN_THUNKS(gl, glIndexi, (GLint c), (c))
GEN_THUNKS(gl, glIndexiv, (const GLint * c), (c))
GEN_THUNKS(gl, glIndexs, (GLshort c), (c))
GEN_THUNKS(gl, glIndexsv, (const GLshort * c), (c))
GEN_THUNKS(gl, glIndexub, (GLubyte c), (c))
GEN_THUNKS(gl, glIndexubv, (const GLubyte * c), (c))
GEN_THUNKS(gl, glIndexxOES, (GLfixed component), (component))
GEN_THUNKS(gl, glIndexxvOES, (const GLfixed * component), (component))
GEN_THUNKS(gl, glInitNames, (void), ())
GEN_THUNKS(gl, glInsertComponentEXT, (GLuint res, GLuint src, GLuint num), (res, src, num))
GEN_THUNKS(gl, glInsertEventMarkerEXT, (GLsizei length, const GLchar * marker), (length, marker))
GEN_THUNKS(gl, glInstrumentsBufferSGIX, (GLsizei size, GLint * buffer), (size, buffer))
GEN_THUNKS(gl, glInterleavedArrays, (GLenum format, GLsizei stride, const void * pointer), (format, stride, pointer))
GEN_THUNKS(gl, glInterpolatePathsNV, (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight), (resultPath, pathA, pathB, weight))
GEN_THUNKS(gl, glInvalidateBufferData, (GLuint buffer), (buffer))
GEN_THUNKS(gl, glInvalidateBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr length), (buffer, offset, length))
GEN_THUNKS(gl, glInvalidateFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum * attachments), (target, numAttachments, attachments))
GEN_THUNKS(gl, glInvalidateNamedFramebufferData, (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments), (framebuffer, numAttachments, attachments))
GEN_THUNKS(gl, glInvalidateNamedFramebufferSubData, (GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height), (framebuffer, numAttachments, attachments, x, y, width, height))
GEN_THUNKS(gl, glInvalidateSubFramebuffer, (GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height), (target, numAttachments, attachments, x, y, width, height))
GEN_THUNKS(gl, glInvalidateTexImage, (GLuint texture, GLint level), (texture, level))
GEN_THUNKS(gl, glInvalidateTexSubImage, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth), (texture, level, xoffset, yoffset, zoffset, width, height, depth))
GEN_THUNKS_RET(gl, GLboolean, glIsAsyncMarkerSGIX, (GLuint marker), (marker))
GEN_THUNKS_RET(gl, GLboolean, glIsBuffer, (GLuint buffer), (buffer))
GEN_THUNKS_RET(gl, GLboolean, glIsBufferARB, (GLuint buffer), (buffer))
GEN_THUNKS_RET(gl, GLboolean, glIsBufferResidentNV, (GLenum target), (target))
GEN_THUNKS_RET(gl, GLboolean, glIsCommandListNV, (GLuint list), (list))
GEN_THUNKS_RET(gl, GLboolean, glIsEnabled, (GLenum cap), (cap))
GEN_THUNKS_RET(gl, GLboolean, glIsEnabledIndexedEXT, (GLenum target, GLuint index), (target, index))
GEN_THUNKS_RET(gl, GLboolean, glIsEnabledi, (GLenum target, GLuint index), (target, index))
GEN_THUNKS_RET(gl, GLboolean, glIsEnablediEXT, (GLenum target, GLuint index), (target, index))
GEN_THUNKS_RET(gl, GLboolean, glIsEnablediNV, (GLenum target, GLuint index), (target, index))
GEN_THUNKS_RET(gl, GLboolean, glIsEnablediOES, (GLenum target, GLuint index), (target, index))
GEN_THUNKS_RET(gl, GLboolean, glIsFenceAPPLE, (GLuint fence), (fence))
GEN_THUNKS_RET(gl, GLboolean, glIsFenceNV, (GLuint fence), (fence))
GEN_THUNKS_RET(gl, GLboolean, glIsFramebuffer, (GLuint framebuffer), (framebuffer))
GEN_THUNKS_RET(gl, GLboolean, glIsFramebufferEXT, (GLuint framebuffer), (framebuffer))
GEN_THUNKS_RET(gl, GLboolean, glIsFramebufferOES, (GLuint framebuffer), (framebuffer))
GEN_THUNKS_RET(gl, GLboolean, glIsImageHandleResidentARB, (GLuint64 handle), (handle))
GEN_THUNKS_RET(gl, GLboolean, glIsImageHandleResidentNV, (GLuint64 handle), (handle))
GEN_THUNKS_RET(gl, GLboolean, glIsList, (GLuint list), (list))
GEN_THUNKS_RET(gl, GLboolean, glIsNameAMD, (GLenum identifier, GLuint name), (identifier, name))
GEN_THUNKS_RET(gl, GLboolean, glIsNamedBufferResidentNV, (GLuint buffer), (buffer))
GEN_THUNKS_RET(gl, GLboolean, glIsNamedStringARB, (GLint namelen, const GLchar * name), (namelen, name))
GEN_THUNKS_RET(gl, GLboolean, glIsObjectBufferATI, (GLuint buffer), (buffer))
GEN_THUNKS_RET(gl, GLboolean, glIsOcclusionQueryNV, (GLuint id), (id))
GEN_THUNKS_RET(gl, GLboolean, glIsPathNV, (GLuint path), (path))
GEN_THUNKS_RET(gl, GLboolean, glIsPointInFillPathNV, (GLuint path, GLuint mask, GLfloat x, GLfloat y), (path, mask, x, y))
GEN_THUNKS_RET(gl, GLboolean, glIsPointInStrokePathNV, (GLuint path, GLfloat x, GLfloat y), (path, x, y))
GEN_THUNKS_RET(gl, GLboolean, glIsProgram, (GLuint program), (program))
GEN_THUNKS_RET(gl, GLboolean, glIsProgramARB, (GLuint program), (program))
GEN_THUNKS_RET(gl, GLboolean, glIsProgramNV, (GLuint id), (id))
GEN_THUNKS_RET(gl, GLboolean, glIsProgramPipeline, (GLuint pipeline), (pipeline))
GEN_THUNKS_RET(gl, GLboolean, glIsProgramPipelineEXT, (GLuint pipeline), (pipeline))
GEN_THUNKS_RET(gl, GLboolean, glIsQuery, (GLuint id), (id))
GEN_THUNKS_RET(gl, GLboolean, glIsQueryARB, (GLuint id), (id))
GEN_THUNKS_RET(gl, GLboolean, glIsQueryEXT, (GLuint id), (id))
GEN_THUNKS_RET(gl, GLboolean, glIsRenderbuffer, (GLuint renderbuffer), (renderbuffer))
GEN_THUNKS_RET(gl, GLboolean, glIsRenderbufferEXT, (GLuint renderbuffer), (renderbuffer))
GEN_THUNKS_RET(gl, GLboolean, glIsRenderbufferOES, (GLuint renderbuffer), (renderbuffer))
GEN_THUNKS_RET(gl, GLboolean, glIsSampler, (GLuint sampler), (sampler))
GEN_THUNKS_RET(gl, GLboolean, glIsShader, (GLuint shader), (shader))
GEN_THUNKS_RET(gl, GLboolean, glIsStateNV, (GLuint state), (state))
GEN_THUNKS_RET(gl, GLboolean, glIsSync, (GLsync sync), (sync))
GEN_THUNKS_RET(gl, GLboolean, glIsSyncAPPLE, (GLsync sync), (sync))
GEN_THUNKS_RET(gl, GLboolean, glIsTexture, (GLuint texture), (texture))
GEN_THUNKS_RET(gl, GLboolean, glIsTextureEXT, (GLuint texture), (texture))
GEN_THUNKS_RET(gl, GLboolean, glIsTextureHandleResidentARB, (GLuint64 handle), (handle))
GEN_THUNKS_RET(gl, GLboolean, glIsTextureHandleResidentNV, (GLuint64 handle), (handle))
GEN_THUNKS_RET(gl, GLboolean, glIsTransformFeedback, (GLuint id), (id))
GEN_THUNKS_RET(gl, GLboolean, glIsTransformFeedbackNV, (GLuint id), (id))
GEN_THUNKS_RET(gl, GLboolean, glIsVariantEnabledEXT, (GLuint id, GLenum cap), (id, cap))
GEN_THUNKS_RET(gl, GLboolean, glIsVertexArray, (GLuint array), (array))
GEN_THUNKS_RET(gl, GLboolean, glIsVertexArrayAPPLE, (GLuint array), (array))
GEN_THUNKS_RET(gl, GLboolean, glIsVertexArrayOES, (GLuint array), (array))
GEN_THUNKS_RET(gl, GLboolean, glIsVertexAttribEnabledAPPLE, (GLuint index, GLenum pname), (index, pname))
GEN_THUNKS(gl, glLabelObjectEXT, (GLenum type, GLuint object, GLsizei length, const GLchar * label), (type, object, length, label))
GEN_THUNKS(gl, glLightEnviSGIX, (GLenum pname, GLint param), (pname, param))
GEN_THUNKS(gl, glLightModelf, (GLenum pname, GLfloat param), (pname, param))
GEN_THUNKS(gl, glLightModelfv, (GLenum pname, const GLfloat * params), (pname, params))
GEN_THUNKS(gl, glLightModeli, (GLenum pname, GLint param), (pname, param))
GEN_THUNKS(gl, glLightModeliv, (GLenum pname, const GLint * params), (pname, params))
GEN_THUNKS(gl, glLightModelx, (GLenum pname, GLfixed param), (pname, param))
GEN_THUNKS(gl, glLightModelxOES, (GLenum pname, GLfixed param), (pname, param))
GEN_THUNKS(gl, glLightModelxv, (GLenum pname, const GLfixed * param), (pname, param))
GEN_THUNKS(gl, glLightModelxvOES, (GLenum pname, const GLfixed * param), (pname, param))
GEN_THUNKS(gl, glLightf, (GLenum light, GLenum pname, GLfloat param), (light, pname, param))
GEN_THUNKS(gl, glLightfv, (GLenum light, GLenum pname, const GLfloat * params), (light, pname, params))
GEN_THUNKS(gl, glLighti, (GLenum light, GLenum pname, GLint param), (light, pname, param))
GEN_THUNKS(gl, glLightiv, (GLenum light, GLenum pname, const GLint * params), (light, pname, params))
GEN_THUNKS(gl, glLightx, (GLenum light, GLenum pname, GLfixed param), (light, pname, param))
GEN_THUNKS(gl, glLightxOES, (GLenum light, GLenum pname, GLfixed param), (light, pname, param))
GEN_THUNKS(gl, glLightxv, (GLenum light, GLenum pname, const GLfixed * params), (light, pname, params))
GEN_THUNKS(gl, glLightxvOES, (GLenum light, GLenum pname, const GLfixed * params), (light, pname, params))
GEN_THUNKS(gl, glLineStipple, (GLint factor, GLushort pattern), (factor, pattern))
GEN_THUNKS(gl, glLineWidth, (GLfloat width), (width))
GEN_THUNKS(gl, glLineWidthx, (GLfixed width), (width))
GEN_THUNKS(gl, glLineWidthxOES, (GLfixed width), (width))
GEN_THUNKS(gl, glLinkProgram, (GLuint program), (program))
GEN_THUNKS(gl, glLinkProgramARB, (GLhandleARB programObj), ((uintptr_t)programObj))
GEN_THUNKS(gl, glListBase, (GLuint base), (base))
GEN_THUNKS(gl, glListDrawCommandsStatesClientNV, (GLuint list, GLuint segment, const void ** indirects, const GLsizei * sizes, const GLuint * states, const GLuint * fbos, GLuint count), (list, segment, indirects, sizes, states, fbos, count))
GEN_THUNKS(gl, glListParameterfSGIX, (GLuint list, GLenum pname, GLfloat param), (list, pname, param))
GEN_THUNKS(gl, glListParameterfvSGIX, (GLuint list, GLenum pname, const GLfloat * params), (list, pname, params))
GEN_THUNKS(gl, glListParameteriSGIX, (GLuint list, GLenum pname, GLint param), (list, pname, param))
GEN_THUNKS(gl, glListParameterivSGIX, (GLuint list, GLenum pname, const GLint * params), (list, pname, params))
GEN_THUNKS(gl, glLoadIdentity, (void), ())
GEN_THUNKS(gl, glLoadIdentityDeformationMapSGIX, (GLbitfield mask), (mask))
GEN_THUNKS(gl, glLoadMatrixd, (const GLdouble * m), (m))
GEN_THUNKS(gl, glLoadMatrixf, (const GLfloat * m), (m))
GEN_THUNKS(gl, glLoadMatrixx, (const GLfixed * m), (m))
GEN_THUNKS(gl, glLoadMatrixxOES, (const GLfixed * m), (m))
GEN_THUNKS(gl, glLoadName, (GLuint name), (name))
GEN_THUNKS(gl, glLoadPaletteFromModelViewMatrixOES, (void), ())
GEN_THUNKS(gl, glLoadProgramNV, (GLenum target, GLuint id, GLsizei len, const GLubyte * program), (target, id, len, program))
GEN_THUNKS(gl, glLoadTransposeMatrixd, (const GLdouble * m), (m))
GEN_THUNKS(gl, glLoadTransposeMatrixdARB, (const GLdouble * m), (m))
GEN_THUNKS(gl, glLoadTransposeMatrixf, (const GLfloat * m), (m))
GEN_THUNKS(gl, glLoadTransposeMatrixfARB, (const GLfloat * m), (m))
GEN_THUNKS(gl, glLoadTransposeMatrixxOES, (const GLfixed * m), (m))
GEN_THUNKS(gl, glLockArraysEXT, (GLint first, GLsizei count), (first, count))
GEN_THUNKS(gl, glLogicOp, (GLenum opcode), (opcode))
GEN_THUNKS(gl, glMakeBufferNonResidentNV, (GLenum target), (target))
GEN_THUNKS(gl, glMakeBufferResidentNV, (GLenum target, GLenum access), (target, access))
GEN_THUNKS(gl, glMakeImageHandleNonResidentARB, (GLuint64 handle), (handle))
GEN_THUNKS(gl, glMakeImageHandleNonResidentNV, (GLuint64 handle), (handle))
GEN_THUNKS(gl, glMakeImageHandleResidentARB, (GLuint64 handle, GLenum access), (handle, access))
GEN_THUNKS(gl, glMakeImageHandleResidentNV, (GLuint64 handle, GLenum access), (handle, access))
GEN_THUNKS(gl, glMakeNamedBufferNonResidentNV, (GLuint buffer), (buffer))
GEN_THUNKS(gl, glMakeNamedBufferResidentNV, (GLuint buffer, GLenum access), (buffer, access))
GEN_THUNKS(gl, glMakeTextureHandleNonResidentARB, (GLuint64 handle), (handle))
GEN_THUNKS(gl, glMakeTextureHandleNonResidentNV, (GLuint64 handle), (handle))
GEN_THUNKS(gl, glMakeTextureHandleResidentARB, (GLuint64 handle), (handle))
GEN_THUNKS(gl, glMakeTextureHandleResidentNV, (GLuint64 handle), (handle))
GEN_THUNKS(gl, glMap1d, (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points), (target, u1, u2, stride, order, points))
GEN_THUNKS(gl, glMap1f, (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points), (target, u1, u2, stride, order, points))
GEN_THUNKS(gl, glMap1xOES, (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points), (target, u1, u2, stride, order, points))
GEN_THUNKS(gl, glMap2d, (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points), (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points))
GEN_THUNKS(gl, glMap2f, (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points), (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points))
GEN_THUNKS(gl, glMap2xOES, (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points), (target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points))
GEN_THUNKS_RET(gl, void *, glMapBuffer, (GLenum target, GLenum access), (target, access))
GEN_THUNKS_RET(gl, void *, glMapBufferARB, (GLenum target, GLenum access), (target, access))
GEN_THUNKS_RET(gl, void *, glMapBufferOES, (GLenum target, GLenum access), (target, access))
GEN_THUNKS_RET(gl, void *, glMapBufferRange, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access), (target, offset, length, access))
GEN_THUNKS_RET(gl, void *, glMapBufferRangeEXT, (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access), (target, offset, length, access))
GEN_THUNKS(gl, glMapControlPointsNV, (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void * points), (target, index, type, ustride, vstride, uorder, vorder, packed, points))
GEN_THUNKS(gl, glMapGrid1d, (GLint un, GLdouble u1, GLdouble u2), (un, u1, u2))
GEN_THUNKS(gl, glMapGrid1f, (GLint un, GLfloat u1, GLfloat u2), (un, u1, u2))
GEN_THUNKS(gl, glMapGrid1xOES, (GLint n, GLfixed u1, GLfixed u2), (n, u1, u2))
GEN_THUNKS(gl, glMapGrid2d, (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2), (un, u1, u2, vn, v1, v2))
GEN_THUNKS(gl, glMapGrid2f, (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2), (un, u1, u2, vn, v1, v2))
GEN_THUNKS(gl, glMapGrid2xOES, (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2), (n, u1, u2, v1, v2))
GEN_THUNKS_RET(gl, void *, glMapNamedBuffer, (GLuint buffer, GLenum access), (buffer, access))
GEN_THUNKS_RET(gl, void *, glMapNamedBufferEXT, (GLuint buffer, GLenum access), (buffer, access))
GEN_THUNKS_RET(gl, void *, glMapNamedBufferRange, (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access), (buffer, offset, length, access))
GEN_THUNKS_RET(gl, void *, glMapNamedBufferRangeEXT, (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access), (buffer, offset, length, access))
GEN_THUNKS_RET(gl, void *, glMapObjectBufferATI, (GLuint buffer), (buffer))
GEN_THUNKS(gl, glMapParameterfvNV, (GLenum target, GLenum pname, const GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glMapParameterivNV, (GLenum target, GLenum pname, const GLint * params), (target, pname, params))
GEN_THUNKS_RET(gl, void *, glMapTexture2DINTEL, (GLuint texture, GLint level, GLbitfield access, GLint * stride, GLenum * layout), (texture, level, access, stride, layout))
GEN_THUNKS(gl, glMapVertexAttrib1dAPPLE, (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points), (index, size, u1, u2, stride, order, points))
GEN_THUNKS(gl, glMapVertexAttrib1fAPPLE, (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points), (index, size, u1, u2, stride, order, points))
GEN_THUNKS(gl, glMapVertexAttrib2dAPPLE, (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points), (index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points))
GEN_THUNKS(gl, glMapVertexAttrib2fAPPLE, (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points), (index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points))
GEN_THUNKS(gl, glMaterialf, (GLenum face, GLenum pname, GLfloat param), (face, pname, param))
GEN_THUNKS(gl, glMaterialfv, (GLenum face, GLenum pname, const GLfloat * params), (face, pname, params))
GEN_THUNKS(gl, glMateriali, (GLenum face, GLenum pname, GLint param), (face, pname, param))
GEN_THUNKS(gl, glMaterialiv, (GLenum face, GLenum pname, const GLint * params), (face, pname, params))
GEN_THUNKS(gl, glMaterialx, (GLenum face, GLenum pname, GLfixed param), (face, pname, param))
GEN_THUNKS(gl, glMaterialxOES, (GLenum face, GLenum pname, GLfixed param), (face, pname, param))
GEN_THUNKS(gl, glMaterialxv, (GLenum face, GLenum pname, const GLfixed * param), (face, pname, param))
GEN_THUNKS(gl, glMaterialxvOES, (GLenum face, GLenum pname, const GLfixed * param), (face, pname, param))
GEN_THUNKS(gl, glMatrixFrustumEXT, (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar), (mode, left, right, bottom, top, zNear, zFar))
GEN_THUNKS(gl, glMatrixIndexPointerARB, (GLint size, GLenum type, GLsizei stride, const void * pointer), (size, type, stride, pointer))
GEN_THUNKS(gl, glMatrixIndexPointerOES, (GLint size, GLenum type, GLsizei stride, const void * pointer), (size, type, stride, pointer))
GEN_THUNKS(gl, glMatrixIndexubvARB, (GLint size, const GLubyte * indices), (size, indices))
GEN_THUNKS(gl, glMatrixIndexuivARB, (GLint size, const GLuint * indices), (size, indices))
GEN_THUNKS(gl, glMatrixIndexusvARB, (GLint size, const GLushort * indices), (size, indices))
GEN_THUNKS(gl, glMatrixLoad3x2fNV, (GLenum matrixMode, const GLfloat * m), (matrixMode, m))
GEN_THUNKS(gl, glMatrixLoad3x3fNV, (GLenum matrixMode, const GLfloat * m), (matrixMode, m))
GEN_THUNKS(gl, glMatrixLoadIdentityEXT, (GLenum mode), (mode))
GEN_THUNKS(gl, glMatrixLoadTranspose3x3fNV, (GLenum matrixMode, const GLfloat * m), (matrixMode, m))
GEN_THUNKS(gl, glMatrixLoadTransposedEXT, (GLenum mode, const GLdouble * m), (mode, m))
GEN_THUNKS(gl, glMatrixLoadTransposefEXT, (GLenum mode, const GLfloat * m), (mode, m))
GEN_THUNKS(gl, glMatrixLoaddEXT, (GLenum mode, const GLdouble * m), (mode, m))
GEN_THUNKS(gl, glMatrixLoadfEXT, (GLenum mode, const GLfloat * m), (mode, m))
GEN_THUNKS(gl, glMatrixMode, (GLenum mode), (mode))
GEN_THUNKS(gl, glMatrixMult3x2fNV, (GLenum matrixMode, const GLfloat * m), (matrixMode, m))
GEN_THUNKS(gl, glMatrixMult3x3fNV, (GLenum matrixMode, const GLfloat * m), (matrixMode, m))
GEN_THUNKS(gl, glMatrixMultTranspose3x3fNV, (GLenum matrixMode, const GLfloat * m), (matrixMode, m))
GEN_THUNKS(gl, glMatrixMultTransposedEXT, (GLenum mode, const GLdouble * m), (mode, m))
GEN_THUNKS(gl, glMatrixMultTransposefEXT, (GLenum mode, const GLfloat * m), (mode, m))
GEN_THUNKS(gl, glMatrixMultdEXT, (GLenum mode, const GLdouble * m), (mode, m))
GEN_THUNKS(gl, glMatrixMultfEXT, (GLenum mode, const GLfloat * m), (mode, m))
GEN_THUNKS(gl, glMatrixOrthoEXT, (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar), (mode, left, right, bottom, top, zNear, zFar))
GEN_THUNKS(gl, glMatrixPopEXT, (GLenum mode), (mode))
GEN_THUNKS(gl, glMatrixPushEXT, (GLenum mode), (mode))
GEN_THUNKS(gl, glMatrixRotatedEXT, (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z), (mode, angle, x, y, z))
GEN_THUNKS(gl, glMatrixRotatefEXT, (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z), (mode, angle, x, y, z))
GEN_THUNKS(gl, glMatrixScaledEXT, (GLenum mode, GLdouble x, GLdouble y, GLdouble z), (mode, x, y, z))
GEN_THUNKS(gl, glMatrixScalefEXT, (GLenum mode, GLfloat x, GLfloat y, GLfloat z), (mode, x, y, z))
GEN_THUNKS(gl, glMatrixTranslatedEXT, (GLenum mode, GLdouble x, GLdouble y, GLdouble z), (mode, x, y, z))
GEN_THUNKS(gl, glMatrixTranslatefEXT, (GLenum mode, GLfloat x, GLfloat y, GLfloat z), (mode, x, y, z))
GEN_THUNKS(gl, glMaxShaderCompilerThreadsARB, (GLuint count), (count))
GEN_THUNKS(gl, glMemoryBarrier, (GLbitfield barriers), (barriers))
GEN_THUNKS(gl, glMemoryBarrierByRegion, (GLbitfield barriers), (barriers))
GEN_THUNKS(gl, glMemoryBarrierEXT, (GLbitfield barriers), (barriers))
GEN_THUNKS(gl, glMinSampleShading, (GLfloat value), (value))
GEN_THUNKS(gl, glMinSampleShadingARB, (GLfloat value), (value))
GEN_THUNKS(gl, glMinSampleShadingOES, (GLfloat value), (value))
GEN_THUNKS(gl, glMinmax, (GLenum target, GLenum internalformat, GLboolean sink), (target, internalformat, sink))
GEN_THUNKS(gl, glMinmaxEXT, (GLenum target, GLenum internalformat, GLboolean sink), (target, internalformat, sink))
GEN_THUNKS(gl, glMultMatrixd, (const GLdouble * m), (m))
GEN_THUNKS(gl, glMultMatrixf, (const GLfloat * m), (m))
GEN_THUNKS(gl, glMultMatrixx, (const GLfixed * m), (m))
GEN_THUNKS(gl, glMultMatrixxOES, (const GLfixed * m), (m))
GEN_THUNKS(gl, glMultTransposeMatrixd, (const GLdouble * m), (m))
GEN_THUNKS(gl, glMultTransposeMatrixdARB, (const GLdouble * m), (m))
GEN_THUNKS(gl, glMultTransposeMatrixf, (const GLfloat * m), (m))
GEN_THUNKS(gl, glMultTransposeMatrixfARB, (const GLfloat * m), (m))
GEN_THUNKS(gl, glMultTransposeMatrixxOES, (const GLfixed * m), (m))
GEN_THUNKS(gl, glMultiDrawArrays, (GLenum mode, const GLint * first, const GLsizei * count, GLsizei drawcount), (mode, first, count, drawcount))
GEN_THUNKS(gl, glMultiDrawArraysEXT, (GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount), (mode, first, count, primcount))
GEN_THUNKS(gl, glMultiDrawArraysIndirect, (GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride), (mode, indirect, drawcount, stride))
GEN_THUNKS(gl, glMultiDrawArraysIndirectAMD, (GLenum mode, const void * indirect, GLsizei primcount, GLsizei stride), (mode, indirect, primcount, stride))
GEN_THUNKS(gl, glMultiDrawArraysIndirectBindlessCountNV, (GLenum mode, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount), (mode, indirect, drawCount, maxDrawCount, stride, vertexBufferCount))
GEN_THUNKS(gl, glMultiDrawArraysIndirectBindlessNV, (GLenum mode, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount), (mode, indirect, drawCount, stride, vertexBufferCount))
GEN_THUNKS(gl, glMultiDrawArraysIndirectCountARB, (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride), (mode, indirect, drawcount, maxdrawcount, stride))
GEN_THUNKS(gl, glMultiDrawArraysIndirectEXT, (GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride), (mode, indirect, drawcount, stride))
GEN_THUNKS(gl, glMultiDrawElementArrayAPPLE, (GLenum mode, const GLint * first, const GLsizei * count, GLsizei primcount), (mode, first, count, primcount))
GEN_THUNKS(gl, glMultiDrawElements, (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount), (mode, count, type, indices, drawcount))
GEN_THUNKS(gl, glMultiDrawElementsBaseVertex, (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei drawcount, const GLint * basevertex), (mode, count, type, indices, drawcount, basevertex))
GEN_THUNKS(gl, glMultiDrawElementsBaseVertexEXT, (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, const GLint * basevertex), (mode, count, type, indices, primcount, basevertex))
GEN_THUNKS(gl, glMultiDrawElementsBaseVertexOES, (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, const GLint * basevertex), (mode, count, type, indices, primcount, basevertex))
GEN_THUNKS(gl, glMultiDrawElementsEXT, (GLenum mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount), (mode, count, type, indices, primcount))
GEN_THUNKS(gl, glMultiDrawElementsIndirect, (GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride), (mode, type, indirect, drawcount, stride))
GEN_THUNKS(gl, glMultiDrawElementsIndirectAMD, (GLenum mode, GLenum type, const void * indirect, GLsizei primcount, GLsizei stride), (mode, type, indirect, primcount, stride))
GEN_THUNKS(gl, glMultiDrawElementsIndirectBindlessCountNV, (GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei maxDrawCount, GLsizei stride, GLint vertexBufferCount), (mode, type, indirect, drawCount, maxDrawCount, stride, vertexBufferCount))
GEN_THUNKS(gl, glMultiDrawElementsIndirectBindlessNV, (GLenum mode, GLenum type, const void * indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount), (mode, type, indirect, drawCount, stride, vertexBufferCount))
GEN_THUNKS(gl, glMultiDrawElementsIndirectCountARB, (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride), (mode, type, indirect, drawcount, maxdrawcount, stride))
GEN_THUNKS(gl, glMultiDrawElementsIndirectEXT, (GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride), (mode, type, indirect, drawcount, stride))
GEN_THUNKS(gl, glMultiDrawRangeElementArrayAPPLE, (GLenum mode, GLuint start, GLuint end, const GLint * first, const GLsizei * count, GLsizei primcount), (mode, start, end, first, count, primcount))
GEN_THUNKS(gl, glMultiModeDrawArraysIBM, (const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei primcount, GLint modestride), (mode, first, count, primcount, modestride))
GEN_THUNKS(gl, glMultiModeDrawElementsIBM, (const GLenum * mode, const GLsizei * count, GLenum type, const void *const* indices, GLsizei primcount, GLint modestride), (mode, count, type, indices, primcount, modestride))
GEN_THUNKS(gl, glMultiTexBufferEXT, (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer), (texunit, target, internalformat, buffer))
GEN_THUNKS(gl, glMultiTexCoord1bOES, (GLenum texture, GLbyte s), (texture, s))
GEN_THUNKS(gl, glMultiTexCoord1bvOES, (GLenum texture, const GLbyte * coords), (texture, coords))
GEN_THUNKS(gl, glMultiTexCoord1d, (GLenum target, GLdouble s), (target, s))
GEN_THUNKS(gl, glMultiTexCoord1dARB, (GLenum target, GLdouble s), (target, s))
GEN_THUNKS(gl, glMultiTexCoord1dv, (GLenum target, const GLdouble * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord1dvARB, (GLenum target, const GLdouble * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord1f, (GLenum target, GLfloat s), (target, s))
GEN_THUNKS(gl, glMultiTexCoord1fARB, (GLenum target, GLfloat s), (target, s))
GEN_THUNKS(gl, glMultiTexCoord1fv, (GLenum target, const GLfloat * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord1fvARB, (GLenum target, const GLfloat * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord1hNV, (GLenum target, GLhalfNV s), (target, s))
GEN_THUNKS(gl, glMultiTexCoord1hvNV, (GLenum target, const GLhalfNV * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord1i, (GLenum target, GLint s), (target, s))
GEN_THUNKS(gl, glMultiTexCoord1iARB, (GLenum target, GLint s), (target, s))
GEN_THUNKS(gl, glMultiTexCoord1iv, (GLenum target, const GLint * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord1ivARB, (GLenum target, const GLint * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord1s, (GLenum target, GLshort s), (target, s))
GEN_THUNKS(gl, glMultiTexCoord1sARB, (GLenum target, GLshort s), (target, s))
GEN_THUNKS(gl, glMultiTexCoord1sv, (GLenum target, const GLshort * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord1svARB, (GLenum target, const GLshort * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord1xOES, (GLenum texture, GLfixed s), (texture, s))
GEN_THUNKS(gl, glMultiTexCoord1xvOES, (GLenum texture, const GLfixed * coords), (texture, coords))
GEN_THUNKS(gl, glMultiTexCoord2bOES, (GLenum texture, GLbyte s, GLbyte t), (texture, s, t))
GEN_THUNKS(gl, glMultiTexCoord2bvOES, (GLenum texture, const GLbyte * coords), (texture, coords))
GEN_THUNKS(gl, glMultiTexCoord2d, (GLenum target, GLdouble s, GLdouble t), (target, s, t))
GEN_THUNKS(gl, glMultiTexCoord2dARB, (GLenum target, GLdouble s, GLdouble t), (target, s, t))
GEN_THUNKS(gl, glMultiTexCoord2dv, (GLenum target, const GLdouble * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord2dvARB, (GLenum target, const GLdouble * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord2f, (GLenum target, GLfloat s, GLfloat t), (target, s, t))
GEN_THUNKS(gl, glMultiTexCoord2fARB, (GLenum target, GLfloat s, GLfloat t), (target, s, t))
GEN_THUNKS(gl, glMultiTexCoord2fv, (GLenum target, const GLfloat * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord2fvARB, (GLenum target, const GLfloat * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord2hNV, (GLenum target, GLhalfNV s, GLhalfNV t), (target, s, t))
GEN_THUNKS(gl, glMultiTexCoord2hvNV, (GLenum target, const GLhalfNV * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord2i, (GLenum target, GLint s, GLint t), (target, s, t))
GEN_THUNKS(gl, glMultiTexCoord2iARB, (GLenum target, GLint s, GLint t), (target, s, t))
GEN_THUNKS(gl, glMultiTexCoord2iv, (GLenum target, const GLint * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord2ivARB, (GLenum target, const GLint * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord2s, (GLenum target, GLshort s, GLshort t), (target, s, t))
GEN_THUNKS(gl, glMultiTexCoord2sARB, (GLenum target, GLshort s, GLshort t), (target, s, t))
GEN_THUNKS(gl, glMultiTexCoord2sv, (GLenum target, const GLshort * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord2svARB, (GLenum target, const GLshort * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord2xOES, (GLenum texture, GLfixed s, GLfixed t), (texture, s, t))
GEN_THUNKS(gl, glMultiTexCoord2xvOES, (GLenum texture, const GLfixed * coords), (texture, coords))
GEN_THUNKS(gl, glMultiTexCoord3bOES, (GLenum texture, GLbyte s, GLbyte t, GLbyte r), (texture, s, t, r))
GEN_THUNKS(gl, glMultiTexCoord3bvOES, (GLenum texture, const GLbyte * coords), (texture, coords))
GEN_THUNKS(gl, glMultiTexCoord3d, (GLenum target, GLdouble s, GLdouble t, GLdouble r), (target, s, t, r))
GEN_THUNKS(gl, glMultiTexCoord3dARB, (GLenum target, GLdouble s, GLdouble t, GLdouble r), (target, s, t, r))
GEN_THUNKS(gl, glMultiTexCoord3dv, (GLenum target, const GLdouble * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord3dvARB, (GLenum target, const GLdouble * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord3f, (GLenum target, GLfloat s, GLfloat t, GLfloat r), (target, s, t, r))
GEN_THUNKS(gl, glMultiTexCoord3fARB, (GLenum target, GLfloat s, GLfloat t, GLfloat r), (target, s, t, r))
GEN_THUNKS(gl, glMultiTexCoord3fv, (GLenum target, const GLfloat * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord3fvARB, (GLenum target, const GLfloat * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord3hNV, (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r), (target, s, t, r))
GEN_THUNKS(gl, glMultiTexCoord3hvNV, (GLenum target, const GLhalfNV * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord3i, (GLenum target, GLint s, GLint t, GLint r), (target, s, t, r))
GEN_THUNKS(gl, glMultiTexCoord3iARB, (GLenum target, GLint s, GLint t, GLint r), (target, s, t, r))
GEN_THUNKS(gl, glMultiTexCoord3iv, (GLenum target, const GLint * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord3ivARB, (GLenum target, const GLint * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord3s, (GLenum target, GLshort s, GLshort t, GLshort r), (target, s, t, r))
GEN_THUNKS(gl, glMultiTexCoord3sARB, (GLenum target, GLshort s, GLshort t, GLshort r), (target, s, t, r))
GEN_THUNKS(gl, glMultiTexCoord3sv, (GLenum target, const GLshort * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord3svARB, (GLenum target, const GLshort * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord3xOES, (GLenum texture, GLfixed s, GLfixed t, GLfixed r), (texture, s, t, r))
GEN_THUNKS(gl, glMultiTexCoord3xvOES, (GLenum texture, const GLfixed * coords), (texture, coords))
GEN_THUNKS(gl, glMultiTexCoord4bOES, (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q), (texture, s, t, r, q))
GEN_THUNKS(gl, glMultiTexCoord4bvOES, (GLenum texture, const GLbyte * coords), (texture, coords))
GEN_THUNKS(gl, glMultiTexCoord4d, (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q), (target, s, t, r, q))
GEN_THUNKS(gl, glMultiTexCoord4dARB, (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q), (target, s, t, r, q))
GEN_THUNKS(gl, glMultiTexCoord4dv, (GLenum target, const GLdouble * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord4dvARB, (GLenum target, const GLdouble * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord4f, (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q), (target, s, t, r, q))
GEN_THUNKS(gl, glMultiTexCoord4fARB, (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q), (target, s, t, r, q))
GEN_THUNKS(gl, glMultiTexCoord4fv, (GLenum target, const GLfloat * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord4fvARB, (GLenum target, const GLfloat * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord4hNV, (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q), (target, s, t, r, q))
GEN_THUNKS(gl, glMultiTexCoord4hvNV, (GLenum target, const GLhalfNV * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord4i, (GLenum target, GLint s, GLint t, GLint r, GLint q), (target, s, t, r, q))
GEN_THUNKS(gl, glMultiTexCoord4iARB, (GLenum target, GLint s, GLint t, GLint r, GLint q), (target, s, t, r, q))
GEN_THUNKS(gl, glMultiTexCoord4iv, (GLenum target, const GLint * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord4ivARB, (GLenum target, const GLint * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord4s, (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q), (target, s, t, r, q))
GEN_THUNKS(gl, glMultiTexCoord4sARB, (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q), (target, s, t, r, q))
GEN_THUNKS(gl, glMultiTexCoord4sv, (GLenum target, const GLshort * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord4svARB, (GLenum target, const GLshort * v), (target, v))
GEN_THUNKS(gl, glMultiTexCoord4x, (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q), (texture, s, t, r, q))
GEN_THUNKS(gl, glMultiTexCoord4xOES, (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q), (texture, s, t, r, q))
GEN_THUNKS(gl, glMultiTexCoord4xvOES, (GLenum texture, const GLfixed * coords), (texture, coords))
GEN_THUNKS(gl, glMultiTexCoordP1ui, (GLenum texture, GLenum type, GLuint coords), (texture, type, coords))
GEN_THUNKS(gl, glMultiTexCoordP1uiv, (GLenum texture, GLenum type, const GLuint * coords), (texture, type, coords))
GEN_THUNKS(gl, glMultiTexCoordP2ui, (GLenum texture, GLenum type, GLuint coords), (texture, type, coords))
GEN_THUNKS(gl, glMultiTexCoordP2uiv, (GLenum texture, GLenum type, const GLuint * coords), (texture, type, coords))
GEN_THUNKS(gl, glMultiTexCoordP3ui, (GLenum texture, GLenum type, GLuint coords), (texture, type, coords))
GEN_THUNKS(gl, glMultiTexCoordP3uiv, (GLenum texture, GLenum type, const GLuint * coords), (texture, type, coords))
GEN_THUNKS(gl, glMultiTexCoordP4ui, (GLenum texture, GLenum type, GLuint coords), (texture, type, coords))
GEN_THUNKS(gl, glMultiTexCoordP4uiv, (GLenum texture, GLenum type, const GLuint * coords), (texture, type, coords))
GEN_THUNKS(gl, glMultiTexCoordPointerEXT, (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void * pointer), (texunit, size, type, stride, pointer))
GEN_THUNKS(gl, glMultiTexEnvfEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat param), (texunit, target, pname, param))
GEN_THUNKS(gl, glMultiTexEnvfvEXT, (GLenum texunit, GLenum target, GLenum pname, const GLfloat * params), (texunit, target, pname, params))
GEN_THUNKS(gl, glMultiTexEnviEXT, (GLenum texunit, GLenum target, GLenum pname, GLint param), (texunit, target, pname, param))
GEN_THUNKS(gl, glMultiTexEnvivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLint * params), (texunit, target, pname, params))
GEN_THUNKS(gl, glMultiTexGendEXT, (GLenum texunit, GLenum coord, GLenum pname, GLdouble param), (texunit, coord, pname, param))
GEN_THUNKS(gl, glMultiTexGendvEXT, (GLenum texunit, GLenum coord, GLenum pname, const GLdouble * params), (texunit, coord, pname, params))
GEN_THUNKS(gl, glMultiTexGenfEXT, (GLenum texunit, GLenum coord, GLenum pname, GLfloat param), (texunit, coord, pname, param))
GEN_THUNKS(gl, glMultiTexGenfvEXT, (GLenum texunit, GLenum coord, GLenum pname, const GLfloat * params), (texunit, coord, pname, params))
GEN_THUNKS(gl, glMultiTexGeniEXT, (GLenum texunit, GLenum coord, GLenum pname, GLint param), (texunit, coord, pname, param))
GEN_THUNKS(gl, glMultiTexGenivEXT, (GLenum texunit, GLenum coord, GLenum pname, const GLint * params), (texunit, coord, pname, params))
GEN_THUNKS(gl, glMultiTexImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels), (texunit, target, level, internalformat, width, border, format, type, pixels))
GEN_THUNKS(gl, glMultiTexImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels), (texunit, target, level, internalformat, width, height, border, format, type, pixels))
GEN_THUNKS(gl, glMultiTexImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels), (texunit, target, level, internalformat, width, height, depth, border, format, type, pixels))
GEN_THUNKS(gl, glMultiTexParameterIivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLint * params), (texunit, target, pname, params))
GEN_THUNKS(gl, glMultiTexParameterIuivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLuint * params), (texunit, target, pname, params))
GEN_THUNKS(gl, glMultiTexParameterfEXT, (GLenum texunit, GLenum target, GLenum pname, GLfloat param), (texunit, target, pname, param))
GEN_THUNKS(gl, glMultiTexParameterfvEXT, (GLenum texunit, GLenum target, GLenum pname, const GLfloat * params), (texunit, target, pname, params))
GEN_THUNKS(gl, glMultiTexParameteriEXT, (GLenum texunit, GLenum target, GLenum pname, GLint param), (texunit, target, pname, param))
GEN_THUNKS(gl, glMultiTexParameterivEXT, (GLenum texunit, GLenum target, GLenum pname, const GLint * params), (texunit, target, pname, params))
GEN_THUNKS(gl, glMultiTexRenderbufferEXT, (GLenum texunit, GLenum target, GLuint renderbuffer), (texunit, target, renderbuffer))
GEN_THUNKS(gl, glMultiTexSubImage1DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels), (texunit, target, level, xoffset, width, format, type, pixels))
GEN_THUNKS(gl, glMultiTexSubImage2DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels), (texunit, target, level, xoffset, yoffset, width, height, format, type, pixels))
GEN_THUNKS(gl, glMultiTexSubImage3DEXT, (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels), (texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels))
GEN_THUNKS(gl, glNamedBufferData, (GLuint buffer, GLsizeiptr size, const void * data, GLenum usage), (buffer, size, data, usage))
GEN_THUNKS(gl, glNamedBufferDataEXT, (GLuint buffer, GLsizeiptr size, const void * data, GLenum usage), (buffer, size, data, usage))
GEN_THUNKS(gl, glNamedBufferPageCommitmentARB, (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit), (buffer, offset, size, commit))
GEN_THUNKS(gl, glNamedBufferPageCommitmentEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit), (buffer, offset, size, commit))
GEN_THUNKS(gl, glNamedBufferStorage, (GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags), (buffer, size, data, flags))
GEN_THUNKS(gl, glNamedBufferStorageEXT, (GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags), (buffer, size, data, flags))
GEN_THUNKS(gl, glNamedBufferSubData, (GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data), (buffer, offset, size, data))
GEN_THUNKS(gl, glNamedBufferSubDataEXT, (GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data), (buffer, offset, size, data))
GEN_THUNKS(gl, glNamedCopyBufferSubDataEXT, (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size), (readBuffer, writeBuffer, readOffset, writeOffset, size))
GEN_THUNKS(gl, glNamedFramebufferDrawBuffer, (GLuint framebuffer, GLenum buf), (framebuffer, buf))
GEN_THUNKS(gl, glNamedFramebufferDrawBuffers, (GLuint framebuffer, GLsizei n, const GLenum * bufs), (framebuffer, n, bufs))
GEN_THUNKS(gl, glNamedFramebufferParameteri, (GLuint framebuffer, GLenum pname, GLint param), (framebuffer, pname, param))
GEN_THUNKS(gl, glNamedFramebufferParameteriEXT, (GLuint framebuffer, GLenum pname, GLint param), (framebuffer, pname, param))
GEN_THUNKS(gl, glNamedFramebufferReadBuffer, (GLuint framebuffer, GLenum src), (framebuffer, src))
GEN_THUNKS(gl, glNamedFramebufferRenderbuffer, (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer), (framebuffer, attachment, renderbuffertarget, renderbuffer))
GEN_THUNKS(gl, glNamedFramebufferRenderbufferEXT, (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer), (framebuffer, attachment, renderbuffertarget, renderbuffer))
GEN_THUNKS(gl, glNamedFramebufferSampleLocationsfvARB, (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v), (framebuffer, start, count, v))
GEN_THUNKS(gl, glNamedFramebufferSampleLocationsfvNV, (GLuint framebuffer, GLuint start, GLsizei count, const GLfloat * v), (framebuffer, start, count, v))
GEN_THUNKS(gl, glNamedFramebufferTexture, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level), (framebuffer, attachment, texture, level))
GEN_THUNKS(gl, glNamedFramebufferTexture1DEXT, (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level), (framebuffer, attachment, textarget, texture, level))
GEN_THUNKS(gl, glNamedFramebufferTexture2DEXT, (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level), (framebuffer, attachment, textarget, texture, level))
GEN_THUNKS(gl, glNamedFramebufferTexture3DEXT, (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset), (framebuffer, attachment, textarget, texture, level, zoffset))
GEN_THUNKS(gl, glNamedFramebufferTextureEXT, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level), (framebuffer, attachment, texture, level))
GEN_THUNKS(gl, glNamedFramebufferTextureFaceEXT, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face), (framebuffer, attachment, texture, level, face))
GEN_THUNKS(gl, glNamedFramebufferTextureLayer, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer), (framebuffer, attachment, texture, level, layer))
GEN_THUNKS(gl, glNamedFramebufferTextureLayerEXT, (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer), (framebuffer, attachment, texture, level, layer))
GEN_THUNKS(gl, glNamedProgramLocalParameter4dEXT, (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w), (program, target, index, x, y, z, w))
GEN_THUNKS(gl, glNamedProgramLocalParameter4dvEXT, (GLuint program, GLenum target, GLuint index, const GLdouble * params), (program, target, index, params))
GEN_THUNKS(gl, glNamedProgramLocalParameter4fEXT, (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w), (program, target, index, x, y, z, w))
GEN_THUNKS(gl, glNamedProgramLocalParameter4fvEXT, (GLuint program, GLenum target, GLuint index, const GLfloat * params), (program, target, index, params))
GEN_THUNKS(gl, glNamedProgramLocalParameterI4iEXT, (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w), (program, target, index, x, y, z, w))
GEN_THUNKS(gl, glNamedProgramLocalParameterI4ivEXT, (GLuint program, GLenum target, GLuint index, const GLint * params), (program, target, index, params))
GEN_THUNKS(gl, glNamedProgramLocalParameterI4uiEXT, (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w), (program, target, index, x, y, z, w))
GEN_THUNKS(gl, glNamedProgramLocalParameterI4uivEXT, (GLuint program, GLenum target, GLuint index, const GLuint * params), (program, target, index, params))
GEN_THUNKS(gl, glNamedProgramLocalParameters4fvEXT, (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat * params), (program, target, index, count, params))
GEN_THUNKS(gl, glNamedProgramLocalParametersI4ivEXT, (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint * params), (program, target, index, count, params))
GEN_THUNKS(gl, glNamedProgramLocalParametersI4uivEXT, (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint * params), (program, target, index, count, params))
GEN_THUNKS(gl, glNamedProgramStringEXT, (GLuint program, GLenum target, GLenum format, GLsizei len, const void * string), (program, target, format, len, string))
GEN_THUNKS(gl, glNamedRenderbufferStorage, (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height), (renderbuffer, internalformat, width, height))
GEN_THUNKS(gl, glNamedRenderbufferStorageEXT, (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height), (renderbuffer, internalformat, width, height))
GEN_THUNKS(gl, glNamedRenderbufferStorageMultisample, (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height), (renderbuffer, samples, internalformat, width, height))
GEN_THUNKS(gl, glNamedRenderbufferStorageMultisampleCoverageEXT, (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height), (renderbuffer, coverageSamples, colorSamples, internalformat, width, height))
GEN_THUNKS(gl, glNamedRenderbufferStorageMultisampleEXT, (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height), (renderbuffer, samples, internalformat, width, height))
GEN_THUNKS(gl, glNamedStringARB, (GLenum type, GLint namelen, const GLchar * name, GLint stringlen, const GLchar * string), (type, namelen, name, stringlen, string))
GEN_THUNKS(gl, glNewList, (GLuint list, GLenum mode), (list, mode))
GEN_THUNKS_RET(gl, GLuint, glNewObjectBufferATI, (GLsizei size, const void * pointer, GLenum usage), (size, pointer, usage))
GEN_THUNKS(gl, glNormal3b, (GLbyte nx, GLbyte ny, GLbyte nz), (nx, ny, nz))
GEN_THUNKS(gl, glNormal3bv, (const GLbyte * v), (v))
GEN_THUNKS(gl, glNormal3d, (GLdouble nx, GLdouble ny, GLdouble nz), (nx, ny, nz))
GEN_THUNKS(gl, glNormal3dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glNormal3f, (GLfloat nx, GLfloat ny, GLfloat nz), (nx, ny, nz))
GEN_THUNKS(gl, glNormal3fVertex3fSUN, (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z), (nx, ny, nz, x, y, z))
GEN_THUNKS(gl, glNormal3fVertex3fvSUN, (const GLfloat * n, const GLfloat * v), (n, v))
GEN_THUNKS(gl, glNormal3fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glNormal3hNV, (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz), (nx, ny, nz))
GEN_THUNKS(gl, glNormal3hvNV, (const GLhalfNV * v), (v))
GEN_THUNKS(gl, glNormal3i, (GLint nx, GLint ny, GLint nz), (nx, ny, nz))
GEN_THUNKS(gl, glNormal3iv, (const GLint * v), (v))
GEN_THUNKS(gl, glNormal3s, (GLshort nx, GLshort ny, GLshort nz), (nx, ny, nz))
GEN_THUNKS(gl, glNormal3sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glNormal3x, (GLfixed nx, GLfixed ny, GLfixed nz), (nx, ny, nz))
GEN_THUNKS(gl, glNormal3xOES, (GLfixed nx, GLfixed ny, GLfixed nz), (nx, ny, nz))
GEN_THUNKS(gl, glNormal3xvOES, (const GLfixed * coords), (coords))
GEN_THUNKS(gl, glNormalFormatNV, (GLenum type, GLsizei stride), (type, stride))
GEN_THUNKS(gl, glNormalP3ui, (GLenum type, GLuint coords), (type, coords))
GEN_THUNKS(gl, glNormalP3uiv, (GLenum type, const GLuint * coords), (type, coords))
GEN_THUNKS(gl, glNormalPointer, (GLenum type, GLsizei stride, const void * pointer), (type, stride, pointer))
GEN_THUNKS(gl, glNormalPointerEXT, (GLenum type, GLsizei stride, GLsizei count, const void * pointer), (type, stride, count, pointer))
GEN_THUNKS(gl, glNormalPointerListIBM, (GLenum type, GLint stride, const void ** pointer, GLint ptrstride), (type, stride, pointer, ptrstride))
GEN_THUNKS(gl, glNormalPointervINTEL, (GLenum type, const void ** pointer), (type, pointer))
GEN_THUNKS(gl, glNormalStream3bATI, (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz), (stream, nx, ny, nz))
GEN_THUNKS(gl, glNormalStream3bvATI, (GLenum stream, const GLbyte * coords), (stream, coords))
GEN_THUNKS(gl, glNormalStream3dATI, (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz), (stream, nx, ny, nz))
GEN_THUNKS(gl, glNormalStream3dvATI, (GLenum stream, const GLdouble * coords), (stream, coords))
GEN_THUNKS(gl, glNormalStream3fATI, (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz), (stream, nx, ny, nz))
GEN_THUNKS(gl, glNormalStream3fvATI, (GLenum stream, const GLfloat * coords), (stream, coords))
GEN_THUNKS(gl, glNormalStream3iATI, (GLenum stream, GLint nx, GLint ny, GLint nz), (stream, nx, ny, nz))
GEN_THUNKS(gl, glNormalStream3ivATI, (GLenum stream, const GLint * coords), (stream, coords))
GEN_THUNKS(gl, glNormalStream3sATI, (GLenum stream, GLshort nx, GLshort ny, GLshort nz), (stream, nx, ny, nz))
GEN_THUNKS(gl, glNormalStream3svATI, (GLenum stream, const GLshort * coords), (stream, coords))
GEN_THUNKS(gl, glObjectLabel, (GLenum identifier, GLuint name, GLsizei length, const GLchar * label), (identifier, name, length, label))
GEN_THUNKS(gl, glObjectLabelKHR, (GLenum identifier, GLuint name, GLsizei length, const GLchar * label), (identifier, name, length, label))
GEN_THUNKS(gl, glObjectPtrLabel, (const void * ptr, GLsizei length, const GLchar * label), (ptr, length, label))
GEN_THUNKS(gl, glObjectPtrLabelKHR, (const void * ptr, GLsizei length, const GLchar * label), (ptr, length, label))
GEN_THUNKS_RET(gl, GLenum, glObjectPurgeableAPPLE, (GLenum objectType, GLuint name, GLenum option), (objectType, name, option))
GEN_THUNKS_RET(gl, GLenum, glObjectUnpurgeableAPPLE, (GLenum objectType, GLuint name, GLenum option), (objectType, name, option))
GEN_THUNKS(gl, glOrtho, (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar), (left, right, bottom, top, zNear, zFar))
GEN_THUNKS(gl, glOrthof, (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f), (l, r, b, t, n, f))
GEN_THUNKS(gl, glOrthofOES, (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f), (l, r, b, t, n, f))
GEN_THUNKS(gl, glOrthox, (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f), (l, r, b, t, n, f))
GEN_THUNKS(gl, glOrthoxOES, (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f), (l, r, b, t, n, f))
GEN_THUNKS(gl, glPNTrianglesfATI, (GLenum pname, GLfloat param), (pname, param))
GEN_THUNKS(gl, glPNTrianglesiATI, (GLenum pname, GLint param), (pname, param))
GEN_THUNKS(gl, glPassTexCoordATI, (GLuint dst, GLuint coord, GLenum swizzle), (dst, coord, swizzle))
GEN_THUNKS(gl, glPassThrough, (GLfloat token), (token))
GEN_THUNKS(gl, glPassThroughxOES, (GLfixed token), (token))
GEN_THUNKS(gl, glPatchParameterfv, (GLenum pname, const GLfloat * values), (pname, values))
GEN_THUNKS(gl, glPatchParameteri, (GLenum pname, GLint value), (pname, value))
GEN_THUNKS(gl, glPatchParameteriEXT, (GLenum pname, GLint value), (pname, value))
GEN_THUNKS(gl, glPatchParameteriOES, (GLenum pname, GLint value), (pname, value))
GEN_THUNKS(gl, glPathColorGenNV, (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat * coeffs), (color, genMode, colorFormat, coeffs))
GEN_THUNKS(gl, glPathCommandsNV, (GLuint path, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords), (path, numCommands, commands, numCoords, coordType, coords))
GEN_THUNKS(gl, glPathCoordsNV, (GLuint path, GLsizei numCoords, GLenum coordType, const void * coords), (path, numCoords, coordType, coords))
GEN_THUNKS(gl, glPathCoverDepthFuncNV, (GLenum func), (func))
GEN_THUNKS(gl, glPathDashArrayNV, (GLuint path, GLsizei dashCount, const GLfloat * dashArray), (path, dashCount, dashArray))
GEN_THUNKS(gl, glPathFogGenNV, (GLenum genMode), (genMode))
GEN_THUNKS_RET(gl, GLenum, glPathGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale), (firstPathName, fontTarget, fontName, fontStyle, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale))
GEN_THUNKS_RET(gl, GLenum, glPathGlyphIndexRangeNV, (GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint pathParameterTemplate, GLfloat emScale, GLuint baseAndCount), (fontTarget, fontName, fontStyle, pathParameterTemplate, emScale, baseAndCount))
GEN_THUNKS(gl, glPathGlyphRangeNV, (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale), (firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale))
GEN_THUNKS(gl, glPathGlyphsNV, (GLuint firstPathName, GLenum fontTarget, const void * fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void * charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale), (firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale))
GEN_THUNKS_RET(gl, GLenum, glPathMemoryGlyphIndexArrayNV, (GLuint firstPathName, GLenum fontTarget, GLsizeiptr fontSize, const void * fontData, GLsizei faceIndex, GLuint firstGlyphIndex, GLsizei numGlyphs, GLuint pathParameterTemplate, GLfloat emScale), (firstPathName, fontTarget, fontSize, fontData, faceIndex, firstGlyphIndex, numGlyphs, pathParameterTemplate, emScale))
GEN_THUNKS(gl, glPathParameterfNV, (GLuint path, GLenum pname, GLfloat value), (path, pname, value))
GEN_THUNKS(gl, glPathParameterfvNV, (GLuint path, GLenum pname, const GLfloat * value), (path, pname, value))
GEN_THUNKS(gl, glPathParameteriNV, (GLuint path, GLenum pname, GLint value), (path, pname, value))
GEN_THUNKS(gl, glPathParameterivNV, (GLuint path, GLenum pname, const GLint * value), (path, pname, value))
GEN_THUNKS(gl, glPathStencilDepthOffsetNV, (GLfloat factor, GLfloat units), (factor, units))
GEN_THUNKS(gl, glPathStencilFuncNV, (GLenum func, GLint ref, GLuint mask), (func, ref, mask))
GEN_THUNKS(gl, glPathStringNV, (GLuint path, GLenum format, GLsizei length, const void * pathString), (path, format, length, pathString))
GEN_THUNKS(gl, glPathSubCommandsNV, (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte * commands, GLsizei numCoords, GLenum coordType, const void * coords), (path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords))
GEN_THUNKS(gl, glPathSubCoordsNV, (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void * coords), (path, coordStart, numCoords, coordType, coords))
GEN_THUNKS(gl, glPathTexGenNV, (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat * coeffs), (texCoordSet, genMode, components, coeffs))
GEN_THUNKS(gl, glPauseTransformFeedback, (void), ())
GEN_THUNKS(gl, glPauseTransformFeedbackNV, (void), ())
GEN_THUNKS(gl, glPixelDataRangeNV, (GLenum target, GLsizei length, const void * pointer), (target, length, pointer))
GEN_THUNKS(gl, glPixelMapfv, (GLenum map, GLsizei mapsize, const GLfloat * values), (map, mapsize, values))
GEN_THUNKS(gl, glPixelMapuiv, (GLenum map, GLsizei mapsize, const GLuint * values), (map, mapsize, values))
GEN_THUNKS(gl, glPixelMapusv, (GLenum map, GLsizei mapsize, const GLushort * values), (map, mapsize, values))
GEN_THUNKS(gl, glPixelMapx, (GLenum map, GLint size, const GLfixed * values), (map, size, values))
GEN_THUNKS(gl, glPixelStoref, (GLenum pname, GLfloat param), (pname, param))
GEN_THUNKS(gl, glPixelStorei, (GLenum pname, GLint param), (pname, param))
GEN_THUNKS(gl, glPixelStorex, (GLenum pname, GLfixed param), (pname, param))
GEN_THUNKS(gl, glPixelTexGenParameterfSGIS, (GLenum pname, GLfloat param), (pname, param))
GEN_THUNKS(gl, glPixelTexGenParameterfvSGIS, (GLenum pname, const GLfloat * params), (pname, params))
GEN_THUNKS(gl, glPixelTexGenParameteriSGIS, (GLenum pname, GLint param), (pname, param))
GEN_THUNKS(gl, glPixelTexGenParameterivSGIS, (GLenum pname, const GLint * params), (pname, params))
GEN_THUNKS(gl, glPixelTexGenSGIX, (GLenum mode), (mode))
GEN_THUNKS(gl, glPixelTransferf, (GLenum pname, GLfloat param), (pname, param))
GEN_THUNKS(gl, glPixelTransferi, (GLenum pname, GLint param), (pname, param))
GEN_THUNKS(gl, glPixelTransferxOES, (GLenum pname, GLfixed param), (pname, param))
GEN_THUNKS(gl, glPixelTransformParameterfEXT, (GLenum target, GLenum pname, GLfloat param), (target, pname, param))
GEN_THUNKS(gl, glPixelTransformParameterfvEXT, (GLenum target, GLenum pname, const GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glPixelTransformParameteriEXT, (GLenum target, GLenum pname, GLint param), (target, pname, param))
GEN_THUNKS(gl, glPixelTransformParameterivEXT, (GLenum target, GLenum pname, const GLint * params), (target, pname, params))
GEN_THUNKS(gl, glPixelZoom, (GLfloat xfactor, GLfloat yfactor), (xfactor, yfactor))
GEN_THUNKS(gl, glPixelZoomxOES, (GLfixed xfactor, GLfixed yfactor), (xfactor, yfactor))
GEN_THUNKS_RET(gl, GLboolean, glPointAlongPathNV, (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY), (path, startSegment, numSegments, distance, x, y, tangentX, tangentY))
GEN_THUNKS(gl, glPointParameterf, (GLenum pname, GLfloat param), (pname, param))
GEN_THUNKS(gl, glPointParameterfARB, (GLenum pname, GLfloat param), (pname, param))
GEN_THUNKS(gl, glPointParameterfEXT, (GLenum pname, GLfloat param), (pname, param))
GEN_THUNKS(gl, glPointParameterfSGIS, (GLenum pname, GLfloat param), (pname, param))
GEN_THUNKS(gl, glPointParameterfv, (GLenum pname, const GLfloat * params), (pname, params))
GEN_THUNKS(gl, glPointParameterfvARB, (GLenum pname, const GLfloat * params), (pname, params))
GEN_THUNKS(gl, glPointParameterfvEXT, (GLenum pname, const GLfloat * params), (pname, params))
GEN_THUNKS(gl, glPointParameterfvSGIS, (GLenum pname, const GLfloat * params), (pname, params))
GEN_THUNKS(gl, glPointParameteri, (GLenum pname, GLint param), (pname, param))
GEN_THUNKS(gl, glPointParameteriNV, (GLenum pname, GLint param), (pname, param))
GEN_THUNKS(gl, glPointParameteriv, (GLenum pname, const GLint * params), (pname, params))
GEN_THUNKS(gl, glPointParameterivNV, (GLenum pname, const GLint * params), (pname, params))
GEN_THUNKS(gl, glPointParameterx, (GLenum pname, GLfixed param), (pname, param))
GEN_THUNKS(gl, glPointParameterxOES, (GLenum pname, GLfixed param), (pname, param))
GEN_THUNKS(gl, glPointParameterxv, (GLenum pname, const GLfixed * params), (pname, params))
GEN_THUNKS(gl, glPointParameterxvOES, (GLenum pname, const GLfixed * params), (pname, params))
GEN_THUNKS(gl, glPointSize, (GLfloat size), (size))
GEN_THUNKS(gl, glPointSizePointerOES, (GLenum type, GLsizei stride, const void * pointer), (type, stride, pointer))
GEN_THUNKS(gl, glPointSizex, (GLfixed size), (size))
GEN_THUNKS(gl, glPointSizexOES, (GLfixed size), (size))
GEN_THUNKS_RET(gl, GLint, glPollAsyncSGIX, (GLuint * markerp), (markerp))
GEN_THUNKS_RET(gl, GLint, glPollInstrumentsSGIX, (GLint * marker_p), (marker_p))
GEN_THUNKS(gl, glPolygonMode, (GLenum face, GLenum mode), (face, mode))
GEN_THUNKS(gl, glPolygonModeNV, (GLenum face, GLenum mode), (face, mode))
GEN_THUNKS(gl, glPolygonOffset, (GLfloat factor, GLfloat units), (factor, units))
GEN_THUNKS(gl, glPolygonOffsetClampEXT, (GLfloat factor, GLfloat units, GLfloat clamp), (factor, units, clamp))
GEN_THUNKS(gl, glPolygonOffsetEXT, (GLfloat factor, GLfloat bias), (factor, bias))
GEN_THUNKS(gl, glPolygonOffsetx, (GLfixed factor, GLfixed units), (factor, units))
GEN_THUNKS(gl, glPolygonOffsetxOES, (GLfixed factor, GLfixed units), (factor, units))
GEN_THUNKS(gl, glPolygonStipple, (const GLubyte * mask), (mask))
GEN_THUNKS(gl, glPopAttrib, (void), ())
GEN_THUNKS(gl, glPopClientAttrib, (void), ())
GEN_THUNKS(gl, glPopDebugGroup, (void), ())
GEN_THUNKS(gl, glPopDebugGroupKHR, (void), ())
GEN_THUNKS(gl, glPopGroupMarkerEXT, (void), ())
GEN_THUNKS(gl, glPopMatrix, (void), ())
GEN_THUNKS(gl, glPopName, (void), ())
GEN_THUNKS(gl, glPresentFrameDualFillNV, (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3), (video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3))
GEN_THUNKS(gl, glPresentFrameKeyedNV, (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1), (video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1))
GEN_THUNKS(gl, glPrimitiveBoundingBox, (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW), (minX, minY, minZ, minW, maxX, maxY, maxZ, maxW))
GEN_THUNKS(gl, glPrimitiveBoundingBoxARB, (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW), (minX, minY, minZ, minW, maxX, maxY, maxZ, maxW))
GEN_THUNKS(gl, glPrimitiveBoundingBoxEXT, (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW), (minX, minY, minZ, minW, maxX, maxY, maxZ, maxW))
GEN_THUNKS(gl, glPrimitiveBoundingBoxOES, (GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW), (minX, minY, minZ, minW, maxX, maxY, maxZ, maxW))
GEN_THUNKS(gl, glPrimitiveRestartIndex, (GLuint index), (index))
GEN_THUNKS(gl, glPrimitiveRestartIndexNV, (GLuint index), (index))
GEN_THUNKS(gl, glPrimitiveRestartNV, (void), ())
GEN_THUNKS(gl, glPrioritizeTextures, (GLsizei n, const GLuint * textures, const GLfloat * priorities), (n, textures, priorities))
GEN_THUNKS(gl, glPrioritizeTexturesEXT, (GLsizei n, const GLuint * textures, const GLclampf * priorities), (n, textures, priorities))
GEN_THUNKS(gl, glPrioritizeTexturesxOES, (GLsizei n, const GLuint * textures, const GLfixed * priorities), (n, textures, priorities))
GEN_THUNKS(gl, glProgramBinary, (GLuint program, GLenum binaryFormat, const void * binary, GLsizei length), (program, binaryFormat, binary, length))
GEN_THUNKS(gl, glProgramBinaryOES, (GLuint program, GLenum binaryFormat, const void * binary, GLint length), (program, binaryFormat, binary, length))
GEN_THUNKS(gl, glProgramBufferParametersIivNV, (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint * params), (target, bindingIndex, wordIndex, count, params))
GEN_THUNKS(gl, glProgramBufferParametersIuivNV, (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint * params), (target, bindingIndex, wordIndex, count, params))
GEN_THUNKS(gl, glProgramBufferParametersfvNV, (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat * params), (target, bindingIndex, wordIndex, count, params))
GEN_THUNKS(gl, glProgramEnvParameter4dARB, (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w), (target, index, x, y, z, w))
GEN_THUNKS(gl, glProgramEnvParameter4dvARB, (GLenum target, GLuint index, const GLdouble * params), (target, index, params))
GEN_THUNKS(gl, glProgramEnvParameter4fARB, (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w), (target, index, x, y, z, w))
GEN_THUNKS(gl, glProgramEnvParameter4fvARB, (GLenum target, GLuint index, const GLfloat * params), (target, index, params))
GEN_THUNKS(gl, glProgramEnvParameterI4iNV, (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w), (target, index, x, y, z, w))
GEN_THUNKS(gl, glProgramEnvParameterI4ivNV, (GLenum target, GLuint index, const GLint * params), (target, index, params))
GEN_THUNKS(gl, glProgramEnvParameterI4uiNV, (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w), (target, index, x, y, z, w))
GEN_THUNKS(gl, glProgramEnvParameterI4uivNV, (GLenum target, GLuint index, const GLuint * params), (target, index, params))
GEN_THUNKS(gl, glProgramEnvParameters4fvEXT, (GLenum target, GLuint index, GLsizei count, const GLfloat * params), (target, index, count, params))
GEN_THUNKS(gl, glProgramEnvParametersI4ivNV, (GLenum target, GLuint index, GLsizei count, const GLint * params), (target, index, count, params))
GEN_THUNKS(gl, glProgramEnvParametersI4uivNV, (GLenum target, GLuint index, GLsizei count, const GLuint * params), (target, index, count, params))
GEN_THUNKS(gl, glProgramLocalParameter4dARB, (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w), (target, index, x, y, z, w))
GEN_THUNKS(gl, glProgramLocalParameter4dvARB, (GLenum target, GLuint index, const GLdouble * params), (target, index, params))
GEN_THUNKS(gl, glProgramLocalParameter4fARB, (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w), (target, index, x, y, z, w))
GEN_THUNKS(gl, glProgramLocalParameter4fvARB, (GLenum target, GLuint index, const GLfloat * params), (target, index, params))
GEN_THUNKS(gl, glProgramLocalParameterI4iNV, (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w), (target, index, x, y, z, w))
GEN_THUNKS(gl, glProgramLocalParameterI4ivNV, (GLenum target, GLuint index, const GLint * params), (target, index, params))
GEN_THUNKS(gl, glProgramLocalParameterI4uiNV, (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w), (target, index, x, y, z, w))
GEN_THUNKS(gl, glProgramLocalParameterI4uivNV, (GLenum target, GLuint index, const GLuint * params), (target, index, params))
GEN_THUNKS(gl, glProgramLocalParameters4fvEXT, (GLenum target, GLuint index, GLsizei count, const GLfloat * params), (target, index, count, params))
GEN_THUNKS(gl, glProgramLocalParametersI4ivNV, (GLenum target, GLuint index, GLsizei count, const GLint * params), (target, index, count, params))
GEN_THUNKS(gl, glProgramLocalParametersI4uivNV, (GLenum target, GLuint index, GLsizei count, const GLuint * params), (target, index, count, params))
GEN_THUNKS(gl, glProgramNamedParameter4dNV, (GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w), (id, len, name, x, y, z, w))
GEN_THUNKS(gl, glProgramNamedParameter4dvNV, (GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v), (id, len, name, v))
GEN_THUNKS(gl, glProgramNamedParameter4fNV, (GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w), (id, len, name, x, y, z, w))
GEN_THUNKS(gl, glProgramNamedParameter4fvNV, (GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v), (id, len, name, v))
GEN_THUNKS(gl, glProgramParameter4dNV, (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w), (target, index, x, y, z, w))
GEN_THUNKS(gl, glProgramParameter4dvNV, (GLenum target, GLuint index, const GLdouble * v), (target, index, v))
GEN_THUNKS(gl, glProgramParameter4fNV, (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w), (target, index, x, y, z, w))
GEN_THUNKS(gl, glProgramParameter4fvNV, (GLenum target, GLuint index, const GLfloat * v), (target, index, v))
GEN_THUNKS(gl, glProgramParameteri, (GLuint program, GLenum pname, GLint value), (program, pname, value))
GEN_THUNKS(gl, glProgramParameteriARB, (GLuint program, GLenum pname, GLint value), (program, pname, value))
GEN_THUNKS(gl, glProgramParameteriEXT, (GLuint program, GLenum pname, GLint value), (program, pname, value))
GEN_THUNKS(gl, glProgramParameters4dvNV, (GLenum target, GLuint index, GLsizei count, const GLdouble * v), (target, index, count, v))
GEN_THUNKS(gl, glProgramParameters4fvNV, (GLenum target, GLuint index, GLsizei count, const GLfloat * v), (target, index, count, v))
GEN_THUNKS(gl, glProgramPathFragmentInputGenNV, (GLuint program, GLint location, GLenum genMode, GLint components, const GLfloat * coeffs), (program, location, genMode, components, coeffs))
GEN_THUNKS(gl, glProgramStringARB, (GLenum target, GLenum format, GLsizei len, const void * string), (target, format, len, string))
GEN_THUNKS(gl, glProgramSubroutineParametersuivNV, (GLenum target, GLsizei count, const GLuint * params), (target, count, params))
GEN_THUNKS(gl, glProgramUniform1d, (GLuint program, GLint location, GLdouble v0), (program, location, v0))
GEN_THUNKS(gl, glProgramUniform1dEXT, (GLuint program, GLint location, GLdouble x), (program, location, x))
GEN_THUNKS(gl, glProgramUniform1dv, (GLuint program, GLint location, GLsizei count, const GLdouble * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform1dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform1f, (GLuint program, GLint location, GLfloat v0), (program, location, v0))
GEN_THUNKS(gl, glProgramUniform1fEXT, (GLuint program, GLint location, GLfloat v0), (program, location, v0))
GEN_THUNKS(gl, glProgramUniform1fv, (GLuint program, GLint location, GLsizei count, const GLfloat * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform1fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform1i, (GLuint program, GLint location, GLint v0), (program, location, v0))
GEN_THUNKS(gl, glProgramUniform1i64ARB, (GLuint program, GLint location, GLint64 x), (program, location, x))
GEN_THUNKS(gl, glProgramUniform1i64NV, (GLuint program, GLint location, GLint64EXT x), (program, location, x))
GEN_THUNKS(gl, glProgramUniform1i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform1i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform1iEXT, (GLuint program, GLint location, GLint v0), (program, location, v0))
GEN_THUNKS(gl, glProgramUniform1iv, (GLuint program, GLint location, GLsizei count, const GLint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform1ivEXT, (GLuint program, GLint location, GLsizei count, const GLint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform1ui, (GLuint program, GLint location, GLuint v0), (program, location, v0))
GEN_THUNKS(gl, glProgramUniform1ui64ARB, (GLuint program, GLint location, GLuint64 x), (program, location, x))
GEN_THUNKS(gl, glProgramUniform1ui64NV, (GLuint program, GLint location, GLuint64EXT x), (program, location, x))
GEN_THUNKS(gl, glProgramUniform1ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform1ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform1uiEXT, (GLuint program, GLint location, GLuint v0), (program, location, v0))
GEN_THUNKS(gl, glProgramUniform1uiv, (GLuint program, GLint location, GLsizei count, const GLuint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform1uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform2d, (GLuint program, GLint location, GLdouble v0, GLdouble v1), (program, location, v0, v1))
GEN_THUNKS(gl, glProgramUniform2dEXT, (GLuint program, GLint location, GLdouble x, GLdouble y), (program, location, x, y))
GEN_THUNKS(gl, glProgramUniform2dv, (GLuint program, GLint location, GLsizei count, const GLdouble * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform2dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform2f, (GLuint program, GLint location, GLfloat v0, GLfloat v1), (program, location, v0, v1))
GEN_THUNKS(gl, glProgramUniform2fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1), (program, location, v0, v1))
GEN_THUNKS(gl, glProgramUniform2fv, (GLuint program, GLint location, GLsizei count, const GLfloat * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform2fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform2i, (GLuint program, GLint location, GLint v0, GLint v1), (program, location, v0, v1))
GEN_THUNKS(gl, glProgramUniform2i64ARB, (GLuint program, GLint location, GLint64 x, GLint64 y), (program, location, x, y))
GEN_THUNKS(gl, glProgramUniform2i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y), (program, location, x, y))
GEN_THUNKS(gl, glProgramUniform2i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform2i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform2iEXT, (GLuint program, GLint location, GLint v0, GLint v1), (program, location, v0, v1))
GEN_THUNKS(gl, glProgramUniform2iv, (GLuint program, GLint location, GLsizei count, const GLint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform2ivEXT, (GLuint program, GLint location, GLsizei count, const GLint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform2ui, (GLuint program, GLint location, GLuint v0, GLuint v1), (program, location, v0, v1))
GEN_THUNKS(gl, glProgramUniform2ui64ARB, (GLuint program, GLint location, GLuint64 x, GLuint64 y), (program, location, x, y))
GEN_THUNKS(gl, glProgramUniform2ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y), (program, location, x, y))
GEN_THUNKS(gl, glProgramUniform2ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform2ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform2uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1), (program, location, v0, v1))
GEN_THUNKS(gl, glProgramUniform2uiv, (GLuint program, GLint location, GLsizei count, const GLuint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform2uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform3d, (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2), (program, location, v0, v1, v2))
GEN_THUNKS(gl, glProgramUniform3dEXT, (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z), (program, location, x, y, z))
GEN_THUNKS(gl, glProgramUniform3dv, (GLuint program, GLint location, GLsizei count, const GLdouble * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform3dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform3f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2), (program, location, v0, v1, v2))
GEN_THUNKS(gl, glProgramUniform3fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2), (program, location, v0, v1, v2))
GEN_THUNKS(gl, glProgramUniform3fv, (GLuint program, GLint location, GLsizei count, const GLfloat * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform3fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform3i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2), (program, location, v0, v1, v2))
GEN_THUNKS(gl, glProgramUniform3i64ARB, (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z), (program, location, x, y, z))
GEN_THUNKS(gl, glProgramUniform3i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z), (program, location, x, y, z))
GEN_THUNKS(gl, glProgramUniform3i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform3i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform3iEXT, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2), (program, location, v0, v1, v2))
GEN_THUNKS(gl, glProgramUniform3iv, (GLuint program, GLint location, GLsizei count, const GLint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform3ivEXT, (GLuint program, GLint location, GLsizei count, const GLint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform3ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2), (program, location, v0, v1, v2))
GEN_THUNKS(gl, glProgramUniform3ui64ARB, (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z), (program, location, x, y, z))
GEN_THUNKS(gl, glProgramUniform3ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z), (program, location, x, y, z))
GEN_THUNKS(gl, glProgramUniform3ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform3ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform3uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2), (program, location, v0, v1, v2))
GEN_THUNKS(gl, glProgramUniform3uiv, (GLuint program, GLint location, GLsizei count, const GLuint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform3uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform4d, (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3), (program, location, v0, v1, v2, v3))
GEN_THUNKS(gl, glProgramUniform4dEXT, (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w), (program, location, x, y, z, w))
GEN_THUNKS(gl, glProgramUniform4dv, (GLuint program, GLint location, GLsizei count, const GLdouble * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform4dvEXT, (GLuint program, GLint location, GLsizei count, const GLdouble * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform4f, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3), (program, location, v0, v1, v2, v3))
GEN_THUNKS(gl, glProgramUniform4fEXT, (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3), (program, location, v0, v1, v2, v3))
GEN_THUNKS(gl, glProgramUniform4fv, (GLuint program, GLint location, GLsizei count, const GLfloat * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform4fvEXT, (GLuint program, GLint location, GLsizei count, const GLfloat * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform4i, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3), (program, location, v0, v1, v2, v3))
GEN_THUNKS(gl, glProgramUniform4i64ARB, (GLuint program, GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w), (program, location, x, y, z, w))
GEN_THUNKS(gl, glProgramUniform4i64NV, (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w), (program, location, x, y, z, w))
GEN_THUNKS(gl, glProgramUniform4i64vARB, (GLuint program, GLint location, GLsizei count, const GLint64 * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform4i64vNV, (GLuint program, GLint location, GLsizei count, const GLint64EXT * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform4iEXT, (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3), (program, location, v0, v1, v2, v3))
GEN_THUNKS(gl, glProgramUniform4iv, (GLuint program, GLint location, GLsizei count, const GLint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform4ivEXT, (GLuint program, GLint location, GLsizei count, const GLint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform4ui, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3), (program, location, v0, v1, v2, v3))
GEN_THUNKS(gl, glProgramUniform4ui64ARB, (GLuint program, GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w), (program, location, x, y, z, w))
GEN_THUNKS(gl, glProgramUniform4ui64NV, (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w), (program, location, x, y, z, w))
GEN_THUNKS(gl, glProgramUniform4ui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform4ui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform4uiEXT, (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3), (program, location, v0, v1, v2, v3))
GEN_THUNKS(gl, glProgramUniform4uiv, (GLuint program, GLint location, GLsizei count, const GLuint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniform4uivEXT, (GLuint program, GLint location, GLsizei count, const GLuint * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramUniformHandleui64ARB, (GLuint program, GLint location, GLuint64 value), (program, location, value))
GEN_THUNKS(gl, glProgramUniformHandleui64NV, (GLuint program, GLint location, GLuint64 value), (program, location, value))
GEN_THUNKS(gl, glProgramUniformHandleui64vARB, (GLuint program, GLint location, GLsizei count, const GLuint64 * values), (program, location, count, values))
GEN_THUNKS(gl, glProgramUniformHandleui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64 * values), (program, location, count, values))
GEN_THUNKS(gl, glProgramUniformMatrix2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix2dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix2x3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix2x3dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix2x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix2x3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix2x4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix2x4dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix2x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix2x4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix3dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix3x2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix3x2dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix3x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix3x2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix3x4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix3x4dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix3x4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix3x4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix4dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix4dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix4fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix4fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix4x2dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix4x2dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix4x2fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix4x2fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix4x3dv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix4x3dvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix4x3fv, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformMatrix4x3fvEXT, (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (program, location, count, transpose, value))
GEN_THUNKS(gl, glProgramUniformui64NV, (GLuint program, GLint location, GLuint64EXT value), (program, location, value))
GEN_THUNKS(gl, glProgramUniformui64vNV, (GLuint program, GLint location, GLsizei count, const GLuint64EXT * value), (program, location, count, value))
GEN_THUNKS(gl, glProgramVertexLimitNV, (GLenum target, GLint limit), (target, limit))
GEN_THUNKS(gl, glProvokingVertex, (GLenum mode), (mode))
GEN_THUNKS(gl, glProvokingVertexEXT, (GLenum mode), (mode))
GEN_THUNKS(gl, glPushAttrib, (GLbitfield mask), (mask))
GEN_THUNKS(gl, glPushClientAttrib, (GLbitfield mask), (mask))
GEN_THUNKS(gl, glPushClientAttribDefaultEXT, (GLbitfield mask), (mask))
GEN_THUNKS(gl, glPushDebugGroup, (GLenum source, GLuint id, GLsizei length, const GLchar * message), (source, id, length, message))
GEN_THUNKS(gl, glPushDebugGroupKHR, (GLenum source, GLuint id, GLsizei length, const GLchar * message), (source, id, length, message))
GEN_THUNKS(gl, glPushGroupMarkerEXT, (GLsizei length, const GLchar * marker), (length, marker))
GEN_THUNKS(gl, glPushMatrix, (void), ())
GEN_THUNKS(gl, glPushName, (GLuint name), (name))
GEN_THUNKS(gl, glQueryCounter, (GLuint id, GLenum target), (id, target))
GEN_THUNKS(gl, glQueryCounterEXT, (GLuint id, GLenum target), (id, target))
GEN_THUNKS_RET(gl, GLbitfield, glQueryMatrixxOES, (GLfixed * mantissa, GLint * exponent), (mantissa, exponent))
GEN_THUNKS(gl, glQueryObjectParameteruiAMD, (GLenum target, GLuint id, GLenum pname, GLuint param), (target, id, pname, param))
GEN_THUNKS(gl, glRasterPos2d, (GLdouble x, GLdouble y), (x, y))
GEN_THUNKS(gl, glRasterPos2dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glRasterPos2f, (GLfloat x, GLfloat y), (x, y))
GEN_THUNKS(gl, glRasterPos2fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glRasterPos2i, (GLint x, GLint y), (x, y))
GEN_THUNKS(gl, glRasterPos2iv, (const GLint * v), (v))
GEN_THUNKS(gl, glRasterPos2s, (GLshort x, GLshort y), (x, y))
GEN_THUNKS(gl, glRasterPos2sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glRasterPos2xOES, (GLfixed x, GLfixed y), (x, y))
GEN_THUNKS(gl, glRasterPos2xvOES, (const GLfixed * coords), (coords))
GEN_THUNKS(gl, glRasterPos3d, (GLdouble x, GLdouble y, GLdouble z), (x, y, z))
GEN_THUNKS(gl, glRasterPos3dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glRasterPos3f, (GLfloat x, GLfloat y, GLfloat z), (x, y, z))
GEN_THUNKS(gl, glRasterPos3fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glRasterPos3i, (GLint x, GLint y, GLint z), (x, y, z))
GEN_THUNKS(gl, glRasterPos3iv, (const GLint * v), (v))
GEN_THUNKS(gl, glRasterPos3s, (GLshort x, GLshort y, GLshort z), (x, y, z))
GEN_THUNKS(gl, glRasterPos3sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glRasterPos3xOES, (GLfixed x, GLfixed y, GLfixed z), (x, y, z))
GEN_THUNKS(gl, glRasterPos3xvOES, (const GLfixed * coords), (coords))
GEN_THUNKS(gl, glRasterPos4d, (GLdouble x, GLdouble y, GLdouble z, GLdouble w), (x, y, z, w))
GEN_THUNKS(gl, glRasterPos4dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glRasterPos4f, (GLfloat x, GLfloat y, GLfloat z, GLfloat w), (x, y, z, w))
GEN_THUNKS(gl, glRasterPos4fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glRasterPos4i, (GLint x, GLint y, GLint z, GLint w), (x, y, z, w))
GEN_THUNKS(gl, glRasterPos4iv, (const GLint * v), (v))
GEN_THUNKS(gl, glRasterPos4s, (GLshort x, GLshort y, GLshort z, GLshort w), (x, y, z, w))
GEN_THUNKS(gl, glRasterPos4sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glRasterPos4xOES, (GLfixed x, GLfixed y, GLfixed z, GLfixed w), (x, y, z, w))
GEN_THUNKS(gl, glRasterPos4xvOES, (const GLfixed * coords), (coords))
GEN_THUNKS(gl, glRasterSamplesEXT, (GLuint samples, GLboolean fixedsamplelocations), (samples, fixedsamplelocations))
GEN_THUNKS(gl, glReadBuffer, (GLenum src), (src))
GEN_THUNKS(gl, glReadBufferIndexedEXT, (GLenum src, GLint index), (src, index))
GEN_THUNKS(gl, glReadBufferNV, (GLenum mode), (mode))
GEN_THUNKS(gl, glReadInstrumentsSGIX, (GLint marker), (marker))
GEN_THUNKS(gl, glReadPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels), (x, y, width, height, format, type, pixels))
GEN_THUNKS(gl, glReadnPixels, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data), (x, y, width, height, format, type, bufSize, data))
GEN_THUNKS(gl, glReadnPixelsARB, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data), (x, y, width, height, format, type, bufSize, data))
GEN_THUNKS(gl, glReadnPixelsEXT, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data), (x, y, width, height, format, type, bufSize, data))
GEN_THUNKS(gl, glReadnPixelsKHR, (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data), (x, y, width, height, format, type, bufSize, data))
GEN_THUNKS(gl, glRectd, (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2), (x1, y1, x2, y2))
GEN_THUNKS(gl, glRectdv, (const GLdouble * v1, const GLdouble * v2), (v1, v2))
GEN_THUNKS(gl, glRectf, (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2), (x1, y1, x2, y2))
GEN_THUNKS(gl, glRectfv, (const GLfloat * v1, const GLfloat * v2), (v1, v2))
GEN_THUNKS(gl, glRecti, (GLint x1, GLint y1, GLint x2, GLint y2), (x1, y1, x2, y2))
GEN_THUNKS(gl, glRectiv, (const GLint * v1, const GLint * v2), (v1, v2))
GEN_THUNKS(gl, glRects, (GLshort x1, GLshort y1, GLshort x2, GLshort y2), (x1, y1, x2, y2))
GEN_THUNKS(gl, glRectsv, (const GLshort * v1, const GLshort * v2), (v1, v2))
GEN_THUNKS(gl, glRectxOES, (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2), (x1, y1, x2, y2))
GEN_THUNKS(gl, glRectxvOES, (const GLfixed * v1, const GLfixed * v2), (v1, v2))
GEN_THUNKS(gl, glReferencePlaneSGIX, (const GLdouble * equation), (equation))
GEN_THUNKS(gl, glReleaseShaderCompiler, (void), ())
GEN_THUNKS_RET(gl, GLint, glRenderMode, (GLenum mode), (mode))
GEN_THUNKS(gl, glRenderbufferStorage, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height), (target, internalformat, width, height))
GEN_THUNKS(gl, glRenderbufferStorageEXT, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height), (target, internalformat, width, height))
GEN_THUNKS(gl, glRenderbufferStorageMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height), (target, samples, internalformat, width, height))
GEN_THUNKS(gl, glRenderbufferStorageMultisampleANGLE, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height), (target, samples, internalformat, width, height))
GEN_THUNKS(gl, glRenderbufferStorageMultisampleAPPLE, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height), (target, samples, internalformat, width, height))
GEN_THUNKS(gl, glRenderbufferStorageMultisampleCoverageNV, (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height), (target, coverageSamples, colorSamples, internalformat, width, height))
GEN_THUNKS(gl, glRenderbufferStorageMultisampleEXT, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height), (target, samples, internalformat, width, height))
GEN_THUNKS(gl, glRenderbufferStorageMultisampleIMG, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height), (target, samples, internalformat, width, height))
GEN_THUNKS(gl, glRenderbufferStorageMultisampleNV, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height), (target, samples, internalformat, width, height))
GEN_THUNKS(gl, glRenderbufferStorageOES, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height), (target, internalformat, width, height))
GEN_THUNKS(gl, glReplacementCodePointerSUN, (GLenum type, GLsizei stride, const void ** pointer), (type, stride, pointer))
GEN_THUNKS(gl, glReplacementCodeubSUN, (GLubyte code), (code))
GEN_THUNKS(gl, glReplacementCodeubvSUN, (const GLubyte * code), (code))
GEN_THUNKS(gl, glReplacementCodeuiColor3fVertex3fSUN, (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z), (rc, r, g, b, x, y, z))
GEN_THUNKS(gl, glReplacementCodeuiColor3fVertex3fvSUN, (const GLuint * rc, const GLfloat * c, const GLfloat * v), (rc, c, v))
GEN_THUNKS(gl, glReplacementCodeuiColor4fNormal3fVertex3fSUN, (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z), (rc, r, g, b, a, nx, ny, nz, x, y, z))
GEN_THUNKS(gl, glReplacementCodeuiColor4fNormal3fVertex3fvSUN, (const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v), (rc, c, n, v))
GEN_THUNKS(gl, glReplacementCodeuiColor4ubVertex3fSUN, (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z), (rc, r, g, b, a, x, y, z))
GEN_THUNKS(gl, glReplacementCodeuiColor4ubVertex3fvSUN, (const GLuint * rc, const GLubyte * c, const GLfloat * v), (rc, c, v))
GEN_THUNKS(gl, glReplacementCodeuiNormal3fVertex3fSUN, (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z), (rc, nx, ny, nz, x, y, z))
GEN_THUNKS(gl, glReplacementCodeuiNormal3fVertex3fvSUN, (const GLuint * rc, const GLfloat * n, const GLfloat * v), (rc, n, v))
GEN_THUNKS(gl, glReplacementCodeuiSUN, (GLuint code), (code))
GEN_THUNKS(gl, glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z), (rc, s, t, r, g, b, a, nx, ny, nz, x, y, z))
GEN_THUNKS(gl, glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, (const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v), (rc, tc, c, n, v))
GEN_THUNKS(gl, glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z), (rc, s, t, nx, ny, nz, x, y, z))
GEN_THUNKS(gl, glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, (const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v), (rc, tc, n, v))
GEN_THUNKS(gl, glReplacementCodeuiTexCoord2fVertex3fSUN, (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z), (rc, s, t, x, y, z))
GEN_THUNKS(gl, glReplacementCodeuiTexCoord2fVertex3fvSUN, (const GLuint * rc, const GLfloat * tc, const GLfloat * v), (rc, tc, v))
GEN_THUNKS(gl, glReplacementCodeuiVertex3fSUN, (GLuint rc, GLfloat x, GLfloat y, GLfloat z), (rc, x, y, z))
GEN_THUNKS(gl, glReplacementCodeuiVertex3fvSUN, (const GLuint * rc, const GLfloat * v), (rc, v))
GEN_THUNKS(gl, glReplacementCodeuivSUN, (const GLuint * code), (code))
GEN_THUNKS(gl, glReplacementCodeusSUN, (GLushort code), (code))
GEN_THUNKS(gl, glReplacementCodeusvSUN, (const GLushort * code), (code))
GEN_THUNKS(gl, glRequestResidentProgramsNV, (GLsizei n, const GLuint * programs), (n, programs))
GEN_THUNKS(gl, glResetHistogram, (GLenum target), (target))
GEN_THUNKS(gl, glResetHistogramEXT, (GLenum target), (target))
GEN_THUNKS(gl, glResetMinmax, (GLenum target), (target))
GEN_THUNKS(gl, glResetMinmaxEXT, (GLenum target), (target))
GEN_THUNKS(gl, glResizeBuffersMESA, (void), ())
GEN_THUNKS(gl, glResolveDepthValuesNV, (void), ())
GEN_THUNKS(gl, glResolveMultisampleFramebufferAPPLE, (void), ())
GEN_THUNKS(gl, glResumeTransformFeedback, (void), ())
GEN_THUNKS(gl, glResumeTransformFeedbackNV, (void), ())
GEN_THUNKS(gl, glRotated, (GLdouble angle, GLdouble x, GLdouble y, GLdouble z), (angle, x, y, z))
GEN_THUNKS(gl, glRotatef, (GLfloat angle, GLfloat x, GLfloat y, GLfloat z), (angle, x, y, z))
GEN_THUNKS(gl, glRotatex, (GLfixed angle, GLfixed x, GLfixed y, GLfixed z), (angle, x, y, z))
GEN_THUNKS(gl, glRotatexOES, (GLfixed angle, GLfixed x, GLfixed y, GLfixed z), (angle, x, y, z))
GEN_THUNKS(gl, glSampleCoverage, (GLfloat value, GLboolean invert), (value, invert))
GEN_THUNKS(gl, glSampleCoverageARB, (GLfloat value, GLboolean invert), (value, invert))
GEN_THUNKS(gl, glSampleCoveragex, (GLclampx value, GLboolean invert), (value, invert))
GEN_THUNKS(gl, glSampleCoveragexOES, (GLclampx value, GLboolean invert), (value, invert))
GEN_THUNKS(gl, glSampleMapATI, (GLuint dst, GLuint interp, GLenum swizzle), (dst, interp, swizzle))
GEN_THUNKS(gl, glSampleMaskEXT, (GLclampf value, GLboolean invert), (value, invert))
GEN_THUNKS(gl, glSampleMaskIndexedNV, (GLuint index, GLbitfield mask), (index, mask))
GEN_THUNKS(gl, glSampleMaskSGIS, (GLclampf value, GLboolean invert), (value, invert))
GEN_THUNKS(gl, glSampleMaski, (GLuint maskNumber, GLbitfield mask), (maskNumber, mask))
GEN_THUNKS(gl, glSamplePatternEXT, (GLenum pattern), (pattern))
GEN_THUNKS(gl, glSamplePatternSGIS, (GLenum pattern), (pattern))
GEN_THUNKS(gl, glSamplerParameterIiv, (GLuint sampler, GLenum pname, const GLint * param), (sampler, pname, param))
GEN_THUNKS(gl, glSamplerParameterIivEXT, (GLuint sampler, GLenum pname, const GLint * param), (sampler, pname, param))
GEN_THUNKS(gl, glSamplerParameterIivOES, (GLuint sampler, GLenum pname, const GLint * param), (sampler, pname, param))
GEN_THUNKS(gl, glSamplerParameterIuiv, (GLuint sampler, GLenum pname, const GLuint * param), (sampler, pname, param))
GEN_THUNKS(gl, glSamplerParameterIuivEXT, (GLuint sampler, GLenum pname, const GLuint * param), (sampler, pname, param))
GEN_THUNKS(gl, glSamplerParameterIuivOES, (GLuint sampler, GLenum pname, const GLuint * param), (sampler, pname, param))
GEN_THUNKS(gl, glSamplerParameterf, (GLuint sampler, GLenum pname, GLfloat param), (sampler, pname, param))
GEN_THUNKS(gl, glSamplerParameterfv, (GLuint sampler, GLenum pname, const GLfloat * param), (sampler, pname, param))
GEN_THUNKS(gl, glSamplerParameteri, (GLuint sampler, GLenum pname, GLint param), (sampler, pname, param))
GEN_THUNKS(gl, glSamplerParameteriv, (GLuint sampler, GLenum pname, const GLint * param), (sampler, pname, param))
GEN_THUNKS(gl, glScaled, (GLdouble x, GLdouble y, GLdouble z), (x, y, z))
GEN_THUNKS(gl, glScalef, (GLfloat x, GLfloat y, GLfloat z), (x, y, z))
GEN_THUNKS(gl, glScalex, (GLfixed x, GLfixed y, GLfixed z), (x, y, z))
GEN_THUNKS(gl, glScalexOES, (GLfixed x, GLfixed y, GLfixed z), (x, y, z))
GEN_THUNKS(gl, glScissor, (GLint x, GLint y, GLsizei width, GLsizei height), (x, y, width, height))
GEN_THUNKS(gl, glScissorArrayv, (GLuint first, GLsizei count, const GLint * v), (first, count, v))
GEN_THUNKS(gl, glScissorArrayvNV, (GLuint first, GLsizei count, const GLint * v), (first, count, v))
GEN_THUNKS(gl, glScissorIndexed, (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height), (index, left, bottom, width, height))
GEN_THUNKS(gl, glScissorIndexedNV, (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height), (index, left, bottom, width, height))
GEN_THUNKS(gl, glScissorIndexedv, (GLuint index, const GLint * v), (index, v))
GEN_THUNKS(gl, glScissorIndexedvNV, (GLuint index, const GLint * v), (index, v))
GEN_THUNKS(gl, glSecondaryColor3b, (GLbyte red, GLbyte green, GLbyte blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3bEXT, (GLbyte red, GLbyte green, GLbyte blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3bv, (const GLbyte * v), (v))
GEN_THUNKS(gl, glSecondaryColor3bvEXT, (const GLbyte * v), (v))
GEN_THUNKS(gl, glSecondaryColor3d, (GLdouble red, GLdouble green, GLdouble blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3dEXT, (GLdouble red, GLdouble green, GLdouble blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glSecondaryColor3dvEXT, (const GLdouble * v), (v))
GEN_THUNKS(gl, glSecondaryColor3f, (GLfloat red, GLfloat green, GLfloat blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3fEXT, (GLfloat red, GLfloat green, GLfloat blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glSecondaryColor3fvEXT, (const GLfloat * v), (v))
GEN_THUNKS(gl, glSecondaryColor3hNV, (GLhalfNV red, GLhalfNV green, GLhalfNV blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3hvNV, (const GLhalfNV * v), (v))
GEN_THUNKS(gl, glSecondaryColor3i, (GLint red, GLint green, GLint blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3iEXT, (GLint red, GLint green, GLint blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3iv, (const GLint * v), (v))
GEN_THUNKS(gl, glSecondaryColor3ivEXT, (const GLint * v), (v))
GEN_THUNKS(gl, glSecondaryColor3s, (GLshort red, GLshort green, GLshort blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3sEXT, (GLshort red, GLshort green, GLshort blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glSecondaryColor3svEXT, (const GLshort * v), (v))
GEN_THUNKS(gl, glSecondaryColor3ub, (GLubyte red, GLubyte green, GLubyte blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3ubEXT, (GLubyte red, GLubyte green, GLubyte blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3ubv, (const GLubyte * v), (v))
GEN_THUNKS(gl, glSecondaryColor3ubvEXT, (const GLubyte * v), (v))
GEN_THUNKS(gl, glSecondaryColor3ui, (GLuint red, GLuint green, GLuint blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3uiEXT, (GLuint red, GLuint green, GLuint blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3uiv, (const GLuint * v), (v))
GEN_THUNKS(gl, glSecondaryColor3uivEXT, (const GLuint * v), (v))
GEN_THUNKS(gl, glSecondaryColor3us, (GLushort red, GLushort green, GLushort blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3usEXT, (GLushort red, GLushort green, GLushort blue), (red, green, blue))
GEN_THUNKS(gl, glSecondaryColor3usv, (const GLushort * v), (v))
GEN_THUNKS(gl, glSecondaryColor3usvEXT, (const GLushort * v), (v))
GEN_THUNKS(gl, glSecondaryColorFormatNV, (GLint size, GLenum type, GLsizei stride), (size, type, stride))
GEN_THUNKS(gl, glSecondaryColorP3ui, (GLenum type, GLuint color), (type, color))
GEN_THUNKS(gl, glSecondaryColorP3uiv, (GLenum type, const GLuint * color), (type, color))
GEN_THUNKS(gl, glSecondaryColorPointer, (GLint size, GLenum type, GLsizei stride, const void * pointer), (size, type, stride, pointer))
GEN_THUNKS(gl, glSecondaryColorPointerEXT, (GLint size, GLenum type, GLsizei stride, const void * pointer), (size, type, stride, pointer))
GEN_THUNKS(gl, glSecondaryColorPointerListIBM, (GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride), (size, type, stride, pointer, ptrstride))
GEN_THUNKS(gl, glSelectBuffer, (GLsizei size, GLuint * buffer), (size, buffer))
GEN_THUNKS(gl, glSelectPerfMonitorCountersAMD, (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint * counterList), (monitor, enable, group, numCounters, counterList))
GEN_THUNKS(gl, glSeparableFilter2D, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column), (target, internalformat, width, height, format, type, row, column))
GEN_THUNKS(gl, glSeparableFilter2DEXT, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * row, const void * column), (target, internalformat, width, height, format, type, row, column))
GEN_THUNKS(gl, glSetFenceAPPLE, (GLuint fence), (fence))
GEN_THUNKS(gl, glSetFenceNV, (GLuint fence, GLenum condition), (fence, condition))
GEN_THUNKS(gl, glSetFragmentShaderConstantATI, (GLuint dst, const GLfloat * value), (dst, value))
GEN_THUNKS(gl, glSetInvariantEXT, (GLuint id, GLenum type, const void * addr), (id, type, addr))
GEN_THUNKS(gl, glSetLocalConstantEXT, (GLuint id, GLenum type, const void * addr), (id, type, addr))
GEN_THUNKS(gl, glSetMultisamplefvAMD, (GLenum pname, GLuint index, const GLfloat * val), (pname, index, val))
GEN_THUNKS(gl, glShadeModel, (GLenum mode), (mode))
GEN_THUNKS(gl, glShaderBinary, (GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length), (count, shaders, binaryformat, binary, length))
GEN_THUNKS(gl, glShaderOp1EXT, (GLenum op, GLuint res, GLuint arg1), (op, res, arg1))
GEN_THUNKS(gl, glShaderOp2EXT, (GLenum op, GLuint res, GLuint arg1, GLuint arg2), (op, res, arg1, arg2))
GEN_THUNKS(gl, glShaderOp3EXT, (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3), (op, res, arg1, arg2, arg3))
GEN_THUNKS(gl, glShaderSource, (GLuint shader, GLsizei count, const GLchar *const* string, const GLint * length), (shader, count, string, length))
GEN_THUNKS(gl, glShaderSourceARB, (GLhandleARB shaderObj, GLsizei count, const GLcharARB ** string, const GLint * length), ((uintptr_t)shaderObj, count, string, length))
GEN_THUNKS(gl, glShaderStorageBlockBinding, (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding), (program, storageBlockIndex, storageBlockBinding))
GEN_THUNKS(gl, glSharpenTexFuncSGIS, (GLenum target, GLsizei n, const GLfloat * points), (target, n, points))
GEN_THUNKS(gl, glSpriteParameterfSGIX, (GLenum pname, GLfloat param), (pname, param))
GEN_THUNKS(gl, glSpriteParameterfvSGIX, (GLenum pname, const GLfloat * params), (pname, params))
GEN_THUNKS(gl, glSpriteParameteriSGIX, (GLenum pname, GLint param), (pname, param))
GEN_THUNKS(gl, glSpriteParameterivSGIX, (GLenum pname, const GLint * params), (pname, params))
GEN_THUNKS(gl, glStartInstrumentsSGIX, (void), ())
GEN_THUNKS(gl, glStartTilingQCOM, (GLuint x, GLuint y, GLuint width, GLuint height, GLbitfield preserveMask), (x, y, width, height, preserveMask))
GEN_THUNKS(gl, glStateCaptureNV, (GLuint state, GLenum mode), (state, mode))
GEN_THUNKS(gl, glStencilClearTagEXT, (GLsizei stencilTagBits, GLuint stencilClearTag), (stencilTagBits, stencilClearTag))
GEN_THUNKS(gl, glStencilFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat * transformValues), (numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues))
GEN_THUNKS(gl, glStencilFillPathNV, (GLuint path, GLenum fillMode, GLuint mask), (path, fillMode, mask))
GEN_THUNKS(gl, glStencilFunc, (GLenum func, GLint ref, GLuint mask), (func, ref, mask))
GEN_THUNKS(gl, glStencilFuncSeparate, (GLenum face, GLenum func, GLint ref, GLuint mask), (face, func, ref, mask))
GEN_THUNKS(gl, glStencilFuncSeparateATI, (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask), (frontfunc, backfunc, ref, mask))
GEN_THUNKS(gl, glStencilMask, (GLuint mask), (mask))
GEN_THUNKS(gl, glStencilMaskSeparate, (GLenum face, GLuint mask), (face, mask))
GEN_THUNKS(gl, glStencilOp, (GLenum fail, GLenum zfail, GLenum zpass), (fail, zfail, zpass))
GEN_THUNKS(gl, glStencilOpSeparate, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass), (face, sfail, dpfail, dppass))
GEN_THUNKS(gl, glStencilOpSeparateATI, (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass), (face, sfail, dpfail, dppass))
GEN_THUNKS(gl, glStencilOpValueAMD, (GLenum face, GLuint value), (face, value))
GEN_THUNKS(gl, glStencilStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat * transformValues), (numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues))
GEN_THUNKS(gl, glStencilStrokePathNV, (GLuint path, GLint reference, GLuint mask), (path, reference, mask))
GEN_THUNKS(gl, glStencilThenCoverFillPathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues), (numPaths, pathNameType, paths, pathBase, fillMode, mask, coverMode, transformType, transformValues))
GEN_THUNKS(gl, glStencilThenCoverFillPathNV, (GLuint path, GLenum fillMode, GLuint mask, GLenum coverMode), (path, fillMode, mask, coverMode))
GEN_THUNKS(gl, glStencilThenCoverStrokePathInstancedNV, (GLsizei numPaths, GLenum pathNameType, const void * paths, GLuint pathBase, GLint reference, GLuint mask, GLenum coverMode, GLenum transformType, const GLfloat * transformValues), (numPaths, pathNameType, paths, pathBase, reference, mask, coverMode, transformType, transformValues))
GEN_THUNKS(gl, glStencilThenCoverStrokePathNV, (GLuint path, GLint reference, GLuint mask, GLenum coverMode), (path, reference, mask, coverMode))
GEN_THUNKS(gl, glStopInstrumentsSGIX, (GLint marker), (marker))
GEN_THUNKS(gl, glStringMarkerGREMEDY, (GLsizei len, const void * string), (len, string))
GEN_THUNKS(gl, glSubpixelPrecisionBiasNV, (GLuint xbits, GLuint ybits), (xbits, ybits))
GEN_THUNKS(gl, glSwizzleEXT, (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW), (res, in, outX, outY, outZ, outW))
GEN_THUNKS(gl, glSyncTextureINTEL, (GLuint texture), (texture))
GEN_THUNKS(gl, glTagSampleBufferSGIX, (void), ())
GEN_THUNKS(gl, glTangent3bEXT, (GLbyte tx, GLbyte ty, GLbyte tz), (tx, ty, tz))
GEN_THUNKS(gl, glTangent3bvEXT, (const GLbyte * v), (v))
GEN_THUNKS(gl, glTangent3dEXT, (GLdouble tx, GLdouble ty, GLdouble tz), (tx, ty, tz))
GEN_THUNKS(gl, glTangent3dvEXT, (const GLdouble * v), (v))
GEN_THUNKS(gl, glTangent3fEXT, (GLfloat tx, GLfloat ty, GLfloat tz), (tx, ty, tz))
GEN_THUNKS(gl, glTangent3fvEXT, (const GLfloat * v), (v))
GEN_THUNKS(gl, glTangent3iEXT, (GLint tx, GLint ty, GLint tz), (tx, ty, tz))
GEN_THUNKS(gl, glTangent3ivEXT, (const GLint * v), (v))
GEN_THUNKS(gl, glTangent3sEXT, (GLshort tx, GLshort ty, GLshort tz), (tx, ty, tz))
GEN_THUNKS(gl, glTangent3svEXT, (const GLshort * v), (v))
GEN_THUNKS(gl, glTangentPointerEXT, (GLenum type, GLsizei stride, const void * pointer), (type, stride, pointer))
GEN_THUNKS(gl, glTbufferMask3DFX, (GLuint mask), (mask))
GEN_THUNKS(gl, glTessellationFactorAMD, (GLfloat factor), (factor))
GEN_THUNKS(gl, glTessellationModeAMD, (GLenum mode), (mode))
GEN_THUNKS_RET(gl, GLboolean, glTestFenceAPPLE, (GLuint fence), (fence))
GEN_THUNKS_RET(gl, GLboolean, glTestFenceNV, (GLuint fence), (fence))
GEN_THUNKS_RET(gl, GLboolean, glTestObjectAPPLE, (GLenum object, GLuint name), (object, name))
GEN_THUNKS(gl, glTexBuffer, (GLenum target, GLenum internalformat, GLuint buffer), (target, internalformat, buffer))
GEN_THUNKS(gl, glTexBufferARB, (GLenum target, GLenum internalformat, GLuint buffer), (target, internalformat, buffer))
GEN_THUNKS(gl, glTexBufferEXT, (GLenum target, GLenum internalformat, GLuint buffer), (target, internalformat, buffer))
GEN_THUNKS(gl, glTexBufferOES, (GLenum target, GLenum internalformat, GLuint buffer), (target, internalformat, buffer))
GEN_THUNKS(gl, glTexBufferRange, (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size), (target, internalformat, buffer, offset, size))
GEN_THUNKS(gl, glTexBufferRangeEXT, (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size), (target, internalformat, buffer, offset, size))
GEN_THUNKS(gl, glTexBufferRangeOES, (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size), (target, internalformat, buffer, offset, size))
GEN_THUNKS(gl, glTexBumpParameterfvATI, (GLenum pname, const GLfloat * param), (pname, param))
GEN_THUNKS(gl, glTexBumpParameterivATI, (GLenum pname, const GLint * param), (pname, param))
GEN_THUNKS(gl, glTexCoord1bOES, (GLbyte s), (s))
GEN_THUNKS(gl, glTexCoord1bvOES, (const GLbyte * coords), (coords))
GEN_THUNKS(gl, glTexCoord1d, (GLdouble s), (s))
GEN_THUNKS(gl, glTexCoord1dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glTexCoord1f, (GLfloat s), (s))
GEN_THUNKS(gl, glTexCoord1fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glTexCoord1hNV, (GLhalfNV s), (s))
GEN_THUNKS(gl, glTexCoord1hvNV, (const GLhalfNV * v), (v))
GEN_THUNKS(gl, glTexCoord1i, (GLint s), (s))
GEN_THUNKS(gl, glTexCoord1iv, (const GLint * v), (v))
GEN_THUNKS(gl, glTexCoord1s, (GLshort s), (s))
GEN_THUNKS(gl, glTexCoord1sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glTexCoord1xOES, (GLfixed s), (s))
GEN_THUNKS(gl, glTexCoord1xvOES, (const GLfixed * coords), (coords))
GEN_THUNKS(gl, glTexCoord2bOES, (GLbyte s, GLbyte t), (s, t))
GEN_THUNKS(gl, glTexCoord2bvOES, (const GLbyte * coords), (coords))
GEN_THUNKS(gl, glTexCoord2d, (GLdouble s, GLdouble t), (s, t))
GEN_THUNKS(gl, glTexCoord2dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glTexCoord2f, (GLfloat s, GLfloat t), (s, t))
GEN_THUNKS(gl, glTexCoord2fColor3fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z), (s, t, r, g, b, x, y, z))
GEN_THUNKS(gl, glTexCoord2fColor3fVertex3fvSUN, (const GLfloat * tc, const GLfloat * c, const GLfloat * v), (tc, c, v))
GEN_THUNKS(gl, glTexCoord2fColor4fNormal3fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z), (s, t, r, g, b, a, nx, ny, nz, x, y, z))
GEN_THUNKS(gl, glTexCoord2fColor4fNormal3fVertex3fvSUN, (const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v), (tc, c, n, v))
GEN_THUNKS(gl, glTexCoord2fColor4ubVertex3fSUN, (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z), (s, t, r, g, b, a, x, y, z))
GEN_THUNKS(gl, glTexCoord2fColor4ubVertex3fvSUN, (const GLfloat * tc, const GLubyte * c, const GLfloat * v), (tc, c, v))
GEN_THUNKS(gl, glTexCoord2fNormal3fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z), (s, t, nx, ny, nz, x, y, z))
GEN_THUNKS(gl, glTexCoord2fNormal3fVertex3fvSUN, (const GLfloat * tc, const GLfloat * n, const GLfloat * v), (tc, n, v))
GEN_THUNKS(gl, glTexCoord2fVertex3fSUN, (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z), (s, t, x, y, z))
GEN_THUNKS(gl, glTexCoord2fVertex3fvSUN, (const GLfloat * tc, const GLfloat * v), (tc, v))
GEN_THUNKS(gl, glTexCoord2fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glTexCoord2hNV, (GLhalfNV s, GLhalfNV t), (s, t))
GEN_THUNKS(gl, glTexCoord2hvNV, (const GLhalfNV * v), (v))
GEN_THUNKS(gl, glTexCoord2i, (GLint s, GLint t), (s, t))
GEN_THUNKS(gl, glTexCoord2iv, (const GLint * v), (v))
GEN_THUNKS(gl, glTexCoord2s, (GLshort s, GLshort t), (s, t))
GEN_THUNKS(gl, glTexCoord2sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glTexCoord2xOES, (GLfixed s, GLfixed t), (s, t))
GEN_THUNKS(gl, glTexCoord2xvOES, (const GLfixed * coords), (coords))
GEN_THUNKS(gl, glTexCoord3bOES, (GLbyte s, GLbyte t, GLbyte r), (s, t, r))
GEN_THUNKS(gl, glTexCoord3bvOES, (const GLbyte * coords), (coords))
GEN_THUNKS(gl, glTexCoord3d, (GLdouble s, GLdouble t, GLdouble r), (s, t, r))
GEN_THUNKS(gl, glTexCoord3dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glTexCoord3f, (GLfloat s, GLfloat t, GLfloat r), (s, t, r))
GEN_THUNKS(gl, glTexCoord3fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glTexCoord3hNV, (GLhalfNV s, GLhalfNV t, GLhalfNV r), (s, t, r))
GEN_THUNKS(gl, glTexCoord3hvNV, (const GLhalfNV * v), (v))
GEN_THUNKS(gl, glTexCoord3i, (GLint s, GLint t, GLint r), (s, t, r))
GEN_THUNKS(gl, glTexCoord3iv, (const GLint * v), (v))
GEN_THUNKS(gl, glTexCoord3s, (GLshort s, GLshort t, GLshort r), (s, t, r))
GEN_THUNKS(gl, glTexCoord3sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glTexCoord3xOES, (GLfixed s, GLfixed t, GLfixed r), (s, t, r))
GEN_THUNKS(gl, glTexCoord3xvOES, (const GLfixed * coords), (coords))
GEN_THUNKS(gl, glTexCoord4bOES, (GLbyte s, GLbyte t, GLbyte r, GLbyte q), (s, t, r, q))
GEN_THUNKS(gl, glTexCoord4bvOES, (const GLbyte * coords), (coords))
GEN_THUNKS(gl, glTexCoord4d, (GLdouble s, GLdouble t, GLdouble r, GLdouble q), (s, t, r, q))
GEN_THUNKS(gl, glTexCoord4dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glTexCoord4f, (GLfloat s, GLfloat t, GLfloat r, GLfloat q), (s, t, r, q))
GEN_THUNKS(gl, glTexCoord4fColor4fNormal3fVertex4fSUN, (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w), (s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w))
GEN_THUNKS(gl, glTexCoord4fColor4fNormal3fVertex4fvSUN, (const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v), (tc, c, n, v))
GEN_THUNKS(gl, glTexCoord4fVertex4fSUN, (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w), (s, t, p, q, x, y, z, w))
GEN_THUNKS(gl, glTexCoord4fVertex4fvSUN, (const GLfloat * tc, const GLfloat * v), (tc, v))
GEN_THUNKS(gl, glTexCoord4fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glTexCoord4hNV, (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q), (s, t, r, q))
GEN_THUNKS(gl, glTexCoord4hvNV, (const GLhalfNV * v), (v))
GEN_THUNKS(gl, glTexCoord4i, (GLint s, GLint t, GLint r, GLint q), (s, t, r, q))
GEN_THUNKS(gl, glTexCoord4iv, (const GLint * v), (v))
GEN_THUNKS(gl, glTexCoord4s, (GLshort s, GLshort t, GLshort r, GLshort q), (s, t, r, q))
GEN_THUNKS(gl, glTexCoord4sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glTexCoord4xOES, (GLfixed s, GLfixed t, GLfixed r, GLfixed q), (s, t, r, q))
GEN_THUNKS(gl, glTexCoord4xvOES, (const GLfixed * coords), (coords))
GEN_THUNKS(gl, glTexCoordFormatNV, (GLint size, GLenum type, GLsizei stride), (size, type, stride))
GEN_THUNKS(gl, glTexCoordP1ui, (GLenum type, GLuint coords), (type, coords))
GEN_THUNKS(gl, glTexCoordP1uiv, (GLenum type, const GLuint * coords), (type, coords))
GEN_THUNKS(gl, glTexCoordP2ui, (GLenum type, GLuint coords), (type, coords))
GEN_THUNKS(gl, glTexCoordP2uiv, (GLenum type, const GLuint * coords), (type, coords))
GEN_THUNKS(gl, glTexCoordP3ui, (GLenum type, GLuint coords), (type, coords))
GEN_THUNKS(gl, glTexCoordP3uiv, (GLenum type, const GLuint * coords), (type, coords))
GEN_THUNKS(gl, glTexCoordP4ui, (GLenum type, GLuint coords), (type, coords))
GEN_THUNKS(gl, glTexCoordP4uiv, (GLenum type, const GLuint * coords), (type, coords))
GEN_THUNKS(gl, glTexCoordPointer, (GLint size, GLenum type, GLsizei stride, const void * pointer), (size, type, stride, pointer))
GEN_THUNKS(gl, glTexCoordPointerEXT, (GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer), (size, type, stride, count, pointer))
GEN_THUNKS(gl, glTexCoordPointerListIBM, (GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride), (size, type, stride, pointer, ptrstride))
GEN_THUNKS(gl, glTexCoordPointervINTEL, (GLint size, GLenum type, const void ** pointer), (size, type, pointer))
GEN_THUNKS(gl, glTexEnvf, (GLenum target, GLenum pname, GLfloat param), (target, pname, param))
GEN_THUNKS(gl, glTexEnvfv, (GLenum target, GLenum pname, const GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glTexEnvi, (GLenum target, GLenum pname, GLint param), (target, pname, param))
GEN_THUNKS(gl, glTexEnviv, (GLenum target, GLenum pname, const GLint * params), (target, pname, params))
GEN_THUNKS(gl, glTexEnvx, (GLenum target, GLenum pname, GLfixed param), (target, pname, param))
GEN_THUNKS(gl, glTexEnvxOES, (GLenum target, GLenum pname, GLfixed param), (target, pname, param))
GEN_THUNKS(gl, glTexEnvxv, (GLenum target, GLenum pname, const GLfixed * params), (target, pname, params))
GEN_THUNKS(gl, glTexEnvxvOES, (GLenum target, GLenum pname, const GLfixed * params), (target, pname, params))
GEN_THUNKS(gl, glTexFilterFuncSGIS, (GLenum target, GLenum filter, GLsizei n, const GLfloat * weights), (target, filter, n, weights))
GEN_THUNKS(gl, glTexGend, (GLenum coord, GLenum pname, GLdouble param), (coord, pname, param))
GEN_THUNKS(gl, glTexGendv, (GLenum coord, GLenum pname, const GLdouble * params), (coord, pname, params))
GEN_THUNKS(gl, glTexGenf, (GLenum coord, GLenum pname, GLfloat param), (coord, pname, param))
GEN_THUNKS(gl, glTexGenfOES, (GLenum coord, GLenum pname, GLfloat param), (coord, pname, param))
GEN_THUNKS(gl, glTexGenfv, (GLenum coord, GLenum pname, const GLfloat * params), (coord, pname, params))
GEN_THUNKS(gl, glTexGenfvOES, (GLenum coord, GLenum pname, const GLfloat * params), (coord, pname, params))
GEN_THUNKS(gl, glTexGeni, (GLenum coord, GLenum pname, GLint param), (coord, pname, param))
GEN_THUNKS(gl, glTexGeniOES, (GLenum coord, GLenum pname, GLint param), (coord, pname, param))
GEN_THUNKS(gl, glTexGeniv, (GLenum coord, GLenum pname, const GLint * params), (coord, pname, params))
GEN_THUNKS(gl, glTexGenivOES, (GLenum coord, GLenum pname, const GLint * params), (coord, pname, params))
GEN_THUNKS(gl, glTexGenxOES, (GLenum coord, GLenum pname, GLfixed param), (coord, pname, param))
GEN_THUNKS(gl, glTexGenxvOES, (GLenum coord, GLenum pname, const GLfixed * params), (coord, pname, params))
GEN_THUNKS(gl, glTexImage1D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels), (target, level, internalformat, width, border, format, type, pixels))
GEN_THUNKS(gl, glTexImage2D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels), (target, level, internalformat, width, height, border, format, type, pixels))
GEN_THUNKS(gl, glTexImage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations), (target, samples, internalformat, width, height, fixedsamplelocations))
GEN_THUNKS(gl, glTexImage2DMultisampleCoverageNV, (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations), (target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations))
GEN_THUNKS(gl, glTexImage3D, (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels), (target, level, internalformat, width, height, depth, border, format, type, pixels))
GEN_THUNKS(gl, glTexImage3DEXT, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels), (target, level, internalformat, width, height, depth, border, format, type, pixels))
GEN_THUNKS(gl, glTexImage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations), (target, samples, internalformat, width, height, depth, fixedsamplelocations))
GEN_THUNKS(gl, glTexImage3DMultisampleCoverageNV, (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations), (target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations))
GEN_THUNKS(gl, glTexImage3DOES, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels), (target, level, internalformat, width, height, depth, border, format, type, pixels))
GEN_THUNKS(gl, glTexImage4DSGIS, (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void * pixels), (target, level, internalformat, width, height, depth, size4d, border, format, type, pixels))
GEN_THUNKS(gl, glTexPageCommitmentARB, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit), (target, level, xoffset, yoffset, zoffset, width, height, depth, commit))
GEN_THUNKS(gl, glTexPageCommitmentEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit), (target, level, xoffset, yoffset, zoffset, width, height, depth, commit))
GEN_THUNKS(gl, glTexParameterIiv, (GLenum target, GLenum pname, const GLint * params), (target, pname, params))
GEN_THUNKS(gl, glTexParameterIivEXT, (GLenum target, GLenum pname, const GLint * params), (target, pname, params))
GEN_THUNKS(gl, glTexParameterIivOES, (GLenum target, GLenum pname, const GLint * params), (target, pname, params))
GEN_THUNKS(gl, glTexParameterIuiv, (GLenum target, GLenum pname, const GLuint * params), (target, pname, params))
GEN_THUNKS(gl, glTexParameterIuivEXT, (GLenum target, GLenum pname, const GLuint * params), (target, pname, params))
GEN_THUNKS(gl, glTexParameterIuivOES, (GLenum target, GLenum pname, const GLuint * params), (target, pname, params))
GEN_THUNKS(gl, glTexParameterf, (GLenum target, GLenum pname, GLfloat param), (target, pname, param))
GEN_THUNKS(gl, glTexParameterfv, (GLenum target, GLenum pname, const GLfloat * params), (target, pname, params))
GEN_THUNKS(gl, glTexParameteri, (GLenum target, GLenum pname, GLint param), (target, pname, param))
GEN_THUNKS(gl, glTexParameteriv, (GLenum target, GLenum pname, const GLint * params), (target, pname, params))
GEN_THUNKS(gl, glTexParameterx, (GLenum target, GLenum pname, GLfixed param), (target, pname, param))
GEN_THUNKS(gl, glTexParameterxOES, (GLenum target, GLenum pname, GLfixed param), (target, pname, param))
GEN_THUNKS(gl, glTexParameterxv, (GLenum target, GLenum pname, const GLfixed * params), (target, pname, params))
GEN_THUNKS(gl, glTexParameterxvOES, (GLenum target, GLenum pname, const GLfixed * params), (target, pname, params))
GEN_THUNKS(gl, glTexRenderbufferNV, (GLenum target, GLuint renderbuffer), (target, renderbuffer))
GEN_THUNKS(gl, glTexStorage1D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width), (target, levels, internalformat, width))
GEN_THUNKS(gl, glTexStorage1DEXT, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width), (target, levels, internalformat, width))
GEN_THUNKS(gl, glTexStorage2D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height), (target, levels, internalformat, width, height))
GEN_THUNKS(gl, glTexStorage2DEXT, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height), (target, levels, internalformat, width, height))
GEN_THUNKS(gl, glTexStorage2DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations), (target, samples, internalformat, width, height, fixedsamplelocations))
GEN_THUNKS(gl, glTexStorage3D, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth), (target, levels, internalformat, width, height, depth))
GEN_THUNKS(gl, glTexStorage3DEXT, (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth), (target, levels, internalformat, width, height, depth))
GEN_THUNKS(gl, glTexStorage3DMultisample, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations), (target, samples, internalformat, width, height, depth, fixedsamplelocations))
GEN_THUNKS(gl, glTexStorage3DMultisampleOES, (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations), (target, samples, internalformat, width, height, depth, fixedsamplelocations))
GEN_THUNKS(gl, glTexStorageSparseAMD, (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags), (target, internalFormat, width, height, depth, layers, flags))
GEN_THUNKS(gl, glTexSubImage1D, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels), (target, level, xoffset, width, format, type, pixels))
GEN_THUNKS(gl, glTexSubImage1DEXT, (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels), (target, level, xoffset, width, format, type, pixels))
GEN_THUNKS(gl, glTexSubImage2D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels), (target, level, xoffset, yoffset, width, height, format, type, pixels))
GEN_THUNKS(gl, glTexSubImage2DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels), (target, level, xoffset, yoffset, width, height, format, type, pixels))
GEN_THUNKS(gl, glTexSubImage3D, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels), (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels))
GEN_THUNKS(gl, glTexSubImage3DEXT, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels), (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels))
GEN_THUNKS(gl, glTexSubImage3DOES, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels), (target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels))
GEN_THUNKS(gl, glTexSubImage4DSGIS, (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void * pixels), (target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels))
GEN_THUNKS(gl, glTextureBarrier, (void), ())
GEN_THUNKS(gl, glTextureBarrierNV, (void), ())
GEN_THUNKS(gl, glTextureBuffer, (GLuint texture, GLenum internalformat, GLuint buffer), (texture, internalformat, buffer))
GEN_THUNKS(gl, glTextureBufferEXT, (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer), (texture, target, internalformat, buffer))
GEN_THUNKS(gl, glTextureBufferRange, (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size), (texture, internalformat, buffer, offset, size))
GEN_THUNKS(gl, glTextureBufferRangeEXT, (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size), (texture, target, internalformat, buffer, offset, size))
GEN_THUNKS(gl, glTextureColorMaskSGIS, (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha), (red, green, blue, alpha))
GEN_THUNKS(gl, glTextureImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels), (texture, target, level, internalformat, width, border, format, type, pixels))
GEN_THUNKS(gl, glTextureImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels), (texture, target, level, internalformat, width, height, border, format, type, pixels))
GEN_THUNKS(gl, glTextureImage2DMultisampleCoverageNV, (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations), (texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations))
GEN_THUNKS(gl, glTextureImage2DMultisampleNV, (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations), (texture, target, samples, internalFormat, width, height, fixedSampleLocations))
GEN_THUNKS(gl, glTextureImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void * pixels), (texture, target, level, internalformat, width, height, depth, border, format, type, pixels))
GEN_THUNKS(gl, glTextureImage3DMultisampleCoverageNV, (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations), (texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations))
GEN_THUNKS(gl, glTextureImage3DMultisampleNV, (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations), (texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations))
GEN_THUNKS(gl, glTextureLightEXT, (GLenum pname), (pname))
GEN_THUNKS(gl, glTextureMaterialEXT, (GLenum face, GLenum mode), (face, mode))
GEN_THUNKS(gl, glTextureNormalEXT, (GLenum mode), (mode))
GEN_THUNKS(gl, glTexturePageCommitmentEXT, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit), (texture, level, xoffset, yoffset, zoffset, width, height, depth, commit))
GEN_THUNKS(gl, glTextureParameterIiv, (GLuint texture, GLenum pname, const GLint * params), (texture, pname, params))
GEN_THUNKS(gl, glTextureParameterIivEXT, (GLuint texture, GLenum target, GLenum pname, const GLint * params), (texture, target, pname, params))
GEN_THUNKS(gl, glTextureParameterIuiv, (GLuint texture, GLenum pname, const GLuint * params), (texture, pname, params))
GEN_THUNKS(gl, glTextureParameterIuivEXT, (GLuint texture, GLenum target, GLenum pname, const GLuint * params), (texture, target, pname, params))
GEN_THUNKS(gl, glTextureParameterf, (GLuint texture, GLenum pname, GLfloat param), (texture, pname, param))
GEN_THUNKS(gl, glTextureParameterfEXT, (GLuint texture, GLenum target, GLenum pname, GLfloat param), (texture, target, pname, param))
GEN_THUNKS(gl, glTextureParameterfv, (GLuint texture, GLenum pname, const GLfloat * param), (texture, pname, param))
GEN_THUNKS(gl, glTextureParameterfvEXT, (GLuint texture, GLenum target, GLenum pname, const GLfloat * params), (texture, target, pname, params))
GEN_THUNKS(gl, glTextureParameteri, (GLuint texture, GLenum pname, GLint param), (texture, pname, param))
GEN_THUNKS(gl, glTextureParameteriEXT, (GLuint texture, GLenum target, GLenum pname, GLint param), (texture, target, pname, param))
GEN_THUNKS(gl, glTextureParameteriv, (GLuint texture, GLenum pname, const GLint * param), (texture, pname, param))
GEN_THUNKS(gl, glTextureParameterivEXT, (GLuint texture, GLenum target, GLenum pname, const GLint * params), (texture, target, pname, params))
GEN_THUNKS(gl, glTextureRangeAPPLE, (GLenum target, GLsizei length, const void * pointer), (target, length, pointer))
GEN_THUNKS(gl, glTextureRenderbufferEXT, (GLuint texture, GLenum target, GLuint renderbuffer), (texture, target, renderbuffer))
GEN_THUNKS(gl, glTextureStorage1D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width), (texture, levels, internalformat, width))
GEN_THUNKS(gl, glTextureStorage1DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width), (texture, target, levels, internalformat, width))
GEN_THUNKS(gl, glTextureStorage2D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height), (texture, levels, internalformat, width, height))
GEN_THUNKS(gl, glTextureStorage2DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height), (texture, target, levels, internalformat, width, height))
GEN_THUNKS(gl, glTextureStorage2DMultisample, (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations), (texture, samples, internalformat, width, height, fixedsamplelocations))
GEN_THUNKS(gl, glTextureStorage2DMultisampleEXT, (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations), (texture, target, samples, internalformat, width, height, fixedsamplelocations))
GEN_THUNKS(gl, glTextureStorage3D, (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth), (texture, levels, internalformat, width, height, depth))
GEN_THUNKS(gl, glTextureStorage3DEXT, (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth), (texture, target, levels, internalformat, width, height, depth))
GEN_THUNKS(gl, glTextureStorage3DMultisample, (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations), (texture, samples, internalformat, width, height, depth, fixedsamplelocations))
GEN_THUNKS(gl, glTextureStorage3DMultisampleEXT, (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations), (texture, target, samples, internalformat, width, height, depth, fixedsamplelocations))
GEN_THUNKS(gl, glTextureStorageSparseAMD, (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags), (texture, target, internalFormat, width, height, depth, layers, flags))
GEN_THUNKS(gl, glTextureSubImage1D, (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels), (texture, level, xoffset, width, format, type, pixels))
GEN_THUNKS(gl, glTextureSubImage1DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels), (texture, target, level, xoffset, width, format, type, pixels))
GEN_THUNKS(gl, glTextureSubImage2D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels), (texture, level, xoffset, yoffset, width, height, format, type, pixels))
GEN_THUNKS(gl, glTextureSubImage2DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels), (texture, target, level, xoffset, yoffset, width, height, format, type, pixels))
GEN_THUNKS(gl, glTextureSubImage3D, (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels), (texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels))
GEN_THUNKS(gl, glTextureSubImage3DEXT, (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels), (texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels))
GEN_THUNKS(gl, glTextureView, (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers), (texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers))
GEN_THUNKS(gl, glTextureViewEXT, (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers), (texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers))
GEN_THUNKS(gl, glTextureViewOES, (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers), (texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers))
GEN_THUNKS(gl, glTrackMatrixNV, (GLenum target, GLuint address, GLenum matrix, GLenum transform), (target, address, matrix, transform))
GEN_THUNKS(gl, glTransformFeedbackAttribsNV, (GLsizei count, const GLint * attribs, GLenum bufferMode), (count, attribs, bufferMode))
GEN_THUNKS(gl, glTransformFeedbackBufferBase, (GLuint xfb, GLuint index, GLuint buffer), (xfb, index, buffer))
GEN_THUNKS(gl, glTransformFeedbackBufferRange, (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size), (xfb, index, buffer, offset, size))
GEN_THUNKS(gl, glTransformFeedbackStreamAttribsNV, (GLsizei count, const GLint * attribs, GLsizei nbuffers, const GLint * bufstreams, GLenum bufferMode), (count, attribs, nbuffers, bufstreams, bufferMode))
GEN_THUNKS(gl, glTransformFeedbackVaryings, (GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode), (program, count, varyings, bufferMode))
GEN_THUNKS(gl, glTransformFeedbackVaryingsEXT, (GLuint program, GLsizei count, const GLchar *const* varyings, GLenum bufferMode), (program, count, varyings, bufferMode))
GEN_THUNKS(gl, glTransformFeedbackVaryingsNV, (GLuint program, GLsizei count, const GLint * locations, GLenum bufferMode), (program, count, locations, bufferMode))
GEN_THUNKS(gl, glTransformPathNV, (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat * transformValues), (resultPath, srcPath, transformType, transformValues))
GEN_THUNKS(gl, glTranslated, (GLdouble x, GLdouble y, GLdouble z), (x, y, z))
GEN_THUNKS(gl, glTranslatef, (GLfloat x, GLfloat y, GLfloat z), (x, y, z))
GEN_THUNKS(gl, glTranslatex, (GLfixed x, GLfixed y, GLfixed z), (x, y, z))
GEN_THUNKS(gl, glTranslatexOES, (GLfixed x, GLfixed y, GLfixed z), (x, y, z))
GEN_THUNKS(gl, glUniform1d, (GLint location, GLdouble x), (location, x))
GEN_THUNKS(gl, glUniform1dv, (GLint location, GLsizei count, const GLdouble * value), (location, count, value))
GEN_THUNKS(gl, glUniform1f, (GLint location, GLfloat v0), (location, v0))
GEN_THUNKS(gl, glUniform1fARB, (GLint location, GLfloat v0), (location, v0))
GEN_THUNKS(gl, glUniform1fv, (GLint location, GLsizei count, const GLfloat * value), (location, count, value))
GEN_THUNKS(gl, glUniform1fvARB, (GLint location, GLsizei count, const GLfloat * value), (location, count, value))
GEN_THUNKS(gl, glUniform1i, (GLint location, GLint v0), (location, v0))
GEN_THUNKS(gl, glUniform1i64ARB, (GLint location, GLint64 x), (location, x))
GEN_THUNKS(gl, glUniform1i64NV, (GLint location, GLint64EXT x), (location, x))
GEN_THUNKS(gl, glUniform1i64vARB, (GLint location, GLsizei count, const GLint64 * value), (location, count, value))
GEN_THUNKS(gl, glUniform1i64vNV, (GLint location, GLsizei count, const GLint64EXT * value), (location, count, value))
GEN_THUNKS(gl, glUniform1iARB, (GLint location, GLint v0), (location, v0))
GEN_THUNKS(gl, glUniform1iv, (GLint location, GLsizei count, const GLint * value), (location, count, value))
GEN_THUNKS(gl, glUniform1ivARB, (GLint location, GLsizei count, const GLint * value), (location, count, value))
GEN_THUNKS(gl, glUniform1ui, (GLint location, GLuint v0), (location, v0))
GEN_THUNKS(gl, glUniform1ui64ARB, (GLint location, GLuint64 x), (location, x))
GEN_THUNKS(gl, glUniform1ui64NV, (GLint location, GLuint64EXT x), (location, x))
GEN_THUNKS(gl, glUniform1ui64vARB, (GLint location, GLsizei count, const GLuint64 * value), (location, count, value))
GEN_THUNKS(gl, glUniform1ui64vNV, (GLint location, GLsizei count, const GLuint64EXT * value), (location, count, value))
GEN_THUNKS(gl, glUniform1uiEXT, (GLint location, GLuint v0), (location, v0))
GEN_THUNKS(gl, glUniform1uiv, (GLint location, GLsizei count, const GLuint * value), (location, count, value))
GEN_THUNKS(gl, glUniform1uivEXT, (GLint location, GLsizei count, const GLuint * value), (location, count, value))
GEN_THUNKS(gl, glUniform2d, (GLint location, GLdouble x, GLdouble y), (location, x, y))
GEN_THUNKS(gl, glUniform2dv, (GLint location, GLsizei count, const GLdouble * value), (location, count, value))
GEN_THUNKS(gl, glUniform2f, (GLint location, GLfloat v0, GLfloat v1), (location, v0, v1))
GEN_THUNKS(gl, glUniform2fARB, (GLint location, GLfloat v0, GLfloat v1), (location, v0, v1))
GEN_THUNKS(gl, glUniform2fv, (GLint location, GLsizei count, const GLfloat * value), (location, count, value))
GEN_THUNKS(gl, glUniform2fvARB, (GLint location, GLsizei count, const GLfloat * value), (location, count, value))
GEN_THUNKS(gl, glUniform2i, (GLint location, GLint v0, GLint v1), (location, v0, v1))
GEN_THUNKS(gl, glUniform2i64ARB, (GLint location, GLint64 x, GLint64 y), (location, x, y))
GEN_THUNKS(gl, glUniform2i64NV, (GLint location, GLint64EXT x, GLint64EXT y), (location, x, y))
GEN_THUNKS(gl, glUniform2i64vARB, (GLint location, GLsizei count, const GLint64 * value), (location, count, value))
GEN_THUNKS(gl, glUniform2i64vNV, (GLint location, GLsizei count, const GLint64EXT * value), (location, count, value))
GEN_THUNKS(gl, glUniform2iARB, (GLint location, GLint v0, GLint v1), (location, v0, v1))
GEN_THUNKS(gl, glUniform2iv, (GLint location, GLsizei count, const GLint * value), (location, count, value))
GEN_THUNKS(gl, glUniform2ivARB, (GLint location, GLsizei count, const GLint * value), (location, count, value))
GEN_THUNKS(gl, glUniform2ui, (GLint location, GLuint v0, GLuint v1), (location, v0, v1))
GEN_THUNKS(gl, glUniform2ui64ARB, (GLint location, GLuint64 x, GLuint64 y), (location, x, y))
GEN_THUNKS(gl, glUniform2ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y), (location, x, y))
GEN_THUNKS(gl, glUniform2ui64vARB, (GLint location, GLsizei count, const GLuint64 * value), (location, count, value))
GEN_THUNKS(gl, glUniform2ui64vNV, (GLint location, GLsizei count, const GLuint64EXT * value), (location, count, value))
GEN_THUNKS(gl, glUniform2uiEXT, (GLint location, GLuint v0, GLuint v1), (location, v0, v1))
GEN_THUNKS(gl, glUniform2uiv, (GLint location, GLsizei count, const GLuint * value), (location, count, value))
GEN_THUNKS(gl, glUniform2uivEXT, (GLint location, GLsizei count, const GLuint * value), (location, count, value))
GEN_THUNKS(gl, glUniform3d, (GLint location, GLdouble x, GLdouble y, GLdouble z), (location, x, y, z))
GEN_THUNKS(gl, glUniform3dv, (GLint location, GLsizei count, const GLdouble * value), (location, count, value))
GEN_THUNKS(gl, glUniform3f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2), (location, v0, v1, v2))
GEN_THUNKS(gl, glUniform3fARB, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2), (location, v0, v1, v2))
GEN_THUNKS(gl, glUniform3fv, (GLint location, GLsizei count, const GLfloat * value), (location, count, value))
GEN_THUNKS(gl, glUniform3fvARB, (GLint location, GLsizei count, const GLfloat * value), (location, count, value))
GEN_THUNKS(gl, glUniform3i, (GLint location, GLint v0, GLint v1, GLint v2), (location, v0, v1, v2))
GEN_THUNKS(gl, glUniform3i64ARB, (GLint location, GLint64 x, GLint64 y, GLint64 z), (location, x, y, z))
GEN_THUNKS(gl, glUniform3i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z), (location, x, y, z))
GEN_THUNKS(gl, glUniform3i64vARB, (GLint location, GLsizei count, const GLint64 * value), (location, count, value))
GEN_THUNKS(gl, glUniform3i64vNV, (GLint location, GLsizei count, const GLint64EXT * value), (location, count, value))
GEN_THUNKS(gl, glUniform3iARB, (GLint location, GLint v0, GLint v1, GLint v2), (location, v0, v1, v2))
GEN_THUNKS(gl, glUniform3iv, (GLint location, GLsizei count, const GLint * value), (location, count, value))
GEN_THUNKS(gl, glUniform3ivARB, (GLint location, GLsizei count, const GLint * value), (location, count, value))
GEN_THUNKS(gl, glUniform3ui, (GLint location, GLuint v0, GLuint v1, GLuint v2), (location, v0, v1, v2))
GEN_THUNKS(gl, glUniform3ui64ARB, (GLint location, GLuint64 x, GLuint64 y, GLuint64 z), (location, x, y, z))
GEN_THUNKS(gl, glUniform3ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z), (location, x, y, z))
GEN_THUNKS(gl, glUniform3ui64vARB, (GLint location, GLsizei count, const GLuint64 * value), (location, count, value))
GEN_THUNKS(gl, glUniform3ui64vNV, (GLint location, GLsizei count, const GLuint64EXT * value), (location, count, value))
GEN_THUNKS(gl, glUniform3uiEXT, (GLint location, GLuint v0, GLuint v1, GLuint v2), (location, v0, v1, v2))
GEN_THUNKS(gl, glUniform3uiv, (GLint location, GLsizei count, const GLuint * value), (location, count, value))
GEN_THUNKS(gl, glUniform3uivEXT, (GLint location, GLsizei count, const GLuint * value), (location, count, value))
GEN_THUNKS(gl, glUniform4d, (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w), (location, x, y, z, w))
GEN_THUNKS(gl, glUniform4dv, (GLint location, GLsizei count, const GLdouble * value), (location, count, value))
GEN_THUNKS(gl, glUniform4f, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3), (location, v0, v1, v2, v3))
GEN_THUNKS(gl, glUniform4fARB, (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3), (location, v0, v1, v2, v3))
GEN_THUNKS(gl, glUniform4fv, (GLint location, GLsizei count, const GLfloat * value), (location, count, value))
GEN_THUNKS(gl, glUniform4fvARB, (GLint location, GLsizei count, const GLfloat * value), (location, count, value))
GEN_THUNKS(gl, glUniform4i, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3), (location, v0, v1, v2, v3))
GEN_THUNKS(gl, glUniform4i64ARB, (GLint location, GLint64 x, GLint64 y, GLint64 z, GLint64 w), (location, x, y, z, w))
GEN_THUNKS(gl, glUniform4i64NV, (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w), (location, x, y, z, w))
GEN_THUNKS(gl, glUniform4i64vARB, (GLint location, GLsizei count, const GLint64 * value), (location, count, value))
GEN_THUNKS(gl, glUniform4i64vNV, (GLint location, GLsizei count, const GLint64EXT * value), (location, count, value))
GEN_THUNKS(gl, glUniform4iARB, (GLint location, GLint v0, GLint v1, GLint v2, GLint v3), (location, v0, v1, v2, v3))
GEN_THUNKS(gl, glUniform4iv, (GLint location, GLsizei count, const GLint * value), (location, count, value))
GEN_THUNKS(gl, glUniform4ivARB, (GLint location, GLsizei count, const GLint * value), (location, count, value))
GEN_THUNKS(gl, glUniform4ui, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3), (location, v0, v1, v2, v3))
GEN_THUNKS(gl, glUniform4ui64ARB, (GLint location, GLuint64 x, GLuint64 y, GLuint64 z, GLuint64 w), (location, x, y, z, w))
GEN_THUNKS(gl, glUniform4ui64NV, (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w), (location, x, y, z, w))
GEN_THUNKS(gl, glUniform4ui64vARB, (GLint location, GLsizei count, const GLuint64 * value), (location, count, value))
GEN_THUNKS(gl, glUniform4ui64vNV, (GLint location, GLsizei count, const GLuint64EXT * value), (location, count, value))
GEN_THUNKS(gl, glUniform4uiEXT, (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3), (location, v0, v1, v2, v3))
GEN_THUNKS(gl, glUniform4uiv, (GLint location, GLsizei count, const GLuint * value), (location, count, value))
GEN_THUNKS(gl, glUniform4uivEXT, (GLint location, GLsizei count, const GLuint * value), (location, count, value))
GEN_THUNKS(gl, glUniformBlockBinding, (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding), (program, uniformBlockIndex, uniformBlockBinding))
GEN_THUNKS(gl, glUniformBufferEXT, (GLuint program, GLint location, GLuint buffer), (program, location, buffer))
GEN_THUNKS(gl, glUniformHandleui64ARB, (GLint location, GLuint64 value), (location, value))
GEN_THUNKS(gl, glUniformHandleui64NV, (GLint location, GLuint64 value), (location, value))
GEN_THUNKS(gl, glUniformHandleui64vARB, (GLint location, GLsizei count, const GLuint64 * value), (location, count, value))
GEN_THUNKS(gl, glUniformHandleui64vNV, (GLint location, GLsizei count, const GLuint64 * value), (location, count, value))
GEN_THUNKS(gl, glUniformMatrix2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix2fvARB, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix2x3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix2x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix2x3fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix2x4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix2x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix2x4fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix3fvARB, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix3x2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix3x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix3x2fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix3x4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix3x4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix3x4fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix4dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix4fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix4fvARB, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix4x2dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix4x2fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix4x2fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix4x3dv, (GLint location, GLsizei count, GLboolean transpose, const GLdouble * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix4x3fv, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformMatrix4x3fvNV, (GLint location, GLsizei count, GLboolean transpose, const GLfloat * value), (location, count, transpose, value))
GEN_THUNKS(gl, glUniformSubroutinesuiv, (GLenum shadertype, GLsizei count, const GLuint * indices), (shadertype, count, indices))
GEN_THUNKS(gl, glUniformui64NV, (GLint location, GLuint64EXT value), (location, value))
GEN_THUNKS(gl, glUniformui64vNV, (GLint location, GLsizei count, const GLuint64EXT * value), (location, count, value))
GEN_THUNKS(gl, glUnlockArraysEXT, (void), ())
GEN_THUNKS_RET(gl, GLboolean, glUnmapBuffer, (GLenum target), (target))
GEN_THUNKS_RET(gl, GLboolean, glUnmapBufferARB, (GLenum target), (target))
GEN_THUNKS_RET(gl, GLboolean, glUnmapBufferOES, (GLenum target), (target))
GEN_THUNKS_RET(gl, GLboolean, glUnmapNamedBuffer, (GLuint buffer), (buffer))
GEN_THUNKS_RET(gl, GLboolean, glUnmapNamedBufferEXT, (GLuint buffer), (buffer))
GEN_THUNKS(gl, glUnmapObjectBufferATI, (GLuint buffer), (buffer))
GEN_THUNKS(gl, glUnmapTexture2DINTEL, (GLuint texture, GLint level), (texture, level))
GEN_THUNKS(gl, glUpdateObjectBufferATI, (GLuint buffer, GLuint offset, GLsizei size, const void * pointer, GLenum preserve), (buffer, offset, size, pointer, preserve))
GEN_THUNKS(gl, glUseProgram, (GLuint program), (program))
GEN_THUNKS(gl, glUseProgramObjectARB, (GLhandleARB programObj), ((uintptr_t)programObj))
GEN_THUNKS(gl, glUseProgramStages, (GLuint pipeline, GLbitfield stages, GLuint program), (pipeline, stages, program))
GEN_THUNKS(gl, glUseProgramStagesEXT, (GLuint pipeline, GLbitfield stages, GLuint program), (pipeline, stages, program))
GEN_THUNKS(gl, glUseShaderProgramEXT, (GLenum type, GLuint program), (type, program))
GEN_THUNKS(gl, glVDPAUFiniNV, (void), ())
GEN_THUNKS(gl, glVDPAUGetSurfaceivNV, (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei * length, GLint * values), (surface, pname, bufSize, length, values))
GEN_THUNKS(gl, glVDPAUInitNV, (const void * vdpDevice, const void * getProcAddress), (vdpDevice, getProcAddress))
GEN_THUNKS_RET(gl, GLboolean, glVDPAUIsSurfaceNV, (GLvdpauSurfaceNV surface), (surface))
GEN_THUNKS(gl, glVDPAUMapSurfacesNV, (GLsizei numSurfaces, const GLvdpauSurfaceNV * surfaces), (numSurfaces, surfaces))
GEN_THUNKS_RET(gl, GLvdpauSurfaceNV, glVDPAURegisterOutputSurfaceNV, (const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames), (vdpSurface, target, numTextureNames, textureNames))
GEN_THUNKS_RET(gl, GLvdpauSurfaceNV, glVDPAURegisterVideoSurfaceNV, (const void * vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint * textureNames), (vdpSurface, target, numTextureNames, textureNames))
GEN_THUNKS(gl, glVDPAUSurfaceAccessNV, (GLvdpauSurfaceNV surface, GLenum access), (surface, access))
GEN_THUNKS(gl, glVDPAUUnmapSurfacesNV, (GLsizei numSurface, const GLvdpauSurfaceNV * surfaces), (numSurface, surfaces))
GEN_THUNKS(gl, glVDPAUUnregisterSurfaceNV, (GLvdpauSurfaceNV surface), (surface))
GEN_THUNKS(gl, glValidateProgram, (GLuint program), (program))
GEN_THUNKS(gl, glValidateProgramARB, (GLhandleARB programObj), ((uintptr_t)programObj))
GEN_THUNKS(gl, glValidateProgramPipeline, (GLuint pipeline), (pipeline))
GEN_THUNKS(gl, glValidateProgramPipelineEXT, (GLuint pipeline), (pipeline))
GEN_THUNKS(gl, glVariantArrayObjectATI, (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset), (id, type, stride, buffer, offset))
GEN_THUNKS(gl, glVariantPointerEXT, (GLuint id, GLenum type, GLuint stride, const void * addr), (id, type, stride, addr))
GEN_THUNKS(gl, glVariantbvEXT, (GLuint id, const GLbyte * addr), (id, addr))
GEN_THUNKS(gl, glVariantdvEXT, (GLuint id, const GLdouble * addr), (id, addr))
GEN_THUNKS(gl, glVariantfvEXT, (GLuint id, const GLfloat * addr), (id, addr))
GEN_THUNKS(gl, glVariantivEXT, (GLuint id, const GLint * addr), (id, addr))
GEN_THUNKS(gl, glVariantsvEXT, (GLuint id, const GLshort * addr), (id, addr))
GEN_THUNKS(gl, glVariantubvEXT, (GLuint id, const GLubyte * addr), (id, addr))
GEN_THUNKS(gl, glVariantuivEXT, (GLuint id, const GLuint * addr), (id, addr))
GEN_THUNKS(gl, glVariantusvEXT, (GLuint id, const GLushort * addr), (id, addr))
GEN_THUNKS(gl, glVertex2bOES, (GLbyte x, GLbyte y), (x, y))
GEN_THUNKS(gl, glVertex2bvOES, (const GLbyte * coords), (coords))
GEN_THUNKS(gl, glVertex2d, (GLdouble x, GLdouble y), (x, y))
GEN_THUNKS(gl, glVertex2dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glVertex2f, (GLfloat x, GLfloat y), (x, y))
GEN_THUNKS(gl, glVertex2fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glVertex2hNV, (GLhalfNV x, GLhalfNV y), (x, y))
GEN_THUNKS(gl, glVertex2hvNV, (const GLhalfNV * v), (v))
GEN_THUNKS(gl, glVertex2i, (GLint x, GLint y), (x, y))
GEN_THUNKS(gl, glVertex2iv, (const GLint * v), (v))
GEN_THUNKS(gl, glVertex2s, (GLshort x, GLshort y), (x, y))
GEN_THUNKS(gl, glVertex2sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glVertex2xOES, (GLfixed x), (x))
GEN_THUNKS(gl, glVertex2xvOES, (const GLfixed * coords), (coords))
GEN_THUNKS(gl, glVertex3bOES, (GLbyte x, GLbyte y, GLbyte z), (x, y, z))
GEN_THUNKS(gl, glVertex3bvOES, (const GLbyte * coords), (coords))
GEN_THUNKS(gl, glVertex3d, (GLdouble x, GLdouble y, GLdouble z), (x, y, z))
GEN_THUNKS(gl, glVertex3dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glVertex3f, (GLfloat x, GLfloat y, GLfloat z), (x, y, z))
GEN_THUNKS(gl, glVertex3fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glVertex3hNV, (GLhalfNV x, GLhalfNV y, GLhalfNV z), (x, y, z))
GEN_THUNKS(gl, glVertex3hvNV, (const GLhalfNV * v), (v))
GEN_THUNKS(gl, glVertex3i, (GLint x, GLint y, GLint z), (x, y, z))
GEN_THUNKS(gl, glVertex3iv, (const GLint * v), (v))
GEN_THUNKS(gl, glVertex3s, (GLshort x, GLshort y, GLshort z), (x, y, z))
GEN_THUNKS(gl, glVertex3sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glVertex3xOES, (GLfixed x, GLfixed y), (x, y))
GEN_THUNKS(gl, glVertex3xvOES, (const GLfixed * coords), (coords))
GEN_THUNKS(gl, glVertex4bOES, (GLbyte x, GLbyte y, GLbyte z, GLbyte w), (x, y, z, w))
GEN_THUNKS(gl, glVertex4bvOES, (const GLbyte * coords), (coords))
GEN_THUNKS(gl, glVertex4d, (GLdouble x, GLdouble y, GLdouble z, GLdouble w), (x, y, z, w))
GEN_THUNKS(gl, glVertex4dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glVertex4f, (GLfloat x, GLfloat y, GLfloat z, GLfloat w), (x, y, z, w))
GEN_THUNKS(gl, glVertex4fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glVertex4hNV, (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w), (x, y, z, w))
GEN_THUNKS(gl, glVertex4hvNV, (const GLhalfNV * v), (v))
GEN_THUNKS(gl, glVertex4i, (GLint x, GLint y, GLint z, GLint w), (x, y, z, w))
GEN_THUNKS(gl, glVertex4iv, (const GLint * v), (v))
GEN_THUNKS(gl, glVertex4s, (GLshort x, GLshort y, GLshort z, GLshort w), (x, y, z, w))
GEN_THUNKS(gl, glVertex4sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glVertex4xOES, (GLfixed x, GLfixed y, GLfixed z), (x, y, z))
GEN_THUNKS(gl, glVertex4xvOES, (const GLfixed * coords), (coords))
GEN_THUNKS(gl, glVertexArrayAttribBinding, (GLuint vaobj, GLuint attribindex, GLuint bindingindex), (vaobj, attribindex, bindingindex))
GEN_THUNKS(gl, glVertexArrayAttribFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset), (vaobj, attribindex, size, type, normalized, relativeoffset))
GEN_THUNKS(gl, glVertexArrayAttribIFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset), (vaobj, attribindex, size, type, relativeoffset))
GEN_THUNKS(gl, glVertexArrayAttribLFormat, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset), (vaobj, attribindex, size, type, relativeoffset))
GEN_THUNKS(gl, glVertexArrayBindVertexBufferEXT, (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride), (vaobj, bindingindex, buffer, offset, stride))
GEN_THUNKS(gl, glVertexArrayBindingDivisor, (GLuint vaobj, GLuint bindingindex, GLuint divisor), (vaobj, bindingindex, divisor))
GEN_THUNKS(gl, glVertexArrayColorOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset), (vaobj, buffer, size, type, stride, offset))
GEN_THUNKS(gl, glVertexArrayEdgeFlagOffsetEXT, (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset), (vaobj, buffer, stride, offset))
GEN_THUNKS(gl, glVertexArrayElementBuffer, (GLuint vaobj, GLuint buffer), (vaobj, buffer))
GEN_THUNKS(gl, glVertexArrayFogCoordOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset), (vaobj, buffer, type, stride, offset))
GEN_THUNKS(gl, glVertexArrayIndexOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset), (vaobj, buffer, type, stride, offset))
GEN_THUNKS(gl, glVertexArrayMultiTexCoordOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset), (vaobj, buffer, texunit, size, type, stride, offset))
GEN_THUNKS(gl, glVertexArrayNormalOffsetEXT, (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset), (vaobj, buffer, type, stride, offset))
GEN_THUNKS(gl, glVertexArrayParameteriAPPLE, (GLenum pname, GLint param), (pname, param))
GEN_THUNKS(gl, glVertexArrayRangeAPPLE, (GLsizei length, void * pointer), (length, pointer))
GEN_THUNKS(gl, glVertexArrayRangeNV, (GLsizei length, const void * pointer), (length, pointer))
GEN_THUNKS(gl, glVertexArraySecondaryColorOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset), (vaobj, buffer, size, type, stride, offset))
GEN_THUNKS(gl, glVertexArrayTexCoordOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset), (vaobj, buffer, size, type, stride, offset))
GEN_THUNKS(gl, glVertexArrayVertexAttribBindingEXT, (GLuint vaobj, GLuint attribindex, GLuint bindingindex), (vaobj, attribindex, bindingindex))
GEN_THUNKS(gl, glVertexArrayVertexAttribDivisorEXT, (GLuint vaobj, GLuint index, GLuint divisor), (vaobj, index, divisor))
GEN_THUNKS(gl, glVertexArrayVertexAttribFormatEXT, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset), (vaobj, attribindex, size, type, normalized, relativeoffset))
GEN_THUNKS(gl, glVertexArrayVertexAttribIFormatEXT, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset), (vaobj, attribindex, size, type, relativeoffset))
GEN_THUNKS(gl, glVertexArrayVertexAttribIOffsetEXT, (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset), (vaobj, buffer, index, size, type, stride, offset))
GEN_THUNKS(gl, glVertexArrayVertexAttribLFormatEXT, (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset), (vaobj, attribindex, size, type, relativeoffset))
GEN_THUNKS(gl, glVertexArrayVertexAttribLOffsetEXT, (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset), (vaobj, buffer, index, size, type, stride, offset))
GEN_THUNKS(gl, glVertexArrayVertexAttribOffsetEXT, (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset), (vaobj, buffer, index, size, type, normalized, stride, offset))
GEN_THUNKS(gl, glVertexArrayVertexBindingDivisorEXT, (GLuint vaobj, GLuint bindingindex, GLuint divisor), (vaobj, bindingindex, divisor))
GEN_THUNKS(gl, glVertexArrayVertexBuffer, (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride), (vaobj, bindingindex, buffer, offset, stride))
GEN_THUNKS(gl, glVertexArrayVertexBuffers, (GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides), (vaobj, first, count, buffers, offsets, strides))
GEN_THUNKS(gl, glVertexArrayVertexOffsetEXT, (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset), (vaobj, buffer, size, type, stride, offset))
GEN_THUNKS(gl, glVertexAttrib1d, (GLuint index, GLdouble x), (index, x))
GEN_THUNKS(gl, glVertexAttrib1dARB, (GLuint index, GLdouble x), (index, x))
GEN_THUNKS(gl, glVertexAttrib1dNV, (GLuint index, GLdouble x), (index, x))
GEN_THUNKS(gl, glVertexAttrib1dv, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib1dvARB, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib1dvNV, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib1f, (GLuint index, GLfloat x), (index, x))
GEN_THUNKS(gl, glVertexAttrib1fARB, (GLuint index, GLfloat x), (index, x))
GEN_THUNKS(gl, glVertexAttrib1fNV, (GLuint index, GLfloat x), (index, x))
GEN_THUNKS(gl, glVertexAttrib1fv, (GLuint index, const GLfloat * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib1fvARB, (GLuint index, const GLfloat * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib1fvNV, (GLuint index, const GLfloat * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib1hNV, (GLuint index, GLhalfNV x), (index, x))
GEN_THUNKS(gl, glVertexAttrib1hvNV, (GLuint index, const GLhalfNV * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib1s, (GLuint index, GLshort x), (index, x))
GEN_THUNKS(gl, glVertexAttrib1sARB, (GLuint index, GLshort x), (index, x))
GEN_THUNKS(gl, glVertexAttrib1sNV, (GLuint index, GLshort x), (index, x))
GEN_THUNKS(gl, glVertexAttrib1sv, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib1svARB, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib1svNV, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib2d, (GLuint index, GLdouble x, GLdouble y), (index, x, y))
GEN_THUNKS(gl, glVertexAttrib2dARB, (GLuint index, GLdouble x, GLdouble y), (index, x, y))
GEN_THUNKS(gl, glVertexAttrib2dNV, (GLuint index, GLdouble x, GLdouble y), (index, x, y))
GEN_THUNKS(gl, glVertexAttrib2dv, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib2dvARB, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib2dvNV, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib2f, (GLuint index, GLfloat x, GLfloat y), (index, x, y))
GEN_THUNKS(gl, glVertexAttrib2fARB, (GLuint index, GLfloat x, GLfloat y), (index, x, y))
GEN_THUNKS(gl, glVertexAttrib2fNV, (GLuint index, GLfloat x, GLfloat y), (index, x, y))
GEN_THUNKS(gl, glVertexAttrib2fv, (GLuint index, const GLfloat * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib2fvARB, (GLuint index, const GLfloat * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib2fvNV, (GLuint index, const GLfloat * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib2hNV, (GLuint index, GLhalfNV x, GLhalfNV y), (index, x, y))
GEN_THUNKS(gl, glVertexAttrib2hvNV, (GLuint index, const GLhalfNV * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib2s, (GLuint index, GLshort x, GLshort y), (index, x, y))
GEN_THUNKS(gl, glVertexAttrib2sARB, (GLuint index, GLshort x, GLshort y), (index, x, y))
GEN_THUNKS(gl, glVertexAttrib2sNV, (GLuint index, GLshort x, GLshort y), (index, x, y))
GEN_THUNKS(gl, glVertexAttrib2sv, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib2svARB, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib2svNV, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib3d, (GLuint index, GLdouble x, GLdouble y, GLdouble z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttrib3dARB, (GLuint index, GLdouble x, GLdouble y, GLdouble z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttrib3dNV, (GLuint index, GLdouble x, GLdouble y, GLdouble z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttrib3dv, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib3dvARB, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib3dvNV, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib3f, (GLuint index, GLfloat x, GLfloat y, GLfloat z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttrib3fARB, (GLuint index, GLfloat x, GLfloat y, GLfloat z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttrib3fNV, (GLuint index, GLfloat x, GLfloat y, GLfloat z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttrib3fv, (GLuint index, const GLfloat * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib3fvARB, (GLuint index, const GLfloat * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib3fvNV, (GLuint index, const GLfloat * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib3hNV, (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttrib3hvNV, (GLuint index, const GLhalfNV * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib3s, (GLuint index, GLshort x, GLshort y, GLshort z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttrib3sARB, (GLuint index, GLshort x, GLshort y, GLshort z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttrib3sNV, (GLuint index, GLshort x, GLshort y, GLshort z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttrib3sv, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib3svARB, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib3svNV, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4Nbv, (GLuint index, const GLbyte * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4NbvARB, (GLuint index, const GLbyte * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4Niv, (GLuint index, const GLint * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4NivARB, (GLuint index, const GLint * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4Nsv, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4NsvARB, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4Nub, (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttrib4NubARB, (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttrib4Nubv, (GLuint index, const GLubyte * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4NubvARB, (GLuint index, const GLubyte * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4Nuiv, (GLuint index, const GLuint * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4NuivARB, (GLuint index, const GLuint * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4Nusv, (GLuint index, const GLushort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4NusvARB, (GLuint index, const GLushort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4bv, (GLuint index, const GLbyte * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4bvARB, (GLuint index, const GLbyte * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4d, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttrib4dARB, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttrib4dNV, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttrib4dv, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4dvARB, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4dvNV, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4f, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttrib4fARB, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttrib4fNV, (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttrib4fv, (GLuint index, const GLfloat * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4fvARB, (GLuint index, const GLfloat * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4fvNV, (GLuint index, const GLfloat * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4hNV, (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttrib4hvNV, (GLuint index, const GLhalfNV * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4iv, (GLuint index, const GLint * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4ivARB, (GLuint index, const GLint * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4s, (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttrib4sARB, (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttrib4sNV, (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttrib4sv, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4svARB, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4svNV, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4ubNV, (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttrib4ubv, (GLuint index, const GLubyte * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4ubvARB, (GLuint index, const GLubyte * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4ubvNV, (GLuint index, const GLubyte * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4uiv, (GLuint index, const GLuint * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4uivARB, (GLuint index, const GLuint * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4usv, (GLuint index, const GLushort * v), (index, v))
GEN_THUNKS(gl, glVertexAttrib4usvARB, (GLuint index, const GLushort * v), (index, v))
GEN_THUNKS(gl, glVertexAttribArrayObjectATI, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset), (index, size, type, normalized, stride, buffer, offset))
GEN_THUNKS(gl, glVertexAttribBinding, (GLuint attribindex, GLuint bindingindex), (attribindex, bindingindex))
GEN_THUNKS(gl, glVertexAttribDivisor, (GLuint index, GLuint divisor), (index, divisor))
GEN_THUNKS(gl, glVertexAttribDivisorANGLE, (GLuint index, GLuint divisor), (index, divisor))
GEN_THUNKS(gl, glVertexAttribDivisorARB, (GLuint index, GLuint divisor), (index, divisor))
GEN_THUNKS(gl, glVertexAttribDivisorEXT, (GLuint index, GLuint divisor), (index, divisor))
GEN_THUNKS(gl, glVertexAttribDivisorNV, (GLuint index, GLuint divisor), (index, divisor))
GEN_THUNKS(gl, glVertexAttribFormat, (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset), (attribindex, size, type, normalized, relativeoffset))
GEN_THUNKS(gl, glVertexAttribFormatNV, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride), (index, size, type, normalized, stride))
GEN_THUNKS(gl, glVertexAttribI1i, (GLuint index, GLint x), (index, x))
GEN_THUNKS(gl, glVertexAttribI1iEXT, (GLuint index, GLint x), (index, x))
GEN_THUNKS(gl, glVertexAttribI1iv, (GLuint index, const GLint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI1ivEXT, (GLuint index, const GLint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI1ui, (GLuint index, GLuint x), (index, x))
GEN_THUNKS(gl, glVertexAttribI1uiEXT, (GLuint index, GLuint x), (index, x))
GEN_THUNKS(gl, glVertexAttribI1uiv, (GLuint index, const GLuint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI1uivEXT, (GLuint index, const GLuint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI2i, (GLuint index, GLint x, GLint y), (index, x, y))
GEN_THUNKS(gl, glVertexAttribI2iEXT, (GLuint index, GLint x, GLint y), (index, x, y))
GEN_THUNKS(gl, glVertexAttribI2iv, (GLuint index, const GLint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI2ivEXT, (GLuint index, const GLint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI2ui, (GLuint index, GLuint x, GLuint y), (index, x, y))
GEN_THUNKS(gl, glVertexAttribI2uiEXT, (GLuint index, GLuint x, GLuint y), (index, x, y))
GEN_THUNKS(gl, glVertexAttribI2uiv, (GLuint index, const GLuint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI2uivEXT, (GLuint index, const GLuint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI3i, (GLuint index, GLint x, GLint y, GLint z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttribI3iEXT, (GLuint index, GLint x, GLint y, GLint z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttribI3iv, (GLuint index, const GLint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI3ivEXT, (GLuint index, const GLint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI3ui, (GLuint index, GLuint x, GLuint y, GLuint z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttribI3uiEXT, (GLuint index, GLuint x, GLuint y, GLuint z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttribI3uiv, (GLuint index, const GLuint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI3uivEXT, (GLuint index, const GLuint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI4bv, (GLuint index, const GLbyte * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI4bvEXT, (GLuint index, const GLbyte * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI4i, (GLuint index, GLint x, GLint y, GLint z, GLint w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttribI4iEXT, (GLuint index, GLint x, GLint y, GLint z, GLint w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttribI4iv, (GLuint index, const GLint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI4ivEXT, (GLuint index, const GLint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI4sv, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI4svEXT, (GLuint index, const GLshort * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI4ubv, (GLuint index, const GLubyte * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI4ubvEXT, (GLuint index, const GLubyte * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI4ui, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttribI4uiEXT, (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttribI4uiv, (GLuint index, const GLuint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI4uivEXT, (GLuint index, const GLuint * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI4usv, (GLuint index, const GLushort * v), (index, v))
GEN_THUNKS(gl, glVertexAttribI4usvEXT, (GLuint index, const GLushort * v), (index, v))
GEN_THUNKS(gl, glVertexAttribIFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset), (attribindex, size, type, relativeoffset))
GEN_THUNKS(gl, glVertexAttribIFormatNV, (GLuint index, GLint size, GLenum type, GLsizei stride), (index, size, type, stride))
GEN_THUNKS(gl, glVertexAttribIPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer), (index, size, type, stride, pointer))
GEN_THUNKS(gl, glVertexAttribIPointerEXT, (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer), (index, size, type, stride, pointer))
GEN_THUNKS(gl, glVertexAttribL1d, (GLuint index, GLdouble x), (index, x))
GEN_THUNKS(gl, glVertexAttribL1dEXT, (GLuint index, GLdouble x), (index, x))
GEN_THUNKS(gl, glVertexAttribL1dv, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL1dvEXT, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL1i64NV, (GLuint index, GLint64EXT x), (index, x))
GEN_THUNKS(gl, glVertexAttribL1i64vNV, (GLuint index, const GLint64EXT * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL1ui64ARB, (GLuint index, GLuint64EXT x), (index, x))
GEN_THUNKS(gl, glVertexAttribL1ui64NV, (GLuint index, GLuint64EXT x), (index, x))
GEN_THUNKS(gl, glVertexAttribL1ui64vARB, (GLuint index, const GLuint64EXT * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL1ui64vNV, (GLuint index, const GLuint64EXT * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL2d, (GLuint index, GLdouble x, GLdouble y), (index, x, y))
GEN_THUNKS(gl, glVertexAttribL2dEXT, (GLuint index, GLdouble x, GLdouble y), (index, x, y))
GEN_THUNKS(gl, glVertexAttribL2dv, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL2dvEXT, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL2i64NV, (GLuint index, GLint64EXT x, GLint64EXT y), (index, x, y))
GEN_THUNKS(gl, glVertexAttribL2i64vNV, (GLuint index, const GLint64EXT * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL2ui64NV, (GLuint index, GLuint64EXT x, GLuint64EXT y), (index, x, y))
GEN_THUNKS(gl, glVertexAttribL2ui64vNV, (GLuint index, const GLuint64EXT * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL3d, (GLuint index, GLdouble x, GLdouble y, GLdouble z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttribL3dEXT, (GLuint index, GLdouble x, GLdouble y, GLdouble z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttribL3dv, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL3dvEXT, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL3i64NV, (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttribL3i64vNV, (GLuint index, const GLint64EXT * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL3ui64NV, (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z), (index, x, y, z))
GEN_THUNKS(gl, glVertexAttribL3ui64vNV, (GLuint index, const GLuint64EXT * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL4d, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttribL4dEXT, (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttribL4dv, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL4dvEXT, (GLuint index, const GLdouble * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL4i64NV, (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttribL4i64vNV, (GLuint index, const GLint64EXT * v), (index, v))
GEN_THUNKS(gl, glVertexAttribL4ui64NV, (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w), (index, x, y, z, w))
GEN_THUNKS(gl, glVertexAttribL4ui64vNV, (GLuint index, const GLuint64EXT * v), (index, v))
GEN_THUNKS(gl, glVertexAttribLFormat, (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset), (attribindex, size, type, relativeoffset))
GEN_THUNKS(gl, glVertexAttribLFormatNV, (GLuint index, GLint size, GLenum type, GLsizei stride), (index, size, type, stride))
GEN_THUNKS(gl, glVertexAttribLPointer, (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer), (index, size, type, stride, pointer))
GEN_THUNKS(gl, glVertexAttribLPointerEXT, (GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer), (index, size, type, stride, pointer))
GEN_THUNKS(gl, glVertexAttribP1ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value), (index, type, normalized, value))
GEN_THUNKS(gl, glVertexAttribP1uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint * value), (index, type, normalized, value))
GEN_THUNKS(gl, glVertexAttribP2ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value), (index, type, normalized, value))
GEN_THUNKS(gl, glVertexAttribP2uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint * value), (index, type, normalized, value))
GEN_THUNKS(gl, glVertexAttribP3ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value), (index, type, normalized, value))
GEN_THUNKS(gl, glVertexAttribP3uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint * value), (index, type, normalized, value))
GEN_THUNKS(gl, glVertexAttribP4ui, (GLuint index, GLenum type, GLboolean normalized, GLuint value), (index, type, normalized, value))
GEN_THUNKS(gl, glVertexAttribP4uiv, (GLuint index, GLenum type, GLboolean normalized, const GLuint * value), (index, type, normalized, value))
GEN_THUNKS(gl, glVertexAttribParameteriAMD, (GLuint index, GLenum pname, GLint param), (index, pname, param))
GEN_THUNKS(gl, glVertexAttribPointer, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer), (index, size, type, normalized, stride, pointer))
GEN_THUNKS(gl, glVertexAttribPointerARB, (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void * pointer), (index, size, type, normalized, stride, pointer))
GEN_THUNKS(gl, glVertexAttribPointerNV, (GLuint index, GLint fsize, GLenum type, GLsizei stride, const void * pointer), (index, fsize, type, stride, pointer))
GEN_THUNKS(gl, glVertexAttribs1dvNV, (GLuint index, GLsizei count, const GLdouble * v), (index, count, v))
GEN_THUNKS(gl, glVertexAttribs1fvNV, (GLuint index, GLsizei count, const GLfloat * v), (index, count, v))
GEN_THUNKS(gl, glVertexAttribs1hvNV, (GLuint index, GLsizei n, const GLhalfNV * v), (index, n, v))
GEN_THUNKS(gl, glVertexAttribs1svNV, (GLuint index, GLsizei count, const GLshort * v), (index, count, v))
GEN_THUNKS(gl, glVertexAttribs2dvNV, (GLuint index, GLsizei count, const GLdouble * v), (index, count, v))
GEN_THUNKS(gl, glVertexAttribs2fvNV, (GLuint index, GLsizei count, const GLfloat * v), (index, count, v))
GEN_THUNKS(gl, glVertexAttribs2hvNV, (GLuint index, GLsizei n, const GLhalfNV * v), (index, n, v))
GEN_THUNKS(gl, glVertexAttribs2svNV, (GLuint index, GLsizei count, const GLshort * v), (index, count, v))
GEN_THUNKS(gl, glVertexAttribs3dvNV, (GLuint index, GLsizei count, const GLdouble * v), (index, count, v))
GEN_THUNKS(gl, glVertexAttribs3fvNV, (GLuint index, GLsizei count, const GLfloat * v), (index, count, v))
GEN_THUNKS(gl, glVertexAttribs3hvNV, (GLuint index, GLsizei n, const GLhalfNV * v), (index, n, v))
GEN_THUNKS(gl, glVertexAttribs3svNV, (GLuint index, GLsizei count, const GLshort * v), (index, count, v))
GEN_THUNKS(gl, glVertexAttribs4dvNV, (GLuint index, GLsizei count, const GLdouble * v), (index, count, v))
GEN_THUNKS(gl, glVertexAttribs4fvNV, (GLuint index, GLsizei count, const GLfloat * v), (index, count, v))
GEN_THUNKS(gl, glVertexAttribs4hvNV, (GLuint index, GLsizei n, const GLhalfNV * v), (index, n, v))
GEN_THUNKS(gl, glVertexAttribs4svNV, (GLuint index, GLsizei count, const GLshort * v), (index, count, v))
GEN_THUNKS(gl, glVertexAttribs4ubvNV, (GLuint index, GLsizei count, const GLubyte * v), (index, count, v))
GEN_THUNKS(gl, glVertexBindingDivisor, (GLuint bindingindex, GLuint divisor), (bindingindex, divisor))
GEN_THUNKS(gl, glVertexBlendARB, (GLint count), (count))
GEN_THUNKS(gl, glVertexBlendEnvfATI, (GLenum pname, GLfloat param), (pname, param))
GEN_THUNKS(gl, glVertexBlendEnviATI, (GLenum pname, GLint param), (pname, param))
GEN_THUNKS(gl, glVertexFormatNV, (GLint size, GLenum type, GLsizei stride), (size, type, stride))
GEN_THUNKS(gl, glVertexP2ui, (GLenum type, GLuint value), (type, value))
GEN_THUNKS(gl, glVertexP2uiv, (GLenum type, const GLuint * value), (type, value))
GEN_THUNKS(gl, glVertexP3ui, (GLenum type, GLuint value), (type, value))
GEN_THUNKS(gl, glVertexP3uiv, (GLenum type, const GLuint * value), (type, value))
GEN_THUNKS(gl, glVertexP4ui, (GLenum type, GLuint value), (type, value))
GEN_THUNKS(gl, glVertexP4uiv, (GLenum type, const GLuint * value), (type, value))
GEN_THUNKS(gl, glVertexPointer, (GLint size, GLenum type, GLsizei stride, const void * pointer), (size, type, stride, pointer))
GEN_THUNKS(gl, glVertexPointerEXT, (GLint size, GLenum type, GLsizei stride, GLsizei count, const void * pointer), (size, type, stride, count, pointer))
GEN_THUNKS(gl, glVertexPointerListIBM, (GLint size, GLenum type, GLint stride, const void ** pointer, GLint ptrstride), (size, type, stride, pointer, ptrstride))
GEN_THUNKS(gl, glVertexPointervINTEL, (GLint size, GLenum type, const void ** pointer), (size, type, pointer))
GEN_THUNKS(gl, glVertexStream1dATI, (GLenum stream, GLdouble x), (stream, x))
GEN_THUNKS(gl, glVertexStream1dvATI, (GLenum stream, const GLdouble * coords), (stream, coords))
GEN_THUNKS(gl, glVertexStream1fATI, (GLenum stream, GLfloat x), (stream, x))
GEN_THUNKS(gl, glVertexStream1fvATI, (GLenum stream, const GLfloat * coords), (stream, coords))
GEN_THUNKS(gl, glVertexStream1iATI, (GLenum stream, GLint x), (stream, x))
GEN_THUNKS(gl, glVertexStream1ivATI, (GLenum stream, const GLint * coords), (stream, coords))
GEN_THUNKS(gl, glVertexStream1sATI, (GLenum stream, GLshort x), (stream, x))
GEN_THUNKS(gl, glVertexStream1svATI, (GLenum stream, const GLshort * coords), (stream, coords))
GEN_THUNKS(gl, glVertexStream2dATI, (GLenum stream, GLdouble x, GLdouble y), (stream, x, y))
GEN_THUNKS(gl, glVertexStream2dvATI, (GLenum stream, const GLdouble * coords), (stream, coords))
GEN_THUNKS(gl, glVertexStream2fATI, (GLenum stream, GLfloat x, GLfloat y), (stream, x, y))
GEN_THUNKS(gl, glVertexStream2fvATI, (GLenum stream, const GLfloat * coords), (stream, coords))
GEN_THUNKS(gl, glVertexStream2iATI, (GLenum stream, GLint x, GLint y), (stream, x, y))
GEN_THUNKS(gl, glVertexStream2ivATI, (GLenum stream, const GLint * coords), (stream, coords))
GEN_THUNKS(gl, glVertexStream2sATI, (GLenum stream, GLshort x, GLshort y), (stream, x, y))
GEN_THUNKS(gl, glVertexStream2svATI, (GLenum stream, const GLshort * coords), (stream, coords))
GEN_THUNKS(gl, glVertexStream3dATI, (GLenum stream, GLdouble x, GLdouble y, GLdouble z), (stream, x, y, z))
GEN_THUNKS(gl, glVertexStream3dvATI, (GLenum stream, const GLdouble * coords), (stream, coords))
GEN_THUNKS(gl, glVertexStream3fATI, (GLenum stream, GLfloat x, GLfloat y, GLfloat z), (stream, x, y, z))
GEN_THUNKS(gl, glVertexStream3fvATI, (GLenum stream, const GLfloat * coords), (stream, coords))
GEN_THUNKS(gl, glVertexStream3iATI, (GLenum stream, GLint x, GLint y, GLint z), (stream, x, y, z))
GEN_THUNKS(gl, glVertexStream3ivATI, (GLenum stream, const GLint * coords), (stream, coords))
GEN_THUNKS(gl, glVertexStream3sATI, (GLenum stream, GLshort x, GLshort y, GLshort z), (stream, x, y, z))
GEN_THUNKS(gl, glVertexStream3svATI, (GLenum stream, const GLshort * coords), (stream, coords))
GEN_THUNKS(gl, glVertexStream4dATI, (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w), (stream, x, y, z, w))
GEN_THUNKS(gl, glVertexStream4dvATI, (GLenum stream, const GLdouble * coords), (stream, coords))
GEN_THUNKS(gl, glVertexStream4fATI, (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w), (stream, x, y, z, w))
GEN_THUNKS(gl, glVertexStream4fvATI, (GLenum stream, const GLfloat * coords), (stream, coords))
GEN_THUNKS(gl, glVertexStream4iATI, (GLenum stream, GLint x, GLint y, GLint z, GLint w), (stream, x, y, z, w))
GEN_THUNKS(gl, glVertexStream4ivATI, (GLenum stream, const GLint * coords), (stream, coords))
GEN_THUNKS(gl, glVertexStream4sATI, (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w), (stream, x, y, z, w))
GEN_THUNKS(gl, glVertexStream4svATI, (GLenum stream, const GLshort * coords), (stream, coords))
GEN_THUNKS(gl, glVertexWeightPointerEXT, (GLint size, GLenum type, GLsizei stride, const void * pointer), (size, type, stride, pointer))
GEN_THUNKS(gl, glVertexWeightfEXT, (GLfloat weight), (weight))
GEN_THUNKS(gl, glVertexWeightfvEXT, (const GLfloat * weight), (weight))
GEN_THUNKS(gl, glVertexWeighthNV, (GLhalfNV weight), (weight))
GEN_THUNKS(gl, glVertexWeighthvNV, (const GLhalfNV * weight), (weight))
GEN_THUNKS_RET(gl, GLenum, glVideoCaptureNV, (GLuint video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time), (video_capture_slot, sequence_num, capture_time))
GEN_THUNKS(gl, glVideoCaptureStreamParameterdvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble * params), (video_capture_slot, stream, pname, params))
GEN_THUNKS(gl, glVideoCaptureStreamParameterfvNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat * params), (video_capture_slot, stream, pname, params))
GEN_THUNKS(gl, glVideoCaptureStreamParameterivNV, (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint * params), (video_capture_slot, stream, pname, params))
GEN_THUNKS(gl, glViewport, (GLint x, GLint y, GLsizei width, GLsizei height), (x, y, width, height))
GEN_THUNKS(gl, glViewportArrayv, (GLuint first, GLsizei count, const GLfloat * v), (first, count, v))
GEN_THUNKS(gl, glViewportArrayvNV, (GLuint first, GLsizei count, const GLfloat * v), (first, count, v))
GEN_THUNKS(gl, glViewportIndexedf, (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h), (index, x, y, w, h))
GEN_THUNKS(gl, glViewportIndexedfNV, (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h), (index, x, y, w, h))
GEN_THUNKS(gl, glViewportIndexedfv, (GLuint index, const GLfloat * v), (index, v))
GEN_THUNKS(gl, glViewportIndexedfvNV, (GLuint index, const GLfloat * v), (index, v))
GEN_THUNKS(gl, glViewportPositionWScaleNV, (GLuint index, GLfloat xcoeff, GLfloat ycoeff), (index, xcoeff, ycoeff))
GEN_THUNKS(gl, glViewportSwizzleNV, (GLuint index, GLenum swizzlex, GLenum swizzley, GLenum swizzlez, GLenum swizzlew), (index, swizzlex, swizzley, swizzlez, swizzlew))
GEN_THUNKS(gl, glWaitSync, (GLsync sync, GLbitfield flags, GLuint64 timeout), (sync, flags, timeout))
GEN_THUNKS(gl, glWaitSyncAPPLE, (GLsync sync, GLbitfield flags, GLuint64 timeout), (sync, flags, timeout))
GEN_THUNKS(gl, glWeightPathsNV, (GLuint resultPath, GLsizei numPaths, const GLuint * paths, const GLfloat * weights), (resultPath, numPaths, paths, weights))
GEN_THUNKS(gl, glWeightPointerARB, (GLint size, GLenum type, GLsizei stride, const void * pointer), (size, type, stride, pointer))
GEN_THUNKS(gl, glWeightPointerOES, (GLint size, GLenum type, GLsizei stride, const void * pointer), (size, type, stride, pointer))
GEN_THUNKS(gl, glWeightbvARB, (GLint size, const GLbyte * weights), (size, weights))
GEN_THUNKS(gl, glWeightdvARB, (GLint size, const GLdouble * weights), (size, weights))
GEN_THUNKS(gl, glWeightfvARB, (GLint size, const GLfloat * weights), (size, weights))
GEN_THUNKS(gl, glWeightivARB, (GLint size, const GLint * weights), (size, weights))
GEN_THUNKS(gl, glWeightsvARB, (GLint size, const GLshort * weights), (size, weights))
GEN_THUNKS(gl, glWeightubvARB, (GLint size, const GLubyte * weights), (size, weights))
GEN_THUNKS(gl, glWeightuivARB, (GLint size, const GLuint * weights), (size, weights))
GEN_THUNKS(gl, glWeightusvARB, (GLint size, const GLushort * weights), (size, weights))
GEN_THUNKS(gl, glWindowPos2d, (GLdouble x, GLdouble y), (x, y))
GEN_THUNKS(gl, glWindowPos2dARB, (GLdouble x, GLdouble y), (x, y))
GEN_THUNKS(gl, glWindowPos2dMESA, (GLdouble x, GLdouble y), (x, y))
GEN_THUNKS(gl, glWindowPos2dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glWindowPos2dvARB, (const GLdouble * v), (v))
GEN_THUNKS(gl, glWindowPos2dvMESA, (const GLdouble * v), (v))
GEN_THUNKS(gl, glWindowPos2f, (GLfloat x, GLfloat y), (x, y))
GEN_THUNKS(gl, glWindowPos2fARB, (GLfloat x, GLfloat y), (x, y))
GEN_THUNKS(gl, glWindowPos2fMESA, (GLfloat x, GLfloat y), (x, y))
GEN_THUNKS(gl, glWindowPos2fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glWindowPos2fvARB, (const GLfloat * v), (v))
GEN_THUNKS(gl, glWindowPos2fvMESA, (const GLfloat * v), (v))
GEN_THUNKS(gl, glWindowPos2i, (GLint x, GLint y), (x, y))
GEN_THUNKS(gl, glWindowPos2iARB, (GLint x, GLint y), (x, y))
GEN_THUNKS(gl, glWindowPos2iMESA, (GLint x, GLint y), (x, y))
GEN_THUNKS(gl, glWindowPos2iv, (const GLint * v), (v))
GEN_THUNKS(gl, glWindowPos2ivARB, (const GLint * v), (v))
GEN_THUNKS(gl, glWindowPos2ivMESA, (const GLint * v), (v))
GEN_THUNKS(gl, glWindowPos2s, (GLshort x, GLshort y), (x, y))
GEN_THUNKS(gl, glWindowPos2sARB, (GLshort x, GLshort y), (x, y))
GEN_THUNKS(gl, glWindowPos2sMESA, (GLshort x, GLshort y), (x, y))
GEN_THUNKS(gl, glWindowPos2sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glWindowPos2svARB, (const GLshort * v), (v))
GEN_THUNKS(gl, glWindowPos2svMESA, (const GLshort * v), (v))
GEN_THUNKS(gl, glWindowPos3d, (GLdouble x, GLdouble y, GLdouble z), (x, y, z))
GEN_THUNKS(gl, glWindowPos3dARB, (GLdouble x, GLdouble y, GLdouble z), (x, y, z))
GEN_THUNKS(gl, glWindowPos3dMESA, (GLdouble x, GLdouble y, GLdouble z), (x, y, z))
GEN_THUNKS(gl, glWindowPos3dv, (const GLdouble * v), (v))
GEN_THUNKS(gl, glWindowPos3dvARB, (const GLdouble * v), (v))
GEN_THUNKS(gl, glWindowPos3dvMESA, (const GLdouble * v), (v))
GEN_THUNKS(gl, glWindowPos3f, (GLfloat x, GLfloat y, GLfloat z), (x, y, z))
GEN_THUNKS(gl, glWindowPos3fARB, (GLfloat x, GLfloat y, GLfloat z), (x, y, z))
GEN_THUNKS(gl, glWindowPos3fMESA, (GLfloat x, GLfloat y, GLfloat z), (x, y, z))
GEN_THUNKS(gl, glWindowPos3fv, (const GLfloat * v), (v))
GEN_THUNKS(gl, glWindowPos3fvARB, (const GLfloat * v), (v))
GEN_THUNKS(gl, glWindowPos3fvMESA, (const GLfloat * v), (v))
GEN_THUNKS(gl, glWindowPos3i, (GLint x, GLint y, GLint z), (x, y, z))
GEN_THUNKS(gl, glWindowPos3iARB, (GLint x, GLint y, GLint z), (x, y, z))
GEN_THUNKS(gl, glWindowPos3iMESA, (GLint x, GLint y, GLint z), (x, y, z))
GEN_THUNKS(gl, glWindowPos3iv, (const GLint * v), (v))
GEN_THUNKS(gl, glWindowPos3ivARB, (const GLint * v), (v))
GEN_THUNKS(gl, glWindowPos3ivMESA, (const GLint * v), (v))
GEN_THUNKS(gl, glWindowPos3s, (GLshort x, GLshort y, GLshort z), (x, y, z))
GEN_THUNKS(gl, glWindowPos3sARB, (GLshort x, GLshort y, GLshort z), (x, y, z))
GEN_THUNKS(gl, glWindowPos3sMESA, (GLshort x, GLshort y, GLshort z), (x, y, z))
GEN_THUNKS(gl, glWindowPos3sv, (const GLshort * v), (v))
GEN_THUNKS(gl, glWindowPos3svARB, (const GLshort * v), (v))
GEN_THUNKS(gl, glWindowPos3svMESA, (const GLshort * v), (v))
GEN_THUNKS(gl, glWindowPos4dMESA, (GLdouble x, GLdouble y, GLdouble z, GLdouble w), (x, y, z, w))
GEN_THUNKS(gl, glWindowPos4dvMESA, (const GLdouble * v), (v))
GEN_THUNKS(gl, glWindowPos4fMESA, (GLfloat x, GLfloat y, GLfloat z, GLfloat w), (x, y, z, w))
GEN_THUNKS(gl, glWindowPos4fvMESA, (const GLfloat * v), (v))
GEN_THUNKS(gl, glWindowPos4iMESA, (GLint x, GLint y, GLint z, GLint w), (x, y, z, w))
GEN_THUNKS(gl, glWindowPos4ivMESA, (const GLint * v), (v))
GEN_THUNKS(gl, glWindowPos4sMESA, (GLshort x, GLshort y, GLshort z, GLshort w), (x, y, z, w))
GEN_THUNKS(gl, glWindowPos4svMESA, (const GLshort * v), (v))
GEN_THUNKS(gl, glWindowRectanglesEXT, (GLenum mode, GLsizei count, const GLint * box), (mode, count, box))
GEN_THUNKS(gl, glWriteMaskEXT, (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW), (res, in, outX, outY, outZ, outW))

static struct gl_dispatch_table gl_resolver_table = {
    .glAccum = epoxy_glAccum_dispatch_table_rewrite_ptr,
    .glAccumxOES = epoxy_glAccumxOES_dispatch_table_rewrite_ptr,
    .glActiveProgramEXT = epoxy_glActiveProgramEXT_dispatch_table_rewrite_ptr,
    .glActiveShaderProgram = epoxy_glActiveShaderProgram_dispatch_table_rewrite_ptr,
    .glActiveShaderProgramEXT = epoxy_glActiveShaderProgramEXT_dispatch_table_rewrite_ptr,
    .glActiveStencilFaceEXT = epoxy_glActiveStencilFaceEXT_dispatch_table_rewrite_ptr,
    .glActiveTexture = epoxy_glActiveTexture_dispatch_table_rewrite_ptr,
    .glActiveTextureARB = epoxy_glActiveTextureARB_dispatch_table_rewrite_ptr,
    .glActiveVaryingNV = epoxy_glActiveVaryingNV_dispatch_table_rewrite_ptr,
    .glAlphaFragmentOp1ATI = epoxy_glAlphaFragmentOp1ATI_dispatch_table_rewrite_ptr,
    .glAlphaFragmentOp2ATI = epoxy_glAlphaFragmentOp2ATI_dispatch_table_rewrite_ptr,
    .glAlphaFragmentOp3ATI = epoxy_glAlphaFragmentOp3ATI_dispatch_table_rewrite_ptr,
    .glAlphaFunc = epoxy_glAlphaFunc_dispatch_table_rewrite_ptr,
    .glAlphaFuncQCOM = epoxy_glAlphaFuncQCOM_dispatch_table_rewrite_ptr,
    .glAlphaFuncx = epoxy_glAlphaFuncx_dispatch_table_rewrite_ptr,
    .glAlphaFuncxOES = epoxy_glAlphaFuncxOES_dispatch_table_rewrite_ptr,
    .glApplyFramebufferAttachmentCMAAINTEL = epoxy_glApplyFramebufferAttachmentCMAAINTEL_dispatch_table_rewrite_ptr,
    .glApplyTextureEXT = epoxy_glApplyTextureEXT_dispatch_table_rewrite_ptr,
    .glAreProgramsResidentNV = epoxy_glAreProgramsResidentNV_dispatch_table_rewrite_ptr,
    .glAreTexturesResident = epoxy_glAreTexturesResident_dispatch_table_rewrite_ptr,
    .glAreTexturesResidentEXT = epoxy_glAreTexturesResidentEXT_dispatch_table_rewrite_ptr,
    .glArrayElement = epoxy_glArrayElement_dispatch_table_rewrite_ptr,
    .glArrayElementEXT = epoxy_glArrayElementEXT_dispatch_table_rewrite_ptr,
    .glArrayObjectATI = epoxy_glArrayObjectATI_dispatch_table_rewrite_ptr,
    .glAsyncMarkerSGIX = epoxy_glAsyncMarkerSGIX_dispatch_table_rewrite_ptr,
    .glAttachObjectARB = epoxy_glAttachObjectARB_dispatch_table_rewrite_ptr,
    .glAttachShader = epoxy_glAttachShader_dispatch_table_rewrite_ptr,
    .glBegin = epoxy_glBegin_dispatch_table_rewrite_ptr,
    .glBeginConditionalRender = epoxy_glBeginConditionalRender_dispatch_table_rewrite_ptr,
    .glBeginConditionalRenderNV = epoxy_glBeginConditionalRenderNV_dispatch_table_rewrite_ptr,
    .glBeginConditionalRenderNVX = epoxy_glBeginConditionalRenderNVX_dispatch_table_rewrite_ptr,
    .glBeginFragmentShaderATI = epoxy_glBeginFragmentShaderATI_dispatch_table_rewrite_ptr,
    .glBeginOcclusionQueryNV = epoxy_glBeginOcclusionQueryNV_dispatch_table_rewrite_ptr,
    .glBeginPerfMonitorAMD = epoxy_glBeginPerfMonitorAMD_dispatch_table_rewrite_ptr,
    .glBeginPerfQueryINTEL = epoxy_glBeginPerfQueryINTEL_dispatch_table_rewrite_ptr,
    .glBeginQuery = epoxy_glBeginQuery_dispatch_table_rewrite_ptr,
    .glBeginQueryARB = epoxy_glBeginQueryARB_dispatch_table_rewrite_ptr,
    .glBeginQueryEXT = epoxy_glBeginQueryEXT_dispatch_table_rewrite_ptr,
    .glBeginQueryIndexed = epoxy_glBeginQueryIndexed_dispatch_table_rewrite_ptr,
    .glBeginTransformFeedback = epoxy_glBeginTransformFeedback_dispatch_table_rewrite_ptr,
    .glBeginTransformFeedbackEXT = epoxy_glBeginTransformFeedbackEXT_dispatch_table_rewrite_ptr,
    .glBeginTransformFeedbackNV = epoxy_glBeginTransformFeedbackNV_dispatch_table_rewrite_ptr,
    .glBeginVertexShaderEXT = epoxy_glBeginVertexShaderEXT_dispatch_table_rewrite_ptr,
    .glBeginVideoCaptureNV = epoxy_glBeginVideoCaptureNV_dispatch_table_rewrite_ptr,
    .glBindAttribLocation = epoxy_glBindAttribLocation_dispatch_table_rewrite_ptr,
    .glBindAttribLocationARB = epoxy_glBindAttribLocationARB_dispatch_table_rewrite_ptr,
    .glBindBuffer = epoxy_glBindBuffer_dispatch_table_rewrite_ptr,
    .glBindBufferARB = epoxy_glBindBufferARB_dispatch_table_rewrite_ptr,
    .glBindBufferBase = epoxy_glBindBufferBase_dispatch_table_rewrite_ptr,
    .glBindBufferBaseEXT = epoxy_glBindBufferBaseEXT_dispatch_table_rewrite_ptr,
    .glBindBufferBaseNV = epoxy_glBindBufferBaseNV_dispatch_table_rewrite_ptr,
    .glBindBufferOffsetEXT = epoxy_glBindBufferOffsetEXT_dispatch_table_rewrite_ptr,
    .glBindBufferOffsetNV = epoxy_glBindBufferOffsetNV_dispatch_table_rewrite_ptr,
    .glBindBufferRange = epoxy_glBindBufferRange_dispatch_table_rewrite_ptr,
    .glBindBufferRangeEXT = epoxy_glBindBufferRangeEXT_dispatch_table_rewrite_ptr,
    .glBindBufferRangeNV = epoxy_glBindBufferRangeNV_dispatch_table_rewrite_ptr,
    .glBindBuffersBase = epoxy_glBindBuffersBase_dispatch_table_rewrite_ptr,
    .glBindBuffersRange = epoxy_glBindBuffersRange_dispatch_table_rewrite_ptr,
    .glBindFragDataLocation = epoxy_glBindFragDataLocation_dispatch_table_rewrite_ptr,
    .glBindFragDataLocationEXT = epoxy_glBindFragDataLocationEXT_dispatch_table_rewrite_ptr,
    .glBindFragDataLocationIndexed = epoxy_glBindFragDataLocationIndexed_dispatch_table_rewrite_ptr,
    .glBindFragDataLocationIndexedEXT = epoxy_glBindFragDataLocationIndexedEXT_dispatch_table_rewrite_ptr,
    .glBindFragmentShaderATI = epoxy_glBindFragmentShaderATI_dispatch_table_rewrite_ptr,
    .glBindFramebuffer = epoxy_glBindFramebuffer_dispatch_table_rewrite_ptr,
    .glBindFramebufferEXT = epoxy_glBindFramebufferEXT_dispatch_table_rewrite_ptr,
    .glBindFramebufferOES = epoxy_glBindFramebufferOES_dispatch_table_rewrite_ptr,
    .glBindImageTexture = epoxy_glBindImageTexture_dispatch_table_rewrite_ptr,
    .glBindImageTextureEXT = epoxy_glBindImageTextureEXT_dispatch_table_rewrite_ptr,
    .glBindImageTextures = epoxy_glBindImageTextures_dispatch_table_rewrite_ptr,
    .glBindLightParameterEXT = epoxy_glBindLightParameterEXT_dispatch_table_rewrite_ptr,
    .glBindMaterialParameterEXT = epoxy_glBindMaterialParameterEXT_dispatch_table_rewrite_ptr,
    .glBindMultiTextureEXT = epoxy_glBindMultiTextureEXT_dispatch_table_rewrite_ptr,
    .glBindParameterEXT = epoxy_glBindParameterEXT_dispatch_table_rewrite_ptr,
    .glBindProgramARB = epoxy_glBindProgramARB_dispatch_table_rewrite_ptr,
    .glBindProgramNV = epoxy_glBindProgramNV_dispatch_table_rewrite_ptr,
    .glBindProgramPipeline = epoxy_glBindProgramPipeline_dispatch_table_rewrite_ptr,
    .glBindProgramPipelineEXT = epoxy_glBindProgramPipelineEXT_dispatch_table_rewrite_ptr,
    .glBindRenderbuffer = epoxy_glBindRenderbuffer_dispatch_table_rewrite_ptr,
    .glBindRenderbufferEXT = epoxy_glBindRenderbufferEXT_dispatch_table_rewrite_ptr,
    .glBindRenderbufferOES = epoxy_glBindRenderbufferOES_dispatch_table_rewrite_ptr,
    .glBindSampler = epoxy_glBindSampler_dispatch_table_rewrite_ptr,
    .glBindSamplers = epoxy_glBindSamplers_dispatch_table_rewrite_ptr,
    .glBindTexGenParameterEXT = epoxy_glBindTexGenParameterEXT_dispatch_table_rewrite_ptr,
    .glBindTexture = epoxy_glBindTexture_dispatch_table_rewrite_ptr,
    .glBindTextureEXT = epoxy_glBindTextureEXT_dispatch_table_rewrite_ptr,
    .glBindTextureUnit = epoxy_glBindTextureUnit_dispatch_table_rewrite_ptr,
    .glBindTextureUnitParameterEXT = epoxy_glBindTextureUnitParameterEXT_dispatch_table_rewrite_ptr,
    .glBindTextures = epoxy_glBindTextures_dispatch_table_rewrite_ptr,
    .glBindTransformFeedback = epoxy_glBindTransformFeedback_dispatch_table_rewrite_ptr,
    .glBindTransformFeedbackNV = epoxy_glBindTransformFeedbackNV_dispatch_table_rewrite_ptr,
    .glBindVertexArray = epoxy_glBindVertexArray_dispatch_table_rewrite_ptr,
    .glBindVertexArrayAPPLE = epoxy_glBindVertexArrayAPPLE_dispatch_table_rewrite_ptr,
    .glBindVertexArrayOES = epoxy_glBindVertexArrayOES_dispatch_table_rewrite_ptr,
    .glBindVertexBuffer = epoxy_glBindVertexBuffer_dispatch_table_rewrite_ptr,
    .glBindVertexBuffers = epoxy_glBindVertexBuffers_dispatch_table_rewrite_ptr,
    .glBindVertexShaderEXT = epoxy_glBindVertexShaderEXT_dispatch_table_rewrite_ptr,
    .glBindVideoCaptureStreamBufferNV = epoxy_glBindVideoCaptureStreamBufferNV_dispatch_table_rewrite_ptr,
    .glBindVideoCaptureStreamTextureNV = epoxy_glBindVideoCaptureStreamTextureNV_dispatch_table_rewrite_ptr,
    .glBinormal3bEXT = epoxy_glBinormal3bEXT_dispatch_table_rewrite_ptr,
    .glBinormal3bvEXT = epoxy_glBinormal3bvEXT_dispatch_table_rewrite_ptr,
    .glBinormal3dEXT = epoxy_glBinormal3dEXT_dispatch_table_rewrite_ptr,
    .glBinormal3dvEXT = epoxy_glBinormal3dvEXT_dispatch_table_rewrite_ptr,
    .glBinormal3fEXT = epoxy_glBinormal3fEXT_dispatch_table_rewrite_ptr,
    .glBinormal3fvEXT = epoxy_glBinormal3fvEXT_dispatch_table_rewrite_ptr,
    .glBinormal3iEXT = epoxy_glBinormal3iEXT_dispatch_table_rewrite_ptr,
    .glBinormal3ivEXT = epoxy_glBinormal3ivEXT_dispatch_table_rewrite_ptr,
    .glBinormal3sEXT = epoxy_glBinormal3sEXT_dispatch_table_rewrite_ptr,
    .glBinormal3svEXT = epoxy_glBinormal3svEXT_dispatch_table_rewrite_ptr,
    .glBinormalPointerEXT = epoxy_glBinormalPointerEXT_dispatch_table_rewrite_ptr,
    .glBitmap = epoxy_glBitmap_dispatch_table_rewrite_ptr,
    .glBitmapxOES = epoxy_glBitmapxOES_dispatch_table_rewrite_ptr,
    .glBlendBarrier = epoxy_glBlendBarrier_dispatch_table_rewrite_ptr,
    .glBlendBarrierKHR = epoxy_glBlendBarrierKHR_dispatch_table_rewrite_ptr,
    .glBlendBarrierNV = epoxy_glBlendBarrierNV_dispatch_table_rewrite_ptr,
    .glBlendColor = epoxy_glBlendColor_dispatch_table_rewrite_ptr,
    .glBlendColorEXT = epoxy_glBlendColorEXT_dispatch_table_rewrite_ptr,
    .glBlendColorxOES = epoxy_glBlendColorxOES_dispatch_table_rewrite_ptr,
    .glBlendEquation = epoxy_glBlendEquation_dispatch_table_rewrite_ptr,
    .glBlendEquationEXT = epoxy_glBlendEquationEXT_dispatch_table_rewrite_ptr,
    .glBlendEquationIndexedAMD = epoxy_glBlendEquationIndexedAMD_dispatch_table_rewrite_ptr,
    .glBlendEquationOES = epoxy_glBlendEquationOES_dispatch_table_rewrite_ptr,
    .glBlendEquationSeparate = epoxy_glBlendEquationSeparate_dispatch_table_rewrite_ptr,
    .glBlendEquationSeparateEXT = epoxy_glBlendEquationSeparateEXT_dispatch_table_rewrite_ptr,
    .glBlendEquationSeparateIndexedAMD = epoxy_glBlendEquationSeparateIndexedAMD_dispatch_table_rewrite_ptr,
    .glBlendEquationSeparateOES = epoxy_glBlendEquationSeparateOES_dispatch_table_rewrite_ptr,
    .glBlendEquationSeparatei = epoxy_glBlendEquationSeparatei_dispatch_table_rewrite_ptr,
    .glBlendEquationSeparateiARB = epoxy_glBlendEquationSeparateiARB_dispatch_table_rewrite_ptr,
    .glBlendEquationSeparateiEXT = epoxy_glBlendEquationSeparateiEXT_dispatch_table_rewrite_ptr,
    .glBlendEquationSeparateiOES = epoxy_glBlendEquationSeparateiOES_dispatch_table_rewrite_ptr,
    .glBlendEquationi = epoxy_glBlendEquationi_dispatch_table_rewrite_ptr,
    .glBlendEquationiARB = epoxy_glBlendEquationiARB_dispatch_table_rewrite_ptr,
    .glBlendEquationiEXT = epoxy_glBlendEquationiEXT_dispatch_table_rewrite_ptr,
    .glBlendEquationiOES = epoxy_glBlendEquationiOES_dispatch_table_rewrite_ptr,
    .glBlendFunc = epoxy_glBlendFunc_dispatch_table_rewrite_ptr,
    .glBlendFuncIndexedAMD = epoxy_glBlendFuncIndexedAMD_dispatch_table_rewrite_ptr,
    .glBlendFuncSeparate = epoxy_glBlendFuncSeparate_dispatch_table_rewrite_ptr,
    .glBlendFuncSeparateEXT = epoxy_glBlendFuncSeparateEXT_dispatch_table_rewrite_ptr,
    .glBlendFuncSeparateINGR = epoxy_glBlendFuncSeparateINGR_dispatch_table_rewrite_ptr,
    .glBlendFuncSeparateIndexedAMD = epoxy_glBlendFuncSeparateIndexedAMD_dispatch_table_rewrite_ptr,
    .glBlendFuncSeparateOES = epoxy_glBlendFuncSeparateOES_dispatch_table_rewrite_ptr,
    .glBlendFuncSeparatei = epoxy_glBlendFuncSeparatei_dispatch_table_rewrite_ptr,
    .glBlendFuncSeparateiARB = epoxy_glBlendFuncSeparateiARB_dispatch_table_rewrite_ptr,
    .glBlendFuncSeparateiEXT = epoxy_glBlendFuncSeparateiEXT_dispatch_table_rewrite_ptr,
    .glBlendFuncSeparateiOES = epoxy_glBlendFuncSeparateiOES_dispatch_table_rewrite_ptr,
    .glBlendFunci = epoxy_glBlendFunci_dispatch_table_rewrite_ptr,
    .glBlendFunciARB = epoxy_glBlendFunciARB_dispatch_table_rewrite_ptr,
    .glBlendFunciEXT = epoxy_glBlendFunciEXT_dispatch_table_rewrite_ptr,
    .glBlendFunciOES = epoxy_glBlendFunciOES_dispatch_table_rewrite_ptr,
    .glBlendParameteriNV = epoxy_glBlendParameteriNV_dispatch_table_rewrite_ptr,
    .glBlitFramebuffer = epoxy_glBlitFramebuffer_dispatch_table_rewrite_ptr,
    .glBlitFramebufferANGLE = epoxy_glBlitFramebufferANGLE_dispatch_table_rewrite_ptr,
    .glBlitFramebufferEXT = epoxy_glBlitFramebufferEXT_dispatch_table_rewrite_ptr,
    .glBlitFramebufferNV = epoxy_glBlitFramebufferNV_dispatch_table_rewrite_ptr,
    .glBlitNamedFramebuffer = epoxy_glBlitNamedFramebuffer_dispatch_table_rewrite_ptr,
    .glBufferAddressRangeNV = epoxy_glBufferAddressRangeNV_dispatch_table_rewrite_ptr,
    .glBufferData = epoxy_glBufferData_dispatch_table_rewrite_ptr,
    .glBufferDataARB = epoxy_glBufferDataARB_dispatch_table_rewrite_ptr,
    .glBufferPageCommitmentARB = epoxy_glBufferPageCommitmentARB_dispatch_table_rewrite_ptr,
    .glBufferParameteriAPPLE = epoxy_glBufferParameteriAPPLE_dispatch_table_rewrite_ptr,
    .glBufferStorage = epoxy_glBufferStorage_dispatch_table_rewrite_ptr,
    .glBufferStorageEXT = epoxy_glBufferStorageEXT_dispatch_table_rewrite_ptr,
    .glBufferSubData = epoxy_glBufferSubData_dispatch_table_rewrite_ptr,
    .glBufferSubDataARB = epoxy_glBufferSubDataARB_dispatch_table_rewrite_ptr,
    .glCallCommandListNV = epoxy_glCallCommandListNV_dispatch_table_rewrite_ptr,
    .glCallList = epoxy_glCallList_dispatch_table_rewrite_ptr,
    .glCallLists = epoxy_glCallLists_dispatch_table_rewrite_ptr,
    .glCheckFramebufferStatus = epoxy_glCheckFramebufferStatus_dispatch_table_rewrite_ptr,
    .glCheckFramebufferStatusEXT = epoxy_glCheckFramebufferStatusEXT_dispatch_table_rewrite_ptr,
    .glCheckFramebufferStatusOES = epoxy_glCheckFramebufferStatusOES_dispatch_table_rewrite_ptr,
    .glCheckNamedFramebufferStatus = epoxy_glCheckNamedFramebufferStatus_dispatch_table_rewrite_ptr,
    .glCheckNamedFramebufferStatusEXT = epoxy_glCheckNamedFramebufferStatusEXT_dispatch_table_rewrite_ptr,
    .glClampColor = epoxy_glClampColor_dispatch_table_rewrite_ptr,
    .glClampColorARB = epoxy_glClampColorARB_dispatch_table_rewrite_ptr,
    .glClear = epoxy_glClear_dispatch_table_rewrite_ptr,
    .glClearAccum = epoxy_glClearAccum_dispatch_table_rewrite_ptr,
    .glClearAccumxOES = epoxy_glClearAccumxOES_dispatch_table_rewrite_ptr,
    .glClearBufferData = epoxy_glClearBufferData_dispatch_table_rewrite_ptr,
    .glClearBufferSubData = epoxy_glClearBufferSubData_dispatch_table_rewrite_ptr,
    .glClearBufferfi = epoxy_glClearBufferfi_dispatch_table_rewrite_ptr,
    .glClearBufferfv = epoxy_glClearBufferfv_dispatch_table_rewrite_ptr,
    .glClearBufferiv = epoxy_glClearBufferiv_dispatch_table_rewrite_ptr,
    .glClearBufferuiv = epoxy_glClearBufferuiv_dispatch_table_rewrite_ptr,
    .glClearColor = epoxy_glClearColor_dispatch_table_rewrite_ptr,
    .glClearColorIiEXT = epoxy_glClearColorIiEXT_dispatch_table_rewrite_ptr,
    .glClearColorIuiEXT = epoxy_glClearColorIuiEXT_dispatch_table_rewrite_ptr,
    .glClearColorx = epoxy_glClearColorx_dispatch_table_rewrite_ptr,
    .glClearColorxOES = epoxy_glClearColorxOES_dispatch_table_rewrite_ptr,
    .glClearDepth = epoxy_glClearDepth_dispatch_table_rewrite_ptr,
    .glClearDepthdNV = epoxy_glClearDepthdNV_dispatch_table_rewrite_ptr,
    .glClearDepthf = epoxy_glClearDepthf_dispatch_table_rewrite_ptr,
    .glClearDepthfOES = epoxy_glClearDepthfOES_dispatch_table_rewrite_ptr,
    .glClearDepthx = epoxy_glClearDepthx_dispatch_table_rewrite_ptr,
    .glClearDepthxOES = epoxy_glClearDepthxOES_dispatch_table_rewrite_ptr,
    .glClearIndex = epoxy_glClearIndex_dispatch_table_rewrite_ptr,
    .glClearNamedBufferData = epoxy_glClearNamedBufferData_dispatch_table_rewrite_ptr,
    .glClearNamedBufferDataEXT = epoxy_glClearNamedBufferDataEXT_dispatch_table_rewrite_ptr,
    .glClearNamedBufferSubData = epoxy_glClearNamedBufferSubData_dispatch_table_rewrite_ptr,
    .glClearNamedBufferSubDataEXT = epoxy_glClearNamedBufferSubDataEXT_dispatch_table_rewrite_ptr,
    .glClearNamedFramebufferfi = epoxy_glClearNamedFramebufferfi_dispatch_table_rewrite_ptr,
    .glClearNamedFramebufferfv = epoxy_glClearNamedFramebufferfv_dispatch_table_rewrite_ptr,
    .glClearNamedFramebufferiv = epoxy_glClearNamedFramebufferiv_dispatch_table_rewrite_ptr,
    .glClearNamedFramebufferuiv = epoxy_glClearNamedFramebufferuiv_dispatch_table_rewrite_ptr,
    .glClearPixelLocalStorageuiEXT = epoxy_glClearPixelLocalStorageuiEXT_dispatch_table_rewrite_ptr,
    .glClearStencil = epoxy_glClearStencil_dispatch_table_rewrite_ptr,
    .glClearTexImage = epoxy_glClearTexImage_dispatch_table_rewrite_ptr,
    .glClearTexSubImage = epoxy_glClearTexSubImage_dispatch_table_rewrite_ptr,
    .glClientActiveTexture = epoxy_glClientActiveTexture_dispatch_table_rewrite_ptr,
    .glClientActiveTextureARB = epoxy_glClientActiveTextureARB_dispatch_table_rewrite_ptr,
    .glClientActiveVertexStreamATI = epoxy_glClientActiveVertexStreamATI_dispatch_table_rewrite_ptr,
    .glClientAttribDefaultEXT = epoxy_glClientAttribDefaultEXT_dispatch_table_rewrite_ptr,
    .glClientWaitSync = epoxy_glClientWaitSync_dispatch_table_rewrite_ptr,
    .glClientWaitSyncAPPLE = epoxy_glClientWaitSyncAPPLE_dispatch_table_rewrite_ptr,
    .glClipControl = epoxy_glClipControl_dispatch_table_rewrite_ptr,
    .glClipPlane = epoxy_glClipPlane_dispatch_table_rewrite_ptr,
    .glClipPlanef = epoxy_glClipPlanef_dispatch_table_rewrite_ptr,
    .glClipPlanefIMG = epoxy_glClipPlanefIMG_dispatch_table_rewrite_ptr,
    .glClipPlanefOES = epoxy_glClipPlanefOES_dispatch_table_rewrite_ptr,
    .glClipPlanex = epoxy_glClipPlanex_dispatch_table_rewrite_ptr,
    .glClipPlanexIMG = epoxy_glClipPlanexIMG_dispatch_table_rewrite_ptr,
    .glClipPlanexOES = epoxy_glClipPlanexOES_dispatch_table_rewrite_ptr,
    .glColor3b = epoxy_glColor3b_dispatch_table_rewrite_ptr,
    .glColor3bv = epoxy_glColor3bv_dispatch_table_rewrite_ptr,
    .glColor3d = epoxy_glColor3d_dispatch_table_rewrite_ptr,
    .glColor3dv = epoxy_glColor3dv_dispatch_table_rewrite_ptr,
    .glColor3f = epoxy_glColor3f_dispatch_table_rewrite_ptr,
    .glColor3fVertex3fSUN = epoxy_glColor3fVertex3fSUN_dispatch_table_rewrite_ptr,
    .glColor3fVertex3fvSUN = epoxy_glColor3fVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glColor3fv = epoxy_glColor3fv_dispatch_table_rewrite_ptr,
    .glColor3hNV = epoxy_glColor3hNV_dispatch_table_rewrite_ptr,
    .glColor3hvNV = epoxy_glColor3hvNV_dispatch_table_rewrite_ptr,
    .glColor3i = epoxy_glColor3i_dispatch_table_rewrite_ptr,
    .glColor3iv = epoxy_glColor3iv_dispatch_table_rewrite_ptr,
    .glColor3s = epoxy_glColor3s_dispatch_table_rewrite_ptr,
    .glColor3sv = epoxy_glColor3sv_dispatch_table_rewrite_ptr,
    .glColor3ub = epoxy_glColor3ub_dispatch_table_rewrite_ptr,
    .glColor3ubv = epoxy_glColor3ubv_dispatch_table_rewrite_ptr,
    .glColor3ui = epoxy_glColor3ui_dispatch_table_rewrite_ptr,
    .glColor3uiv = epoxy_glColor3uiv_dispatch_table_rewrite_ptr,
    .glColor3us = epoxy_glColor3us_dispatch_table_rewrite_ptr,
    .glColor3usv = epoxy_glColor3usv_dispatch_table_rewrite_ptr,
    .glColor3xOES = epoxy_glColor3xOES_dispatch_table_rewrite_ptr,
    .glColor3xvOES = epoxy_glColor3xvOES_dispatch_table_rewrite_ptr,
    .glColor4b = epoxy_glColor4b_dispatch_table_rewrite_ptr,
    .glColor4bv = epoxy_glColor4bv_dispatch_table_rewrite_ptr,
    .glColor4d = epoxy_glColor4d_dispatch_table_rewrite_ptr,
    .glColor4dv = epoxy_glColor4dv_dispatch_table_rewrite_ptr,
    .glColor4f = epoxy_glColor4f_dispatch_table_rewrite_ptr,
    .glColor4fNormal3fVertex3fSUN = epoxy_glColor4fNormal3fVertex3fSUN_dispatch_table_rewrite_ptr,
    .glColor4fNormal3fVertex3fvSUN = epoxy_glColor4fNormal3fVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glColor4fv = epoxy_glColor4fv_dispatch_table_rewrite_ptr,
    .glColor4hNV = epoxy_glColor4hNV_dispatch_table_rewrite_ptr,
    .glColor4hvNV = epoxy_glColor4hvNV_dispatch_table_rewrite_ptr,
    .glColor4i = epoxy_glColor4i_dispatch_table_rewrite_ptr,
    .glColor4iv = epoxy_glColor4iv_dispatch_table_rewrite_ptr,
    .glColor4s = epoxy_glColor4s_dispatch_table_rewrite_ptr,
    .glColor4sv = epoxy_glColor4sv_dispatch_table_rewrite_ptr,
    .glColor4ub = epoxy_glColor4ub_dispatch_table_rewrite_ptr,
    .glColor4ubVertex2fSUN = epoxy_glColor4ubVertex2fSUN_dispatch_table_rewrite_ptr,
    .glColor4ubVertex2fvSUN = epoxy_glColor4ubVertex2fvSUN_dispatch_table_rewrite_ptr,
    .glColor4ubVertex3fSUN = epoxy_glColor4ubVertex3fSUN_dispatch_table_rewrite_ptr,
    .glColor4ubVertex3fvSUN = epoxy_glColor4ubVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glColor4ubv = epoxy_glColor4ubv_dispatch_table_rewrite_ptr,
    .glColor4ui = epoxy_glColor4ui_dispatch_table_rewrite_ptr,
    .glColor4uiv = epoxy_glColor4uiv_dispatch_table_rewrite_ptr,
    .glColor4us = epoxy_glColor4us_dispatch_table_rewrite_ptr,
    .glColor4usv = epoxy_glColor4usv_dispatch_table_rewrite_ptr,
    .glColor4x = epoxy_glColor4x_dispatch_table_rewrite_ptr,
    .glColor4xOES = epoxy_glColor4xOES_dispatch_table_rewrite_ptr,
    .glColor4xvOES = epoxy_glColor4xvOES_dispatch_table_rewrite_ptr,
    .glColorFormatNV = epoxy_glColorFormatNV_dispatch_table_rewrite_ptr,
    .glColorFragmentOp1ATI = epoxy_glColorFragmentOp1ATI_dispatch_table_rewrite_ptr,
    .glColorFragmentOp2ATI = epoxy_glColorFragmentOp2ATI_dispatch_table_rewrite_ptr,
    .glColorFragmentOp3ATI = epoxy_glColorFragmentOp3ATI_dispatch_table_rewrite_ptr,
    .glColorMask = epoxy_glColorMask_dispatch_table_rewrite_ptr,
    .glColorMaskIndexedEXT = epoxy_glColorMaskIndexedEXT_dispatch_table_rewrite_ptr,
    .glColorMaski = epoxy_glColorMaski_dispatch_table_rewrite_ptr,
    .glColorMaskiEXT = epoxy_glColorMaskiEXT_dispatch_table_rewrite_ptr,
    .glColorMaskiOES = epoxy_glColorMaskiOES_dispatch_table_rewrite_ptr,
    .glColorMaterial = epoxy_glColorMaterial_dispatch_table_rewrite_ptr,
    .glColorP3ui = epoxy_glColorP3ui_dispatch_table_rewrite_ptr,
    .glColorP3uiv = epoxy_glColorP3uiv_dispatch_table_rewrite_ptr,
    .glColorP4ui = epoxy_glColorP4ui_dispatch_table_rewrite_ptr,
    .glColorP4uiv = epoxy_glColorP4uiv_dispatch_table_rewrite_ptr,
    .glColorPointer = epoxy_glColorPointer_dispatch_table_rewrite_ptr,
    .glColorPointerEXT = epoxy_glColorPointerEXT_dispatch_table_rewrite_ptr,
    .glColorPointerListIBM = epoxy_glColorPointerListIBM_dispatch_table_rewrite_ptr,
    .glColorPointervINTEL = epoxy_glColorPointervINTEL_dispatch_table_rewrite_ptr,
    .glColorSubTable = epoxy_glColorSubTable_dispatch_table_rewrite_ptr,
    .glColorSubTableEXT = epoxy_glColorSubTableEXT_dispatch_table_rewrite_ptr,
    .glColorTable = epoxy_glColorTable_dispatch_table_rewrite_ptr,
    .glColorTableEXT = epoxy_glColorTableEXT_dispatch_table_rewrite_ptr,
    .glColorTableParameterfv = epoxy_glColorTableParameterfv_dispatch_table_rewrite_ptr,
    .glColorTableParameterfvSGI = epoxy_glColorTableParameterfvSGI_dispatch_table_rewrite_ptr,
    .glColorTableParameteriv = epoxy_glColorTableParameteriv_dispatch_table_rewrite_ptr,
    .glColorTableParameterivSGI = epoxy_glColorTableParameterivSGI_dispatch_table_rewrite_ptr,
    .glColorTableSGI = epoxy_glColorTableSGI_dispatch_table_rewrite_ptr,
    .glCombinerInputNV = epoxy_glCombinerInputNV_dispatch_table_rewrite_ptr,
    .glCombinerOutputNV = epoxy_glCombinerOutputNV_dispatch_table_rewrite_ptr,
    .glCombinerParameterfNV = epoxy_glCombinerParameterfNV_dispatch_table_rewrite_ptr,
    .glCombinerParameterfvNV = epoxy_glCombinerParameterfvNV_dispatch_table_rewrite_ptr,
    .glCombinerParameteriNV = epoxy_glCombinerParameteriNV_dispatch_table_rewrite_ptr,
    .glCombinerParameterivNV = epoxy_glCombinerParameterivNV_dispatch_table_rewrite_ptr,
    .glCombinerStageParameterfvNV = epoxy_glCombinerStageParameterfvNV_dispatch_table_rewrite_ptr,
    .glCommandListSegmentsNV = epoxy_glCommandListSegmentsNV_dispatch_table_rewrite_ptr,
    .glCompileCommandListNV = epoxy_glCompileCommandListNV_dispatch_table_rewrite_ptr,
    .glCompileShader = epoxy_glCompileShader_dispatch_table_rewrite_ptr,
    .glCompileShaderARB = epoxy_glCompileShaderARB_dispatch_table_rewrite_ptr,
    .glCompileShaderIncludeARB = epoxy_glCompileShaderIncludeARB_dispatch_table_rewrite_ptr,
    .glCompressedMultiTexImage1DEXT = epoxy_glCompressedMultiTexImage1DEXT_dispatch_table_rewrite_ptr,
    .glCompressedMultiTexImage2DEXT = epoxy_glCompressedMultiTexImage2DEXT_dispatch_table_rewrite_ptr,
    .glCompressedMultiTexImage3DEXT = epoxy_glCompressedMultiTexImage3DEXT_dispatch_table_rewrite_ptr,
    .glCompressedMultiTexSubImage1DEXT = epoxy_glCompressedMultiTexSubImage1DEXT_dispatch_table_rewrite_ptr,
    .glCompressedMultiTexSubImage2DEXT = epoxy_glCompressedMultiTexSubImage2DEXT_dispatch_table_rewrite_ptr,
    .glCompressedMultiTexSubImage3DEXT = epoxy_glCompressedMultiTexSubImage3DEXT_dispatch_table_rewrite_ptr,
    .glCompressedTexImage1D = epoxy_glCompressedTexImage1D_dispatch_table_rewrite_ptr,
    .glCompressedTexImage1DARB = epoxy_glCompressedTexImage1DARB_dispatch_table_rewrite_ptr,
    .glCompressedTexImage2D = epoxy_glCompressedTexImage2D_dispatch_table_rewrite_ptr,
    .glCompressedTexImage2DARB = epoxy_glCompressedTexImage2DARB_dispatch_table_rewrite_ptr,
    .glCompressedTexImage3D = epoxy_glCompressedTexImage3D_dispatch_table_rewrite_ptr,
    .glCompressedTexImage3DARB = epoxy_glCompressedTexImage3DARB_dispatch_table_rewrite_ptr,
    .glCompressedTexImage3DOES = epoxy_glCompressedTexImage3DOES_dispatch_table_rewrite_ptr,
    .glCompressedTexSubImage1D = epoxy_glCompressedTexSubImage1D_dispatch_table_rewrite_ptr,
    .glCompressedTexSubImage1DARB = epoxy_glCompressedTexSubImage1DARB_dispatch_table_rewrite_ptr,
    .glCompressedTexSubImage2D = epoxy_glCompressedTexSubImage2D_dispatch_table_rewrite_ptr,
    .glCompressedTexSubImage2DARB = epoxy_glCompressedTexSubImage2DARB_dispatch_table_rewrite_ptr,
    .glCompressedTexSubImage3D = epoxy_glCompressedTexSubImage3D_dispatch_table_rewrite_ptr,
    .glCompressedTexSubImage3DARB = epoxy_glCompressedTexSubImage3DARB_dispatch_table_rewrite_ptr,
    .glCompressedTexSubImage3DOES = epoxy_glCompressedTexSubImage3DOES_dispatch_table_rewrite_ptr,
    .glCompressedTextureImage1DEXT = epoxy_glCompressedTextureImage1DEXT_dispatch_table_rewrite_ptr,
    .glCompressedTextureImage2DEXT = epoxy_glCompressedTextureImage2DEXT_dispatch_table_rewrite_ptr,
    .glCompressedTextureImage3DEXT = epoxy_glCompressedTextureImage3DEXT_dispatch_table_rewrite_ptr,
    .glCompressedTextureSubImage1D = epoxy_glCompressedTextureSubImage1D_dispatch_table_rewrite_ptr,
    .glCompressedTextureSubImage1DEXT = epoxy_glCompressedTextureSubImage1DEXT_dispatch_table_rewrite_ptr,
    .glCompressedTextureSubImage2D = epoxy_glCompressedTextureSubImage2D_dispatch_table_rewrite_ptr,
    .glCompressedTextureSubImage2DEXT = epoxy_glCompressedTextureSubImage2DEXT_dispatch_table_rewrite_ptr,
    .glCompressedTextureSubImage3D = epoxy_glCompressedTextureSubImage3D_dispatch_table_rewrite_ptr,
    .glCompressedTextureSubImage3DEXT = epoxy_glCompressedTextureSubImage3DEXT_dispatch_table_rewrite_ptr,
    .glConservativeRasterParameterfNV = epoxy_glConservativeRasterParameterfNV_dispatch_table_rewrite_ptr,
    .glConservativeRasterParameteriNV = epoxy_glConservativeRasterParameteriNV_dispatch_table_rewrite_ptr,
    .glConvolutionFilter1D = epoxy_glConvolutionFilter1D_dispatch_table_rewrite_ptr,
    .glConvolutionFilter1DEXT = epoxy_glConvolutionFilter1DEXT_dispatch_table_rewrite_ptr,
    .glConvolutionFilter2D = epoxy_glConvolutionFilter2D_dispatch_table_rewrite_ptr,
    .glConvolutionFilter2DEXT = epoxy_glConvolutionFilter2DEXT_dispatch_table_rewrite_ptr,
    .glConvolutionParameterf = epoxy_glConvolutionParameterf_dispatch_table_rewrite_ptr,
    .glConvolutionParameterfEXT = epoxy_glConvolutionParameterfEXT_dispatch_table_rewrite_ptr,
    .glConvolutionParameterfv = epoxy_glConvolutionParameterfv_dispatch_table_rewrite_ptr,
    .glConvolutionParameterfvEXT = epoxy_glConvolutionParameterfvEXT_dispatch_table_rewrite_ptr,
    .glConvolutionParameteri = epoxy_glConvolutionParameteri_dispatch_table_rewrite_ptr,
    .glConvolutionParameteriEXT = epoxy_glConvolutionParameteriEXT_dispatch_table_rewrite_ptr,
    .glConvolutionParameteriv = epoxy_glConvolutionParameteriv_dispatch_table_rewrite_ptr,
    .glConvolutionParameterivEXT = epoxy_glConvolutionParameterivEXT_dispatch_table_rewrite_ptr,
    .glConvolutionParameterxOES = epoxy_glConvolutionParameterxOES_dispatch_table_rewrite_ptr,
    .glConvolutionParameterxvOES = epoxy_glConvolutionParameterxvOES_dispatch_table_rewrite_ptr,
    .glCopyBufferSubData = epoxy_glCopyBufferSubData_dispatch_table_rewrite_ptr,
    .glCopyBufferSubDataNV = epoxy_glCopyBufferSubDataNV_dispatch_table_rewrite_ptr,
    .glCopyColorSubTable = epoxy_glCopyColorSubTable_dispatch_table_rewrite_ptr,
    .glCopyColorSubTableEXT = epoxy_glCopyColorSubTableEXT_dispatch_table_rewrite_ptr,
    .glCopyColorTable = epoxy_glCopyColorTable_dispatch_table_rewrite_ptr,
    .glCopyColorTableSGI = epoxy_glCopyColorTableSGI_dispatch_table_rewrite_ptr,
    .glCopyConvolutionFilter1D = epoxy_glCopyConvolutionFilter1D_dispatch_table_rewrite_ptr,
    .glCopyConvolutionFilter1DEXT = epoxy_glCopyConvolutionFilter1DEXT_dispatch_table_rewrite_ptr,
    .glCopyConvolutionFilter2D = epoxy_glCopyConvolutionFilter2D_dispatch_table_rewrite_ptr,
    .glCopyConvolutionFilter2DEXT = epoxy_glCopyConvolutionFilter2DEXT_dispatch_table_rewrite_ptr,
    .glCopyImageSubData = epoxy_glCopyImageSubData_dispatch_table_rewrite_ptr,
    .glCopyImageSubDataEXT = epoxy_glCopyImageSubDataEXT_dispatch_table_rewrite_ptr,
    .glCopyImageSubDataNV = epoxy_glCopyImageSubDataNV_dispatch_table_rewrite_ptr,
    .glCopyImageSubDataOES = epoxy_glCopyImageSubDataOES_dispatch_table_rewrite_ptr,
    .glCopyMultiTexImage1DEXT = epoxy_glCopyMultiTexImage1DEXT_dispatch_table_rewrite_ptr,
    .glCopyMultiTexImage2DEXT = epoxy_glCopyMultiTexImage2DEXT_dispatch_table_rewrite_ptr,
    .glCopyMultiTexSubImage1DEXT = epoxy_glCopyMultiTexSubImage1DEXT_dispatch_table_rewrite_ptr,
    .glCopyMultiTexSubImage2DEXT = epoxy_glCopyMultiTexSubImage2DEXT_dispatch_table_rewrite_ptr,
    .glCopyMultiTexSubImage3DEXT = epoxy_glCopyMultiTexSubImage3DEXT_dispatch_table_rewrite_ptr,
    .glCopyNamedBufferSubData = epoxy_glCopyNamedBufferSubData_dispatch_table_rewrite_ptr,
    .glCopyPathNV = epoxy_glCopyPathNV_dispatch_table_rewrite_ptr,
    .glCopyPixels = epoxy_glCopyPixels_dispatch_table_rewrite_ptr,
    .glCopyTexImage1D = epoxy_glCopyTexImage1D_dispatch_table_rewrite_ptr,
    .glCopyTexImage1DEXT = epoxy_glCopyTexImage1DEXT_dispatch_table_rewrite_ptr,
    .glCopyTexImage2D = epoxy_glCopyTexImage2D_dispatch_table_rewrite_ptr,
    .glCopyTexImage2DEXT = epoxy_glCopyTexImage2DEXT_dispatch_table_rewrite_ptr,
    .glCopyTexSubImage1D = epoxy_glCopyTexSubImage1D_dispatch_table_rewrite_ptr,
    .glCopyTexSubImage1DEXT = epoxy_glCopyTexSubImage1DEXT_dispatch_table_rewrite_ptr,
    .glCopyTexSubImage2D = epoxy_glCopyTexSubImage2D_dispatch_table_rewrite_ptr,
    .glCopyTexSubImage2DEXT = epoxy_glCopyTexSubImage2DEXT_dispatch_table_rewrite_ptr,
    .glCopyTexSubImage3D = epoxy_glCopyTexSubImage3D_dispatch_table_rewrite_ptr,
    .glCopyTexSubImage3DEXT = epoxy_glCopyTexSubImage3DEXT_dispatch_table_rewrite_ptr,
    .glCopyTexSubImage3DOES = epoxy_glCopyTexSubImage3DOES_dispatch_table_rewrite_ptr,
    .glCopyTextureImage1DEXT = epoxy_glCopyTextureImage1DEXT_dispatch_table_rewrite_ptr,
    .glCopyTextureImage2DEXT = epoxy_glCopyTextureImage2DEXT_dispatch_table_rewrite_ptr,
    .glCopyTextureLevelsAPPLE = epoxy_glCopyTextureLevelsAPPLE_dispatch_table_rewrite_ptr,
    .glCopyTextureSubImage1D = epoxy_glCopyTextureSubImage1D_dispatch_table_rewrite_ptr,
    .glCopyTextureSubImage1DEXT = epoxy_glCopyTextureSubImage1DEXT_dispatch_table_rewrite_ptr,
    .glCopyTextureSubImage2D = epoxy_glCopyTextureSubImage2D_dispatch_table_rewrite_ptr,
    .glCopyTextureSubImage2DEXT = epoxy_glCopyTextureSubImage2DEXT_dispatch_table_rewrite_ptr,
    .glCopyTextureSubImage3D = epoxy_glCopyTextureSubImage3D_dispatch_table_rewrite_ptr,
    .glCopyTextureSubImage3DEXT = epoxy_glCopyTextureSubImage3DEXT_dispatch_table_rewrite_ptr,
    .glCoverFillPathInstancedNV = epoxy_glCoverFillPathInstancedNV_dispatch_table_rewrite_ptr,
    .glCoverFillPathNV = epoxy_glCoverFillPathNV_dispatch_table_rewrite_ptr,
    .glCoverStrokePathInstancedNV = epoxy_glCoverStrokePathInstancedNV_dispatch_table_rewrite_ptr,
    .glCoverStrokePathNV = epoxy_glCoverStrokePathNV_dispatch_table_rewrite_ptr,
    .glCoverageMaskNV = epoxy_glCoverageMaskNV_dispatch_table_rewrite_ptr,
    .glCoverageModulationNV = epoxy_glCoverageModulationNV_dispatch_table_rewrite_ptr,
    .glCoverageModulationTableNV = epoxy_glCoverageModulationTableNV_dispatch_table_rewrite_ptr,
    .glCoverageOperationNV = epoxy_glCoverageOperationNV_dispatch_table_rewrite_ptr,
    .glCreateBuffers = epoxy_glCreateBuffers_dispatch_table_rewrite_ptr,
    .glCreateCommandListsNV = epoxy_glCreateCommandListsNV_dispatch_table_rewrite_ptr,
    .glCreateFramebuffers = epoxy_glCreateFramebuffers_dispatch_table_rewrite_ptr,
    .glCreatePerfQueryINTEL = epoxy_glCreatePerfQueryINTEL_dispatch_table_rewrite_ptr,
    .glCreateProgram = epoxy_glCreateProgram_dispatch_table_rewrite_ptr,
    .glCreateProgramObjectARB = epoxy_glCreateProgramObjectARB_dispatch_table_rewrite_ptr,
    .glCreateProgramPipelines = epoxy_glCreateProgramPipelines_dispatch_table_rewrite_ptr,
    .glCreateQueries = epoxy_glCreateQueries_dispatch_table_rewrite_ptr,
    .glCreateRenderbuffers = epoxy_glCreateRenderbuffers_dispatch_table_rewrite_ptr,
    .glCreateSamplers = epoxy_glCreateSamplers_dispatch_table_rewrite_ptr,
    .glCreateShader = epoxy_glCreateShader_dispatch_table_rewrite_ptr,
    .glCreateShaderObjectARB = epoxy_glCreateShaderObjectARB_dispatch_table_rewrite_ptr,
    .glCreateShaderProgramEXT = epoxy_glCreateShaderProgramEXT_dispatch_table_rewrite_ptr,
    .glCreateShaderProgramv = epoxy_glCreateShaderProgramv_dispatch_table_rewrite_ptr,
    .glCreateShaderProgramvEXT = epoxy_glCreateShaderProgramvEXT_dispatch_table_rewrite_ptr,
    .glCreateStatesNV = epoxy_glCreateStatesNV_dispatch_table_rewrite_ptr,
    .glCreateSyncFromCLeventARB = epoxy_glCreateSyncFromCLeventARB_dispatch_table_rewrite_ptr,
    .glCreateTextures = epoxy_glCreateTextures_dispatch_table_rewrite_ptr,
    .glCreateTransformFeedbacks = epoxy_glCreateTransformFeedbacks_dispatch_table_rewrite_ptr,
    .glCreateVertexArrays = epoxy_glCreateVertexArrays_dispatch_table_rewrite_ptr,
    .glCullFace = epoxy_glCullFace_dispatch_table_rewrite_ptr,
    .glCullParameterdvEXT = epoxy_glCullParameterdvEXT_dispatch_table_rewrite_ptr,
    .glCullParameterfvEXT = epoxy_glCullParameterfvEXT_dispatch_table_rewrite_ptr,
    .glCurrentPaletteMatrixARB = epoxy_glCurrentPaletteMatrixARB_dispatch_table_rewrite_ptr,
    .glCurrentPaletteMatrixOES = epoxy_glCurrentPaletteMatrixOES_dispatch_table_rewrite_ptr,
    .glDebugMessageCallback = epoxy_glDebugMessageCallback_dispatch_table_rewrite_ptr,
    .glDebugMessageCallbackAMD = epoxy_glDebugMessageCallbackAMD_dispatch_table_rewrite_ptr,
    .glDebugMessageCallbackARB = epoxy_glDebugMessageCallbackARB_dispatch_table_rewrite_ptr,
    .glDebugMessageCallbackKHR = epoxy_glDebugMessageCallbackKHR_dispatch_table_rewrite_ptr,
    .glDebugMessageControl = epoxy_glDebugMessageControl_dispatch_table_rewrite_ptr,
    .glDebugMessageControlARB = epoxy_glDebugMessageControlARB_dispatch_table_rewrite_ptr,
    .glDebugMessageControlKHR = epoxy_glDebugMessageControlKHR_dispatch_table_rewrite_ptr,
    .glDebugMessageEnableAMD = epoxy_glDebugMessageEnableAMD_dispatch_table_rewrite_ptr,
    .glDebugMessageInsert = epoxy_glDebugMessageInsert_dispatch_table_rewrite_ptr,
    .glDebugMessageInsertAMD = epoxy_glDebugMessageInsertAMD_dispatch_table_rewrite_ptr,
    .glDebugMessageInsertARB = epoxy_glDebugMessageInsertARB_dispatch_table_rewrite_ptr,
    .glDebugMessageInsertKHR = epoxy_glDebugMessageInsertKHR_dispatch_table_rewrite_ptr,
    .glDeformSGIX = epoxy_glDeformSGIX_dispatch_table_rewrite_ptr,
    .glDeformationMap3dSGIX = epoxy_glDeformationMap3dSGIX_dispatch_table_rewrite_ptr,
    .glDeformationMap3fSGIX = epoxy_glDeformationMap3fSGIX_dispatch_table_rewrite_ptr,
    .glDeleteAsyncMarkersSGIX = epoxy_glDeleteAsyncMarkersSGIX_dispatch_table_rewrite_ptr,
    .glDeleteBuffers = epoxy_glDeleteBuffers_dispatch_table_rewrite_ptr,
    .glDeleteBuffersARB = epoxy_glDeleteBuffersARB_dispatch_table_rewrite_ptr,
    .glDeleteCommandListsNV = epoxy_glDeleteCommandListsNV_dispatch_table_rewrite_ptr,
    .glDeleteFencesAPPLE = epoxy_glDeleteFencesAPPLE_dispatch_table_rewrite_ptr,
    .glDeleteFencesNV = epoxy_glDeleteFencesNV_dispatch_table_rewrite_ptr,
    .glDeleteFragmentShaderATI = epoxy_glDeleteFragmentShaderATI_dispatch_table_rewrite_ptr,
    .glDeleteFramebuffers = epoxy_glDeleteFramebuffers_dispatch_table_rewrite_ptr,
    .glDeleteFramebuffersEXT = epoxy_glDeleteFramebuffersEXT_dispatch_table_rewrite_ptr,
    .glDeleteFramebuffersOES = epoxy_glDeleteFramebuffersOES_dispatch_table_rewrite_ptr,
    .glDeleteLists = epoxy_glDeleteLists_dispatch_table_rewrite_ptr,
    .glDeleteNamedStringARB = epoxy_glDeleteNamedStringARB_dispatch_table_rewrite_ptr,
    .glDeleteNamesAMD = epoxy_glDeleteNamesAMD_dispatch_table_rewrite_ptr,
    .glDeleteObjectARB = epoxy_glDeleteObjectARB_dispatch_table_rewrite_ptr,
    .glDeleteOcclusionQueriesNV = epoxy_glDeleteOcclusionQueriesNV_dispatch_table_rewrite_ptr,
    .glDeletePathsNV = epoxy_glDeletePathsNV_dispatch_table_rewrite_ptr,
    .glDeletePerfMonitorsAMD = epoxy_glDeletePerfMonitorsAMD_dispatch_table_rewrite_ptr,
    .glDeletePerfQueryINTEL = epoxy_glDeletePerfQueryINTEL_dispatch_table_rewrite_ptr,
    .glDeleteProgram = epoxy_glDeleteProgram_dispatch_table_rewrite_ptr,
    .glDeleteProgramPipelines = epoxy_glDeleteProgramPipelines_dispatch_table_rewrite_ptr,
    .glDeleteProgramPipelinesEXT = epoxy_glDeleteProgramPipelinesEXT_dispatch_table_rewrite_ptr,
    .glDeleteProgramsARB = epoxy_glDeleteProgramsARB_dispatch_table_rewrite_ptr,
    .glDeleteProgramsNV = epoxy_glDeleteProgramsNV_dispatch_table_rewrite_ptr,
    .glDeleteQueries = epoxy_glDeleteQueries_dispatch_table_rewrite_ptr,
    .glDeleteQueriesARB = epoxy_glDeleteQueriesARB_dispatch_table_rewrite_ptr,
    .glDeleteQueriesEXT = epoxy_glDeleteQueriesEXT_dispatch_table_rewrite_ptr,
    .glDeleteRenderbuffers = epoxy_glDeleteRenderbuffers_dispatch_table_rewrite_ptr,
    .glDeleteRenderbuffersEXT = epoxy_glDeleteRenderbuffersEXT_dispatch_table_rewrite_ptr,
    .glDeleteRenderbuffersOES = epoxy_glDeleteRenderbuffersOES_dispatch_table_rewrite_ptr,
    .glDeleteSamplers = epoxy_glDeleteSamplers_dispatch_table_rewrite_ptr,
    .glDeleteShader = epoxy_glDeleteShader_dispatch_table_rewrite_ptr,
    .glDeleteStatesNV = epoxy_glDeleteStatesNV_dispatch_table_rewrite_ptr,
    .glDeleteSync = epoxy_glDeleteSync_dispatch_table_rewrite_ptr,
    .glDeleteSyncAPPLE = epoxy_glDeleteSyncAPPLE_dispatch_table_rewrite_ptr,
    .glDeleteTextures = epoxy_glDeleteTextures_dispatch_table_rewrite_ptr,
    .glDeleteTexturesEXT = epoxy_glDeleteTexturesEXT_dispatch_table_rewrite_ptr,
    .glDeleteTransformFeedbacks = epoxy_glDeleteTransformFeedbacks_dispatch_table_rewrite_ptr,
    .glDeleteTransformFeedbacksNV = epoxy_glDeleteTransformFeedbacksNV_dispatch_table_rewrite_ptr,
    .glDeleteVertexArrays = epoxy_glDeleteVertexArrays_dispatch_table_rewrite_ptr,
    .glDeleteVertexArraysAPPLE = epoxy_glDeleteVertexArraysAPPLE_dispatch_table_rewrite_ptr,
    .glDeleteVertexArraysOES = epoxy_glDeleteVertexArraysOES_dispatch_table_rewrite_ptr,
    .glDeleteVertexShaderEXT = epoxy_glDeleteVertexShaderEXT_dispatch_table_rewrite_ptr,
    .glDepthBoundsEXT = epoxy_glDepthBoundsEXT_dispatch_table_rewrite_ptr,
    .glDepthBoundsdNV = epoxy_glDepthBoundsdNV_dispatch_table_rewrite_ptr,
    .glDepthFunc = epoxy_glDepthFunc_dispatch_table_rewrite_ptr,
    .glDepthMask = epoxy_glDepthMask_dispatch_table_rewrite_ptr,
    .glDepthRange = epoxy_glDepthRange_dispatch_table_rewrite_ptr,
    .glDepthRangeArrayfvNV = epoxy_glDepthRangeArrayfvNV_dispatch_table_rewrite_ptr,
    .glDepthRangeArrayv = epoxy_glDepthRangeArrayv_dispatch_table_rewrite_ptr,
    .glDepthRangeIndexed = epoxy_glDepthRangeIndexed_dispatch_table_rewrite_ptr,
    .glDepthRangeIndexedfNV = epoxy_glDepthRangeIndexedfNV_dispatch_table_rewrite_ptr,
    .glDepthRangedNV = epoxy_glDepthRangedNV_dispatch_table_rewrite_ptr,
    .glDepthRangef = epoxy_glDepthRangef_dispatch_table_rewrite_ptr,
    .glDepthRangefOES = epoxy_glDepthRangefOES_dispatch_table_rewrite_ptr,
    .glDepthRangex = epoxy_glDepthRangex_dispatch_table_rewrite_ptr,
    .glDepthRangexOES = epoxy_glDepthRangexOES_dispatch_table_rewrite_ptr,
    .glDetachObjectARB = epoxy_glDetachObjectARB_dispatch_table_rewrite_ptr,
    .glDetachShader = epoxy_glDetachShader_dispatch_table_rewrite_ptr,
    .glDetailTexFuncSGIS = epoxy_glDetailTexFuncSGIS_dispatch_table_rewrite_ptr,
    .glDisable = epoxy_glDisable_dispatch_table_rewrite_ptr,
    .glDisableClientState = epoxy_glDisableClientState_dispatch_table_rewrite_ptr,
    .glDisableClientStateIndexedEXT = epoxy_glDisableClientStateIndexedEXT_dispatch_table_rewrite_ptr,
    .glDisableClientStateiEXT = epoxy_glDisableClientStateiEXT_dispatch_table_rewrite_ptr,
    .glDisableDriverControlQCOM = epoxy_glDisableDriverControlQCOM_dispatch_table_rewrite_ptr,
    .glDisableIndexedEXT = epoxy_glDisableIndexedEXT_dispatch_table_rewrite_ptr,
    .glDisableVariantClientStateEXT = epoxy_glDisableVariantClientStateEXT_dispatch_table_rewrite_ptr,
    .glDisableVertexArrayAttrib = epoxy_glDisableVertexArrayAttrib_dispatch_table_rewrite_ptr,
    .glDisableVertexArrayAttribEXT = epoxy_glDisableVertexArrayAttribEXT_dispatch_table_rewrite_ptr,
    .glDisableVertexArrayEXT = epoxy_glDisableVertexArrayEXT_dispatch_table_rewrite_ptr,
    .glDisableVertexAttribAPPLE = epoxy_glDisableVertexAttribAPPLE_dispatch_table_rewrite_ptr,
    .glDisableVertexAttribArray = epoxy_glDisableVertexAttribArray_dispatch_table_rewrite_ptr,
    .glDisableVertexAttribArrayARB = epoxy_glDisableVertexAttribArrayARB_dispatch_table_rewrite_ptr,
    .glDisablei = epoxy_glDisablei_dispatch_table_rewrite_ptr,
    .glDisableiEXT = epoxy_glDisableiEXT_dispatch_table_rewrite_ptr,
    .glDisableiNV = epoxy_glDisableiNV_dispatch_table_rewrite_ptr,
    .glDisableiOES = epoxy_glDisableiOES_dispatch_table_rewrite_ptr,
    .glDiscardFramebufferEXT = epoxy_glDiscardFramebufferEXT_dispatch_table_rewrite_ptr,
    .glDispatchCompute = epoxy_glDispatchCompute_dispatch_table_rewrite_ptr,
    .glDispatchComputeGroupSizeARB = epoxy_glDispatchComputeGroupSizeARB_dispatch_table_rewrite_ptr,
    .glDispatchComputeIndirect = epoxy_glDispatchComputeIndirect_dispatch_table_rewrite_ptr,
    .glDrawArrays = epoxy_glDrawArrays_dispatch_table_rewrite_ptr,
    .glDrawArraysEXT = epoxy_glDrawArraysEXT_dispatch_table_rewrite_ptr,
    .glDrawArraysIndirect = epoxy_glDrawArraysIndirect_dispatch_table_rewrite_ptr,
    .glDrawArraysInstanced = epoxy_glDrawArraysInstanced_dispatch_table_rewrite_ptr,
    .glDrawArraysInstancedANGLE = epoxy_glDrawArraysInstancedANGLE_dispatch_table_rewrite_ptr,
    .glDrawArraysInstancedARB = epoxy_glDrawArraysInstancedARB_dispatch_table_rewrite_ptr,
    .glDrawArraysInstancedBaseInstance = epoxy_glDrawArraysInstancedBaseInstance_dispatch_table_rewrite_ptr,
    .glDrawArraysInstancedBaseInstanceEXT = epoxy_glDrawArraysInstancedBaseInstanceEXT_dispatch_table_rewrite_ptr,
    .glDrawArraysInstancedEXT = epoxy_glDrawArraysInstancedEXT_dispatch_table_rewrite_ptr,
    .glDrawArraysInstancedNV = epoxy_glDrawArraysInstancedNV_dispatch_table_rewrite_ptr,
    .glDrawBuffer = epoxy_glDrawBuffer_dispatch_table_rewrite_ptr,
    .glDrawBuffers = epoxy_glDrawBuffers_dispatch_table_rewrite_ptr,
    .glDrawBuffersARB = epoxy_glDrawBuffersARB_dispatch_table_rewrite_ptr,
    .glDrawBuffersATI = epoxy_glDrawBuffersATI_dispatch_table_rewrite_ptr,
    .glDrawBuffersEXT = epoxy_glDrawBuffersEXT_dispatch_table_rewrite_ptr,
    .glDrawBuffersIndexedEXT = epoxy_glDrawBuffersIndexedEXT_dispatch_table_rewrite_ptr,
    .glDrawBuffersNV = epoxy_glDrawBuffersNV_dispatch_table_rewrite_ptr,
    .glDrawCommandsAddressNV = epoxy_glDrawCommandsAddressNV_dispatch_table_rewrite_ptr,
    .glDrawCommandsNV = epoxy_glDrawCommandsNV_dispatch_table_rewrite_ptr,
    .glDrawCommandsStatesAddressNV = epoxy_glDrawCommandsStatesAddressNV_dispatch_table_rewrite_ptr,
    .glDrawCommandsStatesNV = epoxy_glDrawCommandsStatesNV_dispatch_table_rewrite_ptr,
    .glDrawElementArrayAPPLE = epoxy_glDrawElementArrayAPPLE_dispatch_table_rewrite_ptr,
    .glDrawElementArrayATI = epoxy_glDrawElementArrayATI_dispatch_table_rewrite_ptr,
    .glDrawElements = epoxy_glDrawElements_dispatch_table_rewrite_ptr,
    .glDrawElementsBaseVertex = epoxy_glDrawElementsBaseVertex_dispatch_table_rewrite_ptr,
    .glDrawElementsBaseVertexEXT = epoxy_glDrawElementsBaseVertexEXT_dispatch_table_rewrite_ptr,
    .glDrawElementsBaseVertexOES = epoxy_glDrawElementsBaseVertexOES_dispatch_table_rewrite_ptr,
    .glDrawElementsIndirect = epoxy_glDrawElementsIndirect_dispatch_table_rewrite_ptr,
    .glDrawElementsInstanced = epoxy_glDrawElementsInstanced_dispatch_table_rewrite_ptr,
    .glDrawElementsInstancedANGLE = epoxy_glDrawElementsInstancedANGLE_dispatch_table_rewrite_ptr,
    .glDrawElementsInstancedARB = epoxy_glDrawElementsInstancedARB_dispatch_table_rewrite_ptr,
    .glDrawElementsInstancedBaseInstance = epoxy_glDrawElementsInstancedBaseInstance_dispatch_table_rewrite_ptr,
    .glDrawElementsInstancedBaseInstanceEXT = epoxy_glDrawElementsInstancedBaseInstanceEXT_dispatch_table_rewrite_ptr,
    .glDrawElementsInstancedBaseVertex = epoxy_glDrawElementsInstancedBaseVertex_dispatch_table_rewrite_ptr,
    .glDrawElementsInstancedBaseVertexBaseInstance = epoxy_glDrawElementsInstancedBaseVertexBaseInstance_dispatch_table_rewrite_ptr,
    .glDrawElementsInstancedBaseVertexBaseInstanceEXT = epoxy_glDrawElementsInstancedBaseVertexBaseInstanceEXT_dispatch_table_rewrite_ptr,
    .glDrawElementsInstancedBaseVertexEXT = epoxy_glDrawElementsInstancedBaseVertexEXT_dispatch_table_rewrite_ptr,
    .glDrawElementsInstancedBaseVertexOES = epoxy_glDrawElementsInstancedBaseVertexOES_dispatch_table_rewrite_ptr,
    .glDrawElementsInstancedEXT = epoxy_glDrawElementsInstancedEXT_dispatch_table_rewrite_ptr,
    .glDrawElementsInstancedNV = epoxy_glDrawElementsInstancedNV_dispatch_table_rewrite_ptr,
    .glDrawMeshArraysSUN = epoxy_glDrawMeshArraysSUN_dispatch_table_rewrite_ptr,
    .glDrawPixels = epoxy_glDrawPixels_dispatch_table_rewrite_ptr,
    .glDrawRangeElementArrayAPPLE = epoxy_glDrawRangeElementArrayAPPLE_dispatch_table_rewrite_ptr,
    .glDrawRangeElementArrayATI = epoxy_glDrawRangeElementArrayATI_dispatch_table_rewrite_ptr,
    .glDrawRangeElements = epoxy_glDrawRangeElements_dispatch_table_rewrite_ptr,
    .glDrawRangeElementsBaseVertex = epoxy_glDrawRangeElementsBaseVertex_dispatch_table_rewrite_ptr,
    .glDrawRangeElementsBaseVertexEXT = epoxy_glDrawRangeElementsBaseVertexEXT_dispatch_table_rewrite_ptr,
    .glDrawRangeElementsBaseVertexOES = epoxy_glDrawRangeElementsBaseVertexOES_dispatch_table_rewrite_ptr,
    .glDrawRangeElementsEXT = epoxy_glDrawRangeElementsEXT_dispatch_table_rewrite_ptr,
    .glDrawTexfOES = epoxy_glDrawTexfOES_dispatch_table_rewrite_ptr,
    .glDrawTexfvOES = epoxy_glDrawTexfvOES_dispatch_table_rewrite_ptr,
    .glDrawTexiOES = epoxy_glDrawTexiOES_dispatch_table_rewrite_ptr,
    .glDrawTexivOES = epoxy_glDrawTexivOES_dispatch_table_rewrite_ptr,
    .glDrawTexsOES = epoxy_glDrawTexsOES_dispatch_table_rewrite_ptr,
    .glDrawTexsvOES = epoxy_glDrawTexsvOES_dispatch_table_rewrite_ptr,
    .glDrawTextureNV = epoxy_glDrawTextureNV_dispatch_table_rewrite_ptr,
    .glDrawTexxOES = epoxy_glDrawTexxOES_dispatch_table_rewrite_ptr,
    .glDrawTexxvOES = epoxy_glDrawTexxvOES_dispatch_table_rewrite_ptr,
    .glDrawTransformFeedback = epoxy_glDrawTransformFeedback_dispatch_table_rewrite_ptr,
    .glDrawTransformFeedbackInstanced = epoxy_glDrawTransformFeedbackInstanced_dispatch_table_rewrite_ptr,
    .glDrawTransformFeedbackNV = epoxy_glDrawTransformFeedbackNV_dispatch_table_rewrite_ptr,
    .glDrawTransformFeedbackStream = epoxy_glDrawTransformFeedbackStream_dispatch_table_rewrite_ptr,
    .glDrawTransformFeedbackStreamInstanced = epoxy_glDrawTransformFeedbackStreamInstanced_dispatch_table_rewrite_ptr,
    .glEGLImageTargetRenderbufferStorageOES = epoxy_glEGLImageTargetRenderbufferStorageOES_dispatch_table_rewrite_ptr,
    .glEGLImageTargetTexture2DOES = epoxy_glEGLImageTargetTexture2DOES_dispatch_table_rewrite_ptr,
    .glEdgeFlag = epoxy_glEdgeFlag_dispatch_table_rewrite_ptr,
    .glEdgeFlagFormatNV = epoxy_glEdgeFlagFormatNV_dispatch_table_rewrite_ptr,
    .glEdgeFlagPointer = epoxy_glEdgeFlagPointer_dispatch_table_rewrite_ptr,
    .glEdgeFlagPointerEXT = epoxy_glEdgeFlagPointerEXT_dispatch_table_rewrite_ptr,
    .glEdgeFlagPointerListIBM = epoxy_glEdgeFlagPointerListIBM_dispatch_table_rewrite_ptr,
    .glEdgeFlagv = epoxy_glEdgeFlagv_dispatch_table_rewrite_ptr,
    .glElementPointerAPPLE = epoxy_glElementPointerAPPLE_dispatch_table_rewrite_ptr,
    .glElementPointerATI = epoxy_glElementPointerATI_dispatch_table_rewrite_ptr,
    .glEnable = epoxy_glEnable_dispatch_table_rewrite_ptr,
    .glEnableClientState = epoxy_glEnableClientState_dispatch_table_rewrite_ptr,
    .glEnableClientStateIndexedEXT = epoxy_glEnableClientStateIndexedEXT_dispatch_table_rewrite_ptr,
    .glEnableClientStateiEXT = epoxy_glEnableClientStateiEXT_dispatch_table_rewrite_ptr,
    .glEnableDriverControlQCOM = epoxy_glEnableDriverControlQCOM_dispatch_table_rewrite_ptr,
    .glEnableIndexedEXT = epoxy_glEnableIndexedEXT_dispatch_table_rewrite_ptr,
    .glEnableVariantClientStateEXT = epoxy_glEnableVariantClientStateEXT_dispatch_table_rewrite_ptr,
    .glEnableVertexArrayAttrib = epoxy_glEnableVertexArrayAttrib_dispatch_table_rewrite_ptr,
    .glEnableVertexArrayAttribEXT = epoxy_glEnableVertexArrayAttribEXT_dispatch_table_rewrite_ptr,
    .glEnableVertexArrayEXT = epoxy_glEnableVertexArrayEXT_dispatch_table_rewrite_ptr,
    .glEnableVertexAttribAPPLE = epoxy_glEnableVertexAttribAPPLE_dispatch_table_rewrite_ptr,
    .glEnableVertexAttribArray = epoxy_glEnableVertexAttribArray_dispatch_table_rewrite_ptr,
    .glEnableVertexAttribArrayARB = epoxy_glEnableVertexAttribArrayARB_dispatch_table_rewrite_ptr,
    .glEnablei = epoxy_glEnablei_dispatch_table_rewrite_ptr,
    .glEnableiEXT = epoxy_glEnableiEXT_dispatch_table_rewrite_ptr,
    .glEnableiNV = epoxy_glEnableiNV_dispatch_table_rewrite_ptr,
    .glEnableiOES = epoxy_glEnableiOES_dispatch_table_rewrite_ptr,
    .glEnd = epoxy_glEnd_dispatch_table_rewrite_ptr,
    .glEndConditionalRender = epoxy_glEndConditionalRender_dispatch_table_rewrite_ptr,
    .glEndConditionalRenderNV = epoxy_glEndConditionalRenderNV_dispatch_table_rewrite_ptr,
    .glEndConditionalRenderNVX = epoxy_glEndConditionalRenderNVX_dispatch_table_rewrite_ptr,
    .glEndFragmentShaderATI = epoxy_glEndFragmentShaderATI_dispatch_table_rewrite_ptr,
    .glEndList = epoxy_glEndList_dispatch_table_rewrite_ptr,
    .glEndOcclusionQueryNV = epoxy_glEndOcclusionQueryNV_dispatch_table_rewrite_ptr,
    .glEndPerfMonitorAMD = epoxy_glEndPerfMonitorAMD_dispatch_table_rewrite_ptr,
    .glEndPerfQueryINTEL = epoxy_glEndPerfQueryINTEL_dispatch_table_rewrite_ptr,
    .glEndQuery = epoxy_glEndQuery_dispatch_table_rewrite_ptr,
    .glEndQueryARB = epoxy_glEndQueryARB_dispatch_table_rewrite_ptr,
    .glEndQueryEXT = epoxy_glEndQueryEXT_dispatch_table_rewrite_ptr,
    .glEndQueryIndexed = epoxy_glEndQueryIndexed_dispatch_table_rewrite_ptr,
    .glEndTilingQCOM = epoxy_glEndTilingQCOM_dispatch_table_rewrite_ptr,
    .glEndTransformFeedback = epoxy_glEndTransformFeedback_dispatch_table_rewrite_ptr,
    .glEndTransformFeedbackEXT = epoxy_glEndTransformFeedbackEXT_dispatch_table_rewrite_ptr,
    .glEndTransformFeedbackNV = epoxy_glEndTransformFeedbackNV_dispatch_table_rewrite_ptr,
    .glEndVertexShaderEXT = epoxy_glEndVertexShaderEXT_dispatch_table_rewrite_ptr,
    .glEndVideoCaptureNV = epoxy_glEndVideoCaptureNV_dispatch_table_rewrite_ptr,
    .glEvalCoord1d = epoxy_glEvalCoord1d_dispatch_table_rewrite_ptr,
    .glEvalCoord1dv = epoxy_glEvalCoord1dv_dispatch_table_rewrite_ptr,
    .glEvalCoord1f = epoxy_glEvalCoord1f_dispatch_table_rewrite_ptr,
    .glEvalCoord1fv = epoxy_glEvalCoord1fv_dispatch_table_rewrite_ptr,
    .glEvalCoord1xOES = epoxy_glEvalCoord1xOES_dispatch_table_rewrite_ptr,
    .glEvalCoord1xvOES = epoxy_glEvalCoord1xvOES_dispatch_table_rewrite_ptr,
    .glEvalCoord2d = epoxy_glEvalCoord2d_dispatch_table_rewrite_ptr,
    .glEvalCoord2dv = epoxy_glEvalCoord2dv_dispatch_table_rewrite_ptr,
    .glEvalCoord2f = epoxy_glEvalCoord2f_dispatch_table_rewrite_ptr,
    .glEvalCoord2fv = epoxy_glEvalCoord2fv_dispatch_table_rewrite_ptr,
    .glEvalCoord2xOES = epoxy_glEvalCoord2xOES_dispatch_table_rewrite_ptr,
    .glEvalCoord2xvOES = epoxy_glEvalCoord2xvOES_dispatch_table_rewrite_ptr,
    .glEvalMapsNV = epoxy_glEvalMapsNV_dispatch_table_rewrite_ptr,
    .glEvalMesh1 = epoxy_glEvalMesh1_dispatch_table_rewrite_ptr,
    .glEvalMesh2 = epoxy_glEvalMesh2_dispatch_table_rewrite_ptr,
    .glEvalPoint1 = epoxy_glEvalPoint1_dispatch_table_rewrite_ptr,
    .glEvalPoint2 = epoxy_glEvalPoint2_dispatch_table_rewrite_ptr,
    .glEvaluateDepthValuesARB = epoxy_glEvaluateDepthValuesARB_dispatch_table_rewrite_ptr,
    .glExecuteProgramNV = epoxy_glExecuteProgramNV_dispatch_table_rewrite_ptr,
    .glExtGetBufferPointervQCOM = epoxy_glExtGetBufferPointervQCOM_dispatch_table_rewrite_ptr,
    .glExtGetBuffersQCOM = epoxy_glExtGetBuffersQCOM_dispatch_table_rewrite_ptr,
    .glExtGetFramebuffersQCOM = epoxy_glExtGetFramebuffersQCOM_dispatch_table_rewrite_ptr,
    .glExtGetProgramBinarySourceQCOM = epoxy_glExtGetProgramBinarySourceQCOM_dispatch_table_rewrite_ptr,
    .glExtGetProgramsQCOM = epoxy_glExtGetProgramsQCOM_dispatch_table_rewrite_ptr,
    .glExtGetRenderbuffersQCOM = epoxy_glExtGetRenderbuffersQCOM_dispatch_table_rewrite_ptr,
    .glExtGetShadersQCOM = epoxy_glExtGetShadersQCOM_dispatch_table_rewrite_ptr,
    .glExtGetTexLevelParameterivQCOM = epoxy_glExtGetTexLevelParameterivQCOM_dispatch_table_rewrite_ptr,
    .glExtGetTexSubImageQCOM = epoxy_glExtGetTexSubImageQCOM_dispatch_table_rewrite_ptr,
    .glExtGetTexturesQCOM = epoxy_glExtGetTexturesQCOM_dispatch_table_rewrite_ptr,
    .glExtIsProgramBinaryQCOM = epoxy_glExtIsProgramBinaryQCOM_dispatch_table_rewrite_ptr,
    .glExtTexObjectStateOverrideiQCOM = epoxy_glExtTexObjectStateOverrideiQCOM_dispatch_table_rewrite_ptr,
    .glExtractComponentEXT = epoxy_glExtractComponentEXT_dispatch_table_rewrite_ptr,
    .glFeedbackBuffer = epoxy_glFeedbackBuffer_dispatch_table_rewrite_ptr,
    .glFeedbackBufferxOES = epoxy_glFeedbackBufferxOES_dispatch_table_rewrite_ptr,
    .glFenceSync = epoxy_glFenceSync_dispatch_table_rewrite_ptr,
    .glFenceSyncAPPLE = epoxy_glFenceSyncAPPLE_dispatch_table_rewrite_ptr,
    .glFinalCombinerInputNV = epoxy_glFinalCombinerInputNV_dispatch_table_rewrite_ptr,
    .glFinish = epoxy_glFinish_dispatch_table_rewrite_ptr,
    .glFinishAsyncSGIX = epoxy_glFinishAsyncSGIX_dispatch_table_rewrite_ptr,
    .glFinishFenceAPPLE = epoxy_glFinishFenceAPPLE_dispatch_table_rewrite_ptr,
    .glFinishFenceNV = epoxy_glFinishFenceNV_dispatch_table_rewrite_ptr,
    .glFinishObjectAPPLE = epoxy_glFinishObjectAPPLE_dispatch_table_rewrite_ptr,
    .glFinishTextureSUNX = epoxy_glFinishTextureSUNX_dispatch_table_rewrite_ptr,
    .glFlush = epoxy_glFlush_dispatch_table_rewrite_ptr,
    .glFlushMappedBufferRange = epoxy_glFlushMappedBufferRange_dispatch_table_rewrite_ptr,
    .glFlushMappedBufferRangeAPPLE = epoxy_glFlushMappedBufferRangeAPPLE_dispatch_table_rewrite_ptr,
    .glFlushMappedBufferRangeEXT = epoxy_glFlushMappedBufferRangeEXT_dispatch_table_rewrite_ptr,
    .glFlushMappedNamedBufferRange = epoxy_glFlushMappedNamedBufferRange_dispatch_table_rewrite_ptr,
    .glFlushMappedNamedBufferRangeEXT = epoxy_glFlushMappedNamedBufferRangeEXT_dispatch_table_rewrite_ptr,
    .glFlushPixelDataRangeNV = epoxy_glFlushPixelDataRangeNV_dispatch_table_rewrite_ptr,
    .glFlushRasterSGIX = epoxy_glFlushRasterSGIX_dispatch_table_rewrite_ptr,
    .glFlushStaticDataIBM = epoxy_glFlushStaticDataIBM_dispatch_table_rewrite_ptr,
    .glFlushVertexArrayRangeAPPLE = epoxy_glFlushVertexArrayRangeAPPLE_dispatch_table_rewrite_ptr,
    .glFlushVertexArrayRangeNV = epoxy_glFlushVertexArrayRangeNV_dispatch_table_rewrite_ptr,
    .glFogCoordFormatNV = epoxy_glFogCoordFormatNV_dispatch_table_rewrite_ptr,
    .glFogCoordPointer = epoxy_glFogCoordPointer_dispatch_table_rewrite_ptr,
    .glFogCoordPointerEXT = epoxy_glFogCoordPointerEXT_dispatch_table_rewrite_ptr,
    .glFogCoordPointerListIBM = epoxy_glFogCoordPointerListIBM_dispatch_table_rewrite_ptr,
    .glFogCoordd = epoxy_glFogCoordd_dispatch_table_rewrite_ptr,
    .glFogCoorddEXT = epoxy_glFogCoorddEXT_dispatch_table_rewrite_ptr,
    .glFogCoorddv = epoxy_glFogCoorddv_dispatch_table_rewrite_ptr,
    .glFogCoorddvEXT = epoxy_glFogCoorddvEXT_dispatch_table_rewrite_ptr,
    .glFogCoordf = epoxy_glFogCoordf_dispatch_table_rewrite_ptr,
    .glFogCoordfEXT = epoxy_glFogCoordfEXT_dispatch_table_rewrite_ptr,
    .glFogCoordfv = epoxy_glFogCoordfv_dispatch_table_rewrite_ptr,
    .glFogCoordfvEXT = epoxy_glFogCoordfvEXT_dispatch_table_rewrite_ptr,
    .glFogCoordhNV = epoxy_glFogCoordhNV_dispatch_table_rewrite_ptr,
    .glFogCoordhvNV = epoxy_glFogCoordhvNV_dispatch_table_rewrite_ptr,
    .glFogFuncSGIS = epoxy_glFogFuncSGIS_dispatch_table_rewrite_ptr,
    .glFogf = epoxy_glFogf_dispatch_table_rewrite_ptr,
    .glFogfv = epoxy_glFogfv_dispatch_table_rewrite_ptr,
    .glFogi = epoxy_glFogi_dispatch_table_rewrite_ptr,
    .glFogiv = epoxy_glFogiv_dispatch_table_rewrite_ptr,
    .glFogx = epoxy_glFogx_dispatch_table_rewrite_ptr,
    .glFogxOES = epoxy_glFogxOES_dispatch_table_rewrite_ptr,
    .glFogxv = epoxy_glFogxv_dispatch_table_rewrite_ptr,
    .glFogxvOES = epoxy_glFogxvOES_dispatch_table_rewrite_ptr,
    .glFragmentColorMaterialSGIX = epoxy_glFragmentColorMaterialSGIX_dispatch_table_rewrite_ptr,
    .glFragmentCoverageColorNV = epoxy_glFragmentCoverageColorNV_dispatch_table_rewrite_ptr,
    .glFragmentLightModelfSGIX = epoxy_glFragmentLightModelfSGIX_dispatch_table_rewrite_ptr,
    .glFragmentLightModelfvSGIX = epoxy_glFragmentLightModelfvSGIX_dispatch_table_rewrite_ptr,
    .glFragmentLightModeliSGIX = epoxy_glFragmentLightModeliSGIX_dispatch_table_rewrite_ptr,
    .glFragmentLightModelivSGIX = epoxy_glFragmentLightModelivSGIX_dispatch_table_rewrite_ptr,
    .glFragmentLightfSGIX = epoxy_glFragmentLightfSGIX_dispatch_table_rewrite_ptr,
    .glFragmentLightfvSGIX = epoxy_glFragmentLightfvSGIX_dispatch_table_rewrite_ptr,
    .glFragmentLightiSGIX = epoxy_glFragmentLightiSGIX_dispatch_table_rewrite_ptr,
    .glFragmentLightivSGIX = epoxy_glFragmentLightivSGIX_dispatch_table_rewrite_ptr,
    .glFragmentMaterialfSGIX = epoxy_glFragmentMaterialfSGIX_dispatch_table_rewrite_ptr,
    .glFragmentMaterialfvSGIX = epoxy_glFragmentMaterialfvSGIX_dispatch_table_rewrite_ptr,
    .glFragmentMaterialiSGIX = epoxy_glFragmentMaterialiSGIX_dispatch_table_rewrite_ptr,
    .glFragmentMaterialivSGIX = epoxy_glFragmentMaterialivSGIX_dispatch_table_rewrite_ptr,
    .glFrameTerminatorGREMEDY = epoxy_glFrameTerminatorGREMEDY_dispatch_table_rewrite_ptr,
    .glFrameZoomSGIX = epoxy_glFrameZoomSGIX_dispatch_table_rewrite_ptr,
    .glFramebufferDrawBufferEXT = epoxy_glFramebufferDrawBufferEXT_dispatch_table_rewrite_ptr,
    .glFramebufferDrawBuffersEXT = epoxy_glFramebufferDrawBuffersEXT_dispatch_table_rewrite_ptr,
    .glFramebufferParameteri = epoxy_glFramebufferParameteri_dispatch_table_rewrite_ptr,
    .glFramebufferPixelLocalStorageSizeEXT = epoxy_glFramebufferPixelLocalStorageSizeEXT_dispatch_table_rewrite_ptr,
    .glFramebufferReadBufferEXT = epoxy_glFramebufferReadBufferEXT_dispatch_table_rewrite_ptr,
    .glFramebufferRenderbuffer = epoxy_glFramebufferRenderbuffer_dispatch_table_rewrite_ptr,
    .glFramebufferRenderbufferEXT = epoxy_glFramebufferRenderbufferEXT_dispatch_table_rewrite_ptr,
    .glFramebufferRenderbufferOES = epoxy_glFramebufferRenderbufferOES_dispatch_table_rewrite_ptr,
    .glFramebufferSampleLocationsfvARB = epoxy_glFramebufferSampleLocationsfvARB_dispatch_table_rewrite_ptr,
    .glFramebufferSampleLocationsfvNV = epoxy_glFramebufferSampleLocationsfvNV_dispatch_table_rewrite_ptr,
    .glFramebufferTexture = epoxy_glFramebufferTexture_dispatch_table_rewrite_ptr,
    .glFramebufferTexture1D = epoxy_glFramebufferTexture1D_dispatch_table_rewrite_ptr,
    .glFramebufferTexture1DEXT = epoxy_glFramebufferTexture1DEXT_dispatch_table_rewrite_ptr,
    .glFramebufferTexture2D = epoxy_glFramebufferTexture2D_dispatch_table_rewrite_ptr,
    .glFramebufferTexture2DDownsampleIMG = epoxy_glFramebufferTexture2DDownsampleIMG_dispatch_table_rewrite_ptr,
    .glFramebufferTexture2DEXT = epoxy_glFramebufferTexture2DEXT_dispatch_table_rewrite_ptr,
    .glFramebufferTexture2DMultisampleEXT = epoxy_glFramebufferTexture2DMultisampleEXT_dispatch_table_rewrite_ptr,
    .glFramebufferTexture2DMultisampleIMG = epoxy_glFramebufferTexture2DMultisampleIMG_dispatch_table_rewrite_ptr,
    .glFramebufferTexture2DOES = epoxy_glFramebufferTexture2DOES_dispatch_table_rewrite_ptr,
    .glFramebufferTexture3D = epoxy_glFramebufferTexture3D_dispatch_table_rewrite_ptr,
    .glFramebufferTexture3DEXT = epoxy_glFramebufferTexture3DEXT_dispatch_table_rewrite_ptr,
    .glFramebufferTexture3DOES = epoxy_glFramebufferTexture3DOES_dispatch_table_rewrite_ptr,
    .glFramebufferTextureARB = epoxy_glFramebufferTextureARB_dispatch_table_rewrite_ptr,
    .glFramebufferTextureEXT = epoxy_glFramebufferTextureEXT_dispatch_table_rewrite_ptr,
    .glFramebufferTextureFaceARB = epoxy_glFramebufferTextureFaceARB_dispatch_table_rewrite_ptr,
    .glFramebufferTextureFaceEXT = epoxy_glFramebufferTextureFaceEXT_dispatch_table_rewrite_ptr,
    .glFramebufferTextureLayer = epoxy_glFramebufferTextureLayer_dispatch_table_rewrite_ptr,
    .glFramebufferTextureLayerARB = epoxy_glFramebufferTextureLayerARB_dispatch_table_rewrite_ptr,
    .glFramebufferTextureLayerDownsampleIMG = epoxy_glFramebufferTextureLayerDownsampleIMG_dispatch_table_rewrite_ptr,
    .glFramebufferTextureLayerEXT = epoxy_glFramebufferTextureLayerEXT_dispatch_table_rewrite_ptr,
    .glFramebufferTextureMultisampleMultiviewOVR = epoxy_glFramebufferTextureMultisampleMultiviewOVR_dispatch_table_rewrite_ptr,
    .glFramebufferTextureMultiviewOVR = epoxy_glFramebufferTextureMultiviewOVR_dispatch_table_rewrite_ptr,
    .glFramebufferTextureOES = epoxy_glFramebufferTextureOES_dispatch_table_rewrite_ptr,
    .glFreeObjectBufferATI = epoxy_glFreeObjectBufferATI_dispatch_table_rewrite_ptr,
    .glFrontFace = epoxy_glFrontFace_dispatch_table_rewrite_ptr,
    .glFrustum = epoxy_glFrustum_dispatch_table_rewrite_ptr,
    .glFrustumf = epoxy_glFrustumf_dispatch_table_rewrite_ptr,
    .glFrustumfOES = epoxy_glFrustumfOES_dispatch_table_rewrite_ptr,
    .glFrustumx = epoxy_glFrustumx_dispatch_table_rewrite_ptr,
    .glFrustumxOES = epoxy_glFrustumxOES_dispatch_table_rewrite_ptr,
    .glGenAsyncMarkersSGIX = epoxy_glGenAsyncMarkersSGIX_dispatch_table_rewrite_ptr,
    .glGenBuffers = epoxy_glGenBuffers_dispatch_table_rewrite_ptr,
    .glGenBuffersARB = epoxy_glGenBuffersARB_dispatch_table_rewrite_ptr,
    .glGenFencesAPPLE = epoxy_glGenFencesAPPLE_dispatch_table_rewrite_ptr,
    .glGenFencesNV = epoxy_glGenFencesNV_dispatch_table_rewrite_ptr,
    .glGenFragmentShadersATI = epoxy_glGenFragmentShadersATI_dispatch_table_rewrite_ptr,
    .glGenFramebuffers = epoxy_glGenFramebuffers_dispatch_table_rewrite_ptr,
    .glGenFramebuffersEXT = epoxy_glGenFramebuffersEXT_dispatch_table_rewrite_ptr,
    .glGenFramebuffersOES = epoxy_glGenFramebuffersOES_dispatch_table_rewrite_ptr,
    .glGenLists = epoxy_glGenLists_dispatch_table_rewrite_ptr,
    .glGenNamesAMD = epoxy_glGenNamesAMD_dispatch_table_rewrite_ptr,
    .glGenOcclusionQueriesNV = epoxy_glGenOcclusionQueriesNV_dispatch_table_rewrite_ptr,
    .glGenPathsNV = epoxy_glGenPathsNV_dispatch_table_rewrite_ptr,
    .glGenPerfMonitorsAMD = epoxy_glGenPerfMonitorsAMD_dispatch_table_rewrite_ptr,
    .glGenProgramPipelines = epoxy_glGenProgramPipelines_dispatch_table_rewrite_ptr,
    .glGenProgramPipelinesEXT = epoxy_glGenProgramPipelinesEXT_dispatch_table_rewrite_ptr,
    .glGenProgramsARB = epoxy_glGenProgramsARB_dispatch_table_rewrite_ptr,
    .glGenProgramsNV = epoxy_glGenProgramsNV_dispatch_table_rewrite_ptr,
    .glGenQueries = epoxy_glGenQueries_dispatch_table_rewrite_ptr,
    .glGenQueriesARB = epoxy_glGenQueriesARB_dispatch_table_rewrite_ptr,
    .glGenQueriesEXT = epoxy_glGenQueriesEXT_dispatch_table_rewrite_ptr,
    .glGenRenderbuffers = epoxy_glGenRenderbuffers_dispatch_table_rewrite_ptr,
    .glGenRenderbuffersEXT = epoxy_glGenRenderbuffersEXT_dispatch_table_rewrite_ptr,
    .glGenRenderbuffersOES = epoxy_glGenRenderbuffersOES_dispatch_table_rewrite_ptr,
    .glGenSamplers = epoxy_glGenSamplers_dispatch_table_rewrite_ptr,
    .glGenSymbolsEXT = epoxy_glGenSymbolsEXT_dispatch_table_rewrite_ptr,
    .glGenTextures = epoxy_glGenTextures_dispatch_table_rewrite_ptr,
    .glGenTexturesEXT = epoxy_glGenTexturesEXT_dispatch_table_rewrite_ptr,
    .glGenTransformFeedbacks = epoxy_glGenTransformFeedbacks_dispatch_table_rewrite_ptr,
    .glGenTransformFeedbacksNV = epoxy_glGenTransformFeedbacksNV_dispatch_table_rewrite_ptr,
    .glGenVertexArrays = epoxy_glGenVertexArrays_dispatch_table_rewrite_ptr,
    .glGenVertexArraysAPPLE = epoxy_glGenVertexArraysAPPLE_dispatch_table_rewrite_ptr,
    .glGenVertexArraysOES = epoxy_glGenVertexArraysOES_dispatch_table_rewrite_ptr,
    .glGenVertexShadersEXT = epoxy_glGenVertexShadersEXT_dispatch_table_rewrite_ptr,
    .glGenerateMipmap = epoxy_glGenerateMipmap_dispatch_table_rewrite_ptr,
    .glGenerateMipmapEXT = epoxy_glGenerateMipmapEXT_dispatch_table_rewrite_ptr,
    .glGenerateMipmapOES = epoxy_glGenerateMipmapOES_dispatch_table_rewrite_ptr,
    .glGenerateMultiTexMipmapEXT = epoxy_glGenerateMultiTexMipmapEXT_dispatch_table_rewrite_ptr,
    .glGenerateTextureMipmap = epoxy_glGenerateTextureMipmap_dispatch_table_rewrite_ptr,
    .glGenerateTextureMipmapEXT = epoxy_glGenerateTextureMipmapEXT_dispatch_table_rewrite_ptr,
    .glGetActiveAtomicCounterBufferiv = epoxy_glGetActiveAtomicCounterBufferiv_dispatch_table_rewrite_ptr,
    .glGetActiveAttrib = epoxy_glGetActiveAttrib_dispatch_table_rewrite_ptr,
    .glGetActiveAttribARB = epoxy_glGetActiveAttribARB_dispatch_table_rewrite_ptr,
    .glGetActiveSubroutineName = epoxy_glGetActiveSubroutineName_dispatch_table_rewrite_ptr,
    .glGetActiveSubroutineUniformName = epoxy_glGetActiveSubroutineUniformName_dispatch_table_rewrite_ptr,
    .glGetActiveSubroutineUniformiv = epoxy_glGetActiveSubroutineUniformiv_dispatch_table_rewrite_ptr,
    .glGetActiveUniform = epoxy_glGetActiveUniform_dispatch_table_rewrite_ptr,
    .glGetActiveUniformARB = epoxy_glGetActiveUniformARB_dispatch_table_rewrite_ptr,
    .glGetActiveUniformBlockName = epoxy_glGetActiveUniformBlockName_dispatch_table_rewrite_ptr,
    .glGetActiveUniformBlockiv = epoxy_glGetActiveUniformBlockiv_dispatch_table_rewrite_ptr,
    .glGetActiveUniformName = epoxy_glGetActiveUniformName_dispatch_table_rewrite_ptr,
    .glGetActiveUniformsiv = epoxy_glGetActiveUniformsiv_dispatch_table_rewrite_ptr,
    .glGetActiveVaryingNV = epoxy_glGetActiveVaryingNV_dispatch_table_rewrite_ptr,
    .glGetArrayObjectfvATI = epoxy_glGetArrayObjectfvATI_dispatch_table_rewrite_ptr,
    .glGetArrayObjectivATI = epoxy_glGetArrayObjectivATI_dispatch_table_rewrite_ptr,
    .glGetAttachedObjectsARB = epoxy_glGetAttachedObjectsARB_dispatch_table_rewrite_ptr,
    .glGetAttachedShaders = epoxy_glGetAttachedShaders_dispatch_table_rewrite_ptr,
    .glGetAttribLocation = epoxy_glGetAttribLocation_dispatch_table_rewrite_ptr,
    .glGetAttribLocationARB = epoxy_glGetAttribLocationARB_dispatch_table_rewrite_ptr,
    .glGetBooleanIndexedvEXT = epoxy_glGetBooleanIndexedvEXT_dispatch_table_rewrite_ptr,
    .glGetBooleani_v = epoxy_glGetBooleani_v_dispatch_table_rewrite_ptr,
    .glGetBooleanv = epoxy_glGetBooleanv_dispatch_table_rewrite_ptr,
    .glGetBufferParameteri64v = epoxy_glGetBufferParameteri64v_dispatch_table_rewrite_ptr,
    .glGetBufferParameteriv = epoxy_glGetBufferParameteriv_dispatch_table_rewrite_ptr,
    .glGetBufferParameterivARB = epoxy_glGetBufferParameterivARB_dispatch_table_rewrite_ptr,
    .glGetBufferParameterui64vNV = epoxy_glGetBufferParameterui64vNV_dispatch_table_rewrite_ptr,
    .glGetBufferPointerv = epoxy_glGetBufferPointerv_dispatch_table_rewrite_ptr,
    .glGetBufferPointervARB = epoxy_glGetBufferPointervARB_dispatch_table_rewrite_ptr,
    .glGetBufferPointervOES = epoxy_glGetBufferPointervOES_dispatch_table_rewrite_ptr,
    .glGetBufferSubData = epoxy_glGetBufferSubData_dispatch_table_rewrite_ptr,
    .glGetBufferSubDataARB = epoxy_glGetBufferSubDataARB_dispatch_table_rewrite_ptr,
    .glGetClipPlane = epoxy_glGetClipPlane_dispatch_table_rewrite_ptr,
    .glGetClipPlanef = epoxy_glGetClipPlanef_dispatch_table_rewrite_ptr,
    .glGetClipPlanefOES = epoxy_glGetClipPlanefOES_dispatch_table_rewrite_ptr,
    .glGetClipPlanex = epoxy_glGetClipPlanex_dispatch_table_rewrite_ptr,
    .glGetClipPlanexOES = epoxy_glGetClipPlanexOES_dispatch_table_rewrite_ptr,
    .glGetColorTable = epoxy_glGetColorTable_dispatch_table_rewrite_ptr,
    .glGetColorTableEXT = epoxy_glGetColorTableEXT_dispatch_table_rewrite_ptr,
    .glGetColorTableParameterfv = epoxy_glGetColorTableParameterfv_dispatch_table_rewrite_ptr,
    .glGetColorTableParameterfvEXT = epoxy_glGetColorTableParameterfvEXT_dispatch_table_rewrite_ptr,
    .glGetColorTableParameterfvSGI = epoxy_glGetColorTableParameterfvSGI_dispatch_table_rewrite_ptr,
    .glGetColorTableParameteriv = epoxy_glGetColorTableParameteriv_dispatch_table_rewrite_ptr,
    .glGetColorTableParameterivEXT = epoxy_glGetColorTableParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetColorTableParameterivSGI = epoxy_glGetColorTableParameterivSGI_dispatch_table_rewrite_ptr,
    .glGetColorTableSGI = epoxy_glGetColorTableSGI_dispatch_table_rewrite_ptr,
    .glGetCombinerInputParameterfvNV = epoxy_glGetCombinerInputParameterfvNV_dispatch_table_rewrite_ptr,
    .glGetCombinerInputParameterivNV = epoxy_glGetCombinerInputParameterivNV_dispatch_table_rewrite_ptr,
    .glGetCombinerOutputParameterfvNV = epoxy_glGetCombinerOutputParameterfvNV_dispatch_table_rewrite_ptr,
    .glGetCombinerOutputParameterivNV = epoxy_glGetCombinerOutputParameterivNV_dispatch_table_rewrite_ptr,
    .glGetCombinerStageParameterfvNV = epoxy_glGetCombinerStageParameterfvNV_dispatch_table_rewrite_ptr,
    .glGetCommandHeaderNV = epoxy_glGetCommandHeaderNV_dispatch_table_rewrite_ptr,
    .glGetCompressedMultiTexImageEXT = epoxy_glGetCompressedMultiTexImageEXT_dispatch_table_rewrite_ptr,
    .glGetCompressedTexImage = epoxy_glGetCompressedTexImage_dispatch_table_rewrite_ptr,
    .glGetCompressedTexImageARB = epoxy_glGetCompressedTexImageARB_dispatch_table_rewrite_ptr,
    .glGetCompressedTextureImage = epoxy_glGetCompressedTextureImage_dispatch_table_rewrite_ptr,
    .glGetCompressedTextureImageEXT = epoxy_glGetCompressedTextureImageEXT_dispatch_table_rewrite_ptr,
    .glGetCompressedTextureSubImage = epoxy_glGetCompressedTextureSubImage_dispatch_table_rewrite_ptr,
    .glGetConvolutionFilter = epoxy_glGetConvolutionFilter_dispatch_table_rewrite_ptr,
    .glGetConvolutionFilterEXT = epoxy_glGetConvolutionFilterEXT_dispatch_table_rewrite_ptr,
    .glGetConvolutionParameterfv = epoxy_glGetConvolutionParameterfv_dispatch_table_rewrite_ptr,
    .glGetConvolutionParameterfvEXT = epoxy_glGetConvolutionParameterfvEXT_dispatch_table_rewrite_ptr,
    .glGetConvolutionParameteriv = epoxy_glGetConvolutionParameteriv_dispatch_table_rewrite_ptr,
    .glGetConvolutionParameterivEXT = epoxy_glGetConvolutionParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetConvolutionParameterxvOES = epoxy_glGetConvolutionParameterxvOES_dispatch_table_rewrite_ptr,
    .glGetCoverageModulationTableNV = epoxy_glGetCoverageModulationTableNV_dispatch_table_rewrite_ptr,
    .glGetDebugMessageLog = epoxy_glGetDebugMessageLog_dispatch_table_rewrite_ptr,
    .glGetDebugMessageLogAMD = epoxy_glGetDebugMessageLogAMD_dispatch_table_rewrite_ptr,
    .glGetDebugMessageLogARB = epoxy_glGetDebugMessageLogARB_dispatch_table_rewrite_ptr,
    .glGetDebugMessageLogKHR = epoxy_glGetDebugMessageLogKHR_dispatch_table_rewrite_ptr,
    .glGetDetailTexFuncSGIS = epoxy_glGetDetailTexFuncSGIS_dispatch_table_rewrite_ptr,
    .glGetDoubleIndexedvEXT = epoxy_glGetDoubleIndexedvEXT_dispatch_table_rewrite_ptr,
    .glGetDoublei_v = epoxy_glGetDoublei_v_dispatch_table_rewrite_ptr,
    .glGetDoublei_vEXT = epoxy_glGetDoublei_vEXT_dispatch_table_rewrite_ptr,
    .glGetDoublev = epoxy_glGetDoublev_dispatch_table_rewrite_ptr,
    .glGetDriverControlStringQCOM = epoxy_glGetDriverControlStringQCOM_dispatch_table_rewrite_ptr,
    .glGetDriverControlsQCOM = epoxy_glGetDriverControlsQCOM_dispatch_table_rewrite_ptr,
    .glGetError = epoxy_glGetError_dispatch_table_rewrite_ptr,
    .glGetFenceivNV = epoxy_glGetFenceivNV_dispatch_table_rewrite_ptr,
    .glGetFinalCombinerInputParameterfvNV = epoxy_glGetFinalCombinerInputParameterfvNV_dispatch_table_rewrite_ptr,
    .glGetFinalCombinerInputParameterivNV = epoxy_glGetFinalCombinerInputParameterivNV_dispatch_table_rewrite_ptr,
    .glGetFirstPerfQueryIdINTEL = epoxy_glGetFirstPerfQueryIdINTEL_dispatch_table_rewrite_ptr,
    .glGetFixedv = epoxy_glGetFixedv_dispatch_table_rewrite_ptr,
    .glGetFixedvOES = epoxy_glGetFixedvOES_dispatch_table_rewrite_ptr,
    .glGetFloatIndexedvEXT = epoxy_glGetFloatIndexedvEXT_dispatch_table_rewrite_ptr,
    .glGetFloati_v = epoxy_glGetFloati_v_dispatch_table_rewrite_ptr,
    .glGetFloati_vEXT = epoxy_glGetFloati_vEXT_dispatch_table_rewrite_ptr,
    .glGetFloati_vNV = epoxy_glGetFloati_vNV_dispatch_table_rewrite_ptr,
    .glGetFloatv = epoxy_glGetFloatv_dispatch_table_rewrite_ptr,
    .glGetFogFuncSGIS = epoxy_glGetFogFuncSGIS_dispatch_table_rewrite_ptr,
    .glGetFragDataIndex = epoxy_glGetFragDataIndex_dispatch_table_rewrite_ptr,
    .glGetFragDataIndexEXT = epoxy_glGetFragDataIndexEXT_dispatch_table_rewrite_ptr,
    .glGetFragDataLocation = epoxy_glGetFragDataLocation_dispatch_table_rewrite_ptr,
    .glGetFragDataLocationEXT = epoxy_glGetFragDataLocationEXT_dispatch_table_rewrite_ptr,
    .glGetFragmentLightfvSGIX = epoxy_glGetFragmentLightfvSGIX_dispatch_table_rewrite_ptr,
    .glGetFragmentLightivSGIX = epoxy_glGetFragmentLightivSGIX_dispatch_table_rewrite_ptr,
    .glGetFragmentMaterialfvSGIX = epoxy_glGetFragmentMaterialfvSGIX_dispatch_table_rewrite_ptr,
    .glGetFragmentMaterialivSGIX = epoxy_glGetFragmentMaterialivSGIX_dispatch_table_rewrite_ptr,
    .glGetFramebufferAttachmentParameteriv = epoxy_glGetFramebufferAttachmentParameteriv_dispatch_table_rewrite_ptr,
    .glGetFramebufferAttachmentParameterivEXT = epoxy_glGetFramebufferAttachmentParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetFramebufferAttachmentParameterivOES = epoxy_glGetFramebufferAttachmentParameterivOES_dispatch_table_rewrite_ptr,
    .glGetFramebufferParameteriv = epoxy_glGetFramebufferParameteriv_dispatch_table_rewrite_ptr,
    .glGetFramebufferParameterivEXT = epoxy_glGetFramebufferParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetFramebufferPixelLocalStorageSizeEXT = epoxy_glGetFramebufferPixelLocalStorageSizeEXT_dispatch_table_rewrite_ptr,
    .glGetGraphicsResetStatus = epoxy_glGetGraphicsResetStatus_dispatch_table_rewrite_ptr,
    .glGetGraphicsResetStatusARB = epoxy_glGetGraphicsResetStatusARB_dispatch_table_rewrite_ptr,
    .glGetGraphicsResetStatusEXT = epoxy_glGetGraphicsResetStatusEXT_dispatch_table_rewrite_ptr,
    .glGetGraphicsResetStatusKHR = epoxy_glGetGraphicsResetStatusKHR_dispatch_table_rewrite_ptr,
    .glGetHandleARB = epoxy_glGetHandleARB_dispatch_table_rewrite_ptr,
    .glGetHistogram = epoxy_glGetHistogram_dispatch_table_rewrite_ptr,
    .glGetHistogramEXT = epoxy_glGetHistogramEXT_dispatch_table_rewrite_ptr,
    .glGetHistogramParameterfv = epoxy_glGetHistogramParameterfv_dispatch_table_rewrite_ptr,
    .glGetHistogramParameterfvEXT = epoxy_glGetHistogramParameterfvEXT_dispatch_table_rewrite_ptr,
    .glGetHistogramParameteriv = epoxy_glGetHistogramParameteriv_dispatch_table_rewrite_ptr,
    .glGetHistogramParameterivEXT = epoxy_glGetHistogramParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetHistogramParameterxvOES = epoxy_glGetHistogramParameterxvOES_dispatch_table_rewrite_ptr,
    .glGetImageHandleARB = epoxy_glGetImageHandleARB_dispatch_table_rewrite_ptr,
    .glGetImageHandleNV = epoxy_glGetImageHandleNV_dispatch_table_rewrite_ptr,
    .glGetImageTransformParameterfvHP = epoxy_glGetImageTransformParameterfvHP_dispatch_table_rewrite_ptr,
    .glGetImageTransformParameterivHP = epoxy_glGetImageTransformParameterivHP_dispatch_table_rewrite_ptr,
    .glGetInfoLogARB = epoxy_glGetInfoLogARB_dispatch_table_rewrite_ptr,
    .glGetInstrumentsSGIX = epoxy_glGetInstrumentsSGIX_dispatch_table_rewrite_ptr,
    .glGetInteger64i_v = epoxy_glGetInteger64i_v_dispatch_table_rewrite_ptr,
    .glGetInteger64v = epoxy_glGetInteger64v_dispatch_table_rewrite_ptr,
    .glGetInteger64vAPPLE = epoxy_glGetInteger64vAPPLE_dispatch_table_rewrite_ptr,
    .glGetIntegerIndexedvEXT = epoxy_glGetIntegerIndexedvEXT_dispatch_table_rewrite_ptr,
    .glGetIntegeri_v = epoxy_glGetIntegeri_v_dispatch_table_rewrite_ptr,
    .glGetIntegeri_vEXT = epoxy_glGetIntegeri_vEXT_dispatch_table_rewrite_ptr,
    .glGetIntegerui64i_vNV = epoxy_glGetIntegerui64i_vNV_dispatch_table_rewrite_ptr,
    .glGetIntegerui64vNV = epoxy_glGetIntegerui64vNV_dispatch_table_rewrite_ptr,
    .glGetIntegerv = epoxy_glGetIntegerv_dispatch_table_rewrite_ptr,
    .glGetInternalformatSampleivNV = epoxy_glGetInternalformatSampleivNV_dispatch_table_rewrite_ptr,
    .glGetInternalformati64v = epoxy_glGetInternalformati64v_dispatch_table_rewrite_ptr,
    .glGetInternalformativ = epoxy_glGetInternalformativ_dispatch_table_rewrite_ptr,
    .glGetInvariantBooleanvEXT = epoxy_glGetInvariantBooleanvEXT_dispatch_table_rewrite_ptr,
    .glGetInvariantFloatvEXT = epoxy_glGetInvariantFloatvEXT_dispatch_table_rewrite_ptr,
    .glGetInvariantIntegervEXT = epoxy_glGetInvariantIntegervEXT_dispatch_table_rewrite_ptr,
    .glGetLightfv = epoxy_glGetLightfv_dispatch_table_rewrite_ptr,
    .glGetLightiv = epoxy_glGetLightiv_dispatch_table_rewrite_ptr,
    .glGetLightxOES = epoxy_glGetLightxOES_dispatch_table_rewrite_ptr,
    .glGetLightxv = epoxy_glGetLightxv_dispatch_table_rewrite_ptr,
    .glGetLightxvOES = epoxy_glGetLightxvOES_dispatch_table_rewrite_ptr,
    .glGetListParameterfvSGIX = epoxy_glGetListParameterfvSGIX_dispatch_table_rewrite_ptr,
    .glGetListParameterivSGIX = epoxy_glGetListParameterivSGIX_dispatch_table_rewrite_ptr,
    .glGetLocalConstantBooleanvEXT = epoxy_glGetLocalConstantBooleanvEXT_dispatch_table_rewrite_ptr,
    .glGetLocalConstantFloatvEXT = epoxy_glGetLocalConstantFloatvEXT_dispatch_table_rewrite_ptr,
    .glGetLocalConstantIntegervEXT = epoxy_glGetLocalConstantIntegervEXT_dispatch_table_rewrite_ptr,
    .glGetMapAttribParameterfvNV = epoxy_glGetMapAttribParameterfvNV_dispatch_table_rewrite_ptr,
    .glGetMapAttribParameterivNV = epoxy_glGetMapAttribParameterivNV_dispatch_table_rewrite_ptr,
    .glGetMapControlPointsNV = epoxy_glGetMapControlPointsNV_dispatch_table_rewrite_ptr,
    .glGetMapParameterfvNV = epoxy_glGetMapParameterfvNV_dispatch_table_rewrite_ptr,
    .glGetMapParameterivNV = epoxy_glGetMapParameterivNV_dispatch_table_rewrite_ptr,
    .glGetMapdv = epoxy_glGetMapdv_dispatch_table_rewrite_ptr,
    .glGetMapfv = epoxy_glGetMapfv_dispatch_table_rewrite_ptr,
    .glGetMapiv = epoxy_glGetMapiv_dispatch_table_rewrite_ptr,
    .glGetMapxvOES = epoxy_glGetMapxvOES_dispatch_table_rewrite_ptr,
    .glGetMaterialfv = epoxy_glGetMaterialfv_dispatch_table_rewrite_ptr,
    .glGetMaterialiv = epoxy_glGetMaterialiv_dispatch_table_rewrite_ptr,
    .glGetMaterialxOES = epoxy_glGetMaterialxOES_dispatch_table_rewrite_ptr,
    .glGetMaterialxv = epoxy_glGetMaterialxv_dispatch_table_rewrite_ptr,
    .glGetMaterialxvOES = epoxy_glGetMaterialxvOES_dispatch_table_rewrite_ptr,
    .glGetMinmax = epoxy_glGetMinmax_dispatch_table_rewrite_ptr,
    .glGetMinmaxEXT = epoxy_glGetMinmaxEXT_dispatch_table_rewrite_ptr,
    .glGetMinmaxParameterfv = epoxy_glGetMinmaxParameterfv_dispatch_table_rewrite_ptr,
    .glGetMinmaxParameterfvEXT = epoxy_glGetMinmaxParameterfvEXT_dispatch_table_rewrite_ptr,
    .glGetMinmaxParameteriv = epoxy_glGetMinmaxParameteriv_dispatch_table_rewrite_ptr,
    .glGetMinmaxParameterivEXT = epoxy_glGetMinmaxParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetMultiTexEnvfvEXT = epoxy_glGetMultiTexEnvfvEXT_dispatch_table_rewrite_ptr,
    .glGetMultiTexEnvivEXT = epoxy_glGetMultiTexEnvivEXT_dispatch_table_rewrite_ptr,
    .glGetMultiTexGendvEXT = epoxy_glGetMultiTexGendvEXT_dispatch_table_rewrite_ptr,
    .glGetMultiTexGenfvEXT = epoxy_glGetMultiTexGenfvEXT_dispatch_table_rewrite_ptr,
    .glGetMultiTexGenivEXT = epoxy_glGetMultiTexGenivEXT_dispatch_table_rewrite_ptr,
    .glGetMultiTexImageEXT = epoxy_glGetMultiTexImageEXT_dispatch_table_rewrite_ptr,
    .glGetMultiTexLevelParameterfvEXT = epoxy_glGetMultiTexLevelParameterfvEXT_dispatch_table_rewrite_ptr,
    .glGetMultiTexLevelParameterivEXT = epoxy_glGetMultiTexLevelParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetMultiTexParameterIivEXT = epoxy_glGetMultiTexParameterIivEXT_dispatch_table_rewrite_ptr,
    .glGetMultiTexParameterIuivEXT = epoxy_glGetMultiTexParameterIuivEXT_dispatch_table_rewrite_ptr,
    .glGetMultiTexParameterfvEXT = epoxy_glGetMultiTexParameterfvEXT_dispatch_table_rewrite_ptr,
    .glGetMultiTexParameterivEXT = epoxy_glGetMultiTexParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetMultisamplefv = epoxy_glGetMultisamplefv_dispatch_table_rewrite_ptr,
    .glGetMultisamplefvNV = epoxy_glGetMultisamplefvNV_dispatch_table_rewrite_ptr,
    .glGetNamedBufferParameteri64v = epoxy_glGetNamedBufferParameteri64v_dispatch_table_rewrite_ptr,
    .glGetNamedBufferParameteriv = epoxy_glGetNamedBufferParameteriv_dispatch_table_rewrite_ptr,
    .glGetNamedBufferParameterivEXT = epoxy_glGetNamedBufferParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetNamedBufferParameterui64vNV = epoxy_glGetNamedBufferParameterui64vNV_dispatch_table_rewrite_ptr,
    .glGetNamedBufferPointerv = epoxy_glGetNamedBufferPointerv_dispatch_table_rewrite_ptr,
    .glGetNamedBufferPointervEXT = epoxy_glGetNamedBufferPointervEXT_dispatch_table_rewrite_ptr,
    .glGetNamedBufferSubData = epoxy_glGetNamedBufferSubData_dispatch_table_rewrite_ptr,
    .glGetNamedBufferSubDataEXT = epoxy_glGetNamedBufferSubDataEXT_dispatch_table_rewrite_ptr,
    .glGetNamedFramebufferAttachmentParameteriv = epoxy_glGetNamedFramebufferAttachmentParameteriv_dispatch_table_rewrite_ptr,
    .glGetNamedFramebufferAttachmentParameterivEXT = epoxy_glGetNamedFramebufferAttachmentParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetNamedFramebufferParameteriv = epoxy_glGetNamedFramebufferParameteriv_dispatch_table_rewrite_ptr,
    .glGetNamedFramebufferParameterivEXT = epoxy_glGetNamedFramebufferParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetNamedProgramLocalParameterIivEXT = epoxy_glGetNamedProgramLocalParameterIivEXT_dispatch_table_rewrite_ptr,
    .glGetNamedProgramLocalParameterIuivEXT = epoxy_glGetNamedProgramLocalParameterIuivEXT_dispatch_table_rewrite_ptr,
    .glGetNamedProgramLocalParameterdvEXT = epoxy_glGetNamedProgramLocalParameterdvEXT_dispatch_table_rewrite_ptr,
    .glGetNamedProgramLocalParameterfvEXT = epoxy_glGetNamedProgramLocalParameterfvEXT_dispatch_table_rewrite_ptr,
    .glGetNamedProgramStringEXT = epoxy_glGetNamedProgramStringEXT_dispatch_table_rewrite_ptr,
    .glGetNamedProgramivEXT = epoxy_glGetNamedProgramivEXT_dispatch_table_rewrite_ptr,
    .glGetNamedRenderbufferParameteriv = epoxy_glGetNamedRenderbufferParameteriv_dispatch_table_rewrite_ptr,
    .glGetNamedRenderbufferParameterivEXT = epoxy_glGetNamedRenderbufferParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetNamedStringARB = epoxy_glGetNamedStringARB_dispatch_table_rewrite_ptr,
    .glGetNamedStringivARB = epoxy_glGetNamedStringivARB_dispatch_table_rewrite_ptr,
    .glGetNextPerfQueryIdINTEL = epoxy_glGetNextPerfQueryIdINTEL_dispatch_table_rewrite_ptr,
    .glGetObjectBufferfvATI = epoxy_glGetObjectBufferfvATI_dispatch_table_rewrite_ptr,
    .glGetObjectBufferivATI = epoxy_glGetObjectBufferivATI_dispatch_table_rewrite_ptr,
    .glGetObjectLabel = epoxy_glGetObjectLabel_dispatch_table_rewrite_ptr,
    .glGetObjectLabelEXT = epoxy_glGetObjectLabelEXT_dispatch_table_rewrite_ptr,
    .glGetObjectLabelKHR = epoxy_glGetObjectLabelKHR_dispatch_table_rewrite_ptr,
    .glGetObjectParameterfvARB = epoxy_glGetObjectParameterfvARB_dispatch_table_rewrite_ptr,
    .glGetObjectParameterivAPPLE = epoxy_glGetObjectParameterivAPPLE_dispatch_table_rewrite_ptr,
    .glGetObjectParameterivARB = epoxy_glGetObjectParameterivARB_dispatch_table_rewrite_ptr,
    .glGetObjectPtrLabel = epoxy_glGetObjectPtrLabel_dispatch_table_rewrite_ptr,
    .glGetObjectPtrLabelKHR = epoxy_glGetObjectPtrLabelKHR_dispatch_table_rewrite_ptr,
    .glGetOcclusionQueryivNV = epoxy_glGetOcclusionQueryivNV_dispatch_table_rewrite_ptr,
    .glGetOcclusionQueryuivNV = epoxy_glGetOcclusionQueryuivNV_dispatch_table_rewrite_ptr,
    .glGetPathColorGenfvNV = epoxy_glGetPathColorGenfvNV_dispatch_table_rewrite_ptr,
    .glGetPathColorGenivNV = epoxy_glGetPathColorGenivNV_dispatch_table_rewrite_ptr,
    .glGetPathCommandsNV = epoxy_glGetPathCommandsNV_dispatch_table_rewrite_ptr,
    .glGetPathCoordsNV = epoxy_glGetPathCoordsNV_dispatch_table_rewrite_ptr,
    .glGetPathDashArrayNV = epoxy_glGetPathDashArrayNV_dispatch_table_rewrite_ptr,
    .glGetPathLengthNV = epoxy_glGetPathLengthNV_dispatch_table_rewrite_ptr,
    .glGetPathMetricRangeNV = epoxy_glGetPathMetricRangeNV_dispatch_table_rewrite_ptr,
    .glGetPathMetricsNV = epoxy_glGetPathMetricsNV_dispatch_table_rewrite_ptr,
    .glGetPathParameterfvNV = epoxy_glGetPathParameterfvNV_dispatch_table_rewrite_ptr,
    .glGetPathParameterivNV = epoxy_glGetPathParameterivNV_dispatch_table_rewrite_ptr,
    .glGetPathSpacingNV = epoxy_glGetPathSpacingNV_dispatch_table_rewrite_ptr,
    .glGetPathTexGenfvNV = epoxy_glGetPathTexGenfvNV_dispatch_table_rewrite_ptr,
    .glGetPathTexGenivNV = epoxy_glGetPathTexGenivNV_dispatch_table_rewrite_ptr,
    .glGetPerfCounterInfoINTEL = epoxy_glGetPerfCounterInfoINTEL_dispatch_table_rewrite_ptr,
    .glGetPerfMonitorCounterDataAMD = epoxy_glGetPerfMonitorCounterDataAMD_dispatch_table_rewrite_ptr,
    .glGetPerfMonitorCounterInfoAMD = epoxy_glGetPerfMonitorCounterInfoAMD_dispatch_table_rewrite_ptr,
    .glGetPerfMonitorCounterStringAMD = epoxy_glGetPerfMonitorCounterStringAMD_dispatch_table_rewrite_ptr,
    .glGetPerfMonitorCountersAMD = epoxy_glGetPerfMonitorCountersAMD_dispatch_table_rewrite_ptr,
    .glGetPerfMonitorGroupStringAMD = epoxy_glGetPerfMonitorGroupStringAMD_dispatch_table_rewrite_ptr,
    .glGetPerfMonitorGroupsAMD = epoxy_glGetPerfMonitorGroupsAMD_dispatch_table_rewrite_ptr,
    .glGetPerfQueryDataINTEL = epoxy_glGetPerfQueryDataINTEL_dispatch_table_rewrite_ptr,
    .glGetPerfQueryIdByNameINTEL = epoxy_glGetPerfQueryIdByNameINTEL_dispatch_table_rewrite_ptr,
    .glGetPerfQueryInfoINTEL = epoxy_glGetPerfQueryInfoINTEL_dispatch_table_rewrite_ptr,
    .glGetPixelMapfv = epoxy_glGetPixelMapfv_dispatch_table_rewrite_ptr,
    .glGetPixelMapuiv = epoxy_glGetPixelMapuiv_dispatch_table_rewrite_ptr,
    .glGetPixelMapusv = epoxy_glGetPixelMapusv_dispatch_table_rewrite_ptr,
    .glGetPixelMapxv = epoxy_glGetPixelMapxv_dispatch_table_rewrite_ptr,
    .glGetPixelTexGenParameterfvSGIS = epoxy_glGetPixelTexGenParameterfvSGIS_dispatch_table_rewrite_ptr,
    .glGetPixelTexGenParameterivSGIS = epoxy_glGetPixelTexGenParameterivSGIS_dispatch_table_rewrite_ptr,
    .glGetPixelTransformParameterfvEXT = epoxy_glGetPixelTransformParameterfvEXT_dispatch_table_rewrite_ptr,
    .glGetPixelTransformParameterivEXT = epoxy_glGetPixelTransformParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetPointerIndexedvEXT = epoxy_glGetPointerIndexedvEXT_dispatch_table_rewrite_ptr,
    .glGetPointeri_vEXT = epoxy_glGetPointeri_vEXT_dispatch_table_rewrite_ptr,
    .glGetPointerv = epoxy_glGetPointerv_dispatch_table_rewrite_ptr,
    .glGetPointervEXT = epoxy_glGetPointervEXT_dispatch_table_rewrite_ptr,
    .glGetPointervKHR = epoxy_glGetPointervKHR_dispatch_table_rewrite_ptr,
    .glGetPolygonStipple = epoxy_glGetPolygonStipple_dispatch_table_rewrite_ptr,
    .glGetProgramBinary = epoxy_glGetProgramBinary_dispatch_table_rewrite_ptr,
    .glGetProgramBinaryOES = epoxy_glGetProgramBinaryOES_dispatch_table_rewrite_ptr,
    .glGetProgramEnvParameterIivNV = epoxy_glGetProgramEnvParameterIivNV_dispatch_table_rewrite_ptr,
    .glGetProgramEnvParameterIuivNV = epoxy_glGetProgramEnvParameterIuivNV_dispatch_table_rewrite_ptr,
    .glGetProgramEnvParameterdvARB = epoxy_glGetProgramEnvParameterdvARB_dispatch_table_rewrite_ptr,
    .glGetProgramEnvParameterfvARB = epoxy_glGetProgramEnvParameterfvARB_dispatch_table_rewrite_ptr,
    .glGetProgramInfoLog = epoxy_glGetProgramInfoLog_dispatch_table_rewrite_ptr,
    .glGetProgramInterfaceiv = epoxy_glGetProgramInterfaceiv_dispatch_table_rewrite_ptr,
    .glGetProgramLocalParameterIivNV = epoxy_glGetProgramLocalParameterIivNV_dispatch_table_rewrite_ptr,
    .glGetProgramLocalParameterIuivNV = epoxy_glGetProgramLocalParameterIuivNV_dispatch_table_rewrite_ptr,
    .glGetProgramLocalParameterdvARB = epoxy_glGetProgramLocalParameterdvARB_dispatch_table_rewrite_ptr,
    .glGetProgramLocalParameterfvARB = epoxy_glGetProgramLocalParameterfvARB_dispatch_table_rewrite_ptr,
    .glGetProgramNamedParameterdvNV = epoxy_glGetProgramNamedParameterdvNV_dispatch_table_rewrite_ptr,
    .glGetProgramNamedParameterfvNV = epoxy_glGetProgramNamedParameterfvNV_dispatch_table_rewrite_ptr,
    .glGetProgramParameterdvNV = epoxy_glGetProgramParameterdvNV_dispatch_table_rewrite_ptr,
    .glGetProgramParameterfvNV = epoxy_glGetProgramParameterfvNV_dispatch_table_rewrite_ptr,
    .glGetProgramPipelineInfoLog = epoxy_glGetProgramPipelineInfoLog_dispatch_table_rewrite_ptr,
    .glGetProgramPipelineInfoLogEXT = epoxy_glGetProgramPipelineInfoLogEXT_dispatch_table_rewrite_ptr,
    .glGetProgramPipelineiv = epoxy_glGetProgramPipelineiv_dispatch_table_rewrite_ptr,
    .glGetProgramPipelineivEXT = epoxy_glGetProgramPipelineivEXT_dispatch_table_rewrite_ptr,
    .glGetProgramResourceIndex = epoxy_glGetProgramResourceIndex_dispatch_table_rewrite_ptr,
    .glGetProgramResourceLocation = epoxy_glGetProgramResourceLocation_dispatch_table_rewrite_ptr,
    .glGetProgramResourceLocationIndex = epoxy_glGetProgramResourceLocationIndex_dispatch_table_rewrite_ptr,
    .glGetProgramResourceLocationIndexEXT = epoxy_glGetProgramResourceLocationIndexEXT_dispatch_table_rewrite_ptr,
    .glGetProgramResourceName = epoxy_glGetProgramResourceName_dispatch_table_rewrite_ptr,
    .glGetProgramResourcefvNV = epoxy_glGetProgramResourcefvNV_dispatch_table_rewrite_ptr,
    .glGetProgramResourceiv = epoxy_glGetProgramResourceiv_dispatch_table_rewrite_ptr,
    .glGetProgramStageiv = epoxy_glGetProgramStageiv_dispatch_table_rewrite_ptr,
    .glGetProgramStringARB = epoxy_glGetProgramStringARB_dispatch_table_rewrite_ptr,
    .glGetProgramStringNV = epoxy_glGetProgramStringNV_dispatch_table_rewrite_ptr,
    .glGetProgramSubroutineParameteruivNV = epoxy_glGetProgramSubroutineParameteruivNV_dispatch_table_rewrite_ptr,
    .glGetProgramiv = epoxy_glGetProgramiv_dispatch_table_rewrite_ptr,
    .glGetProgramivARB = epoxy_glGetProgramivARB_dispatch_table_rewrite_ptr,
    .glGetProgramivNV = epoxy_glGetProgramivNV_dispatch_table_rewrite_ptr,
    .glGetQueryBufferObjecti64v = epoxy_glGetQueryBufferObjecti64v_dispatch_table_rewrite_ptr,
    .glGetQueryBufferObjectiv = epoxy_glGetQueryBufferObjectiv_dispatch_table_rewrite_ptr,
    .glGetQueryBufferObjectui64v = epoxy_glGetQueryBufferObjectui64v_dispatch_table_rewrite_ptr,
    .glGetQueryBufferObjectuiv = epoxy_glGetQueryBufferObjectuiv_dispatch_table_rewrite_ptr,
    .glGetQueryIndexediv = epoxy_glGetQueryIndexediv_dispatch_table_rewrite_ptr,
    .glGetQueryObjecti64v = epoxy_glGetQueryObjecti64v_dispatch_table_rewrite_ptr,
    .glGetQueryObjecti64vEXT = epoxy_glGetQueryObjecti64vEXT_dispatch_table_rewrite_ptr,
    .glGetQueryObjectiv = epoxy_glGetQueryObjectiv_dispatch_table_rewrite_ptr,
    .glGetQueryObjectivARB = epoxy_glGetQueryObjectivARB_dispatch_table_rewrite_ptr,
    .glGetQueryObjectivEXT = epoxy_glGetQueryObjectivEXT_dispatch_table_rewrite_ptr,
    .glGetQueryObjectui64v = epoxy_glGetQueryObjectui64v_dispatch_table_rewrite_ptr,
    .glGetQueryObjectui64vEXT = epoxy_glGetQueryObjectui64vEXT_dispatch_table_rewrite_ptr,
    .glGetQueryObjectuiv = epoxy_glGetQueryObjectuiv_dispatch_table_rewrite_ptr,
    .glGetQueryObjectuivARB = epoxy_glGetQueryObjectuivARB_dispatch_table_rewrite_ptr,
    .glGetQueryObjectuivEXT = epoxy_glGetQueryObjectuivEXT_dispatch_table_rewrite_ptr,
    .glGetQueryiv = epoxy_glGetQueryiv_dispatch_table_rewrite_ptr,
    .glGetQueryivARB = epoxy_glGetQueryivARB_dispatch_table_rewrite_ptr,
    .glGetQueryivEXT = epoxy_glGetQueryivEXT_dispatch_table_rewrite_ptr,
    .glGetRenderbufferParameteriv = epoxy_glGetRenderbufferParameteriv_dispatch_table_rewrite_ptr,
    .glGetRenderbufferParameterivEXT = epoxy_glGetRenderbufferParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetRenderbufferParameterivOES = epoxy_glGetRenderbufferParameterivOES_dispatch_table_rewrite_ptr,
    .glGetSamplerParameterIiv = epoxy_glGetSamplerParameterIiv_dispatch_table_rewrite_ptr,
    .glGetSamplerParameterIivEXT = epoxy_glGetSamplerParameterIivEXT_dispatch_table_rewrite_ptr,
    .glGetSamplerParameterIivOES = epoxy_glGetSamplerParameterIivOES_dispatch_table_rewrite_ptr,
    .glGetSamplerParameterIuiv = epoxy_glGetSamplerParameterIuiv_dispatch_table_rewrite_ptr,
    .glGetSamplerParameterIuivEXT = epoxy_glGetSamplerParameterIuivEXT_dispatch_table_rewrite_ptr,
    .glGetSamplerParameterIuivOES = epoxy_glGetSamplerParameterIuivOES_dispatch_table_rewrite_ptr,
    .glGetSamplerParameterfv = epoxy_glGetSamplerParameterfv_dispatch_table_rewrite_ptr,
    .glGetSamplerParameteriv = epoxy_glGetSamplerParameteriv_dispatch_table_rewrite_ptr,
    .glGetSeparableFilter = epoxy_glGetSeparableFilter_dispatch_table_rewrite_ptr,
    .glGetSeparableFilterEXT = epoxy_glGetSeparableFilterEXT_dispatch_table_rewrite_ptr,
    .glGetShaderInfoLog = epoxy_glGetShaderInfoLog_dispatch_table_rewrite_ptr,
    .glGetShaderPrecisionFormat = epoxy_glGetShaderPrecisionFormat_dispatch_table_rewrite_ptr,
    .glGetShaderSource = epoxy_glGetShaderSource_dispatch_table_rewrite_ptr,
    .glGetShaderSourceARB = epoxy_glGetShaderSourceARB_dispatch_table_rewrite_ptr,
    .glGetShaderiv = epoxy_glGetShaderiv_dispatch_table_rewrite_ptr,
    .glGetSharpenTexFuncSGIS = epoxy_glGetSharpenTexFuncSGIS_dispatch_table_rewrite_ptr,
    .glGetStageIndexNV = epoxy_glGetStageIndexNV_dispatch_table_rewrite_ptr,
    .glGetString = epoxy_glGetString_dispatch_table_rewrite_ptr,
    .glGetStringi = epoxy_glGetStringi_dispatch_table_rewrite_ptr,
    .glGetSubroutineIndex = epoxy_glGetSubroutineIndex_dispatch_table_rewrite_ptr,
    .glGetSubroutineUniformLocation = epoxy_glGetSubroutineUniformLocation_dispatch_table_rewrite_ptr,
    .glGetSynciv = epoxy_glGetSynciv_dispatch_table_rewrite_ptr,
    .glGetSyncivAPPLE = epoxy_glGetSyncivAPPLE_dispatch_table_rewrite_ptr,
    .glGetTexBumpParameterfvATI = epoxy_glGetTexBumpParameterfvATI_dispatch_table_rewrite_ptr,
    .glGetTexBumpParameterivATI = epoxy_glGetTexBumpParameterivATI_dispatch_table_rewrite_ptr,
    .glGetTexEnvfv = epoxy_glGetTexEnvfv_dispatch_table_rewrite_ptr,
    .glGetTexEnviv = epoxy_glGetTexEnviv_dispatch_table_rewrite_ptr,
    .glGetTexEnvxv = epoxy_glGetTexEnvxv_dispatch_table_rewrite_ptr,
    .glGetTexEnvxvOES = epoxy_glGetTexEnvxvOES_dispatch_table_rewrite_ptr,
    .glGetTexFilterFuncSGIS = epoxy_glGetTexFilterFuncSGIS_dispatch_table_rewrite_ptr,
    .glGetTexGendv = epoxy_glGetTexGendv_dispatch_table_rewrite_ptr,
    .glGetTexGenfv = epoxy_glGetTexGenfv_dispatch_table_rewrite_ptr,
    .glGetTexGenfvOES = epoxy_glGetTexGenfvOES_dispatch_table_rewrite_ptr,
    .glGetTexGeniv = epoxy_glGetTexGeniv_dispatch_table_rewrite_ptr,
    .glGetTexGenivOES = epoxy_glGetTexGenivOES_dispatch_table_rewrite_ptr,
    .glGetTexGenxvOES = epoxy_glGetTexGenxvOES_dispatch_table_rewrite_ptr,
    .glGetTexImage = epoxy_glGetTexImage_dispatch_table_rewrite_ptr,
    .glGetTexLevelParameterfv = epoxy_glGetTexLevelParameterfv_dispatch_table_rewrite_ptr,
    .glGetTexLevelParameteriv = epoxy_glGetTexLevelParameteriv_dispatch_table_rewrite_ptr,
    .glGetTexLevelParameterxvOES = epoxy_glGetTexLevelParameterxvOES_dispatch_table_rewrite_ptr,
    .glGetTexParameterIiv = epoxy_glGetTexParameterIiv_dispatch_table_rewrite_ptr,
    .glGetTexParameterIivEXT = epoxy_glGetTexParameterIivEXT_dispatch_table_rewrite_ptr,
    .glGetTexParameterIivOES = epoxy_glGetTexParameterIivOES_dispatch_table_rewrite_ptr,
    .glGetTexParameterIuiv = epoxy_glGetTexParameterIuiv_dispatch_table_rewrite_ptr,
    .glGetTexParameterIuivEXT = epoxy_glGetTexParameterIuivEXT_dispatch_table_rewrite_ptr,
    .glGetTexParameterIuivOES = epoxy_glGetTexParameterIuivOES_dispatch_table_rewrite_ptr,
    .glGetTexParameterPointervAPPLE = epoxy_glGetTexParameterPointervAPPLE_dispatch_table_rewrite_ptr,
    .glGetTexParameterfv = epoxy_glGetTexParameterfv_dispatch_table_rewrite_ptr,
    .glGetTexParameteriv = epoxy_glGetTexParameteriv_dispatch_table_rewrite_ptr,
    .glGetTexParameterxv = epoxy_glGetTexParameterxv_dispatch_table_rewrite_ptr,
    .glGetTexParameterxvOES = epoxy_glGetTexParameterxvOES_dispatch_table_rewrite_ptr,
    .glGetTextureHandleARB = epoxy_glGetTextureHandleARB_dispatch_table_rewrite_ptr,
    .glGetTextureHandleNV = epoxy_glGetTextureHandleNV_dispatch_table_rewrite_ptr,
    .glGetTextureImage = epoxy_glGetTextureImage_dispatch_table_rewrite_ptr,
    .glGetTextureImageEXT = epoxy_glGetTextureImageEXT_dispatch_table_rewrite_ptr,
    .glGetTextureLevelParameterfv = epoxy_glGetTextureLevelParameterfv_dispatch_table_rewrite_ptr,
    .glGetTextureLevelParameterfvEXT = epoxy_glGetTextureLevelParameterfvEXT_dispatch_table_rewrite_ptr,
    .glGetTextureLevelParameteriv = epoxy_glGetTextureLevelParameteriv_dispatch_table_rewrite_ptr,
    .glGetTextureLevelParameterivEXT = epoxy_glGetTextureLevelParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetTextureParameterIiv = epoxy_glGetTextureParameterIiv_dispatch_table_rewrite_ptr,
    .glGetTextureParameterIivEXT = epoxy_glGetTextureParameterIivEXT_dispatch_table_rewrite_ptr,
    .glGetTextureParameterIuiv = epoxy_glGetTextureParameterIuiv_dispatch_table_rewrite_ptr,
    .glGetTextureParameterIuivEXT = epoxy_glGetTextureParameterIuivEXT_dispatch_table_rewrite_ptr,
    .glGetTextureParameterfv = epoxy_glGetTextureParameterfv_dispatch_table_rewrite_ptr,
    .glGetTextureParameterfvEXT = epoxy_glGetTextureParameterfvEXT_dispatch_table_rewrite_ptr,
    .glGetTextureParameteriv = epoxy_glGetTextureParameteriv_dispatch_table_rewrite_ptr,
    .glGetTextureParameterivEXT = epoxy_glGetTextureParameterivEXT_dispatch_table_rewrite_ptr,
    .glGetTextureSamplerHandleARB = epoxy_glGetTextureSamplerHandleARB_dispatch_table_rewrite_ptr,
    .glGetTextureSamplerHandleNV = epoxy_glGetTextureSamplerHandleNV_dispatch_table_rewrite_ptr,
    .glGetTextureSubImage = epoxy_glGetTextureSubImage_dispatch_table_rewrite_ptr,
    .glGetTrackMatrixivNV = epoxy_glGetTrackMatrixivNV_dispatch_table_rewrite_ptr,
    .glGetTransformFeedbackVarying = epoxy_glGetTransformFeedbackVarying_dispatch_table_rewrite_ptr,
    .glGetTransformFeedbackVaryingEXT = epoxy_glGetTransformFeedbackVaryingEXT_dispatch_table_rewrite_ptr,
    .glGetTransformFeedbackVaryingNV = epoxy_glGetTransformFeedbackVaryingNV_dispatch_table_rewrite_ptr,
    .glGetTransformFeedbacki64_v = epoxy_glGetTransformFeedbacki64_v_dispatch_table_rewrite_ptr,
    .glGetTransformFeedbacki_v = epoxy_glGetTransformFeedbacki_v_dispatch_table_rewrite_ptr,
    .glGetTransformFeedbackiv = epoxy_glGetTransformFeedbackiv_dispatch_table_rewrite_ptr,
    .glGetTranslatedShaderSourceANGLE = epoxy_glGetTranslatedShaderSourceANGLE_dispatch_table_rewrite_ptr,
    .glGetUniformBlockIndex = epoxy_glGetUniformBlockIndex_dispatch_table_rewrite_ptr,
    .glGetUniformBufferSizeEXT = epoxy_glGetUniformBufferSizeEXT_dispatch_table_rewrite_ptr,
    .glGetUniformIndices = epoxy_glGetUniformIndices_dispatch_table_rewrite_ptr,
    .glGetUniformLocation = epoxy_glGetUniformLocation_dispatch_table_rewrite_ptr,
    .glGetUniformLocationARB = epoxy_glGetUniformLocationARB_dispatch_table_rewrite_ptr,
    .glGetUniformOffsetEXT = epoxy_glGetUniformOffsetEXT_dispatch_table_rewrite_ptr,
    .glGetUniformSubroutineuiv = epoxy_glGetUniformSubroutineuiv_dispatch_table_rewrite_ptr,
    .glGetUniformdv = epoxy_glGetUniformdv_dispatch_table_rewrite_ptr,
    .glGetUniformfv = epoxy_glGetUniformfv_dispatch_table_rewrite_ptr,
    .glGetUniformfvARB = epoxy_glGetUniformfvARB_dispatch_table_rewrite_ptr,
    .glGetUniformi64vARB = epoxy_glGetUniformi64vARB_dispatch_table_rewrite_ptr,
    .glGetUniformi64vNV = epoxy_glGetUniformi64vNV_dispatch_table_rewrite_ptr,
    .glGetUniformiv = epoxy_glGetUniformiv_dispatch_table_rewrite_ptr,
    .glGetUniformivARB = epoxy_glGetUniformivARB_dispatch_table_rewrite_ptr,
    .glGetUniformui64vARB = epoxy_glGetUniformui64vARB_dispatch_table_rewrite_ptr,
    .glGetUniformui64vNV = epoxy_glGetUniformui64vNV_dispatch_table_rewrite_ptr,
    .glGetUniformuiv = epoxy_glGetUniformuiv_dispatch_table_rewrite_ptr,
    .glGetUniformuivEXT = epoxy_glGetUniformuivEXT_dispatch_table_rewrite_ptr,
    .glGetVariantArrayObjectfvATI = epoxy_glGetVariantArrayObjectfvATI_dispatch_table_rewrite_ptr,
    .glGetVariantArrayObjectivATI = epoxy_glGetVariantArrayObjectivATI_dispatch_table_rewrite_ptr,
    .glGetVariantBooleanvEXT = epoxy_glGetVariantBooleanvEXT_dispatch_table_rewrite_ptr,
    .glGetVariantFloatvEXT = epoxy_glGetVariantFloatvEXT_dispatch_table_rewrite_ptr,
    .glGetVariantIntegervEXT = epoxy_glGetVariantIntegervEXT_dispatch_table_rewrite_ptr,
    .glGetVariantPointervEXT = epoxy_glGetVariantPointervEXT_dispatch_table_rewrite_ptr,
    .glGetVaryingLocationNV = epoxy_glGetVaryingLocationNV_dispatch_table_rewrite_ptr,
    .glGetVertexArrayIndexed64iv = epoxy_glGetVertexArrayIndexed64iv_dispatch_table_rewrite_ptr,
    .glGetVertexArrayIndexediv = epoxy_glGetVertexArrayIndexediv_dispatch_table_rewrite_ptr,
    .glGetVertexArrayIntegeri_vEXT = epoxy_glGetVertexArrayIntegeri_vEXT_dispatch_table_rewrite_ptr,
    .glGetVertexArrayIntegervEXT = epoxy_glGetVertexArrayIntegervEXT_dispatch_table_rewrite_ptr,
    .glGetVertexArrayPointeri_vEXT = epoxy_glGetVertexArrayPointeri_vEXT_dispatch_table_rewrite_ptr,
    .glGetVertexArrayPointervEXT = epoxy_glGetVertexArrayPointervEXT_dispatch_table_rewrite_ptr,
    .glGetVertexArrayiv = epoxy_glGetVertexArrayiv_dispatch_table_rewrite_ptr,
    .glGetVertexAttribArrayObjectfvATI = epoxy_glGetVertexAttribArrayObjectfvATI_dispatch_table_rewrite_ptr,
    .glGetVertexAttribArrayObjectivATI = epoxy_glGetVertexAttribArrayObjectivATI_dispatch_table_rewrite_ptr,
    .glGetVertexAttribIiv = epoxy_glGetVertexAttribIiv_dispatch_table_rewrite_ptr,
    .glGetVertexAttribIivEXT = epoxy_glGetVertexAttribIivEXT_dispatch_table_rewrite_ptr,
    .glGetVertexAttribIuiv = epoxy_glGetVertexAttribIuiv_dispatch_table_rewrite_ptr,
    .glGetVertexAttribIuivEXT = epoxy_glGetVertexAttribIuivEXT_dispatch_table_rewrite_ptr,
    .glGetVertexAttribLdv = epoxy_glGetVertexAttribLdv_dispatch_table_rewrite_ptr,
    .glGetVertexAttribLdvEXT = epoxy_glGetVertexAttribLdvEXT_dispatch_table_rewrite_ptr,
    .glGetVertexAttribLi64vNV = epoxy_glGetVertexAttribLi64vNV_dispatch_table_rewrite_ptr,
    .glGetVertexAttribLui64vARB = epoxy_glGetVertexAttribLui64vARB_dispatch_table_rewrite_ptr,
    .glGetVertexAttribLui64vNV = epoxy_glGetVertexAttribLui64vNV_dispatch_table_rewrite_ptr,
    .glGetVertexAttribPointerv = epoxy_glGetVertexAttribPointerv_dispatch_table_rewrite_ptr,
    .glGetVertexAttribPointervARB = epoxy_glGetVertexAttribPointervARB_dispatch_table_rewrite_ptr,
    .glGetVertexAttribPointervNV = epoxy_glGetVertexAttribPointervNV_dispatch_table_rewrite_ptr,
    .glGetVertexAttribdv = epoxy_glGetVertexAttribdv_dispatch_table_rewrite_ptr,
    .glGetVertexAttribdvARB = epoxy_glGetVertexAttribdvARB_dispatch_table_rewrite_ptr,
    .glGetVertexAttribdvNV = epoxy_glGetVertexAttribdvNV_dispatch_table_rewrite_ptr,
    .glGetVertexAttribfv = epoxy_glGetVertexAttribfv_dispatch_table_rewrite_ptr,
    .glGetVertexAttribfvARB = epoxy_glGetVertexAttribfvARB_dispatch_table_rewrite_ptr,
    .glGetVertexAttribfvNV = epoxy_glGetVertexAttribfvNV_dispatch_table_rewrite_ptr,
    .glGetVertexAttribiv = epoxy_glGetVertexAttribiv_dispatch_table_rewrite_ptr,
    .glGetVertexAttribivARB = epoxy_glGetVertexAttribivARB_dispatch_table_rewrite_ptr,
    .glGetVertexAttribivNV = epoxy_glGetVertexAttribivNV_dispatch_table_rewrite_ptr,
    .glGetVideoCaptureStreamdvNV = epoxy_glGetVideoCaptureStreamdvNV_dispatch_table_rewrite_ptr,
    .glGetVideoCaptureStreamfvNV = epoxy_glGetVideoCaptureStreamfvNV_dispatch_table_rewrite_ptr,
    .glGetVideoCaptureStreamivNV = epoxy_glGetVideoCaptureStreamivNV_dispatch_table_rewrite_ptr,
    .glGetVideoCaptureivNV = epoxy_glGetVideoCaptureivNV_dispatch_table_rewrite_ptr,
    .glGetVideoi64vNV = epoxy_glGetVideoi64vNV_dispatch_table_rewrite_ptr,
    .glGetVideoivNV = epoxy_glGetVideoivNV_dispatch_table_rewrite_ptr,
    .glGetVideoui64vNV = epoxy_glGetVideoui64vNV_dispatch_table_rewrite_ptr,
    .glGetVideouivNV = epoxy_glGetVideouivNV_dispatch_table_rewrite_ptr,
    .glGetnColorTable = epoxy_glGetnColorTable_dispatch_table_rewrite_ptr,
    .glGetnColorTableARB = epoxy_glGetnColorTableARB_dispatch_table_rewrite_ptr,
    .glGetnCompressedTexImage = epoxy_glGetnCompressedTexImage_dispatch_table_rewrite_ptr,
    .glGetnCompressedTexImageARB = epoxy_glGetnCompressedTexImageARB_dispatch_table_rewrite_ptr,
    .glGetnConvolutionFilter = epoxy_glGetnConvolutionFilter_dispatch_table_rewrite_ptr,
    .glGetnConvolutionFilterARB = epoxy_glGetnConvolutionFilterARB_dispatch_table_rewrite_ptr,
    .glGetnHistogram = epoxy_glGetnHistogram_dispatch_table_rewrite_ptr,
    .glGetnHistogramARB = epoxy_glGetnHistogramARB_dispatch_table_rewrite_ptr,
    .glGetnMapdv = epoxy_glGetnMapdv_dispatch_table_rewrite_ptr,
    .glGetnMapdvARB = epoxy_glGetnMapdvARB_dispatch_table_rewrite_ptr,
    .glGetnMapfv = epoxy_glGetnMapfv_dispatch_table_rewrite_ptr,
    .glGetnMapfvARB = epoxy_glGetnMapfvARB_dispatch_table_rewrite_ptr,
    .glGetnMapiv = epoxy_glGetnMapiv_dispatch_table_rewrite_ptr,
    .glGetnMapivARB = epoxy_glGetnMapivARB_dispatch_table_rewrite_ptr,
    .glGetnMinmax = epoxy_glGetnMinmax_dispatch_table_rewrite_ptr,
    .glGetnMinmaxARB = epoxy_glGetnMinmaxARB_dispatch_table_rewrite_ptr,
    .glGetnPixelMapfv = epoxy_glGetnPixelMapfv_dispatch_table_rewrite_ptr,
    .glGetnPixelMapfvARB = epoxy_glGetnPixelMapfvARB_dispatch_table_rewrite_ptr,
    .glGetnPixelMapuiv = epoxy_glGetnPixelMapuiv_dispatch_table_rewrite_ptr,
    .glGetnPixelMapuivARB = epoxy_glGetnPixelMapuivARB_dispatch_table_rewrite_ptr,
    .glGetnPixelMapusv = epoxy_glGetnPixelMapusv_dispatch_table_rewrite_ptr,
    .glGetnPixelMapusvARB = epoxy_glGetnPixelMapusvARB_dispatch_table_rewrite_ptr,
    .glGetnPolygonStipple = epoxy_glGetnPolygonStipple_dispatch_table_rewrite_ptr,
    .glGetnPolygonStippleARB = epoxy_glGetnPolygonStippleARB_dispatch_table_rewrite_ptr,
    .glGetnSeparableFilter = epoxy_glGetnSeparableFilter_dispatch_table_rewrite_ptr,
    .glGetnSeparableFilterARB = epoxy_glGetnSeparableFilterARB_dispatch_table_rewrite_ptr,
    .glGetnTexImage = epoxy_glGetnTexImage_dispatch_table_rewrite_ptr,
    .glGetnTexImageARB = epoxy_glGetnTexImageARB_dispatch_table_rewrite_ptr,
    .glGetnUniformdv = epoxy_glGetnUniformdv_dispatch_table_rewrite_ptr,
    .glGetnUniformdvARB = epoxy_glGetnUniformdvARB_dispatch_table_rewrite_ptr,
    .glGetnUniformfv = epoxy_glGetnUniformfv_dispatch_table_rewrite_ptr,
    .glGetnUniformfvARB = epoxy_glGetnUniformfvARB_dispatch_table_rewrite_ptr,
    .glGetnUniformfvEXT = epoxy_glGetnUniformfvEXT_dispatch_table_rewrite_ptr,
    .glGetnUniformfvKHR = epoxy_glGetnUniformfvKHR_dispatch_table_rewrite_ptr,
    .glGetnUniformi64vARB = epoxy_glGetnUniformi64vARB_dispatch_table_rewrite_ptr,
    .glGetnUniformiv = epoxy_glGetnUniformiv_dispatch_table_rewrite_ptr,
    .glGetnUniformivARB = epoxy_glGetnUniformivARB_dispatch_table_rewrite_ptr,
    .glGetnUniformivEXT = epoxy_glGetnUniformivEXT_dispatch_table_rewrite_ptr,
    .glGetnUniformivKHR = epoxy_glGetnUniformivKHR_dispatch_table_rewrite_ptr,
    .glGetnUniformui64vARB = epoxy_glGetnUniformui64vARB_dispatch_table_rewrite_ptr,
    .glGetnUniformuiv = epoxy_glGetnUniformuiv_dispatch_table_rewrite_ptr,
    .glGetnUniformuivARB = epoxy_glGetnUniformuivARB_dispatch_table_rewrite_ptr,
    .glGetnUniformuivKHR = epoxy_glGetnUniformuivKHR_dispatch_table_rewrite_ptr,
    .glGlobalAlphaFactorbSUN = epoxy_glGlobalAlphaFactorbSUN_dispatch_table_rewrite_ptr,
    .glGlobalAlphaFactordSUN = epoxy_glGlobalAlphaFactordSUN_dispatch_table_rewrite_ptr,
    .glGlobalAlphaFactorfSUN = epoxy_glGlobalAlphaFactorfSUN_dispatch_table_rewrite_ptr,
    .glGlobalAlphaFactoriSUN = epoxy_glGlobalAlphaFactoriSUN_dispatch_table_rewrite_ptr,
    .glGlobalAlphaFactorsSUN = epoxy_glGlobalAlphaFactorsSUN_dispatch_table_rewrite_ptr,
    .glGlobalAlphaFactorubSUN = epoxy_glGlobalAlphaFactorubSUN_dispatch_table_rewrite_ptr,
    .glGlobalAlphaFactoruiSUN = epoxy_glGlobalAlphaFactoruiSUN_dispatch_table_rewrite_ptr,
    .glGlobalAlphaFactorusSUN = epoxy_glGlobalAlphaFactorusSUN_dispatch_table_rewrite_ptr,
    .glHint = epoxy_glHint_dispatch_table_rewrite_ptr,
    .glHintPGI = epoxy_glHintPGI_dispatch_table_rewrite_ptr,
    .glHistogram = epoxy_glHistogram_dispatch_table_rewrite_ptr,
    .glHistogramEXT = epoxy_glHistogramEXT_dispatch_table_rewrite_ptr,
    .glIglooInterfaceSGIX = epoxy_glIglooInterfaceSGIX_dispatch_table_rewrite_ptr,
    .glImageTransformParameterfHP = epoxy_glImageTransformParameterfHP_dispatch_table_rewrite_ptr,
    .glImageTransformParameterfvHP = epoxy_glImageTransformParameterfvHP_dispatch_table_rewrite_ptr,
    .glImageTransformParameteriHP = epoxy_glImageTransformParameteriHP_dispatch_table_rewrite_ptr,
    .glImageTransformParameterivHP = epoxy_glImageTransformParameterivHP_dispatch_table_rewrite_ptr,
    .glImportSyncEXT = epoxy_glImportSyncEXT_dispatch_table_rewrite_ptr,
    .glIndexFormatNV = epoxy_glIndexFormatNV_dispatch_table_rewrite_ptr,
    .glIndexFuncEXT = epoxy_glIndexFuncEXT_dispatch_table_rewrite_ptr,
    .glIndexMask = epoxy_glIndexMask_dispatch_table_rewrite_ptr,
    .glIndexMaterialEXT = epoxy_glIndexMaterialEXT_dispatch_table_rewrite_ptr,
    .glIndexPointer = epoxy_glIndexPointer_dispatch_table_rewrite_ptr,
    .glIndexPointerEXT = epoxy_glIndexPointerEXT_dispatch_table_rewrite_ptr,
    .glIndexPointerListIBM = epoxy_glIndexPointerListIBM_dispatch_table_rewrite_ptr,
    .glIndexd = epoxy_glIndexd_dispatch_table_rewrite_ptr,
    .glIndexdv = epoxy_glIndexdv_dispatch_table_rewrite_ptr,
    .glIndexf = epoxy_glIndexf_dispatch_table_rewrite_ptr,
    .glIndexfv = epoxy_glIndexfv_dispatch_table_rewrite_ptr,
    .glIndexi = epoxy_glIndexi_dispatch_table_rewrite_ptr,
    .glIndexiv = epoxy_glIndexiv_dispatch_table_rewrite_ptr,
    .glIndexs = epoxy_glIndexs_dispatch_table_rewrite_ptr,
    .glIndexsv = epoxy_glIndexsv_dispatch_table_rewrite_ptr,
    .glIndexub = epoxy_glIndexub_dispatch_table_rewrite_ptr,
    .glIndexubv = epoxy_glIndexubv_dispatch_table_rewrite_ptr,
    .glIndexxOES = epoxy_glIndexxOES_dispatch_table_rewrite_ptr,
    .glIndexxvOES = epoxy_glIndexxvOES_dispatch_table_rewrite_ptr,
    .glInitNames = epoxy_glInitNames_dispatch_table_rewrite_ptr,
    .glInsertComponentEXT = epoxy_glInsertComponentEXT_dispatch_table_rewrite_ptr,
    .glInsertEventMarkerEXT = epoxy_glInsertEventMarkerEXT_dispatch_table_rewrite_ptr,
    .glInstrumentsBufferSGIX = epoxy_glInstrumentsBufferSGIX_dispatch_table_rewrite_ptr,
    .glInterleavedArrays = epoxy_glInterleavedArrays_dispatch_table_rewrite_ptr,
    .glInterpolatePathsNV = epoxy_glInterpolatePathsNV_dispatch_table_rewrite_ptr,
    .glInvalidateBufferData = epoxy_glInvalidateBufferData_dispatch_table_rewrite_ptr,
    .glInvalidateBufferSubData = epoxy_glInvalidateBufferSubData_dispatch_table_rewrite_ptr,
    .glInvalidateFramebuffer = epoxy_glInvalidateFramebuffer_dispatch_table_rewrite_ptr,
    .glInvalidateNamedFramebufferData = epoxy_glInvalidateNamedFramebufferData_dispatch_table_rewrite_ptr,
    .glInvalidateNamedFramebufferSubData = epoxy_glInvalidateNamedFramebufferSubData_dispatch_table_rewrite_ptr,
    .glInvalidateSubFramebuffer = epoxy_glInvalidateSubFramebuffer_dispatch_table_rewrite_ptr,
    .glInvalidateTexImage = epoxy_glInvalidateTexImage_dispatch_table_rewrite_ptr,
    .glInvalidateTexSubImage = epoxy_glInvalidateTexSubImage_dispatch_table_rewrite_ptr,
    .glIsAsyncMarkerSGIX = epoxy_glIsAsyncMarkerSGIX_dispatch_table_rewrite_ptr,
    .glIsBuffer = epoxy_glIsBuffer_dispatch_table_rewrite_ptr,
    .glIsBufferARB = epoxy_glIsBufferARB_dispatch_table_rewrite_ptr,
    .glIsBufferResidentNV = epoxy_glIsBufferResidentNV_dispatch_table_rewrite_ptr,
    .glIsCommandListNV = epoxy_glIsCommandListNV_dispatch_table_rewrite_ptr,
    .glIsEnabled = epoxy_glIsEnabled_dispatch_table_rewrite_ptr,
    .glIsEnabledIndexedEXT = epoxy_glIsEnabledIndexedEXT_dispatch_table_rewrite_ptr,
    .glIsEnabledi = epoxy_glIsEnabledi_dispatch_table_rewrite_ptr,
    .glIsEnablediEXT = epoxy_glIsEnablediEXT_dispatch_table_rewrite_ptr,
    .glIsEnablediNV = epoxy_glIsEnablediNV_dispatch_table_rewrite_ptr,
    .glIsEnablediOES = epoxy_glIsEnablediOES_dispatch_table_rewrite_ptr,
    .glIsFenceAPPLE = epoxy_glIsFenceAPPLE_dispatch_table_rewrite_ptr,
    .glIsFenceNV = epoxy_glIsFenceNV_dispatch_table_rewrite_ptr,
    .glIsFramebuffer = epoxy_glIsFramebuffer_dispatch_table_rewrite_ptr,
    .glIsFramebufferEXT = epoxy_glIsFramebufferEXT_dispatch_table_rewrite_ptr,
    .glIsFramebufferOES = epoxy_glIsFramebufferOES_dispatch_table_rewrite_ptr,
    .glIsImageHandleResidentARB = epoxy_glIsImageHandleResidentARB_dispatch_table_rewrite_ptr,
    .glIsImageHandleResidentNV = epoxy_glIsImageHandleResidentNV_dispatch_table_rewrite_ptr,
    .glIsList = epoxy_glIsList_dispatch_table_rewrite_ptr,
    .glIsNameAMD = epoxy_glIsNameAMD_dispatch_table_rewrite_ptr,
    .glIsNamedBufferResidentNV = epoxy_glIsNamedBufferResidentNV_dispatch_table_rewrite_ptr,
    .glIsNamedStringARB = epoxy_glIsNamedStringARB_dispatch_table_rewrite_ptr,
    .glIsObjectBufferATI = epoxy_glIsObjectBufferATI_dispatch_table_rewrite_ptr,
    .glIsOcclusionQueryNV = epoxy_glIsOcclusionQueryNV_dispatch_table_rewrite_ptr,
    .glIsPathNV = epoxy_glIsPathNV_dispatch_table_rewrite_ptr,
    .glIsPointInFillPathNV = epoxy_glIsPointInFillPathNV_dispatch_table_rewrite_ptr,
    .glIsPointInStrokePathNV = epoxy_glIsPointInStrokePathNV_dispatch_table_rewrite_ptr,
    .glIsProgram = epoxy_glIsProgram_dispatch_table_rewrite_ptr,
    .glIsProgramARB = epoxy_glIsProgramARB_dispatch_table_rewrite_ptr,
    .glIsProgramNV = epoxy_glIsProgramNV_dispatch_table_rewrite_ptr,
    .glIsProgramPipeline = epoxy_glIsProgramPipeline_dispatch_table_rewrite_ptr,
    .glIsProgramPipelineEXT = epoxy_glIsProgramPipelineEXT_dispatch_table_rewrite_ptr,
    .glIsQuery = epoxy_glIsQuery_dispatch_table_rewrite_ptr,
    .glIsQueryARB = epoxy_glIsQueryARB_dispatch_table_rewrite_ptr,
    .glIsQueryEXT = epoxy_glIsQueryEXT_dispatch_table_rewrite_ptr,
    .glIsRenderbuffer = epoxy_glIsRenderbuffer_dispatch_table_rewrite_ptr,
    .glIsRenderbufferEXT = epoxy_glIsRenderbufferEXT_dispatch_table_rewrite_ptr,
    .glIsRenderbufferOES = epoxy_glIsRenderbufferOES_dispatch_table_rewrite_ptr,
    .glIsSampler = epoxy_glIsSampler_dispatch_table_rewrite_ptr,
    .glIsShader = epoxy_glIsShader_dispatch_table_rewrite_ptr,
    .glIsStateNV = epoxy_glIsStateNV_dispatch_table_rewrite_ptr,
    .glIsSync = epoxy_glIsSync_dispatch_table_rewrite_ptr,
    .glIsSyncAPPLE = epoxy_glIsSyncAPPLE_dispatch_table_rewrite_ptr,
    .glIsTexture = epoxy_glIsTexture_dispatch_table_rewrite_ptr,
    .glIsTextureEXT = epoxy_glIsTextureEXT_dispatch_table_rewrite_ptr,
    .glIsTextureHandleResidentARB = epoxy_glIsTextureHandleResidentARB_dispatch_table_rewrite_ptr,
    .glIsTextureHandleResidentNV = epoxy_glIsTextureHandleResidentNV_dispatch_table_rewrite_ptr,
    .glIsTransformFeedback = epoxy_glIsTransformFeedback_dispatch_table_rewrite_ptr,
    .glIsTransformFeedbackNV = epoxy_glIsTransformFeedbackNV_dispatch_table_rewrite_ptr,
    .glIsVariantEnabledEXT = epoxy_glIsVariantEnabledEXT_dispatch_table_rewrite_ptr,
    .glIsVertexArray = epoxy_glIsVertexArray_dispatch_table_rewrite_ptr,
    .glIsVertexArrayAPPLE = epoxy_glIsVertexArrayAPPLE_dispatch_table_rewrite_ptr,
    .glIsVertexArrayOES = epoxy_glIsVertexArrayOES_dispatch_table_rewrite_ptr,
    .glIsVertexAttribEnabledAPPLE = epoxy_glIsVertexAttribEnabledAPPLE_dispatch_table_rewrite_ptr,
    .glLabelObjectEXT = epoxy_glLabelObjectEXT_dispatch_table_rewrite_ptr,
    .glLightEnviSGIX = epoxy_glLightEnviSGIX_dispatch_table_rewrite_ptr,
    .glLightModelf = epoxy_glLightModelf_dispatch_table_rewrite_ptr,
    .glLightModelfv = epoxy_glLightModelfv_dispatch_table_rewrite_ptr,
    .glLightModeli = epoxy_glLightModeli_dispatch_table_rewrite_ptr,
    .glLightModeliv = epoxy_glLightModeliv_dispatch_table_rewrite_ptr,
    .glLightModelx = epoxy_glLightModelx_dispatch_table_rewrite_ptr,
    .glLightModelxOES = epoxy_glLightModelxOES_dispatch_table_rewrite_ptr,
    .glLightModelxv = epoxy_glLightModelxv_dispatch_table_rewrite_ptr,
    .glLightModelxvOES = epoxy_glLightModelxvOES_dispatch_table_rewrite_ptr,
    .glLightf = epoxy_glLightf_dispatch_table_rewrite_ptr,
    .glLightfv = epoxy_glLightfv_dispatch_table_rewrite_ptr,
    .glLighti = epoxy_glLighti_dispatch_table_rewrite_ptr,
    .glLightiv = epoxy_glLightiv_dispatch_table_rewrite_ptr,
    .glLightx = epoxy_glLightx_dispatch_table_rewrite_ptr,
    .glLightxOES = epoxy_glLightxOES_dispatch_table_rewrite_ptr,
    .glLightxv = epoxy_glLightxv_dispatch_table_rewrite_ptr,
    .glLightxvOES = epoxy_glLightxvOES_dispatch_table_rewrite_ptr,
    .glLineStipple = epoxy_glLineStipple_dispatch_table_rewrite_ptr,
    .glLineWidth = epoxy_glLineWidth_dispatch_table_rewrite_ptr,
    .glLineWidthx = epoxy_glLineWidthx_dispatch_table_rewrite_ptr,
    .glLineWidthxOES = epoxy_glLineWidthxOES_dispatch_table_rewrite_ptr,
    .glLinkProgram = epoxy_glLinkProgram_dispatch_table_rewrite_ptr,
    .glLinkProgramARB = epoxy_glLinkProgramARB_dispatch_table_rewrite_ptr,
    .glListBase = epoxy_glListBase_dispatch_table_rewrite_ptr,
    .glListDrawCommandsStatesClientNV = epoxy_glListDrawCommandsStatesClientNV_dispatch_table_rewrite_ptr,
    .glListParameterfSGIX = epoxy_glListParameterfSGIX_dispatch_table_rewrite_ptr,
    .glListParameterfvSGIX = epoxy_glListParameterfvSGIX_dispatch_table_rewrite_ptr,
    .glListParameteriSGIX = epoxy_glListParameteriSGIX_dispatch_table_rewrite_ptr,
    .glListParameterivSGIX = epoxy_glListParameterivSGIX_dispatch_table_rewrite_ptr,
    .glLoadIdentity = epoxy_glLoadIdentity_dispatch_table_rewrite_ptr,
    .glLoadIdentityDeformationMapSGIX = epoxy_glLoadIdentityDeformationMapSGIX_dispatch_table_rewrite_ptr,
    .glLoadMatrixd = epoxy_glLoadMatrixd_dispatch_table_rewrite_ptr,
    .glLoadMatrixf = epoxy_glLoadMatrixf_dispatch_table_rewrite_ptr,
    .glLoadMatrixx = epoxy_glLoadMatrixx_dispatch_table_rewrite_ptr,
    .glLoadMatrixxOES = epoxy_glLoadMatrixxOES_dispatch_table_rewrite_ptr,
    .glLoadName = epoxy_glLoadName_dispatch_table_rewrite_ptr,
    .glLoadPaletteFromModelViewMatrixOES = epoxy_glLoadPaletteFromModelViewMatrixOES_dispatch_table_rewrite_ptr,
    .glLoadProgramNV = epoxy_glLoadProgramNV_dispatch_table_rewrite_ptr,
    .glLoadTransposeMatrixd = epoxy_glLoadTransposeMatrixd_dispatch_table_rewrite_ptr,
    .glLoadTransposeMatrixdARB = epoxy_glLoadTransposeMatrixdARB_dispatch_table_rewrite_ptr,
    .glLoadTransposeMatrixf = epoxy_glLoadTransposeMatrixf_dispatch_table_rewrite_ptr,
    .glLoadTransposeMatrixfARB = epoxy_glLoadTransposeMatrixfARB_dispatch_table_rewrite_ptr,
    .glLoadTransposeMatrixxOES = epoxy_glLoadTransposeMatrixxOES_dispatch_table_rewrite_ptr,
    .glLockArraysEXT = epoxy_glLockArraysEXT_dispatch_table_rewrite_ptr,
    .glLogicOp = epoxy_glLogicOp_dispatch_table_rewrite_ptr,
    .glMakeBufferNonResidentNV = epoxy_glMakeBufferNonResidentNV_dispatch_table_rewrite_ptr,
    .glMakeBufferResidentNV = epoxy_glMakeBufferResidentNV_dispatch_table_rewrite_ptr,
    .glMakeImageHandleNonResidentARB = epoxy_glMakeImageHandleNonResidentARB_dispatch_table_rewrite_ptr,
    .glMakeImageHandleNonResidentNV = epoxy_glMakeImageHandleNonResidentNV_dispatch_table_rewrite_ptr,
    .glMakeImageHandleResidentARB = epoxy_glMakeImageHandleResidentARB_dispatch_table_rewrite_ptr,
    .glMakeImageHandleResidentNV = epoxy_glMakeImageHandleResidentNV_dispatch_table_rewrite_ptr,
    .glMakeNamedBufferNonResidentNV = epoxy_glMakeNamedBufferNonResidentNV_dispatch_table_rewrite_ptr,
    .glMakeNamedBufferResidentNV = epoxy_glMakeNamedBufferResidentNV_dispatch_table_rewrite_ptr,
    .glMakeTextureHandleNonResidentARB = epoxy_glMakeTextureHandleNonResidentARB_dispatch_table_rewrite_ptr,
    .glMakeTextureHandleNonResidentNV = epoxy_glMakeTextureHandleNonResidentNV_dispatch_table_rewrite_ptr,
    .glMakeTextureHandleResidentARB = epoxy_glMakeTextureHandleResidentARB_dispatch_table_rewrite_ptr,
    .glMakeTextureHandleResidentNV = epoxy_glMakeTextureHandleResidentNV_dispatch_table_rewrite_ptr,
    .glMap1d = epoxy_glMap1d_dispatch_table_rewrite_ptr,
    .glMap1f = epoxy_glMap1f_dispatch_table_rewrite_ptr,
    .glMap1xOES = epoxy_glMap1xOES_dispatch_table_rewrite_ptr,
    .glMap2d = epoxy_glMap2d_dispatch_table_rewrite_ptr,
    .glMap2f = epoxy_glMap2f_dispatch_table_rewrite_ptr,
    .glMap2xOES = epoxy_glMap2xOES_dispatch_table_rewrite_ptr,
    .glMapBuffer = epoxy_glMapBuffer_dispatch_table_rewrite_ptr,
    .glMapBufferARB = epoxy_glMapBufferARB_dispatch_table_rewrite_ptr,
    .glMapBufferOES = epoxy_glMapBufferOES_dispatch_table_rewrite_ptr,
    .glMapBufferRange = epoxy_glMapBufferRange_dispatch_table_rewrite_ptr,
    .glMapBufferRangeEXT = epoxy_glMapBufferRangeEXT_dispatch_table_rewrite_ptr,
    .glMapControlPointsNV = epoxy_glMapControlPointsNV_dispatch_table_rewrite_ptr,
    .glMapGrid1d = epoxy_glMapGrid1d_dispatch_table_rewrite_ptr,
    .glMapGrid1f = epoxy_glMapGrid1f_dispatch_table_rewrite_ptr,
    .glMapGrid1xOES = epoxy_glMapGrid1xOES_dispatch_table_rewrite_ptr,
    .glMapGrid2d = epoxy_glMapGrid2d_dispatch_table_rewrite_ptr,
    .glMapGrid2f = epoxy_glMapGrid2f_dispatch_table_rewrite_ptr,
    .glMapGrid2xOES = epoxy_glMapGrid2xOES_dispatch_table_rewrite_ptr,
    .glMapNamedBuffer = epoxy_glMapNamedBuffer_dispatch_table_rewrite_ptr,
    .glMapNamedBufferEXT = epoxy_glMapNamedBufferEXT_dispatch_table_rewrite_ptr,
    .glMapNamedBufferRange = epoxy_glMapNamedBufferRange_dispatch_table_rewrite_ptr,
    .glMapNamedBufferRangeEXT = epoxy_glMapNamedBufferRangeEXT_dispatch_table_rewrite_ptr,
    .glMapObjectBufferATI = epoxy_glMapObjectBufferATI_dispatch_table_rewrite_ptr,
    .glMapParameterfvNV = epoxy_glMapParameterfvNV_dispatch_table_rewrite_ptr,
    .glMapParameterivNV = epoxy_glMapParameterivNV_dispatch_table_rewrite_ptr,
    .glMapTexture2DINTEL = epoxy_glMapTexture2DINTEL_dispatch_table_rewrite_ptr,
    .glMapVertexAttrib1dAPPLE = epoxy_glMapVertexAttrib1dAPPLE_dispatch_table_rewrite_ptr,
    .glMapVertexAttrib1fAPPLE = epoxy_glMapVertexAttrib1fAPPLE_dispatch_table_rewrite_ptr,
    .glMapVertexAttrib2dAPPLE = epoxy_glMapVertexAttrib2dAPPLE_dispatch_table_rewrite_ptr,
    .glMapVertexAttrib2fAPPLE = epoxy_glMapVertexAttrib2fAPPLE_dispatch_table_rewrite_ptr,
    .glMaterialf = epoxy_glMaterialf_dispatch_table_rewrite_ptr,
    .glMaterialfv = epoxy_glMaterialfv_dispatch_table_rewrite_ptr,
    .glMateriali = epoxy_glMateriali_dispatch_table_rewrite_ptr,
    .glMaterialiv = epoxy_glMaterialiv_dispatch_table_rewrite_ptr,
    .glMaterialx = epoxy_glMaterialx_dispatch_table_rewrite_ptr,
    .glMaterialxOES = epoxy_glMaterialxOES_dispatch_table_rewrite_ptr,
    .glMaterialxv = epoxy_glMaterialxv_dispatch_table_rewrite_ptr,
    .glMaterialxvOES = epoxy_glMaterialxvOES_dispatch_table_rewrite_ptr,
    .glMatrixFrustumEXT = epoxy_glMatrixFrustumEXT_dispatch_table_rewrite_ptr,
    .glMatrixIndexPointerARB = epoxy_glMatrixIndexPointerARB_dispatch_table_rewrite_ptr,
    .glMatrixIndexPointerOES = epoxy_glMatrixIndexPointerOES_dispatch_table_rewrite_ptr,
    .glMatrixIndexubvARB = epoxy_glMatrixIndexubvARB_dispatch_table_rewrite_ptr,
    .glMatrixIndexuivARB = epoxy_glMatrixIndexuivARB_dispatch_table_rewrite_ptr,
    .glMatrixIndexusvARB = epoxy_glMatrixIndexusvARB_dispatch_table_rewrite_ptr,
    .glMatrixLoad3x2fNV = epoxy_glMatrixLoad3x2fNV_dispatch_table_rewrite_ptr,
    .glMatrixLoad3x3fNV = epoxy_glMatrixLoad3x3fNV_dispatch_table_rewrite_ptr,
    .glMatrixLoadIdentityEXT = epoxy_glMatrixLoadIdentityEXT_dispatch_table_rewrite_ptr,
    .glMatrixLoadTranspose3x3fNV = epoxy_glMatrixLoadTranspose3x3fNV_dispatch_table_rewrite_ptr,
    .glMatrixLoadTransposedEXT = epoxy_glMatrixLoadTransposedEXT_dispatch_table_rewrite_ptr,
    .glMatrixLoadTransposefEXT = epoxy_glMatrixLoadTransposefEXT_dispatch_table_rewrite_ptr,
    .glMatrixLoaddEXT = epoxy_glMatrixLoaddEXT_dispatch_table_rewrite_ptr,
    .glMatrixLoadfEXT = epoxy_glMatrixLoadfEXT_dispatch_table_rewrite_ptr,
    .glMatrixMode = epoxy_glMatrixMode_dispatch_table_rewrite_ptr,
    .glMatrixMult3x2fNV = epoxy_glMatrixMult3x2fNV_dispatch_table_rewrite_ptr,
    .glMatrixMult3x3fNV = epoxy_glMatrixMult3x3fNV_dispatch_table_rewrite_ptr,
    .glMatrixMultTranspose3x3fNV = epoxy_glMatrixMultTranspose3x3fNV_dispatch_table_rewrite_ptr,
    .glMatrixMultTransposedEXT = epoxy_glMatrixMultTransposedEXT_dispatch_table_rewrite_ptr,
    .glMatrixMultTransposefEXT = epoxy_glMatrixMultTransposefEXT_dispatch_table_rewrite_ptr,
    .glMatrixMultdEXT = epoxy_glMatrixMultdEXT_dispatch_table_rewrite_ptr,
    .glMatrixMultfEXT = epoxy_glMatrixMultfEXT_dispatch_table_rewrite_ptr,
    .glMatrixOrthoEXT = epoxy_glMatrixOrthoEXT_dispatch_table_rewrite_ptr,
    .glMatrixPopEXT = epoxy_glMatrixPopEXT_dispatch_table_rewrite_ptr,
    .glMatrixPushEXT = epoxy_glMatrixPushEXT_dispatch_table_rewrite_ptr,
    .glMatrixRotatedEXT = epoxy_glMatrixRotatedEXT_dispatch_table_rewrite_ptr,
    .glMatrixRotatefEXT = epoxy_glMatrixRotatefEXT_dispatch_table_rewrite_ptr,
    .glMatrixScaledEXT = epoxy_glMatrixScaledEXT_dispatch_table_rewrite_ptr,
    .glMatrixScalefEXT = epoxy_glMatrixScalefEXT_dispatch_table_rewrite_ptr,
    .glMatrixTranslatedEXT = epoxy_glMatrixTranslatedEXT_dispatch_table_rewrite_ptr,
    .glMatrixTranslatefEXT = epoxy_glMatrixTranslatefEXT_dispatch_table_rewrite_ptr,
    .glMaxShaderCompilerThreadsARB = epoxy_glMaxShaderCompilerThreadsARB_dispatch_table_rewrite_ptr,
    .glMemoryBarrier = epoxy_glMemoryBarrier_dispatch_table_rewrite_ptr,
    .glMemoryBarrierByRegion = epoxy_glMemoryBarrierByRegion_dispatch_table_rewrite_ptr,
    .glMemoryBarrierEXT = epoxy_glMemoryBarrierEXT_dispatch_table_rewrite_ptr,
    .glMinSampleShading = epoxy_glMinSampleShading_dispatch_table_rewrite_ptr,
    .glMinSampleShadingARB = epoxy_glMinSampleShadingARB_dispatch_table_rewrite_ptr,
    .glMinSampleShadingOES = epoxy_glMinSampleShadingOES_dispatch_table_rewrite_ptr,
    .glMinmax = epoxy_glMinmax_dispatch_table_rewrite_ptr,
    .glMinmaxEXT = epoxy_glMinmaxEXT_dispatch_table_rewrite_ptr,
    .glMultMatrixd = epoxy_glMultMatrixd_dispatch_table_rewrite_ptr,
    .glMultMatrixf = epoxy_glMultMatrixf_dispatch_table_rewrite_ptr,
    .glMultMatrixx = epoxy_glMultMatrixx_dispatch_table_rewrite_ptr,
    .glMultMatrixxOES = epoxy_glMultMatrixxOES_dispatch_table_rewrite_ptr,
    .glMultTransposeMatrixd = epoxy_glMultTransposeMatrixd_dispatch_table_rewrite_ptr,
    .glMultTransposeMatrixdARB = epoxy_glMultTransposeMatrixdARB_dispatch_table_rewrite_ptr,
    .glMultTransposeMatrixf = epoxy_glMultTransposeMatrixf_dispatch_table_rewrite_ptr,
    .glMultTransposeMatrixfARB = epoxy_glMultTransposeMatrixfARB_dispatch_table_rewrite_ptr,
    .glMultTransposeMatrixxOES = epoxy_glMultTransposeMatrixxOES_dispatch_table_rewrite_ptr,
    .glMultiDrawArrays = epoxy_glMultiDrawArrays_dispatch_table_rewrite_ptr,
    .glMultiDrawArraysEXT = epoxy_glMultiDrawArraysEXT_dispatch_table_rewrite_ptr,
    .glMultiDrawArraysIndirect = epoxy_glMultiDrawArraysIndirect_dispatch_table_rewrite_ptr,
    .glMultiDrawArraysIndirectAMD = epoxy_glMultiDrawArraysIndirectAMD_dispatch_table_rewrite_ptr,
    .glMultiDrawArraysIndirectBindlessCountNV = epoxy_glMultiDrawArraysIndirectBindlessCountNV_dispatch_table_rewrite_ptr,
    .glMultiDrawArraysIndirectBindlessNV = epoxy_glMultiDrawArraysIndirectBindlessNV_dispatch_table_rewrite_ptr,
    .glMultiDrawArraysIndirectCountARB = epoxy_glMultiDrawArraysIndirectCountARB_dispatch_table_rewrite_ptr,
    .glMultiDrawArraysIndirectEXT = epoxy_glMultiDrawArraysIndirectEXT_dispatch_table_rewrite_ptr,
    .glMultiDrawElementArrayAPPLE = epoxy_glMultiDrawElementArrayAPPLE_dispatch_table_rewrite_ptr,
    .glMultiDrawElements = epoxy_glMultiDrawElements_dispatch_table_rewrite_ptr,
    .glMultiDrawElementsBaseVertex = epoxy_glMultiDrawElementsBaseVertex_dispatch_table_rewrite_ptr,
    .glMultiDrawElementsBaseVertexEXT = epoxy_glMultiDrawElementsBaseVertexEXT_dispatch_table_rewrite_ptr,
    .glMultiDrawElementsBaseVertexOES = epoxy_glMultiDrawElementsBaseVertexOES_dispatch_table_rewrite_ptr,
    .glMultiDrawElementsEXT = epoxy_glMultiDrawElementsEXT_dispatch_table_rewrite_ptr,
    .glMultiDrawElementsIndirect = epoxy_glMultiDrawElementsIndirect_dispatch_table_rewrite_ptr,
    .glMultiDrawElementsIndirectAMD = epoxy_glMultiDrawElementsIndirectAMD_dispatch_table_rewrite_ptr,
    .glMultiDrawElementsIndirectBindlessCountNV = epoxy_glMultiDrawElementsIndirectBindlessCountNV_dispatch_table_rewrite_ptr,
    .glMultiDrawElementsIndirectBindlessNV = epoxy_glMultiDrawElementsIndirectBindlessNV_dispatch_table_rewrite_ptr,
    .glMultiDrawElementsIndirectCountARB = epoxy_glMultiDrawElementsIndirectCountARB_dispatch_table_rewrite_ptr,
    .glMultiDrawElementsIndirectEXT = epoxy_glMultiDrawElementsIndirectEXT_dispatch_table_rewrite_ptr,
    .glMultiDrawRangeElementArrayAPPLE = epoxy_glMultiDrawRangeElementArrayAPPLE_dispatch_table_rewrite_ptr,
    .glMultiModeDrawArraysIBM = epoxy_glMultiModeDrawArraysIBM_dispatch_table_rewrite_ptr,
    .glMultiModeDrawElementsIBM = epoxy_glMultiModeDrawElementsIBM_dispatch_table_rewrite_ptr,
    .glMultiTexBufferEXT = epoxy_glMultiTexBufferEXT_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1bOES = epoxy_glMultiTexCoord1bOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1bvOES = epoxy_glMultiTexCoord1bvOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1d = epoxy_glMultiTexCoord1d_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1dARB = epoxy_glMultiTexCoord1dARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1dv = epoxy_glMultiTexCoord1dv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1dvARB = epoxy_glMultiTexCoord1dvARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1f = epoxy_glMultiTexCoord1f_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1fARB = epoxy_glMultiTexCoord1fARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1fv = epoxy_glMultiTexCoord1fv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1fvARB = epoxy_glMultiTexCoord1fvARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1hNV = epoxy_glMultiTexCoord1hNV_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1hvNV = epoxy_glMultiTexCoord1hvNV_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1i = epoxy_glMultiTexCoord1i_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1iARB = epoxy_glMultiTexCoord1iARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1iv = epoxy_glMultiTexCoord1iv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1ivARB = epoxy_glMultiTexCoord1ivARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1s = epoxy_glMultiTexCoord1s_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1sARB = epoxy_glMultiTexCoord1sARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1sv = epoxy_glMultiTexCoord1sv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1svARB = epoxy_glMultiTexCoord1svARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1xOES = epoxy_glMultiTexCoord1xOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoord1xvOES = epoxy_glMultiTexCoord1xvOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2bOES = epoxy_glMultiTexCoord2bOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2bvOES = epoxy_glMultiTexCoord2bvOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2d = epoxy_glMultiTexCoord2d_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2dARB = epoxy_glMultiTexCoord2dARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2dv = epoxy_glMultiTexCoord2dv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2dvARB = epoxy_glMultiTexCoord2dvARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2f = epoxy_glMultiTexCoord2f_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2fARB = epoxy_glMultiTexCoord2fARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2fv = epoxy_glMultiTexCoord2fv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2fvARB = epoxy_glMultiTexCoord2fvARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2hNV = epoxy_glMultiTexCoord2hNV_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2hvNV = epoxy_glMultiTexCoord2hvNV_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2i = epoxy_glMultiTexCoord2i_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2iARB = epoxy_glMultiTexCoord2iARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2iv = epoxy_glMultiTexCoord2iv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2ivARB = epoxy_glMultiTexCoord2ivARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2s = epoxy_glMultiTexCoord2s_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2sARB = epoxy_glMultiTexCoord2sARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2sv = epoxy_glMultiTexCoord2sv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2svARB = epoxy_glMultiTexCoord2svARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2xOES = epoxy_glMultiTexCoord2xOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoord2xvOES = epoxy_glMultiTexCoord2xvOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3bOES = epoxy_glMultiTexCoord3bOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3bvOES = epoxy_glMultiTexCoord3bvOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3d = epoxy_glMultiTexCoord3d_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3dARB = epoxy_glMultiTexCoord3dARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3dv = epoxy_glMultiTexCoord3dv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3dvARB = epoxy_glMultiTexCoord3dvARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3f = epoxy_glMultiTexCoord3f_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3fARB = epoxy_glMultiTexCoord3fARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3fv = epoxy_glMultiTexCoord3fv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3fvARB = epoxy_glMultiTexCoord3fvARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3hNV = epoxy_glMultiTexCoord3hNV_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3hvNV = epoxy_glMultiTexCoord3hvNV_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3i = epoxy_glMultiTexCoord3i_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3iARB = epoxy_glMultiTexCoord3iARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3iv = epoxy_glMultiTexCoord3iv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3ivARB = epoxy_glMultiTexCoord3ivARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3s = epoxy_glMultiTexCoord3s_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3sARB = epoxy_glMultiTexCoord3sARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3sv = epoxy_glMultiTexCoord3sv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3svARB = epoxy_glMultiTexCoord3svARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3xOES = epoxy_glMultiTexCoord3xOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoord3xvOES = epoxy_glMultiTexCoord3xvOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4bOES = epoxy_glMultiTexCoord4bOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4bvOES = epoxy_glMultiTexCoord4bvOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4d = epoxy_glMultiTexCoord4d_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4dARB = epoxy_glMultiTexCoord4dARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4dv = epoxy_glMultiTexCoord4dv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4dvARB = epoxy_glMultiTexCoord4dvARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4f = epoxy_glMultiTexCoord4f_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4fARB = epoxy_glMultiTexCoord4fARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4fv = epoxy_glMultiTexCoord4fv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4fvARB = epoxy_glMultiTexCoord4fvARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4hNV = epoxy_glMultiTexCoord4hNV_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4hvNV = epoxy_glMultiTexCoord4hvNV_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4i = epoxy_glMultiTexCoord4i_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4iARB = epoxy_glMultiTexCoord4iARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4iv = epoxy_glMultiTexCoord4iv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4ivARB = epoxy_glMultiTexCoord4ivARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4s = epoxy_glMultiTexCoord4s_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4sARB = epoxy_glMultiTexCoord4sARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4sv = epoxy_glMultiTexCoord4sv_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4svARB = epoxy_glMultiTexCoord4svARB_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4x = epoxy_glMultiTexCoord4x_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4xOES = epoxy_glMultiTexCoord4xOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoord4xvOES = epoxy_glMultiTexCoord4xvOES_dispatch_table_rewrite_ptr,
    .glMultiTexCoordP1ui = epoxy_glMultiTexCoordP1ui_dispatch_table_rewrite_ptr,
    .glMultiTexCoordP1uiv = epoxy_glMultiTexCoordP1uiv_dispatch_table_rewrite_ptr,
    .glMultiTexCoordP2ui = epoxy_glMultiTexCoordP2ui_dispatch_table_rewrite_ptr,
    .glMultiTexCoordP2uiv = epoxy_glMultiTexCoordP2uiv_dispatch_table_rewrite_ptr,
    .glMultiTexCoordP3ui = epoxy_glMultiTexCoordP3ui_dispatch_table_rewrite_ptr,
    .glMultiTexCoordP3uiv = epoxy_glMultiTexCoordP3uiv_dispatch_table_rewrite_ptr,
    .glMultiTexCoordP4ui = epoxy_glMultiTexCoordP4ui_dispatch_table_rewrite_ptr,
    .glMultiTexCoordP4uiv = epoxy_glMultiTexCoordP4uiv_dispatch_table_rewrite_ptr,
    .glMultiTexCoordPointerEXT = epoxy_glMultiTexCoordPointerEXT_dispatch_table_rewrite_ptr,
    .glMultiTexEnvfEXT = epoxy_glMultiTexEnvfEXT_dispatch_table_rewrite_ptr,
    .glMultiTexEnvfvEXT = epoxy_glMultiTexEnvfvEXT_dispatch_table_rewrite_ptr,
    .glMultiTexEnviEXT = epoxy_glMultiTexEnviEXT_dispatch_table_rewrite_ptr,
    .glMultiTexEnvivEXT = epoxy_glMultiTexEnvivEXT_dispatch_table_rewrite_ptr,
    .glMultiTexGendEXT = epoxy_glMultiTexGendEXT_dispatch_table_rewrite_ptr,
    .glMultiTexGendvEXT = epoxy_glMultiTexGendvEXT_dispatch_table_rewrite_ptr,
    .glMultiTexGenfEXT = epoxy_glMultiTexGenfEXT_dispatch_table_rewrite_ptr,
    .glMultiTexGenfvEXT = epoxy_glMultiTexGenfvEXT_dispatch_table_rewrite_ptr,
    .glMultiTexGeniEXT = epoxy_glMultiTexGeniEXT_dispatch_table_rewrite_ptr,
    .glMultiTexGenivEXT = epoxy_glMultiTexGenivEXT_dispatch_table_rewrite_ptr,
    .glMultiTexImage1DEXT = epoxy_glMultiTexImage1DEXT_dispatch_table_rewrite_ptr,
    .glMultiTexImage2DEXT = epoxy_glMultiTexImage2DEXT_dispatch_table_rewrite_ptr,
    .glMultiTexImage3DEXT = epoxy_glMultiTexImage3DEXT_dispatch_table_rewrite_ptr,
    .glMultiTexParameterIivEXT = epoxy_glMultiTexParameterIivEXT_dispatch_table_rewrite_ptr,
    .glMultiTexParameterIuivEXT = epoxy_glMultiTexParameterIuivEXT_dispatch_table_rewrite_ptr,
    .glMultiTexParameterfEXT = epoxy_glMultiTexParameterfEXT_dispatch_table_rewrite_ptr,
    .glMultiTexParameterfvEXT = epoxy_glMultiTexParameterfvEXT_dispatch_table_rewrite_ptr,
    .glMultiTexParameteriEXT = epoxy_glMultiTexParameteriEXT_dispatch_table_rewrite_ptr,
    .glMultiTexParameterivEXT = epoxy_glMultiTexParameterivEXT_dispatch_table_rewrite_ptr,
    .glMultiTexRenderbufferEXT = epoxy_glMultiTexRenderbufferEXT_dispatch_table_rewrite_ptr,
    .glMultiTexSubImage1DEXT = epoxy_glMultiTexSubImage1DEXT_dispatch_table_rewrite_ptr,
    .glMultiTexSubImage2DEXT = epoxy_glMultiTexSubImage2DEXT_dispatch_table_rewrite_ptr,
    .glMultiTexSubImage3DEXT = epoxy_glMultiTexSubImage3DEXT_dispatch_table_rewrite_ptr,
    .glNamedBufferData = epoxy_glNamedBufferData_dispatch_table_rewrite_ptr,
    .glNamedBufferDataEXT = epoxy_glNamedBufferDataEXT_dispatch_table_rewrite_ptr,
    .glNamedBufferPageCommitmentARB = epoxy_glNamedBufferPageCommitmentARB_dispatch_table_rewrite_ptr,
    .glNamedBufferPageCommitmentEXT = epoxy_glNamedBufferPageCommitmentEXT_dispatch_table_rewrite_ptr,
    .glNamedBufferStorage = epoxy_glNamedBufferStorage_dispatch_table_rewrite_ptr,
    .glNamedBufferStorageEXT = epoxy_glNamedBufferStorageEXT_dispatch_table_rewrite_ptr,
    .glNamedBufferSubData = epoxy_glNamedBufferSubData_dispatch_table_rewrite_ptr,
    .glNamedBufferSubDataEXT = epoxy_glNamedBufferSubDataEXT_dispatch_table_rewrite_ptr,
    .glNamedCopyBufferSubDataEXT = epoxy_glNamedCopyBufferSubDataEXT_dispatch_table_rewrite_ptr,
    .glNamedFramebufferDrawBuffer = epoxy_glNamedFramebufferDrawBuffer_dispatch_table_rewrite_ptr,
    .glNamedFramebufferDrawBuffers = epoxy_glNamedFramebufferDrawBuffers_dispatch_table_rewrite_ptr,
    .glNamedFramebufferParameteri = epoxy_glNamedFramebufferParameteri_dispatch_table_rewrite_ptr,
    .glNamedFramebufferParameteriEXT = epoxy_glNamedFramebufferParameteriEXT_dispatch_table_rewrite_ptr,
    .glNamedFramebufferReadBuffer = epoxy_glNamedFramebufferReadBuffer_dispatch_table_rewrite_ptr,
    .glNamedFramebufferRenderbuffer = epoxy_glNamedFramebufferRenderbuffer_dispatch_table_rewrite_ptr,
    .glNamedFramebufferRenderbufferEXT = epoxy_glNamedFramebufferRenderbufferEXT_dispatch_table_rewrite_ptr,
    .glNamedFramebufferSampleLocationsfvARB = epoxy_glNamedFramebufferSampleLocationsfvARB_dispatch_table_rewrite_ptr,
    .glNamedFramebufferSampleLocationsfvNV = epoxy_glNamedFramebufferSampleLocationsfvNV_dispatch_table_rewrite_ptr,
    .glNamedFramebufferTexture = epoxy_glNamedFramebufferTexture_dispatch_table_rewrite_ptr,
    .glNamedFramebufferTexture1DEXT = epoxy_glNamedFramebufferTexture1DEXT_dispatch_table_rewrite_ptr,
    .glNamedFramebufferTexture2DEXT = epoxy_glNamedFramebufferTexture2DEXT_dispatch_table_rewrite_ptr,
    .glNamedFramebufferTexture3DEXT = epoxy_glNamedFramebufferTexture3DEXT_dispatch_table_rewrite_ptr,
    .glNamedFramebufferTextureEXT = epoxy_glNamedFramebufferTextureEXT_dispatch_table_rewrite_ptr,
    .glNamedFramebufferTextureFaceEXT = epoxy_glNamedFramebufferTextureFaceEXT_dispatch_table_rewrite_ptr,
    .glNamedFramebufferTextureLayer = epoxy_glNamedFramebufferTextureLayer_dispatch_table_rewrite_ptr,
    .glNamedFramebufferTextureLayerEXT = epoxy_glNamedFramebufferTextureLayerEXT_dispatch_table_rewrite_ptr,
    .glNamedProgramLocalParameter4dEXT = epoxy_glNamedProgramLocalParameter4dEXT_dispatch_table_rewrite_ptr,
    .glNamedProgramLocalParameter4dvEXT = epoxy_glNamedProgramLocalParameter4dvEXT_dispatch_table_rewrite_ptr,
    .glNamedProgramLocalParameter4fEXT = epoxy_glNamedProgramLocalParameter4fEXT_dispatch_table_rewrite_ptr,
    .glNamedProgramLocalParameter4fvEXT = epoxy_glNamedProgramLocalParameter4fvEXT_dispatch_table_rewrite_ptr,
    .glNamedProgramLocalParameterI4iEXT = epoxy_glNamedProgramLocalParameterI4iEXT_dispatch_table_rewrite_ptr,
    .glNamedProgramLocalParameterI4ivEXT = epoxy_glNamedProgramLocalParameterI4ivEXT_dispatch_table_rewrite_ptr,
    .glNamedProgramLocalParameterI4uiEXT = epoxy_glNamedProgramLocalParameterI4uiEXT_dispatch_table_rewrite_ptr,
    .glNamedProgramLocalParameterI4uivEXT = epoxy_glNamedProgramLocalParameterI4uivEXT_dispatch_table_rewrite_ptr,
    .glNamedProgramLocalParameters4fvEXT = epoxy_glNamedProgramLocalParameters4fvEXT_dispatch_table_rewrite_ptr,
    .glNamedProgramLocalParametersI4ivEXT = epoxy_glNamedProgramLocalParametersI4ivEXT_dispatch_table_rewrite_ptr,
    .glNamedProgramLocalParametersI4uivEXT = epoxy_glNamedProgramLocalParametersI4uivEXT_dispatch_table_rewrite_ptr,
    .glNamedProgramStringEXT = epoxy_glNamedProgramStringEXT_dispatch_table_rewrite_ptr,
    .glNamedRenderbufferStorage = epoxy_glNamedRenderbufferStorage_dispatch_table_rewrite_ptr,
    .glNamedRenderbufferStorageEXT = epoxy_glNamedRenderbufferStorageEXT_dispatch_table_rewrite_ptr,
    .glNamedRenderbufferStorageMultisample = epoxy_glNamedRenderbufferStorageMultisample_dispatch_table_rewrite_ptr,
    .glNamedRenderbufferStorageMultisampleCoverageEXT = epoxy_glNamedRenderbufferStorageMultisampleCoverageEXT_dispatch_table_rewrite_ptr,
    .glNamedRenderbufferStorageMultisampleEXT = epoxy_glNamedRenderbufferStorageMultisampleEXT_dispatch_table_rewrite_ptr,
    .glNamedStringARB = epoxy_glNamedStringARB_dispatch_table_rewrite_ptr,
    .glNewList = epoxy_glNewList_dispatch_table_rewrite_ptr,
    .glNewObjectBufferATI = epoxy_glNewObjectBufferATI_dispatch_table_rewrite_ptr,
    .glNormal3b = epoxy_glNormal3b_dispatch_table_rewrite_ptr,
    .glNormal3bv = epoxy_glNormal3bv_dispatch_table_rewrite_ptr,
    .glNormal3d = epoxy_glNormal3d_dispatch_table_rewrite_ptr,
    .glNormal3dv = epoxy_glNormal3dv_dispatch_table_rewrite_ptr,
    .glNormal3f = epoxy_glNormal3f_dispatch_table_rewrite_ptr,
    .glNormal3fVertex3fSUN = epoxy_glNormal3fVertex3fSUN_dispatch_table_rewrite_ptr,
    .glNormal3fVertex3fvSUN = epoxy_glNormal3fVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glNormal3fv = epoxy_glNormal3fv_dispatch_table_rewrite_ptr,
    .glNormal3hNV = epoxy_glNormal3hNV_dispatch_table_rewrite_ptr,
    .glNormal3hvNV = epoxy_glNormal3hvNV_dispatch_table_rewrite_ptr,
    .glNormal3i = epoxy_glNormal3i_dispatch_table_rewrite_ptr,
    .glNormal3iv = epoxy_glNormal3iv_dispatch_table_rewrite_ptr,
    .glNormal3s = epoxy_glNormal3s_dispatch_table_rewrite_ptr,
    .glNormal3sv = epoxy_glNormal3sv_dispatch_table_rewrite_ptr,
    .glNormal3x = epoxy_glNormal3x_dispatch_table_rewrite_ptr,
    .glNormal3xOES = epoxy_glNormal3xOES_dispatch_table_rewrite_ptr,
    .glNormal3xvOES = epoxy_glNormal3xvOES_dispatch_table_rewrite_ptr,
    .glNormalFormatNV = epoxy_glNormalFormatNV_dispatch_table_rewrite_ptr,
    .glNormalP3ui = epoxy_glNormalP3ui_dispatch_table_rewrite_ptr,
    .glNormalP3uiv = epoxy_glNormalP3uiv_dispatch_table_rewrite_ptr,
    .glNormalPointer = epoxy_glNormalPointer_dispatch_table_rewrite_ptr,
    .glNormalPointerEXT = epoxy_glNormalPointerEXT_dispatch_table_rewrite_ptr,
    .glNormalPointerListIBM = epoxy_glNormalPointerListIBM_dispatch_table_rewrite_ptr,
    .glNormalPointervINTEL = epoxy_glNormalPointervINTEL_dispatch_table_rewrite_ptr,
    .glNormalStream3bATI = epoxy_glNormalStream3bATI_dispatch_table_rewrite_ptr,
    .glNormalStream3bvATI = epoxy_glNormalStream3bvATI_dispatch_table_rewrite_ptr,
    .glNormalStream3dATI = epoxy_glNormalStream3dATI_dispatch_table_rewrite_ptr,
    .glNormalStream3dvATI = epoxy_glNormalStream3dvATI_dispatch_table_rewrite_ptr,
    .glNormalStream3fATI = epoxy_glNormalStream3fATI_dispatch_table_rewrite_ptr,
    .glNormalStream3fvATI = epoxy_glNormalStream3fvATI_dispatch_table_rewrite_ptr,
    .glNormalStream3iATI = epoxy_glNormalStream3iATI_dispatch_table_rewrite_ptr,
    .glNormalStream3ivATI = epoxy_glNormalStream3ivATI_dispatch_table_rewrite_ptr,
    .glNormalStream3sATI = epoxy_glNormalStream3sATI_dispatch_table_rewrite_ptr,
    .glNormalStream3svATI = epoxy_glNormalStream3svATI_dispatch_table_rewrite_ptr,
    .glObjectLabel = epoxy_glObjectLabel_dispatch_table_rewrite_ptr,
    .glObjectLabelKHR = epoxy_glObjectLabelKHR_dispatch_table_rewrite_ptr,
    .glObjectPtrLabel = epoxy_glObjectPtrLabel_dispatch_table_rewrite_ptr,
    .glObjectPtrLabelKHR = epoxy_glObjectPtrLabelKHR_dispatch_table_rewrite_ptr,
    .glObjectPurgeableAPPLE = epoxy_glObjectPurgeableAPPLE_dispatch_table_rewrite_ptr,
    .glObjectUnpurgeableAPPLE = epoxy_glObjectUnpurgeableAPPLE_dispatch_table_rewrite_ptr,
    .glOrtho = epoxy_glOrtho_dispatch_table_rewrite_ptr,
    .glOrthof = epoxy_glOrthof_dispatch_table_rewrite_ptr,
    .glOrthofOES = epoxy_glOrthofOES_dispatch_table_rewrite_ptr,
    .glOrthox = epoxy_glOrthox_dispatch_table_rewrite_ptr,
    .glOrthoxOES = epoxy_glOrthoxOES_dispatch_table_rewrite_ptr,
    .glPNTrianglesfATI = epoxy_glPNTrianglesfATI_dispatch_table_rewrite_ptr,
    .glPNTrianglesiATI = epoxy_glPNTrianglesiATI_dispatch_table_rewrite_ptr,
    .glPassTexCoordATI = epoxy_glPassTexCoordATI_dispatch_table_rewrite_ptr,
    .glPassThrough = epoxy_glPassThrough_dispatch_table_rewrite_ptr,
    .glPassThroughxOES = epoxy_glPassThroughxOES_dispatch_table_rewrite_ptr,
    .glPatchParameterfv = epoxy_glPatchParameterfv_dispatch_table_rewrite_ptr,
    .glPatchParameteri = epoxy_glPatchParameteri_dispatch_table_rewrite_ptr,
    .glPatchParameteriEXT = epoxy_glPatchParameteriEXT_dispatch_table_rewrite_ptr,
    .glPatchParameteriOES = epoxy_glPatchParameteriOES_dispatch_table_rewrite_ptr,
    .glPathColorGenNV = epoxy_glPathColorGenNV_dispatch_table_rewrite_ptr,
    .glPathCommandsNV = epoxy_glPathCommandsNV_dispatch_table_rewrite_ptr,
    .glPathCoordsNV = epoxy_glPathCoordsNV_dispatch_table_rewrite_ptr,
    .glPathCoverDepthFuncNV = epoxy_glPathCoverDepthFuncNV_dispatch_table_rewrite_ptr,
    .glPathDashArrayNV = epoxy_glPathDashArrayNV_dispatch_table_rewrite_ptr,
    .glPathFogGenNV = epoxy_glPathFogGenNV_dispatch_table_rewrite_ptr,
    .glPathGlyphIndexArrayNV = epoxy_glPathGlyphIndexArrayNV_dispatch_table_rewrite_ptr,
    .glPathGlyphIndexRangeNV = epoxy_glPathGlyphIndexRangeNV_dispatch_table_rewrite_ptr,
    .glPathGlyphRangeNV = epoxy_glPathGlyphRangeNV_dispatch_table_rewrite_ptr,
    .glPathGlyphsNV = epoxy_glPathGlyphsNV_dispatch_table_rewrite_ptr,
    .glPathMemoryGlyphIndexArrayNV = epoxy_glPathMemoryGlyphIndexArrayNV_dispatch_table_rewrite_ptr,
    .glPathParameterfNV = epoxy_glPathParameterfNV_dispatch_table_rewrite_ptr,
    .glPathParameterfvNV = epoxy_glPathParameterfvNV_dispatch_table_rewrite_ptr,
    .glPathParameteriNV = epoxy_glPathParameteriNV_dispatch_table_rewrite_ptr,
    .glPathParameterivNV = epoxy_glPathParameterivNV_dispatch_table_rewrite_ptr,
    .glPathStencilDepthOffsetNV = epoxy_glPathStencilDepthOffsetNV_dispatch_table_rewrite_ptr,
    .glPathStencilFuncNV = epoxy_glPathStencilFuncNV_dispatch_table_rewrite_ptr,
    .glPathStringNV = epoxy_glPathStringNV_dispatch_table_rewrite_ptr,
    .glPathSubCommandsNV = epoxy_glPathSubCommandsNV_dispatch_table_rewrite_ptr,
    .glPathSubCoordsNV = epoxy_glPathSubCoordsNV_dispatch_table_rewrite_ptr,
    .glPathTexGenNV = epoxy_glPathTexGenNV_dispatch_table_rewrite_ptr,
    .glPauseTransformFeedback = epoxy_glPauseTransformFeedback_dispatch_table_rewrite_ptr,
    .glPauseTransformFeedbackNV = epoxy_glPauseTransformFeedbackNV_dispatch_table_rewrite_ptr,
    .glPixelDataRangeNV = epoxy_glPixelDataRangeNV_dispatch_table_rewrite_ptr,
    .glPixelMapfv = epoxy_glPixelMapfv_dispatch_table_rewrite_ptr,
    .glPixelMapuiv = epoxy_glPixelMapuiv_dispatch_table_rewrite_ptr,
    .glPixelMapusv = epoxy_glPixelMapusv_dispatch_table_rewrite_ptr,
    .glPixelMapx = epoxy_glPixelMapx_dispatch_table_rewrite_ptr,
    .glPixelStoref = epoxy_glPixelStoref_dispatch_table_rewrite_ptr,
    .glPixelStorei = epoxy_glPixelStorei_dispatch_table_rewrite_ptr,
    .glPixelStorex = epoxy_glPixelStorex_dispatch_table_rewrite_ptr,
    .glPixelTexGenParameterfSGIS = epoxy_glPixelTexGenParameterfSGIS_dispatch_table_rewrite_ptr,
    .glPixelTexGenParameterfvSGIS = epoxy_glPixelTexGenParameterfvSGIS_dispatch_table_rewrite_ptr,
    .glPixelTexGenParameteriSGIS = epoxy_glPixelTexGenParameteriSGIS_dispatch_table_rewrite_ptr,
    .glPixelTexGenParameterivSGIS = epoxy_glPixelTexGenParameterivSGIS_dispatch_table_rewrite_ptr,
    .glPixelTexGenSGIX = epoxy_glPixelTexGenSGIX_dispatch_table_rewrite_ptr,
    .glPixelTransferf = epoxy_glPixelTransferf_dispatch_table_rewrite_ptr,
    .glPixelTransferi = epoxy_glPixelTransferi_dispatch_table_rewrite_ptr,
    .glPixelTransferxOES = epoxy_glPixelTransferxOES_dispatch_table_rewrite_ptr,
    .glPixelTransformParameterfEXT = epoxy_glPixelTransformParameterfEXT_dispatch_table_rewrite_ptr,
    .glPixelTransformParameterfvEXT = epoxy_glPixelTransformParameterfvEXT_dispatch_table_rewrite_ptr,
    .glPixelTransformParameteriEXT = epoxy_glPixelTransformParameteriEXT_dispatch_table_rewrite_ptr,
    .glPixelTransformParameterivEXT = epoxy_glPixelTransformParameterivEXT_dispatch_table_rewrite_ptr,
    .glPixelZoom = epoxy_glPixelZoom_dispatch_table_rewrite_ptr,
    .glPixelZoomxOES = epoxy_glPixelZoomxOES_dispatch_table_rewrite_ptr,
    .glPointAlongPathNV = epoxy_glPointAlongPathNV_dispatch_table_rewrite_ptr,
    .glPointParameterf = epoxy_glPointParameterf_dispatch_table_rewrite_ptr,
    .glPointParameterfARB = epoxy_glPointParameterfARB_dispatch_table_rewrite_ptr,
    .glPointParameterfEXT = epoxy_glPointParameterfEXT_dispatch_table_rewrite_ptr,
    .glPointParameterfSGIS = epoxy_glPointParameterfSGIS_dispatch_table_rewrite_ptr,
    .glPointParameterfv = epoxy_glPointParameterfv_dispatch_table_rewrite_ptr,
    .glPointParameterfvARB = epoxy_glPointParameterfvARB_dispatch_table_rewrite_ptr,
    .glPointParameterfvEXT = epoxy_glPointParameterfvEXT_dispatch_table_rewrite_ptr,
    .glPointParameterfvSGIS = epoxy_glPointParameterfvSGIS_dispatch_table_rewrite_ptr,
    .glPointParameteri = epoxy_glPointParameteri_dispatch_table_rewrite_ptr,
    .glPointParameteriNV = epoxy_glPointParameteriNV_dispatch_table_rewrite_ptr,
    .glPointParameteriv = epoxy_glPointParameteriv_dispatch_table_rewrite_ptr,
    .glPointParameterivNV = epoxy_glPointParameterivNV_dispatch_table_rewrite_ptr,
    .glPointParameterx = epoxy_glPointParameterx_dispatch_table_rewrite_ptr,
    .glPointParameterxOES = epoxy_glPointParameterxOES_dispatch_table_rewrite_ptr,
    .glPointParameterxv = epoxy_glPointParameterxv_dispatch_table_rewrite_ptr,
    .glPointParameterxvOES = epoxy_glPointParameterxvOES_dispatch_table_rewrite_ptr,
    .glPointSize = epoxy_glPointSize_dispatch_table_rewrite_ptr,
    .glPointSizePointerOES = epoxy_glPointSizePointerOES_dispatch_table_rewrite_ptr,
    .glPointSizex = epoxy_glPointSizex_dispatch_table_rewrite_ptr,
    .glPointSizexOES = epoxy_glPointSizexOES_dispatch_table_rewrite_ptr,
    .glPollAsyncSGIX = epoxy_glPollAsyncSGIX_dispatch_table_rewrite_ptr,
    .glPollInstrumentsSGIX = epoxy_glPollInstrumentsSGIX_dispatch_table_rewrite_ptr,
    .glPolygonMode = epoxy_glPolygonMode_dispatch_table_rewrite_ptr,
    .glPolygonModeNV = epoxy_glPolygonModeNV_dispatch_table_rewrite_ptr,
    .glPolygonOffset = epoxy_glPolygonOffset_dispatch_table_rewrite_ptr,
    .glPolygonOffsetClampEXT = epoxy_glPolygonOffsetClampEXT_dispatch_table_rewrite_ptr,
    .glPolygonOffsetEXT = epoxy_glPolygonOffsetEXT_dispatch_table_rewrite_ptr,
    .glPolygonOffsetx = epoxy_glPolygonOffsetx_dispatch_table_rewrite_ptr,
    .glPolygonOffsetxOES = epoxy_glPolygonOffsetxOES_dispatch_table_rewrite_ptr,
    .glPolygonStipple = epoxy_glPolygonStipple_dispatch_table_rewrite_ptr,
    .glPopAttrib = epoxy_glPopAttrib_dispatch_table_rewrite_ptr,
    .glPopClientAttrib = epoxy_glPopClientAttrib_dispatch_table_rewrite_ptr,
    .glPopDebugGroup = epoxy_glPopDebugGroup_dispatch_table_rewrite_ptr,
    .glPopDebugGroupKHR = epoxy_glPopDebugGroupKHR_dispatch_table_rewrite_ptr,
    .glPopGroupMarkerEXT = epoxy_glPopGroupMarkerEXT_dispatch_table_rewrite_ptr,
    .glPopMatrix = epoxy_glPopMatrix_dispatch_table_rewrite_ptr,
    .glPopName = epoxy_glPopName_dispatch_table_rewrite_ptr,
    .glPresentFrameDualFillNV = epoxy_glPresentFrameDualFillNV_dispatch_table_rewrite_ptr,
    .glPresentFrameKeyedNV = epoxy_glPresentFrameKeyedNV_dispatch_table_rewrite_ptr,
    .glPrimitiveBoundingBox = epoxy_glPrimitiveBoundingBox_dispatch_table_rewrite_ptr,
    .glPrimitiveBoundingBoxARB = epoxy_glPrimitiveBoundingBoxARB_dispatch_table_rewrite_ptr,
    .glPrimitiveBoundingBoxEXT = epoxy_glPrimitiveBoundingBoxEXT_dispatch_table_rewrite_ptr,
    .glPrimitiveBoundingBoxOES = epoxy_glPrimitiveBoundingBoxOES_dispatch_table_rewrite_ptr,
    .glPrimitiveRestartIndex = epoxy_glPrimitiveRestartIndex_dispatch_table_rewrite_ptr,
    .glPrimitiveRestartIndexNV = epoxy_glPrimitiveRestartIndexNV_dispatch_table_rewrite_ptr,
    .glPrimitiveRestartNV = epoxy_glPrimitiveRestartNV_dispatch_table_rewrite_ptr,
    .glPrioritizeTextures = epoxy_glPrioritizeTextures_dispatch_table_rewrite_ptr,
    .glPrioritizeTexturesEXT = epoxy_glPrioritizeTexturesEXT_dispatch_table_rewrite_ptr,
    .glPrioritizeTexturesxOES = epoxy_glPrioritizeTexturesxOES_dispatch_table_rewrite_ptr,
    .glProgramBinary = epoxy_glProgramBinary_dispatch_table_rewrite_ptr,
    .glProgramBinaryOES = epoxy_glProgramBinaryOES_dispatch_table_rewrite_ptr,
    .glProgramBufferParametersIivNV = epoxy_glProgramBufferParametersIivNV_dispatch_table_rewrite_ptr,
    .glProgramBufferParametersIuivNV = epoxy_glProgramBufferParametersIuivNV_dispatch_table_rewrite_ptr,
    .glProgramBufferParametersfvNV = epoxy_glProgramBufferParametersfvNV_dispatch_table_rewrite_ptr,
    .glProgramEnvParameter4dARB = epoxy_glProgramEnvParameter4dARB_dispatch_table_rewrite_ptr,
    .glProgramEnvParameter4dvARB = epoxy_glProgramEnvParameter4dvARB_dispatch_table_rewrite_ptr,
    .glProgramEnvParameter4fARB = epoxy_glProgramEnvParameter4fARB_dispatch_table_rewrite_ptr,
    .glProgramEnvParameter4fvARB = epoxy_glProgramEnvParameter4fvARB_dispatch_table_rewrite_ptr,
    .glProgramEnvParameterI4iNV = epoxy_glProgramEnvParameterI4iNV_dispatch_table_rewrite_ptr,
    .glProgramEnvParameterI4ivNV = epoxy_glProgramEnvParameterI4ivNV_dispatch_table_rewrite_ptr,
    .glProgramEnvParameterI4uiNV = epoxy_glProgramEnvParameterI4uiNV_dispatch_table_rewrite_ptr,
    .glProgramEnvParameterI4uivNV = epoxy_glProgramEnvParameterI4uivNV_dispatch_table_rewrite_ptr,
    .glProgramEnvParameters4fvEXT = epoxy_glProgramEnvParameters4fvEXT_dispatch_table_rewrite_ptr,
    .glProgramEnvParametersI4ivNV = epoxy_glProgramEnvParametersI4ivNV_dispatch_table_rewrite_ptr,
    .glProgramEnvParametersI4uivNV = epoxy_glProgramEnvParametersI4uivNV_dispatch_table_rewrite_ptr,
    .glProgramLocalParameter4dARB = epoxy_glProgramLocalParameter4dARB_dispatch_table_rewrite_ptr,
    .glProgramLocalParameter4dvARB = epoxy_glProgramLocalParameter4dvARB_dispatch_table_rewrite_ptr,
    .glProgramLocalParameter4fARB = epoxy_glProgramLocalParameter4fARB_dispatch_table_rewrite_ptr,
    .glProgramLocalParameter4fvARB = epoxy_glProgramLocalParameter4fvARB_dispatch_table_rewrite_ptr,
    .glProgramLocalParameterI4iNV = epoxy_glProgramLocalParameterI4iNV_dispatch_table_rewrite_ptr,
    .glProgramLocalParameterI4ivNV = epoxy_glProgramLocalParameterI4ivNV_dispatch_table_rewrite_ptr,
    .glProgramLocalParameterI4uiNV = epoxy_glProgramLocalParameterI4uiNV_dispatch_table_rewrite_ptr,
    .glProgramLocalParameterI4uivNV = epoxy_glProgramLocalParameterI4uivNV_dispatch_table_rewrite_ptr,
    .glProgramLocalParameters4fvEXT = epoxy_glProgramLocalParameters4fvEXT_dispatch_table_rewrite_ptr,
    .glProgramLocalParametersI4ivNV = epoxy_glProgramLocalParametersI4ivNV_dispatch_table_rewrite_ptr,
    .glProgramLocalParametersI4uivNV = epoxy_glProgramLocalParametersI4uivNV_dispatch_table_rewrite_ptr,
    .glProgramNamedParameter4dNV = epoxy_glProgramNamedParameter4dNV_dispatch_table_rewrite_ptr,
    .glProgramNamedParameter4dvNV = epoxy_glProgramNamedParameter4dvNV_dispatch_table_rewrite_ptr,
    .glProgramNamedParameter4fNV = epoxy_glProgramNamedParameter4fNV_dispatch_table_rewrite_ptr,
    .glProgramNamedParameter4fvNV = epoxy_glProgramNamedParameter4fvNV_dispatch_table_rewrite_ptr,
    .glProgramParameter4dNV = epoxy_glProgramParameter4dNV_dispatch_table_rewrite_ptr,
    .glProgramParameter4dvNV = epoxy_glProgramParameter4dvNV_dispatch_table_rewrite_ptr,
    .glProgramParameter4fNV = epoxy_glProgramParameter4fNV_dispatch_table_rewrite_ptr,
    .glProgramParameter4fvNV = epoxy_glProgramParameter4fvNV_dispatch_table_rewrite_ptr,
    .glProgramParameteri = epoxy_glProgramParameteri_dispatch_table_rewrite_ptr,
    .glProgramParameteriARB = epoxy_glProgramParameteriARB_dispatch_table_rewrite_ptr,
    .glProgramParameteriEXT = epoxy_glProgramParameteriEXT_dispatch_table_rewrite_ptr,
    .glProgramParameters4dvNV = epoxy_glProgramParameters4dvNV_dispatch_table_rewrite_ptr,
    .glProgramParameters4fvNV = epoxy_glProgramParameters4fvNV_dispatch_table_rewrite_ptr,
    .glProgramPathFragmentInputGenNV = epoxy_glProgramPathFragmentInputGenNV_dispatch_table_rewrite_ptr,
    .glProgramStringARB = epoxy_glProgramStringARB_dispatch_table_rewrite_ptr,
    .glProgramSubroutineParametersuivNV = epoxy_glProgramSubroutineParametersuivNV_dispatch_table_rewrite_ptr,
    .glProgramUniform1d = epoxy_glProgramUniform1d_dispatch_table_rewrite_ptr,
    .glProgramUniform1dEXT = epoxy_glProgramUniform1dEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform1dv = epoxy_glProgramUniform1dv_dispatch_table_rewrite_ptr,
    .glProgramUniform1dvEXT = epoxy_glProgramUniform1dvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform1f = epoxy_glProgramUniform1f_dispatch_table_rewrite_ptr,
    .glProgramUniform1fEXT = epoxy_glProgramUniform1fEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform1fv = epoxy_glProgramUniform1fv_dispatch_table_rewrite_ptr,
    .glProgramUniform1fvEXT = epoxy_glProgramUniform1fvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform1i = epoxy_glProgramUniform1i_dispatch_table_rewrite_ptr,
    .glProgramUniform1i64ARB = epoxy_glProgramUniform1i64ARB_dispatch_table_rewrite_ptr,
    .glProgramUniform1i64NV = epoxy_glProgramUniform1i64NV_dispatch_table_rewrite_ptr,
    .glProgramUniform1i64vARB = epoxy_glProgramUniform1i64vARB_dispatch_table_rewrite_ptr,
    .glProgramUniform1i64vNV = epoxy_glProgramUniform1i64vNV_dispatch_table_rewrite_ptr,
    .glProgramUniform1iEXT = epoxy_glProgramUniform1iEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform1iv = epoxy_glProgramUniform1iv_dispatch_table_rewrite_ptr,
    .glProgramUniform1ivEXT = epoxy_glProgramUniform1ivEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform1ui = epoxy_glProgramUniform1ui_dispatch_table_rewrite_ptr,
    .glProgramUniform1ui64ARB = epoxy_glProgramUniform1ui64ARB_dispatch_table_rewrite_ptr,
    .glProgramUniform1ui64NV = epoxy_glProgramUniform1ui64NV_dispatch_table_rewrite_ptr,
    .glProgramUniform1ui64vARB = epoxy_glProgramUniform1ui64vARB_dispatch_table_rewrite_ptr,
    .glProgramUniform1ui64vNV = epoxy_glProgramUniform1ui64vNV_dispatch_table_rewrite_ptr,
    .glProgramUniform1uiEXT = epoxy_glProgramUniform1uiEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform1uiv = epoxy_glProgramUniform1uiv_dispatch_table_rewrite_ptr,
    .glProgramUniform1uivEXT = epoxy_glProgramUniform1uivEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform2d = epoxy_glProgramUniform2d_dispatch_table_rewrite_ptr,
    .glProgramUniform2dEXT = epoxy_glProgramUniform2dEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform2dv = epoxy_glProgramUniform2dv_dispatch_table_rewrite_ptr,
    .glProgramUniform2dvEXT = epoxy_glProgramUniform2dvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform2f = epoxy_glProgramUniform2f_dispatch_table_rewrite_ptr,
    .glProgramUniform2fEXT = epoxy_glProgramUniform2fEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform2fv = epoxy_glProgramUniform2fv_dispatch_table_rewrite_ptr,
    .glProgramUniform2fvEXT = epoxy_glProgramUniform2fvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform2i = epoxy_glProgramUniform2i_dispatch_table_rewrite_ptr,
    .glProgramUniform2i64ARB = epoxy_glProgramUniform2i64ARB_dispatch_table_rewrite_ptr,
    .glProgramUniform2i64NV = epoxy_glProgramUniform2i64NV_dispatch_table_rewrite_ptr,
    .glProgramUniform2i64vARB = epoxy_glProgramUniform2i64vARB_dispatch_table_rewrite_ptr,
    .glProgramUniform2i64vNV = epoxy_glProgramUniform2i64vNV_dispatch_table_rewrite_ptr,
    .glProgramUniform2iEXT = epoxy_glProgramUniform2iEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform2iv = epoxy_glProgramUniform2iv_dispatch_table_rewrite_ptr,
    .glProgramUniform2ivEXT = epoxy_glProgramUniform2ivEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform2ui = epoxy_glProgramUniform2ui_dispatch_table_rewrite_ptr,
    .glProgramUniform2ui64ARB = epoxy_glProgramUniform2ui64ARB_dispatch_table_rewrite_ptr,
    .glProgramUniform2ui64NV = epoxy_glProgramUniform2ui64NV_dispatch_table_rewrite_ptr,
    .glProgramUniform2ui64vARB = epoxy_glProgramUniform2ui64vARB_dispatch_table_rewrite_ptr,
    .glProgramUniform2ui64vNV = epoxy_glProgramUniform2ui64vNV_dispatch_table_rewrite_ptr,
    .glProgramUniform2uiEXT = epoxy_glProgramUniform2uiEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform2uiv = epoxy_glProgramUniform2uiv_dispatch_table_rewrite_ptr,
    .glProgramUniform2uivEXT = epoxy_glProgramUniform2uivEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform3d = epoxy_glProgramUniform3d_dispatch_table_rewrite_ptr,
    .glProgramUniform3dEXT = epoxy_glProgramUniform3dEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform3dv = epoxy_glProgramUniform3dv_dispatch_table_rewrite_ptr,
    .glProgramUniform3dvEXT = epoxy_glProgramUniform3dvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform3f = epoxy_glProgramUniform3f_dispatch_table_rewrite_ptr,
    .glProgramUniform3fEXT = epoxy_glProgramUniform3fEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform3fv = epoxy_glProgramUniform3fv_dispatch_table_rewrite_ptr,
    .glProgramUniform3fvEXT = epoxy_glProgramUniform3fvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform3i = epoxy_glProgramUniform3i_dispatch_table_rewrite_ptr,
    .glProgramUniform3i64ARB = epoxy_glProgramUniform3i64ARB_dispatch_table_rewrite_ptr,
    .glProgramUniform3i64NV = epoxy_glProgramUniform3i64NV_dispatch_table_rewrite_ptr,
    .glProgramUniform3i64vARB = epoxy_glProgramUniform3i64vARB_dispatch_table_rewrite_ptr,
    .glProgramUniform3i64vNV = epoxy_glProgramUniform3i64vNV_dispatch_table_rewrite_ptr,
    .glProgramUniform3iEXT = epoxy_glProgramUniform3iEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform3iv = epoxy_glProgramUniform3iv_dispatch_table_rewrite_ptr,
    .glProgramUniform3ivEXT = epoxy_glProgramUniform3ivEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform3ui = epoxy_glProgramUniform3ui_dispatch_table_rewrite_ptr,
    .glProgramUniform3ui64ARB = epoxy_glProgramUniform3ui64ARB_dispatch_table_rewrite_ptr,
    .glProgramUniform3ui64NV = epoxy_glProgramUniform3ui64NV_dispatch_table_rewrite_ptr,
    .glProgramUniform3ui64vARB = epoxy_glProgramUniform3ui64vARB_dispatch_table_rewrite_ptr,
    .glProgramUniform3ui64vNV = epoxy_glProgramUniform3ui64vNV_dispatch_table_rewrite_ptr,
    .glProgramUniform3uiEXT = epoxy_glProgramUniform3uiEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform3uiv = epoxy_glProgramUniform3uiv_dispatch_table_rewrite_ptr,
    .glProgramUniform3uivEXT = epoxy_glProgramUniform3uivEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform4d = epoxy_glProgramUniform4d_dispatch_table_rewrite_ptr,
    .glProgramUniform4dEXT = epoxy_glProgramUniform4dEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform4dv = epoxy_glProgramUniform4dv_dispatch_table_rewrite_ptr,
    .glProgramUniform4dvEXT = epoxy_glProgramUniform4dvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform4f = epoxy_glProgramUniform4f_dispatch_table_rewrite_ptr,
    .glProgramUniform4fEXT = epoxy_glProgramUniform4fEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform4fv = epoxy_glProgramUniform4fv_dispatch_table_rewrite_ptr,
    .glProgramUniform4fvEXT = epoxy_glProgramUniform4fvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform4i = epoxy_glProgramUniform4i_dispatch_table_rewrite_ptr,
    .glProgramUniform4i64ARB = epoxy_glProgramUniform4i64ARB_dispatch_table_rewrite_ptr,
    .glProgramUniform4i64NV = epoxy_glProgramUniform4i64NV_dispatch_table_rewrite_ptr,
    .glProgramUniform4i64vARB = epoxy_glProgramUniform4i64vARB_dispatch_table_rewrite_ptr,
    .glProgramUniform4i64vNV = epoxy_glProgramUniform4i64vNV_dispatch_table_rewrite_ptr,
    .glProgramUniform4iEXT = epoxy_glProgramUniform4iEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform4iv = epoxy_glProgramUniform4iv_dispatch_table_rewrite_ptr,
    .glProgramUniform4ivEXT = epoxy_glProgramUniform4ivEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform4ui = epoxy_glProgramUniform4ui_dispatch_table_rewrite_ptr,
    .glProgramUniform4ui64ARB = epoxy_glProgramUniform4ui64ARB_dispatch_table_rewrite_ptr,
    .glProgramUniform4ui64NV = epoxy_glProgramUniform4ui64NV_dispatch_table_rewrite_ptr,
    .glProgramUniform4ui64vARB = epoxy_glProgramUniform4ui64vARB_dispatch_table_rewrite_ptr,
    .glProgramUniform4ui64vNV = epoxy_glProgramUniform4ui64vNV_dispatch_table_rewrite_ptr,
    .glProgramUniform4uiEXT = epoxy_glProgramUniform4uiEXT_dispatch_table_rewrite_ptr,
    .glProgramUniform4uiv = epoxy_glProgramUniform4uiv_dispatch_table_rewrite_ptr,
    .glProgramUniform4uivEXT = epoxy_glProgramUniform4uivEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformHandleui64ARB = epoxy_glProgramUniformHandleui64ARB_dispatch_table_rewrite_ptr,
    .glProgramUniformHandleui64NV = epoxy_glProgramUniformHandleui64NV_dispatch_table_rewrite_ptr,
    .glProgramUniformHandleui64vARB = epoxy_glProgramUniformHandleui64vARB_dispatch_table_rewrite_ptr,
    .glProgramUniformHandleui64vNV = epoxy_glProgramUniformHandleui64vNV_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix2dv = epoxy_glProgramUniformMatrix2dv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix2dvEXT = epoxy_glProgramUniformMatrix2dvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix2fv = epoxy_glProgramUniformMatrix2fv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix2fvEXT = epoxy_glProgramUniformMatrix2fvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix2x3dv = epoxy_glProgramUniformMatrix2x3dv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix2x3dvEXT = epoxy_glProgramUniformMatrix2x3dvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix2x3fv = epoxy_glProgramUniformMatrix2x3fv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix2x3fvEXT = epoxy_glProgramUniformMatrix2x3fvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix2x4dv = epoxy_glProgramUniformMatrix2x4dv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix2x4dvEXT = epoxy_glProgramUniformMatrix2x4dvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix2x4fv = epoxy_glProgramUniformMatrix2x4fv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix2x4fvEXT = epoxy_glProgramUniformMatrix2x4fvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix3dv = epoxy_glProgramUniformMatrix3dv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix3dvEXT = epoxy_glProgramUniformMatrix3dvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix3fv = epoxy_glProgramUniformMatrix3fv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix3fvEXT = epoxy_glProgramUniformMatrix3fvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix3x2dv = epoxy_glProgramUniformMatrix3x2dv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix3x2dvEXT = epoxy_glProgramUniformMatrix3x2dvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix3x2fv = epoxy_glProgramUniformMatrix3x2fv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix3x2fvEXT = epoxy_glProgramUniformMatrix3x2fvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix3x4dv = epoxy_glProgramUniformMatrix3x4dv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix3x4dvEXT = epoxy_glProgramUniformMatrix3x4dvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix3x4fv = epoxy_glProgramUniformMatrix3x4fv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix3x4fvEXT = epoxy_glProgramUniformMatrix3x4fvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix4dv = epoxy_glProgramUniformMatrix4dv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix4dvEXT = epoxy_glProgramUniformMatrix4dvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix4fv = epoxy_glProgramUniformMatrix4fv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix4fvEXT = epoxy_glProgramUniformMatrix4fvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix4x2dv = epoxy_glProgramUniformMatrix4x2dv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix4x2dvEXT = epoxy_glProgramUniformMatrix4x2dvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix4x2fv = epoxy_glProgramUniformMatrix4x2fv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix4x2fvEXT = epoxy_glProgramUniformMatrix4x2fvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix4x3dv = epoxy_glProgramUniformMatrix4x3dv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix4x3dvEXT = epoxy_glProgramUniformMatrix4x3dvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix4x3fv = epoxy_glProgramUniformMatrix4x3fv_dispatch_table_rewrite_ptr,
    .glProgramUniformMatrix4x3fvEXT = epoxy_glProgramUniformMatrix4x3fvEXT_dispatch_table_rewrite_ptr,
    .glProgramUniformui64NV = epoxy_glProgramUniformui64NV_dispatch_table_rewrite_ptr,
    .glProgramUniformui64vNV = epoxy_glProgramUniformui64vNV_dispatch_table_rewrite_ptr,
    .glProgramVertexLimitNV = epoxy_glProgramVertexLimitNV_dispatch_table_rewrite_ptr,
    .glProvokingVertex = epoxy_glProvokingVertex_dispatch_table_rewrite_ptr,
    .glProvokingVertexEXT = epoxy_glProvokingVertexEXT_dispatch_table_rewrite_ptr,
    .glPushAttrib = epoxy_glPushAttrib_dispatch_table_rewrite_ptr,
    .glPushClientAttrib = epoxy_glPushClientAttrib_dispatch_table_rewrite_ptr,
    .glPushClientAttribDefaultEXT = epoxy_glPushClientAttribDefaultEXT_dispatch_table_rewrite_ptr,
    .glPushDebugGroup = epoxy_glPushDebugGroup_dispatch_table_rewrite_ptr,
    .glPushDebugGroupKHR = epoxy_glPushDebugGroupKHR_dispatch_table_rewrite_ptr,
    .glPushGroupMarkerEXT = epoxy_glPushGroupMarkerEXT_dispatch_table_rewrite_ptr,
    .glPushMatrix = epoxy_glPushMatrix_dispatch_table_rewrite_ptr,
    .glPushName = epoxy_glPushName_dispatch_table_rewrite_ptr,
    .glQueryCounter = epoxy_glQueryCounter_dispatch_table_rewrite_ptr,
    .glQueryCounterEXT = epoxy_glQueryCounterEXT_dispatch_table_rewrite_ptr,
    .glQueryMatrixxOES = epoxy_glQueryMatrixxOES_dispatch_table_rewrite_ptr,
    .glQueryObjectParameteruiAMD = epoxy_glQueryObjectParameteruiAMD_dispatch_table_rewrite_ptr,
    .glRasterPos2d = epoxy_glRasterPos2d_dispatch_table_rewrite_ptr,
    .glRasterPos2dv = epoxy_glRasterPos2dv_dispatch_table_rewrite_ptr,
    .glRasterPos2f = epoxy_glRasterPos2f_dispatch_table_rewrite_ptr,
    .glRasterPos2fv = epoxy_glRasterPos2fv_dispatch_table_rewrite_ptr,
    .glRasterPos2i = epoxy_glRasterPos2i_dispatch_table_rewrite_ptr,
    .glRasterPos2iv = epoxy_glRasterPos2iv_dispatch_table_rewrite_ptr,
    .glRasterPos2s = epoxy_glRasterPos2s_dispatch_table_rewrite_ptr,
    .glRasterPos2sv = epoxy_glRasterPos2sv_dispatch_table_rewrite_ptr,
    .glRasterPos2xOES = epoxy_glRasterPos2xOES_dispatch_table_rewrite_ptr,
    .glRasterPos2xvOES = epoxy_glRasterPos2xvOES_dispatch_table_rewrite_ptr,
    .glRasterPos3d = epoxy_glRasterPos3d_dispatch_table_rewrite_ptr,
    .glRasterPos3dv = epoxy_glRasterPos3dv_dispatch_table_rewrite_ptr,
    .glRasterPos3f = epoxy_glRasterPos3f_dispatch_table_rewrite_ptr,
    .glRasterPos3fv = epoxy_glRasterPos3fv_dispatch_table_rewrite_ptr,
    .glRasterPos3i = epoxy_glRasterPos3i_dispatch_table_rewrite_ptr,
    .glRasterPos3iv = epoxy_glRasterPos3iv_dispatch_table_rewrite_ptr,
    .glRasterPos3s = epoxy_glRasterPos3s_dispatch_table_rewrite_ptr,
    .glRasterPos3sv = epoxy_glRasterPos3sv_dispatch_table_rewrite_ptr,
    .glRasterPos3xOES = epoxy_glRasterPos3xOES_dispatch_table_rewrite_ptr,
    .glRasterPos3xvOES = epoxy_glRasterPos3xvOES_dispatch_table_rewrite_ptr,
    .glRasterPos4d = epoxy_glRasterPos4d_dispatch_table_rewrite_ptr,
    .glRasterPos4dv = epoxy_glRasterPos4dv_dispatch_table_rewrite_ptr,
    .glRasterPos4f = epoxy_glRasterPos4f_dispatch_table_rewrite_ptr,
    .glRasterPos4fv = epoxy_glRasterPos4fv_dispatch_table_rewrite_ptr,
    .glRasterPos4i = epoxy_glRasterPos4i_dispatch_table_rewrite_ptr,
    .glRasterPos4iv = epoxy_glRasterPos4iv_dispatch_table_rewrite_ptr,
    .glRasterPos4s = epoxy_glRasterPos4s_dispatch_table_rewrite_ptr,
    .glRasterPos4sv = epoxy_glRasterPos4sv_dispatch_table_rewrite_ptr,
    .glRasterPos4xOES = epoxy_glRasterPos4xOES_dispatch_table_rewrite_ptr,
    .glRasterPos4xvOES = epoxy_glRasterPos4xvOES_dispatch_table_rewrite_ptr,
    .glRasterSamplesEXT = epoxy_glRasterSamplesEXT_dispatch_table_rewrite_ptr,
    .glReadBuffer = epoxy_glReadBuffer_dispatch_table_rewrite_ptr,
    .glReadBufferIndexedEXT = epoxy_glReadBufferIndexedEXT_dispatch_table_rewrite_ptr,
    .glReadBufferNV = epoxy_glReadBufferNV_dispatch_table_rewrite_ptr,
    .glReadInstrumentsSGIX = epoxy_glReadInstrumentsSGIX_dispatch_table_rewrite_ptr,
    .glReadPixels = epoxy_glReadPixels_dispatch_table_rewrite_ptr,
    .glReadnPixels = epoxy_glReadnPixels_dispatch_table_rewrite_ptr,
    .glReadnPixelsARB = epoxy_glReadnPixelsARB_dispatch_table_rewrite_ptr,
    .glReadnPixelsEXT = epoxy_glReadnPixelsEXT_dispatch_table_rewrite_ptr,
    .glReadnPixelsKHR = epoxy_glReadnPixelsKHR_dispatch_table_rewrite_ptr,
    .glRectd = epoxy_glRectd_dispatch_table_rewrite_ptr,
    .glRectdv = epoxy_glRectdv_dispatch_table_rewrite_ptr,
    .glRectf = epoxy_glRectf_dispatch_table_rewrite_ptr,
    .glRectfv = epoxy_glRectfv_dispatch_table_rewrite_ptr,
    .glRecti = epoxy_glRecti_dispatch_table_rewrite_ptr,
    .glRectiv = epoxy_glRectiv_dispatch_table_rewrite_ptr,
    .glRects = epoxy_glRects_dispatch_table_rewrite_ptr,
    .glRectsv = epoxy_glRectsv_dispatch_table_rewrite_ptr,
    .glRectxOES = epoxy_glRectxOES_dispatch_table_rewrite_ptr,
    .glRectxvOES = epoxy_glRectxvOES_dispatch_table_rewrite_ptr,
    .glReferencePlaneSGIX = epoxy_glReferencePlaneSGIX_dispatch_table_rewrite_ptr,
    .glReleaseShaderCompiler = epoxy_glReleaseShaderCompiler_dispatch_table_rewrite_ptr,
    .glRenderMode = epoxy_glRenderMode_dispatch_table_rewrite_ptr,
    .glRenderbufferStorage = epoxy_glRenderbufferStorage_dispatch_table_rewrite_ptr,
    .glRenderbufferStorageEXT = epoxy_glRenderbufferStorageEXT_dispatch_table_rewrite_ptr,
    .glRenderbufferStorageMultisample = epoxy_glRenderbufferStorageMultisample_dispatch_table_rewrite_ptr,
    .glRenderbufferStorageMultisampleANGLE = epoxy_glRenderbufferStorageMultisampleANGLE_dispatch_table_rewrite_ptr,
    .glRenderbufferStorageMultisampleAPPLE = epoxy_glRenderbufferStorageMultisampleAPPLE_dispatch_table_rewrite_ptr,
    .glRenderbufferStorageMultisampleCoverageNV = epoxy_glRenderbufferStorageMultisampleCoverageNV_dispatch_table_rewrite_ptr,
    .glRenderbufferStorageMultisampleEXT = epoxy_glRenderbufferStorageMultisampleEXT_dispatch_table_rewrite_ptr,
    .glRenderbufferStorageMultisampleIMG = epoxy_glRenderbufferStorageMultisampleIMG_dispatch_table_rewrite_ptr,
    .glRenderbufferStorageMultisampleNV = epoxy_glRenderbufferStorageMultisampleNV_dispatch_table_rewrite_ptr,
    .glRenderbufferStorageOES = epoxy_glRenderbufferStorageOES_dispatch_table_rewrite_ptr,
    .glReplacementCodePointerSUN = epoxy_glReplacementCodePointerSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeubSUN = epoxy_glReplacementCodeubSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeubvSUN = epoxy_glReplacementCodeubvSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiColor3fVertex3fSUN = epoxy_glReplacementCodeuiColor3fVertex3fSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiColor3fVertex3fvSUN = epoxy_glReplacementCodeuiColor3fVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiColor4fNormal3fVertex3fSUN = epoxy_glReplacementCodeuiColor4fNormal3fVertex3fSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiColor4fNormal3fVertex3fvSUN = epoxy_glReplacementCodeuiColor4fNormal3fVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiColor4ubVertex3fSUN = epoxy_glReplacementCodeuiColor4ubVertex3fSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiColor4ubVertex3fvSUN = epoxy_glReplacementCodeuiColor4ubVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiNormal3fVertex3fSUN = epoxy_glReplacementCodeuiNormal3fVertex3fSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiNormal3fVertex3fvSUN = epoxy_glReplacementCodeuiNormal3fVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiSUN = epoxy_glReplacementCodeuiSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = epoxy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = epoxy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = epoxy_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = epoxy_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiTexCoord2fVertex3fSUN = epoxy_glReplacementCodeuiTexCoord2fVertex3fSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiTexCoord2fVertex3fvSUN = epoxy_glReplacementCodeuiTexCoord2fVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiVertex3fSUN = epoxy_glReplacementCodeuiVertex3fSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuiVertex3fvSUN = epoxy_glReplacementCodeuiVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeuivSUN = epoxy_glReplacementCodeuivSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeusSUN = epoxy_glReplacementCodeusSUN_dispatch_table_rewrite_ptr,
    .glReplacementCodeusvSUN = epoxy_glReplacementCodeusvSUN_dispatch_table_rewrite_ptr,
    .glRequestResidentProgramsNV = epoxy_glRequestResidentProgramsNV_dispatch_table_rewrite_ptr,
    .glResetHistogram = epoxy_glResetHistogram_dispatch_table_rewrite_ptr,
    .glResetHistogramEXT = epoxy_glResetHistogramEXT_dispatch_table_rewrite_ptr,
    .glResetMinmax = epoxy_glResetMinmax_dispatch_table_rewrite_ptr,
    .glResetMinmaxEXT = epoxy_glResetMinmaxEXT_dispatch_table_rewrite_ptr,
    .glResizeBuffersMESA = epoxy_glResizeBuffersMESA_dispatch_table_rewrite_ptr,
    .glResolveDepthValuesNV = epoxy_glResolveDepthValuesNV_dispatch_table_rewrite_ptr,
    .glResolveMultisampleFramebufferAPPLE = epoxy_glResolveMultisampleFramebufferAPPLE_dispatch_table_rewrite_ptr,
    .glResumeTransformFeedback = epoxy_glResumeTransformFeedback_dispatch_table_rewrite_ptr,
    .glResumeTransformFeedbackNV = epoxy_glResumeTransformFeedbackNV_dispatch_table_rewrite_ptr,
    .glRotated = epoxy_glRotated_dispatch_table_rewrite_ptr,
    .glRotatef = epoxy_glRotatef_dispatch_table_rewrite_ptr,
    .glRotatex = epoxy_glRotatex_dispatch_table_rewrite_ptr,
    .glRotatexOES = epoxy_glRotatexOES_dispatch_table_rewrite_ptr,
    .glSampleCoverage = epoxy_glSampleCoverage_dispatch_table_rewrite_ptr,
    .glSampleCoverageARB = epoxy_glSampleCoverageARB_dispatch_table_rewrite_ptr,
    .glSampleCoveragex = epoxy_glSampleCoveragex_dispatch_table_rewrite_ptr,
    .glSampleCoveragexOES = epoxy_glSampleCoveragexOES_dispatch_table_rewrite_ptr,
    .glSampleMapATI = epoxy_glSampleMapATI_dispatch_table_rewrite_ptr,
    .glSampleMaskEXT = epoxy_glSampleMaskEXT_dispatch_table_rewrite_ptr,
    .glSampleMaskIndexedNV = epoxy_glSampleMaskIndexedNV_dispatch_table_rewrite_ptr,
    .glSampleMaskSGIS = epoxy_glSampleMaskSGIS_dispatch_table_rewrite_ptr,
    .glSampleMaski = epoxy_glSampleMaski_dispatch_table_rewrite_ptr,
    .glSamplePatternEXT = epoxy_glSamplePatternEXT_dispatch_table_rewrite_ptr,
    .glSamplePatternSGIS = epoxy_glSamplePatternSGIS_dispatch_table_rewrite_ptr,
    .glSamplerParameterIiv = epoxy_glSamplerParameterIiv_dispatch_table_rewrite_ptr,
    .glSamplerParameterIivEXT = epoxy_glSamplerParameterIivEXT_dispatch_table_rewrite_ptr,
    .glSamplerParameterIivOES = epoxy_glSamplerParameterIivOES_dispatch_table_rewrite_ptr,
    .glSamplerParameterIuiv = epoxy_glSamplerParameterIuiv_dispatch_table_rewrite_ptr,
    .glSamplerParameterIuivEXT = epoxy_glSamplerParameterIuivEXT_dispatch_table_rewrite_ptr,
    .glSamplerParameterIuivOES = epoxy_glSamplerParameterIuivOES_dispatch_table_rewrite_ptr,
    .glSamplerParameterf = epoxy_glSamplerParameterf_dispatch_table_rewrite_ptr,
    .glSamplerParameterfv = epoxy_glSamplerParameterfv_dispatch_table_rewrite_ptr,
    .glSamplerParameteri = epoxy_glSamplerParameteri_dispatch_table_rewrite_ptr,
    .glSamplerParameteriv = epoxy_glSamplerParameteriv_dispatch_table_rewrite_ptr,
    .glScaled = epoxy_glScaled_dispatch_table_rewrite_ptr,
    .glScalef = epoxy_glScalef_dispatch_table_rewrite_ptr,
    .glScalex = epoxy_glScalex_dispatch_table_rewrite_ptr,
    .glScalexOES = epoxy_glScalexOES_dispatch_table_rewrite_ptr,
    .glScissor = epoxy_glScissor_dispatch_table_rewrite_ptr,
    .glScissorArrayv = epoxy_glScissorArrayv_dispatch_table_rewrite_ptr,
    .glScissorArrayvNV = epoxy_glScissorArrayvNV_dispatch_table_rewrite_ptr,
    .glScissorIndexed = epoxy_glScissorIndexed_dispatch_table_rewrite_ptr,
    .glScissorIndexedNV = epoxy_glScissorIndexedNV_dispatch_table_rewrite_ptr,
    .glScissorIndexedv = epoxy_glScissorIndexedv_dispatch_table_rewrite_ptr,
    .glScissorIndexedvNV = epoxy_glScissorIndexedvNV_dispatch_table_rewrite_ptr,
    .glSecondaryColor3b = epoxy_glSecondaryColor3b_dispatch_table_rewrite_ptr,
    .glSecondaryColor3bEXT = epoxy_glSecondaryColor3bEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColor3bv = epoxy_glSecondaryColor3bv_dispatch_table_rewrite_ptr,
    .glSecondaryColor3bvEXT = epoxy_glSecondaryColor3bvEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColor3d = epoxy_glSecondaryColor3d_dispatch_table_rewrite_ptr,
    .glSecondaryColor3dEXT = epoxy_glSecondaryColor3dEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColor3dv = epoxy_glSecondaryColor3dv_dispatch_table_rewrite_ptr,
    .glSecondaryColor3dvEXT = epoxy_glSecondaryColor3dvEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColor3f = epoxy_glSecondaryColor3f_dispatch_table_rewrite_ptr,
    .glSecondaryColor3fEXT = epoxy_glSecondaryColor3fEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColor3fv = epoxy_glSecondaryColor3fv_dispatch_table_rewrite_ptr,
    .glSecondaryColor3fvEXT = epoxy_glSecondaryColor3fvEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColor3hNV = epoxy_glSecondaryColor3hNV_dispatch_table_rewrite_ptr,
    .glSecondaryColor3hvNV = epoxy_glSecondaryColor3hvNV_dispatch_table_rewrite_ptr,
    .glSecondaryColor3i = epoxy_glSecondaryColor3i_dispatch_table_rewrite_ptr,
    .glSecondaryColor3iEXT = epoxy_glSecondaryColor3iEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColor3iv = epoxy_glSecondaryColor3iv_dispatch_table_rewrite_ptr,
    .glSecondaryColor3ivEXT = epoxy_glSecondaryColor3ivEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColor3s = epoxy_glSecondaryColor3s_dispatch_table_rewrite_ptr,
    .glSecondaryColor3sEXT = epoxy_glSecondaryColor3sEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColor3sv = epoxy_glSecondaryColor3sv_dispatch_table_rewrite_ptr,
    .glSecondaryColor3svEXT = epoxy_glSecondaryColor3svEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColor3ub = epoxy_glSecondaryColor3ub_dispatch_table_rewrite_ptr,
    .glSecondaryColor3ubEXT = epoxy_glSecondaryColor3ubEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColor3ubv = epoxy_glSecondaryColor3ubv_dispatch_table_rewrite_ptr,
    .glSecondaryColor3ubvEXT = epoxy_glSecondaryColor3ubvEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColor3ui = epoxy_glSecondaryColor3ui_dispatch_table_rewrite_ptr,
    .glSecondaryColor3uiEXT = epoxy_glSecondaryColor3uiEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColor3uiv = epoxy_glSecondaryColor3uiv_dispatch_table_rewrite_ptr,
    .glSecondaryColor3uivEXT = epoxy_glSecondaryColor3uivEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColor3us = epoxy_glSecondaryColor3us_dispatch_table_rewrite_ptr,
    .glSecondaryColor3usEXT = epoxy_glSecondaryColor3usEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColor3usv = epoxy_glSecondaryColor3usv_dispatch_table_rewrite_ptr,
    .glSecondaryColor3usvEXT = epoxy_glSecondaryColor3usvEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColorFormatNV = epoxy_glSecondaryColorFormatNV_dispatch_table_rewrite_ptr,
    .glSecondaryColorP3ui = epoxy_glSecondaryColorP3ui_dispatch_table_rewrite_ptr,
    .glSecondaryColorP3uiv = epoxy_glSecondaryColorP3uiv_dispatch_table_rewrite_ptr,
    .glSecondaryColorPointer = epoxy_glSecondaryColorPointer_dispatch_table_rewrite_ptr,
    .glSecondaryColorPointerEXT = epoxy_glSecondaryColorPointerEXT_dispatch_table_rewrite_ptr,
    .glSecondaryColorPointerListIBM = epoxy_glSecondaryColorPointerListIBM_dispatch_table_rewrite_ptr,
    .glSelectBuffer = epoxy_glSelectBuffer_dispatch_table_rewrite_ptr,
    .glSelectPerfMonitorCountersAMD = epoxy_glSelectPerfMonitorCountersAMD_dispatch_table_rewrite_ptr,
    .glSeparableFilter2D = epoxy_glSeparableFilter2D_dispatch_table_rewrite_ptr,
    .glSeparableFilter2DEXT = epoxy_glSeparableFilter2DEXT_dispatch_table_rewrite_ptr,
    .glSetFenceAPPLE = epoxy_glSetFenceAPPLE_dispatch_table_rewrite_ptr,
    .glSetFenceNV = epoxy_glSetFenceNV_dispatch_table_rewrite_ptr,
    .glSetFragmentShaderConstantATI = epoxy_glSetFragmentShaderConstantATI_dispatch_table_rewrite_ptr,
    .glSetInvariantEXT = epoxy_glSetInvariantEXT_dispatch_table_rewrite_ptr,
    .glSetLocalConstantEXT = epoxy_glSetLocalConstantEXT_dispatch_table_rewrite_ptr,
    .glSetMultisamplefvAMD = epoxy_glSetMultisamplefvAMD_dispatch_table_rewrite_ptr,
    .glShadeModel = epoxy_glShadeModel_dispatch_table_rewrite_ptr,
    .glShaderBinary = epoxy_glShaderBinary_dispatch_table_rewrite_ptr,
    .glShaderOp1EXT = epoxy_glShaderOp1EXT_dispatch_table_rewrite_ptr,
    .glShaderOp2EXT = epoxy_glShaderOp2EXT_dispatch_table_rewrite_ptr,
    .glShaderOp3EXT = epoxy_glShaderOp3EXT_dispatch_table_rewrite_ptr,
    .glShaderSource = epoxy_glShaderSource_dispatch_table_rewrite_ptr,
    .glShaderSourceARB = epoxy_glShaderSourceARB_dispatch_table_rewrite_ptr,
    .glShaderStorageBlockBinding = epoxy_glShaderStorageBlockBinding_dispatch_table_rewrite_ptr,
    .glSharpenTexFuncSGIS = epoxy_glSharpenTexFuncSGIS_dispatch_table_rewrite_ptr,
    .glSpriteParameterfSGIX = epoxy_glSpriteParameterfSGIX_dispatch_table_rewrite_ptr,
    .glSpriteParameterfvSGIX = epoxy_glSpriteParameterfvSGIX_dispatch_table_rewrite_ptr,
    .glSpriteParameteriSGIX = epoxy_glSpriteParameteriSGIX_dispatch_table_rewrite_ptr,
    .glSpriteParameterivSGIX = epoxy_glSpriteParameterivSGIX_dispatch_table_rewrite_ptr,
    .glStartInstrumentsSGIX = epoxy_glStartInstrumentsSGIX_dispatch_table_rewrite_ptr,
    .glStartTilingQCOM = epoxy_glStartTilingQCOM_dispatch_table_rewrite_ptr,
    .glStateCaptureNV = epoxy_glStateCaptureNV_dispatch_table_rewrite_ptr,
    .glStencilClearTagEXT = epoxy_glStencilClearTagEXT_dispatch_table_rewrite_ptr,
    .glStencilFillPathInstancedNV = epoxy_glStencilFillPathInstancedNV_dispatch_table_rewrite_ptr,
    .glStencilFillPathNV = epoxy_glStencilFillPathNV_dispatch_table_rewrite_ptr,
    .glStencilFunc = epoxy_glStencilFunc_dispatch_table_rewrite_ptr,
    .glStencilFuncSeparate = epoxy_glStencilFuncSeparate_dispatch_table_rewrite_ptr,
    .glStencilFuncSeparateATI = epoxy_glStencilFuncSeparateATI_dispatch_table_rewrite_ptr,
    .glStencilMask = epoxy_glStencilMask_dispatch_table_rewrite_ptr,
    .glStencilMaskSeparate = epoxy_glStencilMaskSeparate_dispatch_table_rewrite_ptr,
    .glStencilOp = epoxy_glStencilOp_dispatch_table_rewrite_ptr,
    .glStencilOpSeparate = epoxy_glStencilOpSeparate_dispatch_table_rewrite_ptr,
    .glStencilOpSeparateATI = epoxy_glStencilOpSeparateATI_dispatch_table_rewrite_ptr,
    .glStencilOpValueAMD = epoxy_glStencilOpValueAMD_dispatch_table_rewrite_ptr,
    .glStencilStrokePathInstancedNV = epoxy_glStencilStrokePathInstancedNV_dispatch_table_rewrite_ptr,
    .glStencilStrokePathNV = epoxy_glStencilStrokePathNV_dispatch_table_rewrite_ptr,
    .glStencilThenCoverFillPathInstancedNV = epoxy_glStencilThenCoverFillPathInstancedNV_dispatch_table_rewrite_ptr,
    .glStencilThenCoverFillPathNV = epoxy_glStencilThenCoverFillPathNV_dispatch_table_rewrite_ptr,
    .glStencilThenCoverStrokePathInstancedNV = epoxy_glStencilThenCoverStrokePathInstancedNV_dispatch_table_rewrite_ptr,
    .glStencilThenCoverStrokePathNV = epoxy_glStencilThenCoverStrokePathNV_dispatch_table_rewrite_ptr,
    .glStopInstrumentsSGIX = epoxy_glStopInstrumentsSGIX_dispatch_table_rewrite_ptr,
    .glStringMarkerGREMEDY = epoxy_glStringMarkerGREMEDY_dispatch_table_rewrite_ptr,
    .glSubpixelPrecisionBiasNV = epoxy_glSubpixelPrecisionBiasNV_dispatch_table_rewrite_ptr,
    .glSwizzleEXT = epoxy_glSwizzleEXT_dispatch_table_rewrite_ptr,
    .glSyncTextureINTEL = epoxy_glSyncTextureINTEL_dispatch_table_rewrite_ptr,
    .glTagSampleBufferSGIX = epoxy_glTagSampleBufferSGIX_dispatch_table_rewrite_ptr,
    .glTangent3bEXT = epoxy_glTangent3bEXT_dispatch_table_rewrite_ptr,
    .glTangent3bvEXT = epoxy_glTangent3bvEXT_dispatch_table_rewrite_ptr,
    .glTangent3dEXT = epoxy_glTangent3dEXT_dispatch_table_rewrite_ptr,
    .glTangent3dvEXT = epoxy_glTangent3dvEXT_dispatch_table_rewrite_ptr,
    .glTangent3fEXT = epoxy_glTangent3fEXT_dispatch_table_rewrite_ptr,
    .glTangent3fvEXT = epoxy_glTangent3fvEXT_dispatch_table_rewrite_ptr,
    .glTangent3iEXT = epoxy_glTangent3iEXT_dispatch_table_rewrite_ptr,
    .glTangent3ivEXT = epoxy_glTangent3ivEXT_dispatch_table_rewrite_ptr,
    .glTangent3sEXT = epoxy_glTangent3sEXT_dispatch_table_rewrite_ptr,
    .glTangent3svEXT = epoxy_glTangent3svEXT_dispatch_table_rewrite_ptr,
    .glTangentPointerEXT = epoxy_glTangentPointerEXT_dispatch_table_rewrite_ptr,
    .glTbufferMask3DFX = epoxy_glTbufferMask3DFX_dispatch_table_rewrite_ptr,
    .glTessellationFactorAMD = epoxy_glTessellationFactorAMD_dispatch_table_rewrite_ptr,
    .glTessellationModeAMD = epoxy_glTessellationModeAMD_dispatch_table_rewrite_ptr,
    .glTestFenceAPPLE = epoxy_glTestFenceAPPLE_dispatch_table_rewrite_ptr,
    .glTestFenceNV = epoxy_glTestFenceNV_dispatch_table_rewrite_ptr,
    .glTestObjectAPPLE = epoxy_glTestObjectAPPLE_dispatch_table_rewrite_ptr,
    .glTexBuffer = epoxy_glTexBuffer_dispatch_table_rewrite_ptr,
    .glTexBufferARB = epoxy_glTexBufferARB_dispatch_table_rewrite_ptr,
    .glTexBufferEXT = epoxy_glTexBufferEXT_dispatch_table_rewrite_ptr,
    .glTexBufferOES = epoxy_glTexBufferOES_dispatch_table_rewrite_ptr,
    .glTexBufferRange = epoxy_glTexBufferRange_dispatch_table_rewrite_ptr,
    .glTexBufferRangeEXT = epoxy_glTexBufferRangeEXT_dispatch_table_rewrite_ptr,
    .glTexBufferRangeOES = epoxy_glTexBufferRangeOES_dispatch_table_rewrite_ptr,
    .glTexBumpParameterfvATI = epoxy_glTexBumpParameterfvATI_dispatch_table_rewrite_ptr,
    .glTexBumpParameterivATI = epoxy_glTexBumpParameterivATI_dispatch_table_rewrite_ptr,
    .glTexCoord1bOES = epoxy_glTexCoord1bOES_dispatch_table_rewrite_ptr,
    .glTexCoord1bvOES = epoxy_glTexCoord1bvOES_dispatch_table_rewrite_ptr,
    .glTexCoord1d = epoxy_glTexCoord1d_dispatch_table_rewrite_ptr,
    .glTexCoord1dv = epoxy_glTexCoord1dv_dispatch_table_rewrite_ptr,
    .glTexCoord1f = epoxy_glTexCoord1f_dispatch_table_rewrite_ptr,
    .glTexCoord1fv = epoxy_glTexCoord1fv_dispatch_table_rewrite_ptr,
    .glTexCoord1hNV = epoxy_glTexCoord1hNV_dispatch_table_rewrite_ptr,
    .glTexCoord1hvNV = epoxy_glTexCoord1hvNV_dispatch_table_rewrite_ptr,
    .glTexCoord1i = epoxy_glTexCoord1i_dispatch_table_rewrite_ptr,
    .glTexCoord1iv = epoxy_glTexCoord1iv_dispatch_table_rewrite_ptr,
    .glTexCoord1s = epoxy_glTexCoord1s_dispatch_table_rewrite_ptr,
    .glTexCoord1sv = epoxy_glTexCoord1sv_dispatch_table_rewrite_ptr,
    .glTexCoord1xOES = epoxy_glTexCoord1xOES_dispatch_table_rewrite_ptr,
    .glTexCoord1xvOES = epoxy_glTexCoord1xvOES_dispatch_table_rewrite_ptr,
    .glTexCoord2bOES = epoxy_glTexCoord2bOES_dispatch_table_rewrite_ptr,
    .glTexCoord2bvOES = epoxy_glTexCoord2bvOES_dispatch_table_rewrite_ptr,
    .glTexCoord2d = epoxy_glTexCoord2d_dispatch_table_rewrite_ptr,
    .glTexCoord2dv = epoxy_glTexCoord2dv_dispatch_table_rewrite_ptr,
    .glTexCoord2f = epoxy_glTexCoord2f_dispatch_table_rewrite_ptr,
    .glTexCoord2fColor3fVertex3fSUN = epoxy_glTexCoord2fColor3fVertex3fSUN_dispatch_table_rewrite_ptr,
    .glTexCoord2fColor3fVertex3fvSUN = epoxy_glTexCoord2fColor3fVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glTexCoord2fColor4fNormal3fVertex3fSUN = epoxy_glTexCoord2fColor4fNormal3fVertex3fSUN_dispatch_table_rewrite_ptr,
    .glTexCoord2fColor4fNormal3fVertex3fvSUN = epoxy_glTexCoord2fColor4fNormal3fVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glTexCoord2fColor4ubVertex3fSUN = epoxy_glTexCoord2fColor4ubVertex3fSUN_dispatch_table_rewrite_ptr,
    .glTexCoord2fColor4ubVertex3fvSUN = epoxy_glTexCoord2fColor4ubVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glTexCoord2fNormal3fVertex3fSUN = epoxy_glTexCoord2fNormal3fVertex3fSUN_dispatch_table_rewrite_ptr,
    .glTexCoord2fNormal3fVertex3fvSUN = epoxy_glTexCoord2fNormal3fVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glTexCoord2fVertex3fSUN = epoxy_glTexCoord2fVertex3fSUN_dispatch_table_rewrite_ptr,
    .glTexCoord2fVertex3fvSUN = epoxy_glTexCoord2fVertex3fvSUN_dispatch_table_rewrite_ptr,
    .glTexCoord2fv = epoxy_glTexCoord2fv_dispatch_table_rewrite_ptr,
    .glTexCoord2hNV = epoxy_glTexCoord2hNV_dispatch_table_rewrite_ptr,
    .glTexCoord2hvNV = epoxy_glTexCoord2hvNV_dispatch_table_rewrite_ptr,
    .glTexCoord2i = epoxy_glTexCoord2i_dispatch_table_rewrite_ptr,
    .glTexCoord2iv = epoxy_glTexCoord2iv_dispatch_table_rewrite_ptr,
    .glTexCoord2s = epoxy_glTexCoord2s_dispatch_table_rewrite_ptr,
    .glTexCoord2sv = epoxy_glTexCoord2sv_dispatch_table_rewrite_ptr,
    .glTexCoord2xOES = epoxy_glTexCoord2xOES_dispatch_table_rewrite_ptr,
    .glTexCoord2xvOES = epoxy_glTexCoord2xvOES_dispatch_table_rewrite_ptr,
    .glTexCoord3bOES = epoxy_glTexCoord3bOES_dispatch_table_rewrite_ptr,
    .glTexCoord3bvOES = epoxy_glTexCoord3bvOES_dispatch_table_rewrite_ptr,
    .glTexCoord3d = epoxy_glTexCoord3d_dispatch_table_rewrite_ptr,
    .glTexCoord3dv = epoxy_glTexCoord3dv_dispatch_table_rewrite_ptr,
    .glTexCoord3f = epoxy_glTexCoord3f_dispatch_table_rewrite_ptr,
    .glTexCoord3fv = epoxy_glTexCoord3fv_dispatch_table_rewrite_ptr,
    .glTexCoord3hNV = epoxy_glTexCoord3hNV_dispatch_table_rewrite_ptr,
    .glTexCoord3hvNV = epoxy_glTexCoord3hvNV_dispatch_table_rewrite_ptr,
    .glTexCoord3i = epoxy_glTexCoord3i_dispatch_table_rewrite_ptr,
    .glTexCoord3iv = epoxy_glTexCoord3iv_dispatch_table_rewrite_ptr,
    .glTexCoord3s = epoxy_glTexCoord3s_dispatch_table_rewrite_ptr,
    .glTexCoord3sv = epoxy_glTexCoord3sv_dispatch_table_rewrite_ptr,
    .glTexCoord3xOES = epoxy_glTexCoord3xOES_dispatch_table_rewrite_ptr,
    .glTexCoord3xvOES = epoxy_glTexCoord3xvOES_dispatch_table_rewrite_ptr,
    .glTexCoord4bOES = epoxy_glTexCoord4bOES_dispatch_table_rewrite_ptr,
    .glTexCoord4bvOES = epoxy_glTexCoord4bvOES_dispatch_table_rewrite_ptr,
    .glTexCoord4d = epoxy_glTexCoord4d_dispatch_table_rewrite_ptr,
    .glTexCoord4dv = epoxy_glTexCoord4dv_dispatch_table_rewrite_ptr,
    .glTexCoord4f = epoxy_glTexCoord4f_dispatch_table_rewrite_ptr,
    .glTexCoord4fColor4fNormal3fVertex4fSUN = epoxy_glTexCoord4fColor4fNormal3fVertex4fSUN_dispatch_table_rewrite_ptr,
    .glTexCoord4fColor4fNormal3fVertex4fvSUN = epoxy_glTexCoord4fColor4fNormal3fVertex4fvSUN_dispatch_table_rewrite_ptr,
    .glTexCoord4fVertex4fSUN = epoxy_glTexCoord4fVertex4fSUN_dispatch_table_rewrite_ptr,
    .glTexCoord4fVertex4fvSUN = epoxy_glTexCoord4fVertex4fvSUN_dispatch_table_rewrite_ptr,
    .glTexCoord4fv = epoxy_glTexCoord4fv_dispatch_table_rewrite_ptr,
    .glTexCoord4hNV = epoxy_glTexCoord4hNV_dispatch_table_rewrite_ptr,
    .glTexCoord4hvNV = epoxy_glTexCoord4hvNV_dispatch_table_rewrite_ptr,
    .glTexCoord4i = epoxy_glTexCoord4i_dispatch_table_rewrite_ptr,
    .glTexCoord4iv = epoxy_glTexCoord4iv_dispatch_table_rewrite_ptr,
    .glTexCoord4s = epoxy_glTexCoord4s_dispatch_table_rewrite_ptr,
    .glTexCoord4sv = epoxy_glTexCoord4sv_dispatch_table_rewrite_ptr,
    .glTexCoord4xOES = epoxy_glTexCoord4xOES_dispatch_table_rewrite_ptr,
    .glTexCoord4xvOES = epoxy_glTexCoord4xvOES_dispatch_table_rewrite_ptr,
    .glTexCoordFormatNV = epoxy_glTexCoordFormatNV_dispatch_table_rewrite_ptr,
    .glTexCoordP1ui = epoxy_glTexCoordP1ui_dispatch_table_rewrite_ptr,
    .glTexCoordP1uiv = epoxy_glTexCoordP1uiv_dispatch_table_rewrite_ptr,
    .glTexCoordP2ui = epoxy_glTexCoordP2ui_dispatch_table_rewrite_ptr,
    .glTexCoordP2uiv = epoxy_glTexCoordP2uiv_dispatch_table_rewrite_ptr,
    .glTexCoordP3ui = epoxy_glTexCoordP3ui_dispatch_table_rewrite_ptr,
    .glTexCoordP3uiv = epoxy_glTexCoordP3uiv_dispatch_table_rewrite_ptr,
    .glTexCoordP4ui = epoxy_glTexCoordP4ui_dispatch_table_rewrite_ptr,
    .glTexCoordP4uiv = epoxy_glTexCoordP4uiv_dispatch_table_rewrite_ptr,
    .glTexCoordPointer = epoxy_glTexCoordPointer_dispatch_table_rewrite_ptr,
    .glTexCoordPointerEXT = epoxy_glTexCoordPointerEXT_dispatch_table_rewrite_ptr,
    .glTexCoordPointerListIBM = epoxy_glTexCoordPointerListIBM_dispatch_table_rewrite_ptr,
    .glTexCoordPointervINTEL = epoxy_glTexCoordPointervINTEL_dispatch_table_rewrite_ptr,
    .glTexEnvf = epoxy_glTexEnvf_dispatch_table_rewrite_ptr,
    .glTexEnvfv = epoxy_glTexEnvfv_dispatch_table_rewrite_ptr,
    .glTexEnvi = epoxy_glTexEnvi_dispatch_table_rewrite_ptr,
    .glTexEnviv = epoxy_glTexEnviv_dispatch_table_rewrite_ptr,
    .glTexEnvx = epoxy_glTexEnvx_dispatch_table_rewrite_ptr,
    .glTexEnvxOES = epoxy_glTexEnvxOES_dispatch_table_rewrite_ptr,
    .glTexEnvxv = epoxy_glTexEnvxv_dispatch_table_rewrite_ptr,
    .glTexEnvxvOES = epoxy_glTexEnvxvOES_dispatch_table_rewrite_ptr,
    .glTexFilterFuncSGIS = epoxy_glTexFilterFuncSGIS_dispatch_table_rewrite_ptr,
    .glTexGend = epoxy_glTexGend_dispatch_table_rewrite_ptr,
    .glTexGendv = epoxy_glTexGendv_dispatch_table_rewrite_ptr,
    .glTexGenf = epoxy_glTexGenf_dispatch_table_rewrite_ptr,
    .glTexGenfOES = epoxy_glTexGenfOES_dispatch_table_rewrite_ptr,
    .glTexGenfv = epoxy_glTexGenfv_dispatch_table_rewrite_ptr,
    .glTexGenfvOES = epoxy_glTexGenfvOES_dispatch_table_rewrite_ptr,
    .glTexGeni = epoxy_glTexGeni_dispatch_table_rewrite_ptr,
    .glTexGeniOES = epoxy_glTexGeniOES_dispatch_table_rewrite_ptr,
    .glTexGeniv = epoxy_glTexGeniv_dispatch_table_rewrite_ptr,
    .glTexGenivOES = epoxy_glTexGenivOES_dispatch_table_rewrite_ptr,
    .glTexGenxOES = epoxy_glTexGenxOES_dispatch_table_rewrite_ptr,
    .glTexGenxvOES = epoxy_glTexGenxvOES_dispatch_table_rewrite_ptr,
    .glTexImage1D = epoxy_glTexImage1D_dispatch_table_rewrite_ptr,
    .glTexImage2D = epoxy_glTexImage2D_dispatch_table_rewrite_ptr,
    .glTexImage2DMultisample = epoxy_glTexImage2DMultisample_dispatch_table_rewrite_ptr,
    .glTexImage2DMultisampleCoverageNV = epoxy_glTexImage2DMultisampleCoverageNV_dispatch_table_rewrite_ptr,
    .glTexImage3D = epoxy_glTexImage3D_dispatch_table_rewrite_ptr,
    .glTexImage3DEXT = epoxy_glTexImage3DEXT_dispatch_table_rewrite_ptr,
    .glTexImage3DMultisample = epoxy_glTexImage3DMultisample_dispatch_table_rewrite_ptr,
    .glTexImage3DMultisampleCoverageNV = epoxy_glTexImage3DMultisampleCoverageNV_dispatch_table_rewrite_ptr,
    .glTexImage3DOES = epoxy_glTexImage3DOES_dispatch_table_rewrite_ptr,
    .glTexImage4DSGIS = epoxy_glTexImage4DSGIS_dispatch_table_rewrite_ptr,
    .glTexPageCommitmentARB = epoxy_glTexPageCommitmentARB_dispatch_table_rewrite_ptr,
    .glTexPageCommitmentEXT = epoxy_glTexPageCommitmentEXT_dispatch_table_rewrite_ptr,
    .glTexParameterIiv = epoxy_glTexParameterIiv_dispatch_table_rewrite_ptr,
    .glTexParameterIivEXT = epoxy_glTexParameterIivEXT_dispatch_table_rewrite_ptr,
    .glTexParameterIivOES = epoxy_glTexParameterIivOES_dispatch_table_rewrite_ptr,
    .glTexParameterIuiv = epoxy_glTexParameterIuiv_dispatch_table_rewrite_ptr,
    .glTexParameterIuivEXT = epoxy_glTexParameterIuivEXT_dispatch_table_rewrite_ptr,
    .glTexParameterIuivOES = epoxy_glTexParameterIuivOES_dispatch_table_rewrite_ptr,
    .glTexParameterf = epoxy_glTexParameterf_dispatch_table_rewrite_ptr,
    .glTexParameterfv = epoxy_glTexParameterfv_dispatch_table_rewrite_ptr,
    .glTexParameteri = epoxy_glTexParameteri_dispatch_table_rewrite_ptr,
    .glTexParameteriv = epoxy_glTexParameteriv_dispatch_table_rewrite_ptr,
    .glTexParameterx = epoxy_glTexParameterx_dispatch_table_rewrite_ptr,
    .glTexParameterxOES = epoxy_glTexParameterxOES_dispatch_table_rewrite_ptr,
    .glTexParameterxv = epoxy_glTexParameterxv_dispatch_table_rewrite_ptr,
    .glTexParameterxvOES = epoxy_glTexParameterxvOES_dispatch_table_rewrite_ptr,
    .glTexRenderbufferNV = epoxy_glTexRenderbufferNV_dispatch_table_rewrite_ptr,
    .glTexStorage1D = epoxy_glTexStorage1D_dispatch_table_rewrite_ptr,
    .glTexStorage1DEXT = epoxy_glTexStorage1DEXT_dispatch_table_rewrite_ptr,
    .glTexStorage2D = epoxy_glTexStorage2D_dispatch_table_rewrite_ptr,
    .glTexStorage2DEXT = epoxy_glTexStorage2DEXT_dispatch_table_rewrite_ptr,
    .glTexStorage2DMultisample = epoxy_glTexStorage2DMultisample_dispatch_table_rewrite_ptr,
    .glTexStorage3D = epoxy_glTexStorage3D_dispatch_table_rewrite_ptr,
    .glTexStorage3DEXT = epoxy_glTexStorage3DEXT_dispatch_table_rewrite_ptr,
    .glTexStorage3DMultisample = epoxy_glTexStorage3DMultisample_dispatch_table_rewrite_ptr,
    .glTexStorage3DMultisampleOES = epoxy_glTexStorage3DMultisampleOES_dispatch_table_rewrite_ptr,
    .glTexStorageSparseAMD = epoxy_glTexStorageSparseAMD_dispatch_table_rewrite_ptr,
    .glTexSubImage1D = epoxy_glTexSubImage1D_dispatch_table_rewrite_ptr,
    .glTexSubImage1DEXT = epoxy_glTexSubImage1DEXT_dispatch_table_rewrite_ptr,
    .glTexSubImage2D = epoxy_glTexSubImage2D_dispatch_table_rewrite_ptr,
    .glTexSubImage2DEXT = epoxy_glTexSubImage2DEXT_dispatch_table_rewrite_ptr,
    .glTexSubImage3D = epoxy_glTexSubImage3D_dispatch_table_rewrite_ptr,
    .glTexSubImage3DEXT = epoxy_glTexSubImage3DEXT_dispatch_table_rewrite_ptr,
    .glTexSubImage3DOES = epoxy_glTexSubImage3DOES_dispatch_table_rewrite_ptr,
    .glTexSubImage4DSGIS = epoxy_glTexSubImage4DSGIS_dispatch_table_rewrite_ptr,
    .glTextureBarrier = epoxy_glTextureBarrier_dispatch_table_rewrite_ptr,
    .glTextureBarrierNV = epoxy_glTextureBarrierNV_dispatch_table_rewrite_ptr,
    .glTextureBuffer = epoxy_glTextureBuffer_dispatch_table_rewrite_ptr,
    .glTextureBufferEXT = epoxy_glTextureBufferEXT_dispatch_table_rewrite_ptr,
    .glTextureBufferRange = epoxy_glTextureBufferRange_dispatch_table_rewrite_ptr,
    .glTextureBufferRangeEXT = epoxy_glTextureBufferRangeEXT_dispatch_table_rewrite_ptr,
    .glTextureColorMaskSGIS = epoxy_glTextureColorMaskSGIS_dispatch_table_rewrite_ptr,
    .glTextureImage1DEXT = epoxy_glTextureImage1DEXT_dispatch_table_rewrite_ptr,
    .glTextureImage2DEXT = epoxy_glTextureImage2DEXT_dispatch_table_rewrite_ptr,
    .glTextureImage2DMultisampleCoverageNV = epoxy_glTextureImage2DMultisampleCoverageNV_dispatch_table_rewrite_ptr,
    .glTextureImage2DMultisampleNV = epoxy_glTextureImage2DMultisampleNV_dispatch_table_rewrite_ptr,
    .glTextureImage3DEXT = epoxy_glTextureImage3DEXT_dispatch_table_rewrite_ptr,
    .glTextureImage3DMultisampleCoverageNV = epoxy_glTextureImage3DMultisampleCoverageNV_dispatch_table_rewrite_ptr,
    .glTextureImage3DMultisampleNV = epoxy_glTextureImage3DMultisampleNV_dispatch_table_rewrite_ptr,
    .glTextureLightEXT = epoxy_glTextureLightEXT_dispatch_table_rewrite_ptr,
    .glTextureMaterialEXT = epoxy_glTextureMaterialEXT_dispatch_table_rewrite_ptr,
    .glTextureNormalEXT = epoxy_glTextureNormalEXT_dispatch_table_rewrite_ptr,
    .glTexturePageCommitmentEXT = epoxy_glTexturePageCommitmentEXT_dispatch_table_rewrite_ptr,
    .glTextureParameterIiv = epoxy_glTextureParameterIiv_dispatch_table_rewrite_ptr,
    .glTextureParameterIivEXT = epoxy_glTextureParameterIivEXT_dispatch_table_rewrite_ptr,
    .glTextureParameterIuiv = epoxy_glTextureParameterIuiv_dispatch_table_rewrite_ptr,
    .glTextureParameterIuivEXT = epoxy_glTextureParameterIuivEXT_dispatch_table_rewrite_ptr,
    .glTextureParameterf = epoxy_glTextureParameterf_dispatch_table_rewrite_ptr,
    .glTextureParameterfEXT = epoxy_glTextureParameterfEXT_dispatch_table_rewrite_ptr,
    .glTextureParameterfv = epoxy_glTextureParameterfv_dispatch_table_rewrite_ptr,
    .glTextureParameterfvEXT = epoxy_glTextureParameterfvEXT_dispatch_table_rewrite_ptr,
    .glTextureParameteri = epoxy_glTextureParameteri_dispatch_table_rewrite_ptr,
    .glTextureParameteriEXT = epoxy_glTextureParameteriEXT_dispatch_table_rewrite_ptr,
    .glTextureParameteriv = epoxy_glTextureParameteriv_dispatch_table_rewrite_ptr,
    .glTextureParameterivEXT = epoxy_glTextureParameterivEXT_dispatch_table_rewrite_ptr,
    .glTextureRangeAPPLE = epoxy_glTextureRangeAPPLE_dispatch_table_rewrite_ptr,
    .glTextureRenderbufferEXT = epoxy_glTextureRenderbufferEXT_dispatch_table_rewrite_ptr,
    .glTextureStorage1D = epoxy_glTextureStorage1D_dispatch_table_rewrite_ptr,
    .glTextureStorage1DEXT = epoxy_glTextureStorage1DEXT_dispatch_table_rewrite_ptr,
    .glTextureStorage2D = epoxy_glTextureStorage2D_dispatch_table_rewrite_ptr,
    .glTextureStorage2DEXT = epoxy_glTextureStorage2DEXT_dispatch_table_rewrite_ptr,
    .glTextureStorage2DMultisample = epoxy_glTextureStorage2DMultisample_dispatch_table_rewrite_ptr,
    .glTextureStorage2DMultisampleEXT = epoxy_glTextureStorage2DMultisampleEXT_dispatch_table_rewrite_ptr,
    .glTextureStorage3D = epoxy_glTextureStorage3D_dispatch_table_rewrite_ptr,
    .glTextureStorage3DEXT = epoxy_glTextureStorage3DEXT_dispatch_table_rewrite_ptr,
    .glTextureStorage3DMultisample = epoxy_glTextureStorage3DMultisample_dispatch_table_rewrite_ptr,
    .glTextureStorage3DMultisampleEXT = epoxy_glTextureStorage3DMultisampleEXT_dispatch_table_rewrite_ptr,
    .glTextureStorageSparseAMD = epoxy_glTextureStorageSparseAMD_dispatch_table_rewrite_ptr,
    .glTextureSubImage1D = epoxy_glTextureSubImage1D_dispatch_table_rewrite_ptr,
    .glTextureSubImage1DEXT = epoxy_glTextureSubImage1DEXT_dispatch_table_rewrite_ptr,
    .glTextureSubImage2D = epoxy_glTextureSubImage2D_dispatch_table_rewrite_ptr,
    .glTextureSubImage2DEXT = epoxy_glTextureSubImage2DEXT_dispatch_table_rewrite_ptr,
    .glTextureSubImage3D = epoxy_glTextureSubImage3D_dispatch_table_rewrite_ptr,
    .glTextureSubImage3DEXT = epoxy_glTextureSubImage3DEXT_dispatch_table_rewrite_ptr,
    .glTextureView = epoxy_glTextureView_dispatch_table_rewrite_ptr,
    .glTextureViewEXT = epoxy_glTextureViewEXT_dispatch_table_rewrite_ptr,
    .glTextureViewOES = epoxy_glTextureViewOES_dispatch_table_rewrite_ptr,
    .glTrackMatrixNV = epoxy_glTrackMatrixNV_dispatch_table_rewrite_ptr,
    .glTransformFeedbackAttribsNV = epoxy_glTransformFeedbackAttribsNV_dispatch_table_rewrite_ptr,
    .glTransformFeedbackBufferBase = epoxy_glTransformFeedbackBufferBase_dispatch_table_rewrite_ptr,
    .glTransformFeedbackBufferRange = epoxy_glTransformFeedbackBufferRange_dispatch_table_rewrite_ptr,
    .glTransformFeedbackStreamAttribsNV = epoxy_glTransformFeedbackStreamAttribsNV_dispatch_table_rewrite_ptr,
    .glTransformFeedbackVaryings = epoxy_glTransformFeedbackVaryings_dispatch_table_rewrite_ptr,
    .glTransformFeedbackVaryingsEXT = epoxy_glTransformFeedbackVaryingsEXT_dispatch_table_rewrite_ptr,
    .glTransformFeedbackVaryingsNV = epoxy_glTransformFeedbackVaryingsNV_dispatch_table_rewrite_ptr,
    .glTransformPathNV = epoxy_glTransformPathNV_dispatch_table_rewrite_ptr,
    .glTranslated = epoxy_glTranslated_dispatch_table_rewrite_ptr,
    .glTranslatef = epoxy_glTranslatef_dispatch_table_rewrite_ptr,
    .glTranslatex = epoxy_glTranslatex_dispatch_table_rewrite_ptr,
    .glTranslatexOES = epoxy_glTranslatexOES_dispatch_table_rewrite_ptr,
    .glUniform1d = epoxy_glUniform1d_dispatch_table_rewrite_ptr,
    .glUniform1dv = epoxy_glUniform1dv_dispatch_table_rewrite_ptr,
    .glUniform1f = epoxy_glUniform1f_dispatch_table_rewrite_ptr,
    .glUniform1fARB = epoxy_glUniform1fARB_dispatch_table_rewrite_ptr,
    .glUniform1fv = epoxy_glUniform1fv_dispatch_table_rewrite_ptr,
    .glUniform1fvARB = epoxy_glUniform1fvARB_dispatch_table_rewrite_ptr,
    .glUniform1i = epoxy_glUniform1i_dispatch_table_rewrite_ptr,
    .glUniform1i64ARB = epoxy_glUniform1i64ARB_dispatch_table_rewrite_ptr,
    .glUniform1i64NV = epoxy_glUniform1i64NV_dispatch_table_rewrite_ptr,
    .glUniform1i64vARB = epoxy_glUniform1i64vARB_dispatch_table_rewrite_ptr,
    .glUniform1i64vNV = epoxy_glUniform1i64vNV_dispatch_table_rewrite_ptr,
    .glUniform1iARB = epoxy_glUniform1iARB_dispatch_table_rewrite_ptr,
    .glUniform1iv = epoxy_glUniform1iv_dispatch_table_rewrite_ptr,
    .glUniform1ivARB = epoxy_glUniform1ivARB_dispatch_table_rewrite_ptr,
    .glUniform1ui = epoxy_glUniform1ui_dispatch_table_rewrite_ptr,
    .glUniform1ui64ARB = epoxy_glUniform1ui64ARB_dispatch_table_rewrite_ptr,
    .glUniform1ui64NV = epoxy_glUniform1ui64NV_dispatch_table_rewrite_ptr,
    .glUniform1ui64vARB = epoxy_glUniform1ui64vARB_dispatch_table_rewrite_ptr,
    .glUniform1ui64vNV = epoxy_glUniform1ui64vNV_dispatch_table_rewrite_ptr,
    .glUniform1uiEXT = epoxy_glUniform1uiEXT_dispatch_table_rewrite_ptr,
    .glUniform1uiv = epoxy_glUniform1uiv_dispatch_table_rewrite_ptr,
    .glUniform1uivEXT = epoxy_glUniform1uivEXT_dispatch_table_rewrite_ptr,
    .glUniform2d = epoxy_glUniform2d_dispatch_table_rewrite_ptr,
    .glUniform2dv = epoxy_glUniform2dv_dispatch_table_rewrite_ptr,
    .glUniform2f = epoxy_glUniform2f_dispatch_table_rewrite_ptr,
    .glUniform2fARB = epoxy_glUniform2fARB_dispatch_table_rewrite_ptr,
    .glUniform2fv = epoxy_glUniform2fv_dispatch_table_rewrite_ptr,
    .glUniform2fvARB = epoxy_glUniform2fvARB_dispatch_table_rewrite_ptr,
    .glUniform2i = epoxy_glUniform2i_dispatch_table_rewrite_ptr,
    .glUniform2i64ARB = epoxy_glUniform2i64ARB_dispatch_table_rewrite_ptr,
    .glUniform2i64NV = epoxy_glUniform2i64NV_dispatch_table_rewrite_ptr,
    .glUniform2i64vARB = epoxy_glUniform2i64vARB_dispatch_table_rewrite_ptr,
    .glUniform2i64vNV = epoxy_glUniform2i64vNV_dispatch_table_rewrite_ptr,
    .glUniform2iARB = epoxy_glUniform2iARB_dispatch_table_rewrite_ptr,
    .glUniform2iv = epoxy_glUniform2iv_dispatch_table_rewrite_ptr,
    .glUniform2ivARB = epoxy_glUniform2ivARB_dispatch_table_rewrite_ptr,
    .glUniform2ui = epoxy_glUniform2ui_dispatch_table_rewrite_ptr,
    .glUniform2ui64ARB = epoxy_glUniform2ui64ARB_dispatch_table_rewrite_ptr,
    .glUniform2ui64NV = epoxy_glUniform2ui64NV_dispatch_table_rewrite_ptr,
    .glUniform2ui64vARB = epoxy_glUniform2ui64vARB_dispatch_table_rewrite_ptr,
    .glUniform2ui64vNV = epoxy_glUniform2ui64vNV_dispatch_table_rewrite_ptr,
    .glUniform2uiEXT = epoxy_glUniform2uiEXT_dispatch_table_rewrite_ptr,
    .glUniform2uiv = epoxy_glUniform2uiv_dispatch_table_rewrite_ptr,
    .glUniform2uivEXT = epoxy_glUniform2uivEXT_dispatch_table_rewrite_ptr,
    .glUniform3d = epoxy_glUniform3d_dispatch_table_rewrite_ptr,
    .glUniform3dv = epoxy_glUniform3dv_dispatch_table_rewrite_ptr,
    .glUniform3f = epoxy_glUniform3f_dispatch_table_rewrite_ptr,
    .glUniform3fARB = epoxy_glUniform3fARB_dispatch_table_rewrite_ptr,
    .glUniform3fv = epoxy_glUniform3fv_dispatch_table_rewrite_ptr,
    .glUniform3fvARB = epoxy_glUniform3fvARB_dispatch_table_rewrite_ptr,
    .glUniform3i = epoxy_glUniform3i_dispatch_table_rewrite_ptr,
    .glUniform3i64ARB = epoxy_glUniform3i64ARB_dispatch_table_rewrite_ptr,
    .glUniform3i64NV = epoxy_glUniform3i64NV_dispatch_table_rewrite_ptr,
    .glUniform3i64vARB = epoxy_glUniform3i64vARB_dispatch_table_rewrite_ptr,
    .glUniform3i64vNV = epoxy_glUniform3i64vNV_dispatch_table_rewrite_ptr,
    .glUniform3iARB = epoxy_glUniform3iARB_dispatch_table_rewrite_ptr,
    .glUniform3iv = epoxy_glUniform3iv_dispatch_table_rewrite_ptr,
    .glUniform3ivARB = epoxy_glUniform3ivARB_dispatch_table_rewrite_ptr,
    .glUniform3ui = epoxy_glUniform3ui_dispatch_table_rewrite_ptr,
    .glUniform3ui64ARB = epoxy_glUniform3ui64ARB_dispatch_table_rewrite_ptr,
    .glUniform3ui64NV = epoxy_glUniform3ui64NV_dispatch_table_rewrite_ptr,
    .glUniform3ui64vARB = epoxy_glUniform3ui64vARB_dispatch_table_rewrite_ptr,
    .glUniform3ui64vNV = epoxy_glUniform3ui64vNV_dispatch_table_rewrite_ptr,
    .glUniform3uiEXT = epoxy_glUniform3uiEXT_dispatch_table_rewrite_ptr,
    .glUniform3uiv = epoxy_glUniform3uiv_dispatch_table_rewrite_ptr,
    .glUniform3uivEXT = epoxy_glUniform3uivEXT_dispatch_table_rewrite_ptr,
    .glUniform4d = epoxy_glUniform4d_dispatch_table_rewrite_ptr,
    .glUniform4dv = epoxy_glUniform4dv_dispatch_table_rewrite_ptr,
    .glUniform4f = epoxy_glUniform4f_dispatch_table_rewrite_ptr,
    .glUniform4fARB = epoxy_glUniform4fARB_dispatch_table_rewrite_ptr,
    .glUniform4fv = epoxy_glUniform4fv_dispatch_table_rewrite_ptr,
    .glUniform4fvARB = epoxy_glUniform4fvARB_dispatch_table_rewrite_ptr,
    .glUniform4i = epoxy_glUniform4i_dispatch_table_rewrite_ptr,
    .glUniform4i64ARB = epoxy_glUniform4i64ARB_dispatch_table_rewrite_ptr,
    .glUniform4i64NV = epoxy_glUniform4i64NV_dispatch_table_rewrite_ptr,
    .glUniform4i64vARB = epoxy_glUniform4i64vARB_dispatch_table_rewrite_ptr,
    .glUniform4i64vNV = epoxy_glUniform4i64vNV_dispatch_table_rewrite_ptr,
    .glUniform4iARB = epoxy_glUniform4iARB_dispatch_table_rewrite_ptr,
    .glUniform4iv = epoxy_glUniform4iv_dispatch_table_rewrite_ptr,
    .glUniform4ivARB = epoxy_glUniform4ivARB_dispatch_table_rewrite_ptr,
    .glUniform4ui = epoxy_glUniform4ui_dispatch_table_rewrite_ptr,
    .glUniform4ui64ARB = epoxy_glUniform4ui64ARB_dispatch_table_rewrite_ptr,
    .glUniform4ui64NV = epoxy_glUniform4ui64NV_dispatch_table_rewrite_ptr,
    .glUniform4ui64vARB = epoxy_glUniform4ui64vARB_dispatch_table_rewrite_ptr,
    .glUniform4ui64vNV = epoxy_glUniform4ui64vNV_dispatch_table_rewrite_ptr,
    .glUniform4uiEXT = epoxy_glUniform4uiEXT_dispatch_table_rewrite_ptr,
    .glUniform4uiv = epoxy_glUniform4uiv_dispatch_table_rewrite_ptr,
    .glUniform4uivEXT = epoxy_glUniform4uivEXT_dispatch_table_rewrite_ptr,
    .glUniformBlockBinding = epoxy_glUniformBlockBinding_dispatch_table_rewrite_ptr,
    .glUniformBufferEXT = epoxy_glUniformBufferEXT_dispatch_table_rewrite_ptr,
    .glUniformHandleui64ARB = epoxy_glUniformHandleui64ARB_dispatch_table_rewrite_ptr,
    .glUniformHandleui64NV = epoxy_glUniformHandleui64NV_dispatch_table_rewrite_ptr,
    .glUniformHandleui64vARB = epoxy_glUniformHandleui64vARB_dispatch_table_rewrite_ptr,
    .glUniformHandleui64vNV = epoxy_glUniformHandleui64vNV_dispatch_table_rewrite_ptr,
    .glUniformMatrix2dv = epoxy_glUniformMatrix2dv_dispatch_table_rewrite_ptr,
    .glUniformMatrix2fv = epoxy_glUniformMatrix2fv_dispatch_table_rewrite_ptr,
    .glUniformMatrix2fvARB = epoxy_glUniformMatrix2fvARB_dispatch_table_rewrite_ptr,
    .glUniformMatrix2x3dv = epoxy_glUniformMatrix2x3dv_dispatch_table_rewrite_ptr,
    .glUniformMatrix2x3fv = epoxy_glUniformMatrix2x3fv_dispatch_table_rewrite_ptr,
    .glUniformMatrix2x3fvNV = epoxy_glUniformMatrix2x3fvNV_dispatch_table_rewrite_ptr,
    .glUniformMatrix2x4dv = epoxy_glUniformMatrix2x4dv_dispatch_table_rewrite_ptr,
    .glUniformMatrix2x4fv = epoxy_glUniformMatrix2x4fv_dispatch_table_rewrite_ptr,
    .glUniformMatrix2x4fvNV = epoxy_glUniformMatrix2x4fvNV_dispatch_table_rewrite_ptr,
    .glUniformMatrix3dv = epoxy_glUniformMatrix3dv_dispatch_table_rewrite_ptr,
    .glUniformMatrix3fv = epoxy_glUniformMatrix3fv_dispatch_table_rewrite_ptr,
    .glUniformMatrix3fvARB = epoxy_glUniformMatrix3fvARB_dispatch_table_rewrite_ptr,
    .glUniformMatrix3x2dv = epoxy_glUniformMatrix3x2dv_dispatch_table_rewrite_ptr,
    .glUniformMatrix3x2fv = epoxy_glUniformMatrix3x2fv_dispatch_table_rewrite_ptr,
    .glUniformMatrix3x2fvNV = epoxy_glUniformMatrix3x2fvNV_dispatch_table_rewrite_ptr,
    .glUniformMatrix3x4dv = epoxy_glUniformMatrix3x4dv_dispatch_table_rewrite_ptr,
    .glUniformMatrix3x4fv = epoxy_glUniformMatrix3x4fv_dispatch_table_rewrite_ptr,
    .glUniformMatrix3x4fvNV = epoxy_glUniformMatrix3x4fvNV_dispatch_table_rewrite_ptr,
    .glUniformMatrix4dv = epoxy_glUniformMatrix4dv_dispatch_table_rewrite_ptr,
    .glUniformMatrix4fv = epoxy_glUniformMatrix4fv_dispatch_table_rewrite_ptr,
    .glUniformMatrix4fvARB = epoxy_glUniformMatrix4fvARB_dispatch_table_rewrite_ptr,
    .glUniformMatrix4x2dv = epoxy_glUniformMatrix4x2dv_dispatch_table_rewrite_ptr,
    .glUniformMatrix4x2fv = epoxy_glUniformMatrix4x2fv_dispatch_table_rewrite_ptr,
    .glUniformMatrix4x2fvNV = epoxy_glUniformMatrix4x2fvNV_dispatch_table_rewrite_ptr,
    .glUniformMatrix4x3dv = epoxy_glUniformMatrix4x3dv_dispatch_table_rewrite_ptr,
    .glUniformMatrix4x3fv = epoxy_glUniformMatrix4x3fv_dispatch_table_rewrite_ptr,
    .glUniformMatrix4x3fvNV = epoxy_glUniformMatrix4x3fvNV_dispatch_table_rewrite_ptr,
    .glUniformSubroutinesuiv = epoxy_glUniformSubroutinesuiv_dispatch_table_rewrite_ptr,
    .glUniformui64NV = epoxy_glUniformui64NV_dispatch_table_rewrite_ptr,
    .glUniformui64vNV = epoxy_glUniformui64vNV_dispatch_table_rewrite_ptr,
    .glUnlockArraysEXT = epoxy_glUnlockArraysEXT_dispatch_table_rewrite_ptr,
    .glUnmapBuffer = epoxy_glUnmapBuffer_dispatch_table_rewrite_ptr,
    .glUnmapBufferARB = epoxy_glUnmapBufferARB_dispatch_table_rewrite_ptr,
    .glUnmapBufferOES = epoxy_glUnmapBufferOES_dispatch_table_rewrite_ptr,
    .glUnmapNamedBuffer = epoxy_glUnmapNamedBuffer_dispatch_table_rewrite_ptr,
    .glUnmapNamedBufferEXT = epoxy_glUnmapNamedBufferEXT_dispatch_table_rewrite_ptr,
    .glUnmapObjectBufferATI = epoxy_glUnmapObjectBufferATI_dispatch_table_rewrite_ptr,
    .glUnmapTexture2DINTEL = epoxy_glUnmapTexture2DINTEL_dispatch_table_rewrite_ptr,
    .glUpdateObjectBufferATI = epoxy_glUpdateObjectBufferATI_dispatch_table_rewrite_ptr,
    .glUseProgram = epoxy_glUseProgram_dispatch_table_rewrite_ptr,
    .glUseProgramObjectARB = epoxy_glUseProgramObjectARB_dispatch_table_rewrite_ptr,
    .glUseProgramStages = epoxy_glUseProgramStages_dispatch_table_rewrite_ptr,
    .glUseProgramStagesEXT = epoxy_glUseProgramStagesEXT_dispatch_table_rewrite_ptr,
    .glUseShaderProgramEXT = epoxy_glUseShaderProgramEXT_dispatch_table_rewrite_ptr,
    .glVDPAUFiniNV = epoxy_glVDPAUFiniNV_dispatch_table_rewrite_ptr,
    .glVDPAUGetSurfaceivNV = epoxy_glVDPAUGetSurfaceivNV_dispatch_table_rewrite_ptr,
    .glVDPAUInitNV = epoxy_glVDPAUInitNV_dispatch_table_rewrite_ptr,
    .glVDPAUIsSurfaceNV = epoxy_glVDPAUIsSurfaceNV_dispatch_table_rewrite_ptr,
    .glVDPAUMapSurfacesNV = epoxy_glVDPAUMapSurfacesNV_dispatch_table_rewrite_ptr,
    .glVDPAURegisterOutputSurfaceNV = epoxy_glVDPAURegisterOutputSurfaceNV_dispatch_table_rewrite_ptr,
    .glVDPAURegisterVideoSurfaceNV = epoxy_glVDPAURegisterVideoSurfaceNV_dispatch_table_rewrite_ptr,
    .glVDPAUSurfaceAccessNV = epoxy_glVDPAUSurfaceAccessNV_dispatch_table_rewrite_ptr,
    .glVDPAUUnmapSurfacesNV = epoxy_glVDPAUUnmapSurfacesNV_dispatch_table_rewrite_ptr,
    .glVDPAUUnregisterSurfaceNV = epoxy_glVDPAUUnregisterSurfaceNV_dispatch_table_rewrite_ptr,
    .glValidateProgram = epoxy_glValidateProgram_dispatch_table_rewrite_ptr,
    .glValidateProgramARB = epoxy_glValidateProgramARB_dispatch_table_rewrite_ptr,
    .glValidateProgramPipeline = epoxy_glValidateProgramPipeline_dispatch_table_rewrite_ptr,
    .glValidateProgramPipelineEXT = epoxy_glValidateProgramPipelineEXT_dispatch_table_rewrite_ptr,
    .glVariantArrayObjectATI = epoxy_glVariantArrayObjectATI_dispatch_table_rewrite_ptr,
    .glVariantPointerEXT = epoxy_glVariantPointerEXT_dispatch_table_rewrite_ptr,
    .glVariantbvEXT = epoxy_glVariantbvEXT_dispatch_table_rewrite_ptr,
    .glVariantdvEXT = epoxy_glVariantdvEXT_dispatch_table_rewrite_ptr,
    .glVariantfvEXT = epoxy_glVariantfvEXT_dispatch_table_rewrite_ptr,
    .glVariantivEXT = epoxy_glVariantivEXT_dispatch_table_rewrite_ptr,
    .glVariantsvEXT = epoxy_glVariantsvEXT_dispatch_table_rewrite_ptr,
    .glVariantubvEXT = epoxy_glVariantubvEXT_dispatch_table_rewrite_ptr,
    .glVariantuivEXT = epoxy_glVariantuivEXT_dispatch_table_rewrite_ptr,
    .glVariantusvEXT = epoxy_glVariantusvEXT_dispatch_table_rewrite_ptr,
    .glVertex2bOES = epoxy_glVertex2bOES_dispatch_table_rewrite_ptr,
    .glVertex2bvOES = epoxy_glVertex2bvOES_dispatch_table_rewrite_ptr,
    .glVertex2d = epoxy_glVertex2d_dispatch_table_rewrite_ptr,
    .glVertex2dv = epoxy_glVertex2dv_dispatch_table_rewrite_ptr,
    .glVertex2f = epoxy_glVertex2f_dispatch_table_rewrite_ptr,
    .glVertex2fv = epoxy_glVertex2fv_dispatch_table_rewrite_ptr,
    .glVertex2hNV = epoxy_glVertex2hNV_dispatch_table_rewrite_ptr,
    .glVertex2hvNV = epoxy_glVertex2hvNV_dispatch_table_rewrite_ptr,
    .glVertex2i = epoxy_glVertex2i_dispatch_table_rewrite_ptr,
    .glVertex2iv = epoxy_glVertex2iv_dispatch_table_rewrite_ptr,
    .glVertex2s = epoxy_glVertex2s_dispatch_table_rewrite_ptr,
    .glVertex2sv = epoxy_glVertex2sv_dispatch_table_rewrite_ptr,
    .glVertex2xOES = epoxy_glVertex2xOES_dispatch_table_rewrite_ptr,
    .glVertex2xvOES = epoxy_glVertex2xvOES_dispatch_table_rewrite_ptr,
    .glVertex3bOES = epoxy_glVertex3bOES_dispatch_table_rewrite_ptr,
    .glVertex3bvOES = epoxy_glVertex3bvOES_dispatch_table_rewrite_ptr,
    .glVertex3d = epoxy_glVertex3d_dispatch_table_rewrite_ptr,
    .glVertex3dv = epoxy_glVertex3dv_dispatch_table_rewrite_ptr,
    .glVertex3f = epoxy_glVertex3f_dispatch_table_rewrite_ptr,
    .glVertex3fv = epoxy_glVertex3fv_dispatch_table_rewrite_ptr,
    .glVertex3hNV = epoxy_glVertex3hNV_dispatch_table_rewrite_ptr,
    .glVertex3hvNV = epoxy_glVertex3hvNV_dispatch_table_rewrite_ptr,
    .glVertex3i = epoxy_glVertex3i_dispatch_table_rewrite_ptr,
    .glVertex3iv = epoxy_glVertex3iv_dispatch_table_rewrite_ptr,
    .glVertex3s = epoxy_glVertex3s_dispatch_table_rewrite_ptr,
    .glVertex3sv = epoxy_glVertex3sv_dispatch_table_rewrite_ptr,
    .glVertex3xOES = epoxy_glVertex3xOES_dispatch_table_rewrite_ptr,
    .glVertex3xvOES = epoxy_glVertex3xvOES_dispatch_table_rewrite_ptr,
    .glVertex4bOES = epoxy_glVertex4bOES_dispatch_table_rewrite_ptr,
    .glVertex4bvOES = epoxy_glVertex4bvOES_dispatch_table_rewrite_ptr,
    .glVertex4d = epoxy_glVertex4d_dispatch_table_rewrite_ptr,
    .glVertex4dv = epoxy_glVertex4dv_dispatch_table_rewrite_ptr,
    .glVertex4f = epoxy_glVertex4f_dispatch_table_rewrite_ptr,
    .glVertex4fv = epoxy_glVertex4fv_dispatch_table_rewrite_ptr,
    .glVertex4hNV = epoxy_glVertex4hNV_dispatch_table_rewrite_ptr,
    .glVertex4hvNV = epoxy_glVertex4hvNV_dispatch_table_rewrite_ptr,
    .glVertex4i = epoxy_glVertex4i_dispatch_table_rewrite_ptr,
    .glVertex4iv = epoxy_glVertex4iv_dispatch_table_rewrite_ptr,
    .glVertex4s = epoxy_glVertex4s_dispatch_table_rewrite_ptr,
    .glVertex4sv = epoxy_glVertex4sv_dispatch_table_rewrite_ptr,
    .glVertex4xOES = epoxy_glVertex4xOES_dispatch_table_rewrite_ptr,
    .glVertex4xvOES = epoxy_glVertex4xvOES_dispatch_table_rewrite_ptr,
    .glVertexArrayAttribBinding = epoxy_glVertexArrayAttribBinding_dispatch_table_rewrite_ptr,
    .glVertexArrayAttribFormat = epoxy_glVertexArrayAttribFormat_dispatch_table_rewrite_ptr,
    .glVertexArrayAttribIFormat = epoxy_glVertexArrayAttribIFormat_dispatch_table_rewrite_ptr,
    .glVertexArrayAttribLFormat = epoxy_glVertexArrayAttribLFormat_dispatch_table_rewrite_ptr,
    .glVertexArrayBindVertexBufferEXT = epoxy_glVertexArrayBindVertexBufferEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayBindingDivisor = epoxy_glVertexArrayBindingDivisor_dispatch_table_rewrite_ptr,
    .glVertexArrayColorOffsetEXT = epoxy_glVertexArrayColorOffsetEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayEdgeFlagOffsetEXT = epoxy_glVertexArrayEdgeFlagOffsetEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayElementBuffer = epoxy_glVertexArrayElementBuffer_dispatch_table_rewrite_ptr,
    .glVertexArrayFogCoordOffsetEXT = epoxy_glVertexArrayFogCoordOffsetEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayIndexOffsetEXT = epoxy_glVertexArrayIndexOffsetEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayMultiTexCoordOffsetEXT = epoxy_glVertexArrayMultiTexCoordOffsetEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayNormalOffsetEXT = epoxy_glVertexArrayNormalOffsetEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayParameteriAPPLE = epoxy_glVertexArrayParameteriAPPLE_dispatch_table_rewrite_ptr,
    .glVertexArrayRangeAPPLE = epoxy_glVertexArrayRangeAPPLE_dispatch_table_rewrite_ptr,
    .glVertexArrayRangeNV = epoxy_glVertexArrayRangeNV_dispatch_table_rewrite_ptr,
    .glVertexArraySecondaryColorOffsetEXT = epoxy_glVertexArraySecondaryColorOffsetEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayTexCoordOffsetEXT = epoxy_glVertexArrayTexCoordOffsetEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayVertexAttribBindingEXT = epoxy_glVertexArrayVertexAttribBindingEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayVertexAttribDivisorEXT = epoxy_glVertexArrayVertexAttribDivisorEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayVertexAttribFormatEXT = epoxy_glVertexArrayVertexAttribFormatEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayVertexAttribIFormatEXT = epoxy_glVertexArrayVertexAttribIFormatEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayVertexAttribIOffsetEXT = epoxy_glVertexArrayVertexAttribIOffsetEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayVertexAttribLFormatEXT = epoxy_glVertexArrayVertexAttribLFormatEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayVertexAttribLOffsetEXT = epoxy_glVertexArrayVertexAttribLOffsetEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayVertexAttribOffsetEXT = epoxy_glVertexArrayVertexAttribOffsetEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayVertexBindingDivisorEXT = epoxy_glVertexArrayVertexBindingDivisorEXT_dispatch_table_rewrite_ptr,
    .glVertexArrayVertexBuffer = epoxy_glVertexArrayVertexBuffer_dispatch_table_rewrite_ptr,
    .glVertexArrayVertexBuffers = epoxy_glVertexArrayVertexBuffers_dispatch_table_rewrite_ptr,
    .glVertexArrayVertexOffsetEXT = epoxy_glVertexArrayVertexOffsetEXT_dispatch_table_rewrite_ptr,
    .glVertexAttrib1d = epoxy_glVertexAttrib1d_dispatch_table_rewrite_ptr,
    .glVertexAttrib1dARB = epoxy_glVertexAttrib1dARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib1dNV = epoxy_glVertexAttrib1dNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib1dv = epoxy_glVertexAttrib1dv_dispatch_table_rewrite_ptr,
    .glVertexAttrib1dvARB = epoxy_glVertexAttrib1dvARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib1dvNV = epoxy_glVertexAttrib1dvNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib1f = epoxy_glVertexAttrib1f_dispatch_table_rewrite_ptr,
    .glVertexAttrib1fARB = epoxy_glVertexAttrib1fARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib1fNV = epoxy_glVertexAttrib1fNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib1fv = epoxy_glVertexAttrib1fv_dispatch_table_rewrite_ptr,
    .glVertexAttrib1fvARB = epoxy_glVertexAttrib1fvARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib1fvNV = epoxy_glVertexAttrib1fvNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib1hNV = epoxy_glVertexAttrib1hNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib1hvNV = epoxy_glVertexAttrib1hvNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib1s = epoxy_glVertexAttrib1s_dispatch_table_rewrite_ptr,
    .glVertexAttrib1sARB = epoxy_glVertexAttrib1sARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib1sNV = epoxy_glVertexAttrib1sNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib1sv = epoxy_glVertexAttrib1sv_dispatch_table_rewrite_ptr,
    .glVertexAttrib1svARB = epoxy_glVertexAttrib1svARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib1svNV = epoxy_glVertexAttrib1svNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib2d = epoxy_glVertexAttrib2d_dispatch_table_rewrite_ptr,
    .glVertexAttrib2dARB = epoxy_glVertexAttrib2dARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib2dNV = epoxy_glVertexAttrib2dNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib2dv = epoxy_glVertexAttrib2dv_dispatch_table_rewrite_ptr,
    .glVertexAttrib2dvARB = epoxy_glVertexAttrib2dvARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib2dvNV = epoxy_glVertexAttrib2dvNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib2f = epoxy_glVertexAttrib2f_dispatch_table_rewrite_ptr,
    .glVertexAttrib2fARB = epoxy_glVertexAttrib2fARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib2fNV = epoxy_glVertexAttrib2fNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib2fv = epoxy_glVertexAttrib2fv_dispatch_table_rewrite_ptr,
    .glVertexAttrib2fvARB = epoxy_glVertexAttrib2fvARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib2fvNV = epoxy_glVertexAttrib2fvNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib2hNV = epoxy_glVertexAttrib2hNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib2hvNV = epoxy_glVertexAttrib2hvNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib2s = epoxy_glVertexAttrib2s_dispatch_table_rewrite_ptr,
    .glVertexAttrib2sARB = epoxy_glVertexAttrib2sARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib2sNV = epoxy_glVertexAttrib2sNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib2sv = epoxy_glVertexAttrib2sv_dispatch_table_rewrite_ptr,
    .glVertexAttrib2svARB = epoxy_glVertexAttrib2svARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib2svNV = epoxy_glVertexAttrib2svNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib3d = epoxy_glVertexAttrib3d_dispatch_table_rewrite_ptr,
    .glVertexAttrib3dARB = epoxy_glVertexAttrib3dARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib3dNV = epoxy_glVertexAttrib3dNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib3dv = epoxy_glVertexAttrib3dv_dispatch_table_rewrite_ptr,
    .glVertexAttrib3dvARB = epoxy_glVertexAttrib3dvARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib3dvNV = epoxy_glVertexAttrib3dvNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib3f = epoxy_glVertexAttrib3f_dispatch_table_rewrite_ptr,
    .glVertexAttrib3fARB = epoxy_glVertexAttrib3fARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib3fNV = epoxy_glVertexAttrib3fNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib3fv = epoxy_glVertexAttrib3fv_dispatch_table_rewrite_ptr,
    .glVertexAttrib3fvARB = epoxy_glVertexAttrib3fvARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib3fvNV = epoxy_glVertexAttrib3fvNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib3hNV = epoxy_glVertexAttrib3hNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib3hvNV = epoxy_glVertexAttrib3hvNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib3s = epoxy_glVertexAttrib3s_dispatch_table_rewrite_ptr,
    .glVertexAttrib3sARB = epoxy_glVertexAttrib3sARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib3sNV = epoxy_glVertexAttrib3sNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib3sv = epoxy_glVertexAttrib3sv_dispatch_table_rewrite_ptr,
    .glVertexAttrib3svARB = epoxy_glVertexAttrib3svARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib3svNV = epoxy_glVertexAttrib3svNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib4Nbv = epoxy_glVertexAttrib4Nbv_dispatch_table_rewrite_ptr,
    .glVertexAttrib4NbvARB = epoxy_glVertexAttrib4NbvARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4Niv = epoxy_glVertexAttrib4Niv_dispatch_table_rewrite_ptr,
    .glVertexAttrib4NivARB = epoxy_glVertexAttrib4NivARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4Nsv = epoxy_glVertexAttrib4Nsv_dispatch_table_rewrite_ptr,
    .glVertexAttrib4NsvARB = epoxy_glVertexAttrib4NsvARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4Nub = epoxy_glVertexAttrib4Nub_dispatch_table_rewrite_ptr,
    .glVertexAttrib4NubARB = epoxy_glVertexAttrib4NubARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4Nubv = epoxy_glVertexAttrib4Nubv_dispatch_table_rewrite_ptr,
    .glVertexAttrib4NubvARB = epoxy_glVertexAttrib4NubvARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4Nuiv = epoxy_glVertexAttrib4Nuiv_dispatch_table_rewrite_ptr,
    .glVertexAttrib4NuivARB = epoxy_glVertexAttrib4NuivARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4Nusv = epoxy_glVertexAttrib4Nusv_dispatch_table_rewrite_ptr,
    .glVertexAttrib4NusvARB = epoxy_glVertexAttrib4NusvARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4bv = epoxy_glVertexAttrib4bv_dispatch_table_rewrite_ptr,
    .glVertexAttrib4bvARB = epoxy_glVertexAttrib4bvARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4d = epoxy_glVertexAttrib4d_dispatch_table_rewrite_ptr,
    .glVertexAttrib4dARB = epoxy_glVertexAttrib4dARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4dNV = epoxy_glVertexAttrib4dNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib4dv = epoxy_glVertexAttrib4dv_dispatch_table_rewrite_ptr,
    .glVertexAttrib4dvARB = epoxy_glVertexAttrib4dvARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4dvNV = epoxy_glVertexAttrib4dvNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib4f = epoxy_glVertexAttrib4f_dispatch_table_rewrite_ptr,
    .glVertexAttrib4fARB = epoxy_glVertexAttrib4fARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4fNV = epoxy_glVertexAttrib4fNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib4fv = epoxy_glVertexAttrib4fv_dispatch_table_rewrite_ptr,
    .glVertexAttrib4fvARB = epoxy_glVertexAttrib4fvARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4fvNV = epoxy_glVertexAttrib4fvNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib4hNV = epoxy_glVertexAttrib4hNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib4hvNV = epoxy_glVertexAttrib4hvNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib4iv = epoxy_glVertexAttrib4iv_dispatch_table_rewrite_ptr,
    .glVertexAttrib4ivARB = epoxy_glVertexAttrib4ivARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4s = epoxy_glVertexAttrib4s_dispatch_table_rewrite_ptr,
    .glVertexAttrib4sARB = epoxy_glVertexAttrib4sARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4sNV = epoxy_glVertexAttrib4sNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib4sv = epoxy_glVertexAttrib4sv_dispatch_table_rewrite_ptr,
    .glVertexAttrib4svARB = epoxy_glVertexAttrib4svARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4svNV = epoxy_glVertexAttrib4svNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib4ubNV = epoxy_glVertexAttrib4ubNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib4ubv = epoxy_glVertexAttrib4ubv_dispatch_table_rewrite_ptr,
    .glVertexAttrib4ubvARB = epoxy_glVertexAttrib4ubvARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4ubvNV = epoxy_glVertexAttrib4ubvNV_dispatch_table_rewrite_ptr,
    .glVertexAttrib4uiv = epoxy_glVertexAttrib4uiv_dispatch_table_rewrite_ptr,
    .glVertexAttrib4uivARB = epoxy_glVertexAttrib4uivARB_dispatch_table_rewrite_ptr,
    .glVertexAttrib4usv = epoxy_glVertexAttrib4usv_dispatch_table_rewrite_ptr,
    .glVertexAttrib4usvARB = epoxy_glVertexAttrib4usvARB_dispatch_table_rewrite_ptr,
    .glVertexAttribArrayObjectATI = epoxy_glVertexAttribArrayObjectATI_dispatch_table_rewrite_ptr,
    .glVertexAttribBinding = epoxy_glVertexAttribBinding_dispatch_table_rewrite_ptr,
    .glVertexAttribDivisor = epoxy_glVertexAttribDivisor_dispatch_table_rewrite_ptr,
    .glVertexAttribDivisorANGLE = epoxy_glVertexAttribDivisorANGLE_dispatch_table_rewrite_ptr,
    .glVertexAttribDivisorARB = epoxy_glVertexAttribDivisorARB_dispatch_table_rewrite_ptr,
    .glVertexAttribDivisorEXT = epoxy_glVertexAttribDivisorEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribDivisorNV = epoxy_glVertexAttribDivisorNV_dispatch_table_rewrite_ptr,
    .glVertexAttribFormat = epoxy_glVertexAttribFormat_dispatch_table_rewrite_ptr,
    .glVertexAttribFormatNV = epoxy_glVertexAttribFormatNV_dispatch_table_rewrite_ptr,
    .glVertexAttribI1i = epoxy_glVertexAttribI1i_dispatch_table_rewrite_ptr,
    .glVertexAttribI1iEXT = epoxy_glVertexAttribI1iEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI1iv = epoxy_glVertexAttribI1iv_dispatch_table_rewrite_ptr,
    .glVertexAttribI1ivEXT = epoxy_glVertexAttribI1ivEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI1ui = epoxy_glVertexAttribI1ui_dispatch_table_rewrite_ptr,
    .glVertexAttribI1uiEXT = epoxy_glVertexAttribI1uiEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI1uiv = epoxy_glVertexAttribI1uiv_dispatch_table_rewrite_ptr,
    .glVertexAttribI1uivEXT = epoxy_glVertexAttribI1uivEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI2i = epoxy_glVertexAttribI2i_dispatch_table_rewrite_ptr,
    .glVertexAttribI2iEXT = epoxy_glVertexAttribI2iEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI2iv = epoxy_glVertexAttribI2iv_dispatch_table_rewrite_ptr,
    .glVertexAttribI2ivEXT = epoxy_glVertexAttribI2ivEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI2ui = epoxy_glVertexAttribI2ui_dispatch_table_rewrite_ptr,
    .glVertexAttribI2uiEXT = epoxy_glVertexAttribI2uiEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI2uiv = epoxy_glVertexAttribI2uiv_dispatch_table_rewrite_ptr,
    .glVertexAttribI2uivEXT = epoxy_glVertexAttribI2uivEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI3i = epoxy_glVertexAttribI3i_dispatch_table_rewrite_ptr,
    .glVertexAttribI3iEXT = epoxy_glVertexAttribI3iEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI3iv = epoxy_glVertexAttribI3iv_dispatch_table_rewrite_ptr,
    .glVertexAttribI3ivEXT = epoxy_glVertexAttribI3ivEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI3ui = epoxy_glVertexAttribI3ui_dispatch_table_rewrite_ptr,
    .glVertexAttribI3uiEXT = epoxy_glVertexAttribI3uiEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI3uiv = epoxy_glVertexAttribI3uiv_dispatch_table_rewrite_ptr,
    .glVertexAttribI3uivEXT = epoxy_glVertexAttribI3uivEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI4bv = epoxy_glVertexAttribI4bv_dispatch_table_rewrite_ptr,
    .glVertexAttribI4bvEXT = epoxy_glVertexAttribI4bvEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI4i = epoxy_glVertexAttribI4i_dispatch_table_rewrite_ptr,
    .glVertexAttribI4iEXT = epoxy_glVertexAttribI4iEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI4iv = epoxy_glVertexAttribI4iv_dispatch_table_rewrite_ptr,
    .glVertexAttribI4ivEXT = epoxy_glVertexAttribI4ivEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI4sv = epoxy_glVertexAttribI4sv_dispatch_table_rewrite_ptr,
    .glVertexAttribI4svEXT = epoxy_glVertexAttribI4svEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI4ubv = epoxy_glVertexAttribI4ubv_dispatch_table_rewrite_ptr,
    .glVertexAttribI4ubvEXT = epoxy_glVertexAttribI4ubvEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI4ui = epoxy_glVertexAttribI4ui_dispatch_table_rewrite_ptr,
    .glVertexAttribI4uiEXT = epoxy_glVertexAttribI4uiEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI4uiv = epoxy_glVertexAttribI4uiv_dispatch_table_rewrite_ptr,
    .glVertexAttribI4uivEXT = epoxy_glVertexAttribI4uivEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribI4usv = epoxy_glVertexAttribI4usv_dispatch_table_rewrite_ptr,
    .glVertexAttribI4usvEXT = epoxy_glVertexAttribI4usvEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribIFormat = epoxy_glVertexAttribIFormat_dispatch_table_rewrite_ptr,
    .glVertexAttribIFormatNV = epoxy_glVertexAttribIFormatNV_dispatch_table_rewrite_ptr,
    .glVertexAttribIPointer = epoxy_glVertexAttribIPointer_dispatch_table_rewrite_ptr,
    .glVertexAttribIPointerEXT = epoxy_glVertexAttribIPointerEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribL1d = epoxy_glVertexAttribL1d_dispatch_table_rewrite_ptr,
    .glVertexAttribL1dEXT = epoxy_glVertexAttribL1dEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribL1dv = epoxy_glVertexAttribL1dv_dispatch_table_rewrite_ptr,
    .glVertexAttribL1dvEXT = epoxy_glVertexAttribL1dvEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribL1i64NV = epoxy_glVertexAttribL1i64NV_dispatch_table_rewrite_ptr,
    .glVertexAttribL1i64vNV = epoxy_glVertexAttribL1i64vNV_dispatch_table_rewrite_ptr,
    .glVertexAttribL1ui64ARB = epoxy_glVertexAttribL1ui64ARB_dispatch_table_rewrite_ptr,
    .glVertexAttribL1ui64NV = epoxy_glVertexAttribL1ui64NV_dispatch_table_rewrite_ptr,
    .glVertexAttribL1ui64vARB = epoxy_glVertexAttribL1ui64vARB_dispatch_table_rewrite_ptr,
    .glVertexAttribL1ui64vNV = epoxy_glVertexAttribL1ui64vNV_dispatch_table_rewrite_ptr,
    .glVertexAttribL2d = epoxy_glVertexAttribL2d_dispatch_table_rewrite_ptr,
    .glVertexAttribL2dEXT = epoxy_glVertexAttribL2dEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribL2dv = epoxy_glVertexAttribL2dv_dispatch_table_rewrite_ptr,
    .glVertexAttribL2dvEXT = epoxy_glVertexAttribL2dvEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribL2i64NV = epoxy_glVertexAttribL2i64NV_dispatch_table_rewrite_ptr,
    .glVertexAttribL2i64vNV = epoxy_glVertexAttribL2i64vNV_dispatch_table_rewrite_ptr,
    .glVertexAttribL2ui64NV = epoxy_glVertexAttribL2ui64NV_dispatch_table_rewrite_ptr,
    .glVertexAttribL2ui64vNV = epoxy_glVertexAttribL2ui64vNV_dispatch_table_rewrite_ptr,
    .glVertexAttribL3d = epoxy_glVertexAttribL3d_dispatch_table_rewrite_ptr,
    .glVertexAttribL3dEXT = epoxy_glVertexAttribL3dEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribL3dv = epoxy_glVertexAttribL3dv_dispatch_table_rewrite_ptr,
    .glVertexAttribL3dvEXT = epoxy_glVertexAttribL3dvEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribL3i64NV = epoxy_glVertexAttribL3i64NV_dispatch_table_rewrite_ptr,
    .glVertexAttribL3i64vNV = epoxy_glVertexAttribL3i64vNV_dispatch_table_rewrite_ptr,
    .glVertexAttribL3ui64NV = epoxy_glVertexAttribL3ui64NV_dispatch_table_rewrite_ptr,
    .glVertexAttribL3ui64vNV = epoxy_glVertexAttribL3ui64vNV_dispatch_table_rewrite_ptr,
    .glVertexAttribL4d = epoxy_glVertexAttribL4d_dispatch_table_rewrite_ptr,
    .glVertexAttribL4dEXT = epoxy_glVertexAttribL4dEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribL4dv = epoxy_glVertexAttribL4dv_dispatch_table_rewrite_ptr,
    .glVertexAttribL4dvEXT = epoxy_glVertexAttribL4dvEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribL4i64NV = epoxy_glVertexAttribL4i64NV_dispatch_table_rewrite_ptr,
    .glVertexAttribL4i64vNV = epoxy_glVertexAttribL4i64vNV_dispatch_table_rewrite_ptr,
    .glVertexAttribL4ui64NV = epoxy_glVertexAttribL4ui64NV_dispatch_table_rewrite_ptr,
    .glVertexAttribL4ui64vNV = epoxy_glVertexAttribL4ui64vNV_dispatch_table_rewrite_ptr,
    .glVertexAttribLFormat = epoxy_glVertexAttribLFormat_dispatch_table_rewrite_ptr,
    .glVertexAttribLFormatNV = epoxy_glVertexAttribLFormatNV_dispatch_table_rewrite_ptr,
    .glVertexAttribLPointer = epoxy_glVertexAttribLPointer_dispatch_table_rewrite_ptr,
    .glVertexAttribLPointerEXT = epoxy_glVertexAttribLPointerEXT_dispatch_table_rewrite_ptr,
    .glVertexAttribP1ui = epoxy_glVertexAttribP1ui_dispatch_table_rewrite_ptr,
    .glVertexAttribP1uiv = epoxy_glVertexAttribP1uiv_dispatch_table_rewrite_ptr,
    .glVertexAttribP2ui = epoxy_glVertexAttribP2ui_dispatch_table_rewrite_ptr,
    .glVertexAttribP2uiv = epoxy_glVertexAttribP2uiv_dispatch_table_rewrite_ptr,
    .glVertexAttribP3ui = epoxy_glVertexAttribP3ui_dispatch_table_rewrite_ptr,
    .glVertexAttribP3uiv = epoxy_glVertexAttribP3uiv_dispatch_table_rewrite_ptr,
    .glVertexAttribP4ui = epoxy_glVertexAttribP4ui_dispatch_table_rewrite_ptr,
    .glVertexAttribP4uiv = epoxy_glVertexAttribP4uiv_dispatch_table_rewrite_ptr,
    .glVertexAttribParameteriAMD = epoxy_glVertexAttribParameteriAMD_dispatch_table_rewrite_ptr,
    .glVertexAttribPointer = epoxy_glVertexAttribPointer_dispatch_table_rewrite_ptr,
    .glVertexAttribPointerARB = epoxy_glVertexAttribPointerARB_dispatch_table_rewrite_ptr,
    .glVertexAttribPointerNV = epoxy_glVertexAttribPointerNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs1dvNV = epoxy_glVertexAttribs1dvNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs1fvNV = epoxy_glVertexAttribs1fvNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs1hvNV = epoxy_glVertexAttribs1hvNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs1svNV = epoxy_glVertexAttribs1svNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs2dvNV = epoxy_glVertexAttribs2dvNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs2fvNV = epoxy_glVertexAttribs2fvNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs2hvNV = epoxy_glVertexAttribs2hvNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs2svNV = epoxy_glVertexAttribs2svNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs3dvNV = epoxy_glVertexAttribs3dvNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs3fvNV = epoxy_glVertexAttribs3fvNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs3hvNV = epoxy_glVertexAttribs3hvNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs3svNV = epoxy_glVertexAttribs3svNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs4dvNV = epoxy_glVertexAttribs4dvNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs4fvNV = epoxy_glVertexAttribs4fvNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs4hvNV = epoxy_glVertexAttribs4hvNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs4svNV = epoxy_glVertexAttribs4svNV_dispatch_table_rewrite_ptr,
    .glVertexAttribs4ubvNV = epoxy_glVertexAttribs4ubvNV_dispatch_table_rewrite_ptr,
    .glVertexBindingDivisor = epoxy_glVertexBindingDivisor_dispatch_table_rewrite_ptr,
    .glVertexBlendARB = epoxy_glVertexBlendARB_dispatch_table_rewrite_ptr,
    .glVertexBlendEnvfATI = epoxy_glVertexBlendEnvfATI_dispatch_table_rewrite_ptr,
    .glVertexBlendEnviATI = epoxy_glVertexBlendEnviATI_dispatch_table_rewrite_ptr,
    .glVertexFormatNV = epoxy_glVertexFormatNV_dispatch_table_rewrite_ptr,
    .glVertexP2ui = epoxy_glVertexP2ui_dispatch_table_rewrite_ptr,
    .glVertexP2uiv = epoxy_glVertexP2uiv_dispatch_table_rewrite_ptr,
    .glVertexP3ui = epoxy_glVertexP3ui_dispatch_table_rewrite_ptr,
    .glVertexP3uiv = epoxy_glVertexP3uiv_dispatch_table_rewrite_ptr,
    .glVertexP4ui = epoxy_glVertexP4ui_dispatch_table_rewrite_ptr,
    .glVertexP4uiv = epoxy_glVertexP4uiv_dispatch_table_rewrite_ptr,
    .glVertexPointer = epoxy_glVertexPointer_dispatch_table_rewrite_ptr,
    .glVertexPointerEXT = epoxy_glVertexPointerEXT_dispatch_table_rewrite_ptr,
    .glVertexPointerListIBM = epoxy_glVertexPointerListIBM_dispatch_table_rewrite_ptr,
    .glVertexPointervINTEL = epoxy_glVertexPointervINTEL_dispatch_table_rewrite_ptr,
    .glVertexStream1dATI = epoxy_glVertexStream1dATI_dispatch_table_rewrite_ptr,
    .glVertexStream1dvATI = epoxy_glVertexStream1dvATI_dispatch_table_rewrite_ptr,
    .glVertexStream1fATI = epoxy_glVertexStream1fATI_dispatch_table_rewrite_ptr,
    .glVertexStream1fvATI = epoxy_glVertexStream1fvATI_dispatch_table_rewrite_ptr,
    .glVertexStream1iATI = epoxy_glVertexStream1iATI_dispatch_table_rewrite_ptr,
    .glVertexStream1ivATI = epoxy_glVertexStream1ivATI_dispatch_table_rewrite_ptr,
    .glVertexStream1sATI = epoxy_glVertexStream1sATI_dispatch_table_rewrite_ptr,
    .glVertexStream1svATI = epoxy_glVertexStream1svATI_dispatch_table_rewrite_ptr,
    .glVertexStream2dATI = epoxy_glVertexStream2dATI_dispatch_table_rewrite_ptr,
    .glVertexStream2dvATI = epoxy_glVertexStream2dvATI_dispatch_table_rewrite_ptr,
    .glVertexStream2fATI = epoxy_glVertexStream2fATI_dispatch_table_rewrite_ptr,
    .glVertexStream2fvATI = epoxy_glVertexStream2fvATI_dispatch_table_rewrite_ptr,
    .glVertexStream2iATI = epoxy_glVertexStream2iATI_dispatch_table_rewrite_ptr,
    .glVertexStream2ivATI = epoxy_glVertexStream2ivATI_dispatch_table_rewrite_ptr,
    .glVertexStream2sATI = epoxy_glVertexStream2sATI_dispatch_table_rewrite_ptr,
    .glVertexStream2svATI = epoxy_glVertexStream2svATI_dispatch_table_rewrite_ptr,
    .glVertexStream3dATI = epoxy_glVertexStream3dATI_dispatch_table_rewrite_ptr,
    .glVertexStream3dvATI = epoxy_glVertexStream3dvATI_dispatch_table_rewrite_ptr,
    .glVertexStream3fATI = epoxy_glVertexStream3fATI_dispatch_table_rewrite_ptr,
    .glVertexStream3fvATI = epoxy_glVertexStream3fvATI_dispatch_table_rewrite_ptr,
    .glVertexStream3iATI = epoxy_glVertexStream3iATI_dispatch_table_rewrite_ptr,
    .glVertexStream3ivATI = epoxy_glVertexStream3ivATI_dispatch_table_rewrite_ptr,
    .glVertexStream3sATI = epoxy_glVertexStream3sATI_dispatch_table_rewrite_ptr,
    .glVertexStream3svATI = epoxy_glVertexStream3svATI_dispatch_table_rewrite_ptr,
    .glVertexStream4dATI = epoxy_glVertexStream4dATI_dispatch_table_rewrite_ptr,
    .glVertexStream4dvATI = epoxy_glVertexStream4dvATI_dispatch_table_rewrite_ptr,
    .glVertexStream4fATI = epoxy_glVertexStream4fATI_dispatch_table_rewrite_ptr,
    .glVertexStream4fvATI = epoxy_glVertexStream4fvATI_dispatch_table_rewrite_ptr,
    .glVertexStream4iATI = epoxy_glVertexStream4iATI_dispatch_table_rewrite_ptr,
    .glVertexStream4ivATI = epoxy_glVertexStream4ivATI_dispatch_table_rewrite_ptr,
    .glVertexStream4sATI = epoxy_glVertexStream4sATI_dispatch_table_rewrite_ptr,
    .glVertexStream4svATI = epoxy_glVertexStream4svATI_dispatch_table_rewrite_ptr,
    .glVertexWeightPointerEXT = epoxy_glVertexWeightPointerEXT_dispatch_table_rewrite_ptr,
    .glVertexWeightfEXT = epoxy_glVertexWeightfEXT_dispatch_table_rewrite_ptr,
    .glVertexWeightfvEXT = epoxy_glVertexWeightfvEXT_dispatch_table_rewrite_ptr,
    .glVertexWeighthNV = epoxy_glVertexWeighthNV_dispatch_table_rewrite_ptr,
    .glVertexWeighthvNV = epoxy_glVertexWeighthvNV_dispatch_table_rewrite_ptr,
    .glVideoCaptureNV = epoxy_glVideoCaptureNV_dispatch_table_rewrite_ptr,
    .glVideoCaptureStreamParameterdvNV = epoxy_glVideoCaptureStreamParameterdvNV_dispatch_table_rewrite_ptr,
    .glVideoCaptureStreamParameterfvNV = epoxy_glVideoCaptureStreamParameterfvNV_dispatch_table_rewrite_ptr,
    .glVideoCaptureStreamParameterivNV = epoxy_glVideoCaptureStreamParameterivNV_dispatch_table_rewrite_ptr,
    .glViewport = epoxy_glViewport_dispatch_table_rewrite_ptr,
    .glViewportArrayv = epoxy_glViewportArrayv_dispatch_table_rewrite_ptr,
    .glViewportArrayvNV = epoxy_glViewportArrayvNV_dispatch_table_rewrite_ptr,
    .glViewportIndexedf = epoxy_glViewportIndexedf_dispatch_table_rewrite_ptr,
    .glViewportIndexedfNV = epoxy_glViewportIndexedfNV_dispatch_table_rewrite_ptr,
    .glViewportIndexedfv = epoxy_glViewportIndexedfv_dispatch_table_rewrite_ptr,
    .glViewportIndexedfvNV = epoxy_glViewportIndexedfvNV_dispatch_table_rewrite_ptr,
    .glViewportPositionWScaleNV = epoxy_glViewportPositionWScaleNV_dispatch_table_rewrite_ptr,
    .glViewportSwizzleNV = epoxy_glViewportSwizzleNV_dispatch_table_rewrite_ptr,
    .glWaitSync = epoxy_glWaitSync_dispatch_table_rewrite_ptr,
    .glWaitSyncAPPLE = epoxy_glWaitSyncAPPLE_dispatch_table_rewrite_ptr,
    .glWeightPathsNV = epoxy_glWeightPathsNV_dispatch_table_rewrite_ptr,
    .glWeightPointerARB = epoxy_glWeightPointerARB_dispatch_table_rewrite_ptr,
    .glWeightPointerOES = epoxy_glWeightPointerOES_dispatch_table_rewrite_ptr,
    .glWeightbvARB = epoxy_glWeightbvARB_dispatch_table_rewrite_ptr,
    .glWeightdvARB = epoxy_glWeightdvARB_dispatch_table_rewrite_ptr,
    .glWeightfvARB = epoxy_glWeightfvARB_dispatch_table_rewrite_ptr,
    .glWeightivARB = epoxy_glWeightivARB_dispatch_table_rewrite_ptr,
    .glWeightsvARB = epoxy_glWeightsvARB_dispatch_table_rewrite_ptr,
    .glWeightubvARB = epoxy_glWeightubvARB_dispatch_table_rewrite_ptr,
    .glWeightuivARB = epoxy_glWeightuivARB_dispatch_table_rewrite_ptr,
    .glWeightusvARB = epoxy_glWeightusvARB_dispatch_table_rewrite_ptr,
    .glWindowPos2d = epoxy_glWindowPos2d_dispatch_table_rewrite_ptr,
    .glWindowPos2dARB = epoxy_glWindowPos2dARB_dispatch_table_rewrite_ptr,
    .glWindowPos2dMESA = epoxy_glWindowPos2dMESA_dispatch_table_rewrite_ptr,
    .glWindowPos2dv = epoxy_glWindowPos2dv_dispatch_table_rewrite_ptr,
    .glWindowPos2dvARB = epoxy_glWindowPos2dvARB_dispatch_table_rewrite_ptr,
    .glWindowPos2dvMESA = epoxy_glWindowPos2dvMESA_dispatch_table_rewrite_ptr,
    .glWindowPos2f = epoxy_glWindowPos2f_dispatch_table_rewrite_ptr,
    .glWindowPos2fARB = epoxy_glWindowPos2fARB_dispatch_table_rewrite_ptr,
    .glWindowPos2fMESA = epoxy_glWindowPos2fMESA_dispatch_table_rewrite_ptr,
    .glWindowPos2fv = epoxy_glWindowPos2fv_dispatch_table_rewrite_ptr,
    .glWindowPos2fvARB = epoxy_glWindowPos2fvARB_dispatch_table_rewrite_ptr,
    .glWindowPos2fvMESA = epoxy_glWindowPos2fvMESA_dispatch_table_rewrite_ptr,
    .glWindowPos2i = epoxy_glWindowPos2i_dispatch_table_rewrite_ptr,
    .glWindowPos2iARB = epoxy_glWindowPos2iARB_dispatch_table_rewrite_ptr,
    .glWindowPos2iMESA = epoxy_glWindowPos2iMESA_dispatch_table_rewrite_ptr,
    .glWindowPos2iv = epoxy_glWindowPos2iv_dispatch_table_rewrite_ptr,
    .glWindowPos2ivARB = epoxy_glWindowPos2ivARB_dispatch_table_rewrite_ptr,
    .glWindowPos2ivMESA = epoxy_glWindowPos2ivMESA_dispatch_table_rewrite_ptr,
    .glWindowPos2s = epoxy_glWindowPos2s_dispatch_table_rewrite_ptr,
    .glWindowPos2sARB = epoxy_glWindowPos2sARB_dispatch_table_rewrite_ptr,
    .glWindowPos2sMESA = epoxy_glWindowPos2sMESA_dispatch_table_rewrite_ptr,
    .glWindowPos2sv = epoxy_glWindowPos2sv_dispatch_table_rewrite_ptr,
    .glWindowPos2svARB = epoxy_glWindowPos2svARB_dispatch_table_rewrite_ptr,
    .glWindowPos2svMESA = epoxy_glWindowPos2svMESA_dispatch_table_rewrite_ptr,
    .glWindowPos3d = epoxy_glWindowPos3d_dispatch_table_rewrite_ptr,
    .glWindowPos3dARB = epoxy_glWindowPos3dARB_dispatch_table_rewrite_ptr,
    .glWindowPos3dMESA = epoxy_glWindowPos3dMESA_dispatch_table_rewrite_ptr,
    .glWindowPos3dv = epoxy_glWindowPos3dv_dispatch_table_rewrite_ptr,
    .glWindowPos3dvARB = epoxy_glWindowPos3dvARB_dispatch_table_rewrite_ptr,
    .glWindowPos3dvMESA = epoxy_glWindowPos3dvMESA_dispatch_table_rewrite_ptr,
    .glWindowPos3f = epoxy_glWindowPos3f_dispatch_table_rewrite_ptr,
    .glWindowPos3fARB = epoxy_glWindowPos3fARB_dispatch_table_rewrite_ptr,
    .glWindowPos3fMESA = epoxy_glWindowPos3fMESA_dispatch_table_rewrite_ptr,
    .glWindowPos3fv = epoxy_glWindowPos3fv_dispatch_table_rewrite_ptr,
    .glWindowPos3fvARB = epoxy_glWindowPos3fvARB_dispatch_table_rewrite_ptr,
    .glWindowPos3fvMESA = epoxy_glWindowPos3fvMESA_dispatch_table_rewrite_ptr,
    .glWindowPos3i = epoxy_glWindowPos3i_dispatch_table_rewrite_ptr,
    .glWindowPos3iARB = epoxy_glWindowPos3iARB_dispatch_table_rewrite_ptr,
    .glWindowPos3iMESA = epoxy_glWindowPos3iMESA_dispatch_table_rewrite_ptr,
    .glWindowPos3iv = epoxy_glWindowPos3iv_dispatch_table_rewrite_ptr,
    .glWindowPos3ivARB = epoxy_glWindowPos3ivARB_dispatch_table_rewrite_ptr,
    .glWindowPos3ivMESA = epoxy_glWindowPos3ivMESA_dispatch_table_rewrite_ptr,
    .glWindowPos3s = epoxy_glWindowPos3s_dispatch_table_rewrite_ptr,
    .glWindowPos3sARB = epoxy_glWindowPos3sARB_dispatch_table_rewrite_ptr,
    .glWindowPos3sMESA = epoxy_glWindowPos3sMESA_dispatch_table_rewrite_ptr,
    .glWindowPos3sv = epoxy_glWindowPos3sv_dispatch_table_rewrite_ptr,
    .glWindowPos3svARB = epoxy_glWindowPos3svARB_dispatch_table_rewrite_ptr,
    .glWindowPos3svMESA = epoxy_glWindowPos3svMESA_dispatch_table_rewrite_ptr,
    .glWindowPos4dMESA = epoxy_glWindowPos4dMESA_dispatch_table_rewrite_ptr,
    .glWindowPos4dvMESA = epoxy_glWindowPos4dvMESA_dispatch_table_rewrite_ptr,
    .glWindowPos4fMESA = epoxy_glWindowPos4fMESA_dispatch_table_rewrite_ptr,
    .glWindowPos4fvMESA = epoxy_glWindowPos4fvMESA_dispatch_table_rewrite_ptr,
    .glWindowPos4iMESA = epoxy_glWindowPos4iMESA_dispatch_table_rewrite_ptr,
    .glWindowPos4ivMESA = epoxy_glWindowPos4ivMESA_dispatch_table_rewrite_ptr,
    .glWindowPos4sMESA = epoxy_glWindowPos4sMESA_dispatch_table_rewrite_ptr,
    .glWindowPos4svMESA = epoxy_glWindowPos4svMESA_dispatch_table_rewrite_ptr,
    .glWindowRectanglesEXT = epoxy_glWindowRectanglesEXT_dispatch_table_rewrite_ptr,
    .glWriteMaskEXT = epoxy_glWriteMaskEXT_dispatch_table_rewrite_ptr,
};
#endif /* PLATFORM_HAS_GL */
